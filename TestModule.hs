(\a -> seq a (\b -> tail) (seq a (map (undefined::([] ([] Int)) -> [] (Bool -> Bool)) (seq a (seq a (seq a (undefined::[] ([] ([] Int))))))))) (\a -> seq a ([]::[] ([] Bool)))
(!!) (undefined::[] ((([] Int) -> Int -> Int -> Bool) -> ([] Int) -> [] Int)) 2 ((\a -> seq a (undefined::([] Int) -> Int -> Int -> Bool)) ((\a -> seq a (seq a (seq a (undefined::Int)))) (\a -> a)))
case1 (undefined::Int -> ([] Int) -> Int -> ([] Int) -> [] Int) ((!!) (undefined::[] (Int -> ([] Int) -> [] Int)) 1) ((\a -> seq a ([]::[] Int)) (id 2)) ((\a -> a) (head ((\a -> seq a (seq a ([]::[] Int))) 0)))
tail
\a -> seq a a
(\a -> seq a (\b -> (undefined::Bool -> ([] Int) -> [] Int) (head (seq a ([]::[] Bool)))) (\b -> map (\c -> (undefined::[] ([] Bool))) (seq b (seq b ([]::[] (([] Int) -> Int)))))) (\a -> (\b -> take (seq a (seq b id (undefined::Int)))) (seq a (seq a (\b -> seq b (undefined::Bool -> [] ([] Bool)) (head (undefined::[] Bool))))))
(\a -> seq a ((\b -> seq a (undefined::(Int -> [] Int) -> ([] Int) -> [] Int) (\c -> seq c (seq b ([]::[] Int)))) (\b -> seq a head ([]::[] (Int -> Bool))))) ((\a -> seq a (\b -> a)) ((undefined::(Int -> [] Bool) -> Int -> Int) ((!!) (undefined::[] (Int -> [] Bool)) (undefined::Int))))
(\a -> seq a ((\b -> case1 take (seq b (seq a ([]::[] Int)))) (undefined::Int))) ((!!) (undefined::[] (Bool -> Int -> Int -> [] Int)) 2 (id (\a -> True) (undefined::[] ([] (([] Bool) -> [] Bool)))))
(:) ((\a -> seq a (seq a (seq a (\b -> seq b (seq b (seq a (undefined::Int))))))) ((\a -> seq a (seq a (seq a (undefined::Bool)))) (\a -> id a)) (\a -> a))
\a -> take ((undefined::(([] Int) -> ([] Int) -> [] Bool) -> Int) (seq a ((!!) (seq a (undefined::[] (([] Int) -> ([] Int) -> [] Bool))) (id (undefined::Int))))) ((\b -> seq b (seq a id (seq a a))) (seq a (seq a (map (undefined::Int -> Int -> [] Int)))))
(\a -> seq a (seq a (\b -> \c -> ([]::[] Int)))) ([]::[] (([] Int) -> [] Int)) (\a -> head (seq a ([]::[] ((Bool -> ([] Int) -> Int -> [] ([] Int)) -> Int))) (\b -> seq a (undefined::Int -> ([] Int) -> Int -> [] ([] Int)) (undefined::Int)))
\a -> a
(\a -> seq a (\b -> seq a (\c -> id (undefined::Int -> [] Int) a))) ((undefined::([] ([] Bool)) -> Int) (undefined::[] ([] Bool))) ((\a -> \b -> seq a (\c -> seq a c)) (id (undefined::Int)) ((!!) (undefined::[] Bool) (head ([]::[] Int))))
(undefined::(([] ([] ([] Int))) -> [] ([] ([] Bool))) -> ([] Int) -> [] Int) (\a -> head (seq a (seq a (\b -> (undefined::[] ([] ([] ([] Bool))))) (\b -> \c -> ((==)::[Int] -> [Int] -> Bool) (seq c (undefined::[] Int)) (seq a (undefined::[] Int))))))
head (id (tail ([]::[] ((([] Int) -> ([] (Bool -> Bool)) -> Bool -> Bool) -> ([] Int) -> [] Int)))) (undefined::([] Int) -> ([] (Bool -> Bool)) -> Bool -> Bool)
(\a -> id (seq a (\b -> seq b (seq a (\c -> c)))) (seq a (seq a (seq a (seq a (undefined::([] Int) -> [] Bool) (head (undefined::[] ([] Int)))))))) (\a -> (\b -> tail (seq b (undefined::[] (Int -> Bool)))) (head (undefined::[] ((([] Int) -> [] ([] Bool)) -> Bool)) (undefined::([] Int) -> [] ([] Bool))))
\a -> seq a (seq a (\b -> seq b (\c -> seq c a))) (seq a (\b -> id 1) (seq a (\b -> ([]::[] Bool)))) (\b -> id (seq a (\c -> b)) (\c -> seq c (seq b (\d -> ([]::[] (Int -> Int))) id)))
head ([]::[] ((Int -> Int -> ([] Int) -> Int) -> ([] Int) -> [] Int)) (\a -> \b -> (undefined::(Int -> ([] Int) -> Bool) -> ([] Int) -> Int) (\c -> seq b ((undefined::([] ([] Bool)) -> ([] Int) -> Bool) (undefined::[] ([] Bool)))))
case1 (\a -> \b -> b) ((\a -> seq a ((undefined::([] (Int -> Bool)) -> [] Int) (seq a (seq a ([]::[] (Int -> Bool)))))) ((\a -> \b -> seq a (\c -> seq a (undefined::Int -> [] Bool))) 1))
\a -> seq a (\b -> seq b (map ((\c -> seq c (\d -> 0)) (seq a (seq b False))) ([]::[] ([] ([] (Int -> Int)))))) ((\b -> \c -> head (undefined::[] (Bool -> [] (Int -> [] ([] Int)))) (id (seq b (undefined::Bool)))) (\b -> seq a (seq b (map (undefined::(([] Int) -> Bool) -> Bool)) (tail (seq a (undefined::[] (([] Int) -> Bool)))))))
(++) (map (\a -> seq a (seq a 1)) ((undefined::Int -> [] (([] ([] Int)) -> [] Bool)) ((+1) ((\a -> seq a (undefined::Int)) 0))))
(:) (undefined::Int)
\a -> map (seq a (undefined::(([] (([] Int) -> ([] Int) -> [] Int)) -> Int) -> Int)) (seq a (\b -> seq b (seq b (undefined::[] (([] (([] Int) -> ([] Int) -> [] Int)) -> Int)))) (undefined::Bool))
\a -> a
id (\a -> a)
(undefined::([] Int) -> [] Int)
\a -> ([]::[] Int)
\a -> head (undefined::[] ((([] Int) -> Int -> ([] Int) -> Int -> Int -> Bool) -> [] Int)) (\b -> \c -> seq a (seq c (seq b (seq a (\d -> \e -> seq a (\f -> \g -> False))))) c)
id (id (\a -> seq a (\b -> seq b (\c -> seq c c))) (\a -> seq a (\b -> \c -> seq c c) (\b -> b))) ((\a -> seq a (seq a (\b -> seq b b) (seq a True))) ((\a -> \b -> seq a (seq a (undefined::[] ([] Bool)))) (undefined::Int)))
case1 ((!!) ([]::[] (Bool -> ([] Bool) -> ([] Int) -> [] Int)) ((\a -> seq a (undefined::Int)) (undefined::Bool))) (head (undefined::[] ((Bool -> Int) -> ([] Int) -> [] Int)) (\a -> seq a (seq a (head (undefined::[] Int))))) ((\a -> seq a (undefined::(Bool -> Bool) -> [] Bool)) (\a -> seq a a) (\a -> seq a (\b -> a) ((+1) 1)))
\a -> map (undefined::([] (([] (([] ([] Int)) -> [] (([] Int) -> Bool))) -> Int -> Int)) -> Int) (seq a (seq a (id (id (seq a ([]::[] ([] (([] (([] ([] Int)) -> [] (([] Int) -> Bool))) -> Int -> Int))))))))
(:) ((\a -> (\b -> seq b (seq b (seq a (seq a (head (seq a ([]::[] Int))))))) (seq a (\b -> seq a (\c -> (undefined::[] Bool))) (\b -> seq a (seq b (seq b b))))) (\a -> (undefined::Int -> Int -> Bool)))
\a -> id (\b -> id (\c -> a)) (undefined::Bool) (head ([]::[] ((([] Int) -> Int) -> ([] Int) -> Bool -> Bool)) (\b -> (!!) ([]::[] (Int -> Int)) (undefined::Int) (seq b (seq a (seq b 2)))))
(++) ((\a -> head (seq a ([]::[] ([] Int)))) ((\a -> seq a (seq a (\b -> b)) (id (undefined::Bool))) (\a -> case1 (\b -> (undefined::([] Int) -> Int)) (seq a 2) (seq a ([]::[] Int)))))
(:) (undefined::Int)
\a -> (\b -> (undefined::(Bool -> [] ([] Int)) -> Int -> [] Int) (\c -> seq b ([]::[] ([] Int))) b) (seq a (seq a (seq a (\b -> id (undefined::Bool -> Int) (seq a True)))) (\b -> seq b ((\c -> seq a (seq c (undefined::[] Bool))) (seq a 0))))
(undefined::([] ([] Bool)) -> Bool -> ([] Int) -> [] Int) ((undefined::Int -> [] ([] Bool)) 0) ((\a -> seq a (seq a (seq a (\b -> seq b (undefined::Bool)) (\b -> b)))) ((\a -> seq a (head (undefined::[] Int))) ((!!) ([]::[] Int) (undefined::Int))))
\a -> tail a
\a -> case1 (\b -> \c -> c) (seq a (\b -> a) (case1 (undefined::Bool -> ([] Bool) -> Int) (seq a (seq a (undefined::Int))))) (id (seq a (\b -> a)) (seq a ((||) (undefined::Bool) (undefined::Bool))))
id
\a -> a
\a -> a
\a -> a
\a -> a
\a -> a
\a -> a
\a -> map (\b -> (undefined::(([] ([] (([] ([] Bool)) -> [] ([] Bool)))) -> Bool) -> Int) (seq b (seq b (undefined::([] ([] (([] ([] Bool)) -> [] ([] Bool)))) -> Bool)))) (seq a (\b -> (undefined::[] (([] Int) -> Int -> Int -> Bool))) (tail (seq a (tail (head (undefined::[] ([] ([] Bool))))))))
(\a -> (undefined::(([] ([] Bool)) -> [] ([] (Bool -> Bool))) -> ([] Int) -> [] Int) ((\b -> seq b (\c -> seq a (undefined::[] ([] (Bool -> Bool))))) (seq a (seq a (seq a 1))))) ((!!) (undefined::[] (Bool -> ([] Int) -> ([] Int) -> [] ([] Int))) (id (\a -> 1) False))
\a -> seq a ((:) ((\b -> head (seq b (undefined::[] (Int -> Int)))) (seq a (seq a (seq a ([]::[] (([] ([] Bool)) -> [] Bool))))) (seq a (id (seq a (+1)) (undefined::Int)))) ((\b -> (\c -> seq c (seq b b)) (tail (undefined::[] (Int -> [] Int)))) ((\b -> seq b (seq a a)) ((+) (undefined::Int) (undefined::Int)))))
id (\a -> seq a (seq a (head (undefined::[] (([] Int) -> [] Int))))) ((!!) ((undefined::([] Bool) -> [] (([] Bool) -> [] Bool)) (undefined::[] Bool)) ((\a -> seq a (undefined::Int)) (((==)::Int -> Int -> Bool) 1 (undefined::Int))))
case1 (undefined::Int -> ([] Int) -> ([] Int) -> [] Int) (\a -> a) (head ([]::[] (Bool -> Bool -> [] Int)) (undefined::Bool) (head ([]::[] Bool)))
(undefined::([] Int) -> [] Int)
(undefined::(([] ([] ([] Bool))) -> [] ([] Bool)) -> ([] Int) -> [] Int) (\a -> id (map (seq a (undefined::Int -> Bool -> [] Bool) (seq a (seq a 2))) (seq a ((undefined::([] Int) -> [] Bool) (seq a (seq a ([]::[] Int)))))))
\a -> (\b -> head (map (\c -> \d -> a) (seq b a)) ((undefined::(([] Int) -> Bool) -> Bool) (\c -> b 1 False))) (\b -> seq b (seq b (seq b (\c -> c))))
\a -> seq a ((\b -> seq a (\c -> tail ((undefined::Int -> [] Int) (seq b 2))) (seq a (seq b (seq b (\c -> (:) ([]::[] ([] Int)) ([]::[] ([] ([] Int)))))))) (undefined::(([] ([] Bool)) -> [] ([] (Bool -> Bool))) -> ([] (Bool -> Bool)) -> [] Int))
case1 (\a -> seq a (\b -> (undefined::Bool -> ([] Int) -> [] Int) (seq b (undefined::Bool)))) (case1 (undefined::Int -> ([] Int) -> ([] Int) -> [] Int) id ([]::[] Int)) ((enumFromTo'::Int -> Int -> [Int]) ((\a -> a) (undefined::Int)) ((+) 2 1))
head ((\a -> take (seq a a) (seq a (seq a (undefined::[] (([] Int) -> [] Int))))) (case1 (\a -> \b -> a) (undefined::Int) (undefined::[] Int)))
(undefined::(([] (([] Int) -> Int -> Int -> Bool)) -> [] (([] Int) -> Bool)) -> ([] Int) -> [] Int) (\a -> map (undefined::Bool -> ([] Int) -> Bool) (seq a (seq a (seq a (\b -> ([]::[] Bool)) (seq a (undefined::Bool))))))
(\a -> \b -> (!!) (seq a (seq b ([]::[] (Bool -> [] Int)))) (seq b a) (seq a (id (seq b head) ([]::[] Bool)))) (id ((\a -> a) ((\a -> seq a (seq a 2)) (id False))))
head (undefined::[] (([] (([] ([] Bool)) -> [] ([] Bool))) -> ([] Int) -> [] Int)) ([]::[] (([] ([] Bool)) -> [] ([] Bool)))
\a -> case1 (\b -> \c -> a) (map (seq a (\b -> (+1) (undefined::Int))) (seq a (id (undefined::[] ([] (Int -> Bool)))))) (map (\b -> (undefined::[] ([] Int))) (seq a (seq a (seq a (undefined::[] Bool)))))
id
id (head ((\a -> seq a ([]::[] ((Int -> Int -> Bool) -> ([] Int) -> [] Int))) ((+1) 1))) ((!!) (id ([]::[] (Bool -> Int -> Int -> Bool))) ((+1) (undefined::Int)) (undefined::Bool))
(\a -> seq a (seq a (undefined::([] Int) -> [] Int))) (\a -> 2)
\a -> (undefined::[] Int)
(undefined::([] Int) -> [] Int)
case1 (\a -> seq a (\b -> \c -> tail)) (\a -> (undefined::([] Int) -> [] Int)) (id (undefined::Bool -> [] Int) (head ([]::[] Bool))) (case1 (id (\a -> \b -> False)) (id (not True)) (id (undefined::Bool -> [] Bool) (head ([]::[] Bool))))
(\a -> seq a (seq a (\b -> seq b (seq b (undefined::Bool -> ([] Int) -> [] Int)) (odd 1)))) ((!!) (id ([]::[] Bool)) (undefined::Int)) (\a -> case1 (seq a (undefined::Int -> ([] Int) -> [] (Bool -> Bool))) (seq a (head ([]::[] ([] (Bool -> Bool))))) (seq a (undefined::Bool -> [] Int) (seq a False)))
\a -> seq a (\b -> \c -> (undefined::Bool -> [] Int) True) (seq a (((==)::Int -> Int -> Bool) (seq a (seq a (undefined::Int))) 0)) (seq a (\b -> \c -> seq c (seq a ((!!) ([]::[] (Bool -> Bool)) 1))) (undefined::([] ([] Int)) -> [] ([] Bool)))
tail
(\a -> id (\b -> \c -> tail) (seq a (id False)) (seq a (seq a odd) (seq a (undefined::Int)))) tail
(\a -> take ((\b -> (+) (seq b (seq b 0)) (seq b (seq b 0))) (seq a (\b -> (undefined::([] Int) -> [] (Int -> [] Int))) ((+1) (seq a (undefined::Int)))))) (id (\a -> seq a (undefined::(Int -> Bool) -> Bool)) True (\a -> case1 (\b -> (undefined::([] Bool) -> Bool)) (undefined::Bool) (seq a (undefined::[] Bool))))
head (undefined::[] (Bool -> ([] ([] (Bool -> Bool))) -> ([] Int) -> [] Int)) (((==)::Int -> Int -> Bool) 2 (id (undefined::Int))) ((\a -> (undefined::Int -> [] ([] (Bool -> Bool))) (seq a ((+1) (undefined::Int)))) (undefined::Bool -> Int))
(undefined::(([] (Int -> Bool)) -> [] (Int -> Bool)) -> ([] Int) -> [] Int) (\a -> a)
(\a -> seq a (\b -> \c -> seq c c)) ((\a -> seq a (seq a (seq a 0))) ((++) ([]::[] ([] (Int -> Int))) ([]::[] ([] (Int -> Int))))) ((\a -> not (id (undefined::Bool -> Bool) (seq a (seq a a)))) ((\a -> seq a (not False)) (head (undefined::[] Int))))
map (id (\a -> case1 (seq a (\b -> \c -> (undefined::Int))) 1 ((:) (seq a (seq a (seq a False))) (tail (seq a (undefined::[] Bool))))))
\a -> seq a (id a)
\a -> a
(\a -> \b -> filter ((\c -> \d -> c) (seq b (id False))) (seq a (seq a b))) ((\a -> seq a (tail (undefined::[] (([] ([] (Bool -> Bool))) -> [] ([] (Bool -> Bool)))))) (id ((undefined::([] ([] Bool)) -> Int) (id ([]::[] ([] Bool))))))
id
\a -> (!!) (id (\b -> seq b ((undefined::(([] Int) -> Bool) -> [] ([] Int)) (seq a (undefined::([] Int) -> Bool)))) (\b -> seq b (case1 (:) ([]::[] Int) ([]::[] Int)))) (head ((enumFromTo::Int -> Int -> [Int]) ((\b -> seq b (seq a (undefined::Int))) (seq a (seq a ([]::[] ([] ([] Bool)))))) (seq a (\b -> b) (seq a (seq a (undefined::Int))))))
\a -> a
(\a -> seq a ((++) (seq a (\b -> a (undefined::[] (([] Int) -> [] Bool)) (seq a ([]::[] (Int -> [] Int))) (undefined::Int)) (seq a (map (seq a (undefined::Int -> Bool -> Bool)) (seq a ([]::[] Int))))))) (head (id (undefined::[] (([] (([] Int) -> [] Bool)) -> ([] (Int -> [] Int)) -> Int -> [] Int))))
\a -> a
\a -> seq a (id (seq a (undefined::(([] Int) -> [] (Bool -> Bool)) -> Int -> [] Int)) (seq a (id (undefined::Bool -> ([] Int) -> [] (Bool -> Bool)) (seq a (undefined::Bool))))) (seq a (\b -> seq a (undefined::([] ([] (Int -> Int))) -> Int) (seq a (seq b (seq a ([]::[] ([] (Int -> Int))))))) (\b -> seq a (seq a (\c -> seq a ([]::[] (Int -> Bool)))) ([]::[] ([] Bool))))
\a -> ([]::[] Int)
\a -> (\b -> seq a ((undefined::(([] Int) -> [] (([] Int) -> Bool)) -> [] Int) (seq b (\c -> seq c ([]::[] (([] Int) -> Bool)))))) (\b -> seq a ([]::[] (([] (Int -> [] Bool)) -> Int -> [] Bool)))
case1 (\a -> \b -> (undefined::([] (Int -> Int)) -> ([] Int) -> [] Int) (filter (seq a (undefined::(Int -> Int) -> Bool)) (seq a (undefined::[] (Int -> Int))))) (undefined::([] Int) -> [] Int) ((\a -> seq a (seq a (seq a (seq a (undefined::[] Bool))))) (\a -> a))
\a -> seq a (seq a (\b -> map (\c -> seq a (seq b (id (undefined::Int)))) (map (\c -> False) (seq b ([]::[] ([] Bool)))))) ((!!) (head (undefined::[] ([] ([] (([] ([] (Int -> Int))) -> Int))))) (head (seq a (seq a a))))
\a -> a
case1 ((\a -> seq a (\b -> id (seq b (undefined::([] Bool) -> ([] Int) -> [] Int)))) (id (undefined::Bool -> Int) (undefined::Bool))) ((undefined::Bool -> ([] Int) -> [] Int) False) ((\a -> seq a (take 2 (undefined::[] Bool))) (\a -> ([]::[] (Bool -> Bool))))
\a -> map (\b -> (\c -> seq c (c (seq c (undefined::Int)) (undefined::[] Int))) ((undefined::([] Bool) -> Int -> ([] Int) -> Int) (seq a ([]::[] Bool)))) (seq a (seq a (seq a (id (\b -> id ([]::[] (([] Int) -> [] ([] Bool))))) (seq a (seq a (undefined::(Int -> Int) -> Bool -> Bool)) (+1)))))
(\a -> \b -> seq a (\c -> seq b tail) (head (seq b ([]::[] Bool)))) ((undefined::Bool -> ([] (Int -> Bool)) -> Int -> Int) (head (undefined::[] Bool))) ((\a -> head ([]::[] ((Int -> Int) -> Int)) (seq a (\b -> b))) (\a -> seq a ((\b -> seq b (seq a (undefined::[] ([] (Int -> Bool))))) (seq a (seq a (seq a (undefined::Bool)))))))
\a -> a
\a -> ([]::[] Int)
\a -> seq a (map (seq a (\b -> (undefined::(Int -> [] Int) -> Int)) ((undefined::([] (Bool -> Bool)) -> Int -> Bool) (seq a (seq a (seq a ([]::[] (Bool -> Bool))))))) (undefined::[] (Int -> [] Int)))
id ((\a -> seq a (seq a (\b -> \c -> c)) (case1 (\b -> (undefined::([] Bool) -> Bool)) (seq a False) ([]::[] Bool))) ((!!) ([]::[] (([] Int) -> ([] Bool) -> [] Bool)) ((+1) (undefined::Int))))
case1 (\a -> seq a (\b -> head ([]::[] ((Int -> Int) -> ([] Int) -> [] Int)) (seq b (seq b (\c -> seq a 1))))) (\a -> case1 (\b -> seq a (undefined::([] Int) -> [] Int)) (head (undefined::[] ([] Int))) (tail ([]::[] Int))) ((\a -> seq a (undefined::[] (([] Bool) -> Bool))) (\a -> head a))
take (head ((undefined::Bool -> [] ((([] Int) -> ([] Int) -> [] Int) -> Int)) (even 1)) ((undefined::Bool -> ([] Int) -> ([] Int) -> [] Int) (id (\a -> seq a True) (\a -> a))))
map (id ((undefined::Bool -> Int -> Int) ((\a -> id (\b -> True) (seq a (seq a (seq a (undefined::[] Int))))) (id (\a -> \b -> seq b (\c -> seq b (seq b ((==)::Int -> Int -> Bool))))))))
(\a -> seq a ((:) ((\b -> seq a ((!!) (seq b (undefined::[] Int)) a)) (seq a (seq a (seq a (undefined::Bool -> Int -> Int -> [] Int))) (not True))))) (id ((\a -> \b -> a) 2) ((\a -> seq a (seq a (\b -> b))) (\a -> seq a (seq a (seq a (undefined::Bool))))))
filter ((undefined::(([] ([] ([] Bool))) -> [] ([] Bool)) -> Bool -> Int -> Bool) head ((\a -> head (seq a ([]::[] ((Int -> [] Bool) -> Bool))) (\b -> seq b ([]::[] Bool))) (head (undefined::[] ([] (([] ([] (Bool -> Bool))) -> [] ([] (Bool -> Bool))))))))
\a -> (\b -> \c -> head (seq b (\d -> (undefined::[] ([] Int))) (seq a b))) (seq a ((!!) (seq a a) (seq a 1))) (id (\b -> seq b (undefined::([] ([] Bool)) -> Bool)) (seq a (seq a (seq a 2))) (seq a (\b -> seq b ([]::[] ([] Bool))) (seq a (seq a (seq a ([]::[] ([] Int)))))))
\a -> a
\a -> seq a a
\a -> (\b -> seq b (seq b (seq b (head (seq a ([]::[] ((([] Int) -> [] ([] Bool)) -> [] Int)))))) ((undefined::(Int -> Int) -> ([] Int) -> [] ([] Bool)) (\c -> c))) (case1 (seq a (\b -> (undefined::([] Bool) -> Int -> Int -> Bool))) (\b -> \c -> ((==)::[Int] -> [Int] -> Bool) a a) ([]::[] Bool))
\a -> seq a (head (seq a ([]::[] (Int -> (([] Int) -> [] Int) -> [] Int)))) (seq a (seq a (seq a (undefined::([] (Int -> Bool)) -> Int) (id ([]::[] (Int -> Bool)))))) (seq a (id (\b -> seq b (undefined::Bool -> ([] Int) -> [] Int) False) (map (seq a (undefined::([] Bool) -> ([] Int) -> Bool)) (seq a (seq a (seq a (undefined::[] ([] Bool))))))))
\a -> (undefined::[] Int)
\a -> (undefined::[] Int)
head ([]::[] ((([] Int) -> [] ([] (([] ([] Bool)) -> [] ([] (Bool -> Bool))))) -> ([] Int) -> [] Int)) (undefined::([] Int) -> [] ([] (([] ([] Bool)) -> [] ([] (Bool -> Bool)))))
\a -> (:) (id (seq a (seq a (seq a id) ((!!) a (seq a (undefined::Int)))))) (take ((+1) (head (seq a a))) (seq a (seq a (\b -> a)) (undefined::Bool)))
\a -> seq a (case1 (seq a (id (undefined::Int -> ([] Int) -> Int -> [] Int))) (head ([]::[] (Int -> [] Int))) (seq a (undefined::Int -> [] Int) (seq a 0)) (seq a (\b -> seq a (\c -> c)) (seq a (seq a (undefined::[] ([] ([] Bool))))) (seq a (head (seq a (undefined::[] (Int -> Int))) (seq a (seq a (seq a (undefined::Int))))))))
filter ((undefined::([] ([] (Int -> Bool))) -> Int -> Bool) (undefined::[] ([] (Int -> Bool))))
\a -> map (\b -> 1) ([]::[] (Bool -> ([] Int) -> ([] (([] (Bool -> Bool)) -> [] (Bool -> Bool))) -> Int -> Bool))
\a -> seq a (tail (tail (id (\b -> \c -> (\d -> seq d a) 0) (seq a (seq a (\b -> seq b (enumFromTo'::Int -> Int -> [Int])) (seq a (seq a (undefined::Int))))) (seq a (seq a ((\b -> seq b (undefined::Bool -> Int -> Bool)) (undefined::Bool))) ((undefined::(([] Int) -> [] Bool) -> Bool) (seq a (undefined::([] Int) -> [] Bool)))))))
id (\a -> seq a (seq a (seq a (\b -> b)))) (\a -> \b -> seq b False)
\a -> (undefined::Int -> Bool -> Bool -> [] Int) ((!!) a 1) (seq a (head (seq a ([]::[] (([] ([] (Bool -> Bool))) -> Bool))) (tail (seq a ([]::[] ([] (Bool -> Bool))))))) ((undefined::(([] ([] Int)) -> [] ([] (([] ([] Int)) -> [] ([] ([] Int))))) -> Bool) (\b -> seq a (seq b (undefined::[] ([] (([] ([] Int)) -> [] ([] ([] Int))))))))
(\a -> head (seq a ([]::[] ((Int -> Int -> Bool) -> ([] Int) -> [] Int)))) (((==)::Bool -> Bool -> Bool) (undefined::Bool) (id False)) ((undefined::(([] Int) -> Bool -> Bool -> Bool) -> Int -> Int -> Bool) (\a -> seq a ((\b -> \c -> \d -> b) (seq a (seq a (seq a True))))))
map (+1)
case1 (\a -> seq a (\b -> (!!) ([]::[] (([] Bool) -> [] Int)) a (case1 (\c -> tail) (seq b ([]::[] Bool)) ([]::[] Bool)))) ((\a -> seq a (seq a (head (undefined::[] ((Bool -> Bool) -> [] Int)) id))) (id (id (\a -> seq a (tail ([]::[] (Bool -> Bool)))))))
\a -> seq a ((\b -> map (seq b (undefined::Int -> Int)) (case1 (\c -> (undefined::([] Bool) -> [] Int)) a (seq b (undefined::[] Bool)))) (seq a (seq a ((undefined::(([] Int) -> Int -> ([] Int) -> Bool -> Bool) -> Bool) (\b -> \c -> \d -> seq d (seq c (undefined::Int -> Bool -> Bool)) (seq a (undefined::Int)))))))
(undefined::([] Int) -> [] Int)
map (case1 (\a -> seq a (\b -> case1 (\c -> (undefined::([] Int) -> Int -> Int)) (\c -> c) (seq b (undefined::[] Int)))) (id (undefined::Bool -> Bool -> Int -> Int) False ((\a -> seq a True) (undefined::Int))) (head ((\a -> tail (seq a ([]::[] ([] Bool)))) True)))
id
(\a -> \b -> seq a (id (seq a (\c -> (undefined::Bool -> [] Int)) (seq a (undefined::Int -> [] Bool)))) (((==)::[Int] -> [Int] -> Bool) (seq b b) (seq a b))) (\a -> seq a (\b -> (undefined::([] Int) -> Int -> [] Int)))
\a -> a
\a -> seq a (seq a (\b -> a)) ((undefined::(([] Int) -> [] (([] Int) -> Bool)) -> Int) (id (seq a (undefined::([] Int) -> [] (([] Int) -> Bool)))))
\a -> a
filter (\a -> seq a (undefined::([] (([] Bool) -> [] Bool)) -> (Int -> Int -> Bool) -> Bool) ((\b -> seq a (seq a (seq b (undefined::[] (([] Bool) -> [] Bool))))) a) (seq a ((\b -> (\c -> seq b (\d -> c)) (\c -> head ([]::[] Bool))) (undefined::([] Int) -> Int -> ([] Bool) -> Bool))))
\a -> seq a ((\b -> seq b (undefined::([] ([] ([] Bool))) -> [] Int) (seq b (\c -> seq a ([]::[] ([] ([] Bool)))) (\c -> b))) (seq a ((undefined::(Int -> Bool -> Bool) -> ([] Bool) -> Int) (seq a (\b -> \c -> c)) (map (undefined::(Int -> ([] Bool) -> [] Bool) -> Bool) ([]::[] (Int -> ([] Bool) -> [] Bool))))))
\a -> (undefined::[] Int)
(\a -> seq a (\b -> seq b (\c -> seq c tail) (seq a 2)) (\b -> \c -> (\d -> seq a (seq d ([]::[] Int))) c)) odd
(undefined::([] Int) -> [] Int)
\a -> ([]::[] Int)
(:) ((\a -> head (seq a ((undefined::([] ([] (Int -> Bool))) -> [] Int) (id (undefined::([] Int) -> [] ([] (Int -> Bool))) ([]::[] Int))))) (id (undefined::(([] Int) -> [] (Int -> Bool)) -> Bool) (\a -> seq a (seq a (\b -> (undefined::[] (Int -> Bool))) True))))
case1 (undefined::Bool -> ([] Bool) -> ([] Int) -> [] Int) ((\a -> \b -> \c -> a) (id ([]::[] Int)) ((\a -> seq a (undefined::Int)) (\a -> seq a id))) (case1 (undefined::Bool -> ([] Bool) -> [] Bool) (tail ([]::[] Bool)) (tail ([]::[] Bool)))
case1 (undefined::([] Int) -> ([] ([] Int)) -> ([] Int) -> [] Int) (\a -> map (\b -> 2) (seq a (undefined::[] (([] Int) -> [] (Bool -> Bool))))) ((\a -> seq a (\b -> (undefined::[] ([] Int))) (undefined::Bool)) (head (head (undefined::[] ([] (Bool -> Int -> Int -> Int))))))
\a -> (undefined::[] Int)
\a -> seq a (\b -> \c -> (undefined::Int -> [] Int)) (undefined::Bool) (seq a (seq a ((\b -> seq b 0) (seq a ([]::[] Bool))))) ((\b -> seq a (\c -> seq b 2)) (\b -> seq b (seq a (seq a False))) ((undefined::(Int -> Bool) -> Bool) (undefined::Int -> Bool)))
tail
(undefined::([] Int) -> [] Int)
(\a -> take ((+) ((undefined::([] ([] (Int -> Bool))) -> Int) (head ([]::[] ([] ([] (Int -> Bool)))))) (seq a 1))) (\a -> seq a (seq a (seq a (seq a ((\b -> (:) (undefined::Int -> Int) (seq b ([]::[] (Int -> Int)))) (\b -> seq a (seq a (undefined::([] Bool) -> [] ([] (Bool -> Bool))) (seq a (seq a ([]::[] Bool))))))))))
\a -> a
(\a -> seq a (\b -> id (\c -> seq b (\d -> b) (id 2)) (seq b ((==)::Int -> Int -> Bool)))) ((\a -> seq a (head ([]::[] (Bool -> ([] Int) -> [] Bool)))) (\a -> True) False)
case1 (\a -> seq a (seq a (seq a (\b -> tail)))) ((\a -> map (seq a (\b -> b))) ((\a -> seq a (undefined::Bool)) ((+1) (undefined::Int)))) (undefined::[] Int)
\a -> map (\b -> (undefined::(([] ([] Int)) -> [] ([] (Int -> Bool))) -> Int) (\c -> seq a (seq b (seq b (undefined::Int -> [] ([] (Int -> Bool)))) (seq b (seq b (undefined::Int)))))) (seq a (seq a (filter (seq a (undefined::Int -> ([] ([] (Bool -> Bool))) -> Bool) (id 1)) (seq a ((\b -> seq b (undefined::[] ([] ([] (Bool -> Bool))))) (seq a (seq a 1)))))))
(undefined::([] ([] ([] (([] ([] Int)) -> [] ([] Int))))) -> ([] Int) -> [] Int) ((undefined::Int -> [] ([] ([] (([] ([] Int)) -> [] ([] Int))))) ((\a -> seq a (seq a 2)) ([]::[] ([] Int))))
\a -> a
(:) (undefined::Int)
(\a -> (\b -> (undefined::(Int -> Int) -> ([] Int) -> [] Int) (seq b id)) a) ((\a -> (\b -> seq a (seq b (\c -> id))) False) (\a -> seq a (\b -> \c -> seq c a) (seq a (seq a (undefined::[] (Int -> [] Int))))))
(++) ((\a -> seq a (\b -> (\c -> seq c (seq c ([]::[] Int))) ((+1) (undefined::Int)))) (case1 (undefined::Int -> ([] Int) -> Bool) False ([]::[] Int)) (\a -> \b -> case1 (undefined::([] ([] Bool)) -> ([] ([] ([] Bool))) -> [] Int) b ([]::[] ([] ([] Bool)))))
case1 (\a -> \b -> map (id (seq b (undefined::(Int -> Bool) -> Int -> Int)) (seq b (seq b (seq b (undefined::Int -> Bool)))))) (undefined::([] Int) -> [] Int) ((\a -> seq a (seq a (seq a ([]::[] Bool)))) (\a -> seq a (\b -> (undefined::[] ([] Int)))))
\a -> a
case1 (undefined::Int -> ([] Int) -> [] Int) ((\a -> seq a (map (\b -> seq b 0) ([]::[] (([] ([] ([] Int))) -> Int)))) ((undefined::([] Int) -> Bool) (filter (undefined::Int -> Bool) (undefined::[] Int))))
(!!) ((undefined::(Int -> Bool) -> [] (([] Int) -> [] Int)) (\a -> case1 (undefined::Int -> ([] Int) -> Bool) (seq a True) (seq a ([]::[] Int)))) ((-) (case1 (\a -> (undefined::([] ([] Bool)) -> Int)) (undefined::Int) (undefined::[] ([] Bool))) (undefined::Int))
\a -> tail a
\a -> seq a (case1 (\b -> \c -> (undefined::Bool -> [] Int) (seq a id (seq a True))) (seq a (seq a (seq a (\b -> seq b a))) ((\b -> seq b (undefined::Bool)) True)) (seq a (undefined::Bool -> [] (Int -> ([] Int) -> Bool)) (seq a (odd (seq a (undefined::Int))))))
filter (head (id (tail (undefined::[] (((([] Int) -> Bool -> Bool) -> ([] ([] Bool)) -> [] Bool) -> Int -> Bool)))) (\a -> seq a (\b -> map (undefined::(Int -> ([] Int) -> [] (([] Int) -> Bool)) -> Bool) (undefined::[] (Int -> ([] Int) -> [] (([] Int) -> Bool))))))
(undefined::(([] (([] ([] Int)) -> [] ([] (Int -> Bool)))) -> Int -> Int -> Int) -> ([] Int) -> [] Int) (\a -> seq a (\b -> id (\c -> (+)) (seq b (undefined::Int))) (\b -> (undefined::Bool)))
(\a -> case1 (\b -> \c -> \d -> d) (\b -> seq a (undefined::[] Int)) ((\b -> seq b (undefined::[] ([] Bool))) (seq a (undefined::[] Int)))) (-)
case1 (\a -> seq a (seq a ((!!) (undefined::[] (([] Bool) -> ([] Int) -> [] Int))) (seq a (seq a (seq a (seq a (undefined::Int))))))) ((\a -> seq a (undefined::([] Int) -> ([] Int) -> [] Int)) (head (undefined::[] Bool)) (map (undefined::([] ([] Bool)) -> Int) (id (undefined::[] ([] ([] Bool)))))) ([]::[] Bool)
(\a -> seq a (id (\b -> take a))) ((\a -> (+1) (seq a a)) 0) True
(\a -> seq a (seq a (undefined::Int -> Int -> ([] Int) -> [] Int)) (undefined::Int)) ((\a -> a ([]::[] Int) 2) (!!)) (undefined::Int)
(!!) (head ((\a -> seq a (seq a ((\b -> seq b ([]::[] ([] (([] Int) -> [] Int)))) (seq a (undefined::Bool))))) (undefined::Int))) ((\a -> seq a (seq a (seq a (id (head (undefined::[] Int)))))) (\a -> \b -> (undefined::Bool)))
(:) ((\a -> seq a ((!!) (seq a ((\b -> seq b (undefined::[] Int)) (undefined::([] Int) -> [] (Int -> Bool)))) (seq a (id (undefined::Bool -> Int) (undefined::Bool))))) (take ((!!) (undefined::[] Int) (undefined::Int)) (map (\a -> seq a (undefined::[] Int)) ([]::[] Int))))
\a -> a
\a -> a
\a -> seq a a
tail
(undefined::(([] ([] ([] Int))) -> [] ([] ([] Bool))) -> ([] Int) -> [] Int) (\a -> seq a (\b -> case1 (\c -> (undefined::([] Bool) -> [] ([] ([] Bool)))) (undefined::[] ([] ([] Bool))) ([]::[] Bool)) (undefined::[] (([] Int) -> [] Int)))
\a -> a
\a -> seq a a
id ((undefined::Bool -> ([] (Int -> Bool)) -> ([] Int) -> [] Int) ((\a -> seq a (seq a True)) (id (\a -> (undefined::Int -> [] ([] Bool)))))) ((\a -> seq a (seq a (\b -> (undefined::[] (Int -> Bool))))) (head (undefined::[] Bool)) (id (undefined::(([] Int) -> Bool -> Bool) -> Int) (\a -> \b -> seq a b)))
\a -> seq a (undefined::[] Int)
id
(undefined::(([] Int) -> [] Bool) -> Int -> ([] Int) -> [] Int) ((\a -> \b -> seq b (seq a (undefined::[] Bool))) (((==)::Int -> Int -> Bool) 0)) ((undefined::Int -> Int) (case1 (\a -> \b -> (undefined::Int)) 1 ([]::[] Bool)))
\a -> seq a a
(\a -> \b -> seq b (seq a b)) ((\a -> seq a (undefined::([] ([] Int)) -> [] ([] ([] Int)))) ((\a -> seq a a) (undefined::Int)))
case1 (\a -> seq a (id (seq a (\b -> (\c -> \d -> seq c (undefined::[] Int)) (head ([]::[] Int)))))) ((undefined::Bool -> ([] Int) -> [] Int) (undefined::Bool)) ((undefined::(Int -> Int -> Bool) -> [] (Int -> Int -> Bool)) ((\a -> seq a ((==)::Int -> Int -> Bool)) (head ([]::[] Int))))
(!!) ((\a -> seq a (undefined::[] (([] Int) -> [] Int))) (head ((:) (undefined::[] (Int -> Int)) (undefined::[] ([] (Int -> Int)))))) ((\a -> (\b -> seq b (seq a 1)) (seq a (seq a (undefined::Bool)))) (\a -> ([]::[] (Int -> [] Int))))
\a -> seq a a
(undefined::Bool -> ([] Int) -> [] Int) (((==)::Int -> Int -> Bool) ((+1) (id (undefined::([] ([] Int)) -> Int) (undefined::[] ([] Int)))) ((\a -> seq a (seq a a)) 0))
(undefined::Bool -> ([] Int) -> ([] Int) -> [] Int) (undefined::Bool) ((\a -> map (seq a (seq a (undefined::Bool -> Int))) (undefined::[] Bool)) ((&&) True (odd (undefined::Int))))
\a -> map (seq a (seq a (\b -> (\c -> seq c b) ((&&) ((\c -> c) (seq a (undefined::Bool))))))) a
(\a -> \b -> seq a ((undefined::Int -> [] Int) ((+1) ((undefined::Bool -> Int) True)))) (head (id (id ([]::[] (([] (([] (Bool -> Bool)) -> [] (Bool -> Bool))) -> ([] Int) -> [] Int)))))
(undefined::([] Int) -> [] Int)
(!!) ((undefined::(([] Int) -> Int -> Int -> Bool) -> [] (([] Int) -> [] Int)) ((\a -> seq a (seq a (\b -> (undefined::Int -> Int -> Bool)))) (undefined::Int))) ((+) 2 ((\a -> seq a (seq a (seq a 0))) (\a -> seq a (tail ([]::[] Bool)))))
(\a -> seq a (\b -> (undefined::([] Int) -> [] Int))) (\a -> (\b -> seq b (seq b (seq b ([]::[] (Bool -> Bool))))) (filter (undefined::(Int -> Bool) -> Bool) ([]::[] (Int -> Bool)))) (id (\a -> a (seq a (seq a ([]::[] ([] Int)))) (seq a (seq a (undefined::Int)))) ((!!) (undefined::[] (([] ([] Int)) -> Int -> Int)) (id (undefined::Int))))
(undefined::(([] (([] Int) -> ([] Int) -> [] Bool)) -> Int -> Bool) -> ([] Int) -> [] Int) (\a -> \b -> seq a (head (undefined::[] ((([] ([] ([] Int))) -> [] ([] ([] Bool))) -> Bool))) (\c -> (\d -> seq a (seq d (undefined::[] ([] ([] Bool))))) (seq c (seq b (seq b (undefined::[] Bool))))))
(\a -> seq a (seq a (seq a (\b -> seq b (seq a (\c -> tail (seq b ([]::[] Int))))) (seq a (undefined::Bool -> Int -> Int -> [] Int) (seq a False))))) (\a -> seq a (seq a (seq a (undefined::Int -> [] ([] (([] ([] ([] Bool))) -> [] ([] ([] Bool))))))) (seq a (seq a (seq a (undefined::Int)))))
id
\a -> (undefined::[] Int)
\a -> a
(undefined::(([] ([] (([] Int) -> Int -> Int -> Bool))) -> [] (([] Int) -> Bool)) -> ([] Int) -> [] Int) (\a -> seq a (undefined::[] (([] Int) -> Bool)))
(\a -> seq a (seq a (head (seq a ([]::[] (Bool -> ([] Int) -> [] Int)))) False)) (map (\a -> \b -> seq a b) ((\a -> seq a (seq a (undefined::[] (([] ([] Int)) -> [] Bool)))) (undefined::Bool)))
\a -> seq a (\b -> (undefined::[] Int)) (\b -> (\c -> seq a (\d -> seq d (\e -> \f -> (undefined::[] Bool)) (seq c (undefined::[] ([] ([] Bool)))))) (seq a (seq b (\c -> False)) (\c -> (+1))))
(\a -> seq a (\b -> seq b ((undefined::([] Int) -> Bool -> [] Int) b) (undefined::Bool))) (undefined::([] Int) -> [] ([] (([] ([] ([] Int))) -> [] ([] Bool))))
\a -> a
(\a -> head (seq a (\b -> seq a (undefined::Int -> [] (([] Int) -> [] Int))) (seq a ((+1) (undefined::Int))) ((!!) (undefined::[] Int) (seq a 2)))) ((\a -> seq a (seq a (\b -> seq b ((undefined::Bool -> ([] Int) -> Bool) (undefined::Bool))))) (\a -> seq a (seq a (\b -> head ([]::[] ((Bool -> Bool) -> [] Int)) (\c -> c)))))
\a -> seq a a
tail
(\a -> \b -> seq a (\c -> id (seq c b)) (\c -> seq b (undefined::([] Int) -> Bool))) ((undefined::(([] Bool) -> Bool) -> Int -> Bool -> Bool) ((\a -> \b -> seq a (seq a (undefined::Bool))) (id (\a -> seq a (undefined::[] Bool)))))
(undefined::(([] Int) -> [] (Bool -> Bool)) -> ([] Int) -> [] Int) ((\a -> case1 (\b -> seq b (seq a (undefined::([] Int) -> [] (Bool -> Bool)))) (tail (undefined::[] (Bool -> Bool)))) (\a -> seq a (undefined::([] (Bool -> Bool)) -> ([] Int) -> [] Int) (head (seq a ([]::[] ([] (Bool -> Bool)))))))
case1 (\a -> \b -> (\c -> seq c (undefined::Bool -> ([] Int) -> [] Int) (seq a False)) ((-) (seq a (undefined::Int)) (undefined::Int))) ((\a -> (\b -> seq b (undefined::([] Int) -> [] Int)) (seq a (seq a (undefined::Int)))) ((\a -> \b -> seq a True) ([]::[] (([] ([] Bool)) -> Bool)))) (take 1 ((undefined::Int -> [] (Bool -> Bool -> Bool)) 2))
\a -> seq a (seq a ((undefined::([] ([] Bool)) -> Bool -> Int -> [] Int) (seq a (undefined::[] ([] Bool)))) (seq a (seq a (((==)::Int -> Int -> Bool) (undefined::Int)) 1))) (seq a 2)
(++) ((\a -> seq a (seq a (seq a (seq a (undefined::Int -> Bool -> [] Int))) (head (undefined::[] Int))) ((undefined::(Int -> [] (([] Int) -> [] Int)) -> Bool) (seq a (id (undefined::Int -> [] (([] Int) -> [] Int)))))) (\a -> (\b -> id (seq b even) ((+1) 2)) (seq a (seq a ((undefined::Int -> [] (([] Int) -> [] Int)) (seq a (seq a (undefined::Int))))))))
\a -> (undefined::Bool -> [] Int) True
\a -> (\b -> (\c -> seq c (head ([]::[] (([] ([] Bool)) -> [] Int)))) head (seq a (seq b (seq a (undefined::Int -> [] ([] Bool)))) 2)) (\b -> ([]::[] (([] (Int -> Bool -> Bool)) -> Int -> Bool -> Bool)))
(:) ((undefined::Int -> ([] (Int -> [] Int)) -> Bool -> Int) (id 2) ([]::[] (Int -> [] Int)) (undefined::Bool))
\a -> seq a (seq a (id (\b -> seq a a) (seq a False)))
(undefined::(([] (([] ([] ([] Int))) -> [] ([] Bool))) -> Int -> Int -> Int -> Int) -> ([] Int) -> [] Int) (\a -> seq a ((undefined::([] Int) -> Int -> Int -> Int -> Int) (case1 (\b -> (undefined::([] ([] Bool)) -> [] Int)) (seq a (undefined::[] Int)) (seq a (undefined::[] ([] Bool))))))
(undefined::(([] ([] ([] Bool))) -> [] ([] Bool)) -> ([] Int) -> [] Int) ((undefined::Int -> ([] ([] ([] Bool))) -> [] ([] Bool)) ((!!) ([]::[] ((Int -> [] Int) -> Int)) (undefined::Int) (undefined::Int -> [] Int)))
(\a -> seq a (id (\b -> take) (seq a (seq a (seq a False)))) ((\b -> seq b (seq b (seq a 0))) (undefined::([] Int) -> Int -> Bool))) (map (\a -> seq a (seq a (undefined::Bool -> Bool -> Bool) (id False))) ([]::[] (Bool -> Int -> [] Bool)))
case1 (\a -> \b -> (undefined::(([] Int) -> Int -> Int) -> ([] Int) -> [] Int) (!!)) ((\a -> (++) (seq a (seq a ([]::[] Int)))) ((\a -> \b -> seq a (undefined::([] Bool) -> Bool)) (\a -> seq a a))) (filter (\a -> a (seq a (seq a (undefined::Bool)))) (head (undefined::[] ([] (Bool -> Bool)))))
\a -> (undefined::[] Int)
head ((\a -> seq a ((\b -> seq b ([]::[] (([] Int) -> [] Int))) ((undefined::Int -> ([] ([] ([] Int))) -> [] ([] Bool)) (undefined::Int)))) ((\a -> (\b -> seq a (seq b (undefined::Int))) (seq a (head (undefined::[] ([] Bool))))) (case1 (\a -> (undefined::([] Bool) -> Bool)) (undefined::Bool) (undefined::[] Bool))))
\a -> a
\a -> (\b -> (!!) ((undefined::Int -> [] ([] Int)) (head a)) (seq b (\c -> seq a 1) (\c -> seq c (seq a ([]::[] ([] (Int -> Int))))))) (undefined::([] ([] Int)) -> [] ([] ([] Int)))
\a -> a
(\a -> seq a (seq a (\b -> map (\c -> b (undefined::[] Int) c))) (\b -> (+1))) (\a -> seq a ((\b -> seq a (seq a (seq b (undefined::Bool -> ([] Int) -> [] Int))) (head (seq b ([]::[] Bool)))) (seq a (id (undefined::([] (Int -> Bool -> Bool)) -> Int) (seq a (seq a (seq a (undefined::[] (Int -> Bool -> Bool)))))))))
\a -> a
\a -> head (undefined::[] (Int -> (([] (Bool -> Bool)) -> Bool -> Bool) -> [] Int)) ((undefined::([] Int) -> Int) a) (\b -> id (\c -> c))
\a -> seq a (seq a (\b -> \c -> (enumFromTo::Int -> Int -> [Int]) (seq a 0) (seq c (undefined::Int)))) (seq a ((undefined::([] Int) -> ([] Bool) -> [] Bool) (seq a (undefined::[] Int)))) (seq a (seq a (seq a (seq a (seq a (\b -> seq b (undefined::[] ([] (Int -> Int))))))) ((\b -> seq b b) 0)))
case1 (\a -> \b -> seq a ((undefined::Int -> Int -> ([] Int) -> [] Int) (undefined::Int) (seq b (undefined::Bool -> Int) (seq b (undefined::Bool))))) ((\a -> seq a (\b -> seq a (seq b (seq b b)))) ((undefined::Bool -> [] (([] Int) -> Bool)) True)) (id (undefined::(Bool -> Bool) -> [] ([] Bool)) (\a -> even (seq a (seq a 1))))
(!!) (head ([]::[] ([] (([] (Int -> [] Int)) -> ([] Int) -> [] Int)))) 0 ((\a -> seq a (seq a (\b -> seq a (undefined::[] (Int -> [] Int)))) a) ((\a -> seq a ((+1) (undefined::Int))) (id (undefined::[] ([] Bool)))))
(\a -> seq a (\b -> seq b (seq b (undefined::([] Int) -> [] Int))) ((\b -> \c -> b (b 1)) (+1))) (\a -> (\b -> seq b (\c -> seq b (seq b ((==)::Bool -> Bool -> Bool))) (b (seq a (undefined::[] Int)) (seq b (undefined::Int)))) (seq a (\b -> (!!) (seq a (seq b (undefined::[] (Int -> Bool)))) (seq b (undefined::Int)))))
\a -> a
\a -> (\b -> seq a (seq b (undefined::[] Int))) (\b -> (\c -> seq c (seq c (\d -> seq b (undefined::([] Int) -> Bool)) (\d -> \e -> e))) ((\c -> seq c (seq a (seq c (undefined::Int)))) (seq a (seq a (seq b ([]::[] ([] Int)))))))
head ((\a -> (\b -> seq b (undefined::[] (Bool -> ([] Int) -> [] Int))) (seq a (seq a (seq a 2)))) ((\a -> a) (undefined::Bool))) (undefined::Bool)
case1 ((\a -> seq a ((!!) ([]::[] (Int -> ([] Int) -> [] Int)) (undefined::Int))) ((\a -> seq a (\b -> (undefined::[] Bool))) (tail ([]::[] ([] ([] Bool)))))) ((\a -> (:) (head (undefined::[] Int)) (seq a (seq a (undefined::[] Int)))) ((undefined::((Int -> Int) -> Int -> Int) -> Int) (\a -> (+1))))
\a -> a
head (undefined::[] ((([] ([] ([] Int))) -> [] ([] ([] Bool))) -> ([] Int) -> [] Int)) (\a -> seq a ((undefined::Int -> (([] Int) -> Int) -> [] ([] ([] Bool))) (seq a 1) (\b -> (\c -> seq c (seq b 0)) (seq b (seq b (seq b (undefined::[] Bool)))))))
(\a -> seq a (seq a (\b -> head ([]::[] (Bool -> ([] Int) -> [] Int))) (seq a (seq a True)) (seq a ((!!) (undefined::[] Bool) (seq a 1))))) (\a -> seq a (seq a (undefined::Int -> Int -> ([] ([] ([] Int))) -> [] ([] ([] Int)))) ((undefined::([] Bool) -> Int) ([]::[] Bool)))
(undefined::(([] Bool) -> [] Bool) -> ([] Int) -> [] Int) (\a -> seq a a)
(undefined::([] Int) -> [] Int)
(\a -> seq a (\b -> head (undefined::[] (Bool -> Bool -> [] Int)) (seq a (seq b (seq b (undefined::Bool)))) (seq a (seq b (seq a (undefined::(([] Int) -> Bool) -> Bool)) (undefined::([] Int) -> Bool))))) ((!!) ((\a -> seq a (seq a ([]::[] (Int -> Int)))) (\a -> head a)) ((+1) ((\a -> a) 0)))
\a -> (undefined::[] Int)
(\a -> id (\b -> (undefined::Bool -> ([] Int) -> [] Int)) (undefined::Bool) (seq a (\b -> even (undefined::Int)) (seq a (seq a (seq a 1))))) (\a -> seq a (\b -> seq a (seq a ((undefined::(Bool -> Bool) -> [] (([] ([] Int)) -> [] Bool)) (\c -> c)))))
\a -> a
(\a -> \b -> seq a (\c -> case1 (undefined::Bool -> ([] Bool) -> [] Int) ([]::[] Int) (undefined::[] Bool)) (\c -> (undefined::Int -> [] (Bool -> Bool)) (seq c 0))) (head (head (map (undefined::(Int -> ([] Bool) -> Bool) -> [] Int) ((!!) ([]::[] ([] (Int -> ([] Bool) -> Bool))) (undefined::Int)))))
\a -> take (seq a (\b -> seq b (seq a (undefined::Bool -> Int)) (odd 0)) (\b -> filter (\c -> seq c False) (seq a (seq b (undefined::[] (Bool -> Bool)))))) (undefined::[] Int)
\a -> a
(\a -> \b -> case1 (seq a (\c -> id (undefined::([] ([] ([] Int))) -> [] Int))) (seq a b) (seq b (undefined::Bool -> [] ([] ([] Int))) (seq a True))) (\a -> seq a (map (\b -> seq a ([]::[] Int)) (seq a (undefined::Int -> [] (([] Int) -> Bool -> Bool)) (seq a (seq a (undefined::Int))))))
\a -> a
case1 (id (undefined::(Int -> [] Int) -> ([] (Int -> [] Int)) -> ([] Int) -> [] Int)) tail (undefined::[] (Int -> [] Int))
\a -> a
\a -> map (id (seq a (\b -> (undefined::(([] ([] Int)) -> [] Bool) -> Int))) (\b -> (!!) (seq b (seq b (undefined::[] Bool))) ((+1) (undefined::Int)))) (map (id (\b -> \c -> seq b (seq a (seq c (undefined::[] Bool))))) ([]::[] ([] (Int -> Int))))
(\a -> \b -> seq a b) (\a -> seq a (seq a (\b -> seq b ([]::[] (Bool -> Bool)))) (||))
(\a -> id (seq a (seq a (seq a (\b -> \c -> seq b c)))) ([]::[] ([] (Bool -> Bool)))) ((\a -> \b -> tail ((undefined::Bool -> [] (([] Int) -> Int)) a)) ((\a -> seq a (id False)) 2))
\a -> seq a ((\b -> \c -> case1 (\d -> (undefined::([] ([] Bool)) -> [] Int)) (seq b (undefined::[] Int)) (seq a (undefined::[] ([] Bool)))) (seq a (case1 (seq a (undefined::Int -> ([] Int) -> Bool)) (seq a True) a)) (seq a (head ((\b -> seq b (seq b (undefined::[] (([] (([] ([] ([] Int))) -> [] ([] Bool))) -> Int)))) (((==)::[Int] -> [Int] -> Bool) (seq a (seq a a)) a)))))
\a -> seq a (seq a (seq a (seq a (\b -> \c -> a) (seq a ((\b -> seq b (seq b (undefined::[] (Int -> Int)))) ((+1) 0))))) (\b -> even))
(\a -> seq a (seq a ((!!) (seq a (undefined::[] (Bool -> ([] Int) -> [] Int))) (a (undefined::Bool -> Int))))) (\a -> a ((undefined::([] Int) -> Bool) (seq a ([]::[] Int)))) True
(undefined::(([] (([] ([] Bool)) -> [] ([] Bool))) -> Int) -> ([] Int) -> [] Int) (undefined::([] (([] ([] Bool)) -> [] ([] Bool))) -> Int)
id
\a -> seq a (seq a (undefined::[] Int))
\a -> a
id (undefined::([] (([] ([] ([] Bool))) -> [] ([] ([] Bool)))) -> ([] Int) -> [] Int) ((undefined::([] ([] ([] Bool))) -> [] (([] ([] ([] Bool))) -> [] ([] ([] Bool)))) (id (\a -> seq a (undefined::[] ([] ([] Bool)))) ((:) odd (undefined::[] (Int -> Bool)))))
\a -> seq a (seq a (\b -> map (\c -> (\d -> d) (seq c (seq c c))) a)) (\b -> seq a (id (seq b (seq a (undefined::([] (Int -> Bool -> Bool)) -> Int -> Int)))))
\a -> ([]::[] Int)
\a -> a
(++) (undefined::[] Int)
\a -> map (\b -> (undefined::Int -> ([] ([] Int)) -> Int) (undefined::Int) (tail (seq a (\c -> ([]::[] ([] Int))) (undefined::Bool)))) ((:) (seq a ((!!) ([]::[] (([] Int) -> Int -> Int -> Bool)) (undefined::Int))) (seq a (undefined::[] (([] Int) -> Int -> Int -> Bool))))
\a -> seq a (\b -> seq b ((undefined::Int -> (([] Bool) -> [] Bool) -> [] Int) (seq a 0) (id (seq a (undefined::Bool -> ([] Bool) -> [] Bool)) (undefined::Bool)))) (seq a ((undefined::(([] (([] Int) -> [] (Bool -> Bool))) -> ([] Bool) -> Bool) -> Bool) (seq a (seq a (\b -> \c -> seq b (seq c (seq b False)))))))
(!!) (id ([]::[] (([] ([] (Bool -> Bool))) -> ([] Int) -> [] Int))) ((\a -> head a) (undefined::[] Int)) ([]::[] ([] (Bool -> Bool)))
id
\a -> a
\a -> ([]::[] Int)
\a -> (\b -> seq b (head (seq b (undefined::[] (([] Bool) -> Int -> [] Int))) ([]::[] Bool) (id (seq b (undefined::(Int -> Bool) -> Int)) (head (seq a ([]::[] (Int -> Bool))))))) (\b -> seq b (seq b ((!!) (seq b (undefined::[] ([] (Int -> ([] ([] ([] Int))) -> [] ([] Bool))))) (seq b (seq b (seq a id) (undefined::Int))))))
\a -> (undefined::[] Int)
\a -> a
\a -> a
(\a -> case1 (id (\b -> seq b (++))) (seq a (undefined::Bool -> ([] Int) -> [] Int) (seq a False)) ((\b -> seq b ([]::[] Int)) (seq a (undefined::Bool)))) (undefined::([] ([] (Int -> Bool -> Bool))) -> [] (Int -> Bool))
(\a -> (undefined::Int -> ([] Int) -> [] Int) (seq a (seq a (seq a (undefined::(Int -> Bool) -> Int))) (undefined::Int -> Bool))) ([]::[] (Int -> ([] Int) -> ([] Int) -> [] Bool))
\a -> take (case1 (\b -> seq a (seq a (\c -> 0))) (seq a (undefined::Bool -> Int) (seq a False)) ((\b -> seq b ([]::[] Bool)) (seq a (undefined::Int)))) a
tail
(\a -> seq a (seq a (undefined::(([] ([] Int)) -> [] Int) -> ([] Int) -> [] Int) head)) ((\a -> \b -> seq b ((++) (seq a (undefined::[] ([] ([] (([] Int) -> [] Int))))) (seq b (undefined::[] ([] ([] (([] Int) -> [] Int))))))) ((undefined::Int -> [] Int) 0))
id
\a -> (undefined::[] Int)
\a -> head (seq a (head (seq a (undefined::[] ([] ((([] (([] Int) -> [] (Int -> [] Int))) -> [] (Bool -> Bool)) -> [] Int)))))) (\b -> map ((undefined::Bool -> ([] ([] (Bool -> Bool))) -> Bool -> Bool) (seq a (seq b (seq a (undefined::Bool))))) (head ([]::[] (Int -> [] ([] ([] (Bool -> Bool))))) ((+1) (seq a 0))))
(\a -> seq a (\b -> seq a (seq b (seq b (:) (seq a (undefined::Int)))))) (head (undefined::[] ((Int -> Int -> Bool) -> Bool)) (\a -> seq a even)) ((\a -> \b -> \c -> seq b (seq a (\d -> seq d d) (seq b (seq a True)))) (\a -> case1 (\b -> (undefined::([] Bool) -> Int -> [] Int)) (seq a (undefined::Int -> [] Int)) (seq a (undefined::[] Bool))))
tail
(\a -> \b -> seq b (id (take (seq a (seq b 2))))) (case1 (\a -> \b -> ([]::[] Int)) ([]::[] Int) (undefined::[] ([] Bool))) ((undefined::Bool -> Bool -> [] (Int -> Int)) False ((\a -> seq a (odd (undefined::Int))) (take 1 ([]::[] (([] ([] (Int -> Int))) -> Bool)))))
\a -> seq a (seq a (\b -> seq b (\c -> seq c a))) (\b -> b) (\b -> seq b ((:) (seq b ((undefined::([] ([] ([] Int))) -> Bool) (undefined::[] ([] ([] Int))))) (tail (seq a (seq b (seq a (undefined::[] Bool)))))))
\a -> map (seq a (\b -> b a (seq b (seq b (undefined::([] Int) -> Int)) (seq b (seq b ([]::[] Int)))))) (map (\b -> \c -> \d -> seq c d) (seq a ([]::[] ([] (([] Int) -> Bool)))))
(!!) (undefined::[] (Bool -> ([] Int) -> [] Int)) ((\a -> seq a (seq a 0)) (tail ([]::[] (([] (Bool -> Bool)) -> Bool -> Bool)))) ((undefined::(([] Int) -> [] Bool) -> Bool) ((undefined::(Int -> Bool) -> ([] Int) -> [] Bool) (\a -> even (undefined::Int))))
\a -> a
map (\a -> head ((\b -> seq b (tail (seq b (undefined::[] ((([] ([] Int)) -> [] Int) -> Int))))) ((\b -> seq b (undefined::[] Bool)) (seq a (tail (undefined::[] (Int -> [] Int)))))) ((!!) ([]::[] (([] ([] Int)) -> [] Int)) (undefined::Int)))
(undefined::Bool -> ([] Int) -> [] Int) (undefined::Bool)
\a -> (undefined::[] Int)
\a -> (!!) (seq a (seq a ([]::[] (([] (([] ([] Bool)) -> Bool -> Bool)) -> [] Int)))) ((\b -> seq b b) (seq a (undefined::Int))) ((undefined::([] (Bool -> Bool)) -> [] (([] ([] Bool)) -> Bool -> Bool)) (seq a (\b -> seq b ([]::[] (Bool -> Bool))) (seq a (seq a (seq a ([]::[] Bool))))))
\a -> (\b -> id (\c -> seq b (\d -> a) (head ([]::[] Bool)))) ([]::[] ([] Bool)) head
\a -> id (seq a a)
tail
(undefined::Bool -> Int -> ([] Int) -> [] Int) (head ((:) True (head (undefined::[] ([] Bool))))) ((undefined::(Int -> [] Bool) -> Int) ((!!) (head ([]::[] ([] (Int -> [] Bool)))) (head (undefined::[] Int))))
\a -> seq a (seq a (seq a (\b -> seq b (enumFromTo'::Int -> Int -> [Int])) (seq a (seq a (seq a ([]::[] Bool))))) ((\b -> seq b (seq a (undefined::Int))) (seq a (seq a (seq a (undefined::[] ([] (Int -> Int))))))) ((!!) (seq a (undefined::[] ((([] ([] Bool)) -> [] Bool) -> Int))) (seq a (seq a 1)) (\b -> (!!) (undefined::[] (Bool -> [] Bool)) 2 (seq b True))))
\a -> seq a (seq a (\b -> seq b (seq b (seq b (\c -> id ([]::[] Int)))))) ((\b -> seq b (b True (undefined::Bool))) (\b -> seq a (\c -> False))) (case1 (\b -> id (\c -> \d -> seq c (undefined::[] (Int -> Bool)))) (seq a (undefined::([] Int) -> [] (Int -> Bool))) (seq a (seq a ([]::[] Bool))))
(undefined::([] Int) -> [] Int)
(\a -> \b -> (!!) (seq a (\c -> seq a (undefined::[] ([] Int))) (not True)) (seq a (\c -> 2) (seq a (seq a (seq a True))))) ((\a -> seq a ([]::[] ([] Bool))) (\a -> (\b -> even (seq b (undefined::Int))) (head ([]::[] (([] Bool) -> Int)))))
id (\a -> \b -> b) (undefined::([] Int) -> (([] Int) -> [] ([] Int)) -> ([] Int) -> [] ([] Int))
\a -> head (seq a (seq a (map (\b -> \c -> filter even a) ((++) (seq a (undefined::[] (Int -> Bool))) (seq a (undefined::[] (Int -> Bool))))))) (seq a (seq a (\b -> seq b (\c -> head (seq a (undefined::[] ((([] Int) -> ([] Int) -> [] Int) -> Bool))) ((\d -> seq d (\e -> tail)) (not True))))))
(undefined::(([] (Int -> Int)) -> Int -> Int -> Int) -> ([] Int) -> [] Int) (undefined::([] (Int -> Int)) -> Int -> Int -> Int)
(\a -> seq a (\b -> ([]::[] Int))) (\a -> seq a (seq a (\b -> seq a id)) ((undefined::([] ([] Int)) -> ([] Int) -> Int -> [] Int) (head (seq a ([]::[] ([] ([] Int)))))))
case1 (\a -> \b -> (++) (seq a (map (\c -> (undefined::Int)) (seq a ([]::[] Int))))) id ((\a -> seq a (seq a (seq a (seq a (undefined::[] (([] Int) -> [] Bool)))))) 2)
id (\a -> (undefined::(([] ([] Int)) -> [] Int) -> ([] Int) -> [] Int)) ((!!) ([]::[] ((Int -> [] Int) -> Bool)) (undefined::Int) (undefined::Int -> [] Int)) (id (\a -> \b -> seq b ((undefined::(([] Bool) -> Int) -> [] Int) (seq a (undefined::([] Bool) -> Int)))) ((\a -> seq a (\b -> seq a ([]::[] Bool))) (take (undefined::Int) ([]::[] ([] Int)))))
(\a -> (!!) (seq a (undefined::[] (Bool -> ([] Int) -> [] Int))) (seq a (seq a (undefined::Int))) (head (seq a (seq a (seq a (seq a (head (undefined::[] ([] Bool))))))))) ((undefined::Bool -> [] (([] (([] Int) -> [] (Int -> Int))) -> Bool -> Bool)) ((\a -> seq a (seq a True)) (\a -> (undefined::[] Bool))))
(!!) ([]::[] ((([] Int) -> [] (Bool -> Bool)) -> ([] Int) -> [] Int)) (case1 (undefined::Bool -> ([] Bool) -> Int) (undefined::Int) ([]::[] Bool)) ((\a -> head (seq a ((!!) ([]::[] ([] (([] Int) -> [] (Bool -> Bool)))) (seq a (undefined::Int))))) (\a -> seq a (\b -> seq a b)))
case1 (\a -> \b -> seq b ((undefined::Int -> Int -> ([] Int) -> [] Int) (seq b 0) ((-) (undefined::Int) (undefined::Int)))) ((!!) (undefined::[] (([] Int) -> [] Int)) ((+) 1 (undefined::Int))) (id (\a -> a (seq a 1)) (id (undefined::Int -> [] Bool)))
\a -> a
(\a -> seq a (seq a (seq a (seq a (\b -> \c -> c))) (\b -> seq b (\c -> seq a True) (seq b (seq a (seq a (undefined::[] ([] Int)))))))) (id ((\a -> seq a (case1 (undefined::([] Int) -> ([] ([] Int)) -> Int) 0 ([]::[] ([] Int)))) ((undefined::(Int -> Bool) -> Bool) (\a -> seq a (seq a True)))))
\a -> seq a (seq a ((\b -> (undefined::Int -> ([] ([] ([] Bool))) -> [] Int) b) (case1 (seq a (undefined::([] Int) -> ([] ([] Int)) -> Int)) (seq a 1) (seq a (undefined::[] ([] Int)))) (seq a (undefined::[] ([] ([] Bool))))))
(undefined::((([] ((([] Bool) -> Bool) -> ([] Bool) -> Bool)) -> Bool) -> Int) -> ([] Int) -> [] Int) (\a -> seq a (seq a ((\b -> (\c -> seq c (seq b 0)) ([]::[] (([] Int) -> Bool))) (undefined::([] ([] ([] Int))) -> [] ([] ([] Bool))))))
(\a -> seq a (seq a (id (filter (seq a (seq a (\b -> seq a a))))))) ((\a -> seq a (seq a True)) (\a -> seq a tail))
(undefined::(Bool -> (([] Int) -> Bool -> Bool) -> ([] Int) -> Bool -> Bool) -> ([] Int) -> [] Int) (\a -> \b -> seq b (\c -> (undefined::([] Int) -> ([] Int) -> Bool -> Bool) (seq b (seq a (undefined::[] Int)))) (head (undefined::[] ((([] (Int -> Bool)) -> Bool) -> Int)) (id (\c -> seq b a))))
\a -> map (seq a (undefined::(([] (Int -> Int -> Int -> Int)) -> [] (Int -> Int -> Int -> Int)) -> Int)) (seq a (tail (seq a (seq a (undefined::[] (([] (Int -> Int -> Int -> Int)) -> [] (Int -> Int -> Int -> Int)))))))
\a -> a
\a -> a
(\a -> \b -> seq a ((undefined::([] ([] Bool)) -> [] Int) (case1 (\c -> (undefined::([] Int) -> [] ([] Bool))) (seq b ([]::[] ([] Bool))) ([]::[] Int)))) (head ([]::[] ((([] ([] Int)) -> [] ([] ([] Int))) -> ([] Int) -> ([] Bool) -> [] Bool)))
\a -> a
\a -> (\b -> \c -> map (seq b (undefined::Bool -> Int)) (b (seq a ([]::[] Bool)))) (\b -> tail (undefined::[] Bool)) ((undefined::(Int -> Int -> Bool) -> Int -> Bool) (head ((++) (seq a ([]::[] (Int -> Int -> Bool))) (seq a (undefined::[] (Int -> Int -> Bool))))))
(\a -> seq a (seq a ((\b -> seq b (seq a (\c -> (undefined::([] Int) -> [] Int)) id)) (case1 (\b -> (undefined::([] Bool) -> [] Bool)) (seq a ([]::[] Bool)) (seq a (undefined::[] Bool)))))) (head ([]::[] ((Bool -> ([] Int) -> ([] ([] Int)) -> [] Bool) -> Int)) (\a -> \b -> \c -> seq c (seq b (seq a (undefined::Int -> [] Bool))) (id (seq a 0))))
map (+1)
\a -> (undefined::[] Int)
(\a -> seq a (seq a (undefined::Bool -> Bool -> ([] Int) -> [] Int) (head (seq a (undefined::[] Bool)))) ((||) (seq a (seq a (undefined::Bool))) (seq a (seq a True)))) ((undefined::(([] ([] Int)) -> [] Int) -> ([] ([] Bool)) -> [] Bool) ((\a -> seq a (seq a (\b -> (undefined::[] Int)))) (undefined::Bool)))
\a -> seq a ((\b -> (undefined::Bool -> [] Int) ((\c -> seq b (seq a c)) (seq b True))) (\b -> ((==)::[Int] -> [Int] -> Bool) (seq b a) b))
(\a -> \b -> (!!) (seq b (undefined::[] (([] Int) -> [] Int))) a) ((+1) (case1 (undefined::Int -> ([] Int) -> Int) 2 (undefined::[] Int))) ((\a -> seq a (seq a (\b -> seq b ([]::[] (Int -> Bool))) (seq a (head ([]::[] ([] (Int -> [] Int))))))) ((\a -> seq a (seq a (seq a (undefined::([] Int) -> [] (([] Int) -> Bool))))) (undefined::Int)))
head ([]::[] (([] (([] Int) -> Bool)) -> Int -> ([] Int) -> [] Int)) ((\a -> id (seq a ([]::[] (([] Int) -> Bool)))) (\a -> seq a (seq a (seq a True)))) ((!!) (case1 (\a -> (undefined::([] Bool) -> [] Int)) ([]::[] Int) ([]::[] Bool)) 2)
(undefined::([] Int) -> [] Int)
case1 (\a -> (!!) (undefined::[] (([] Bool) -> ([] Int) -> [] Int)) (undefined::Int)) (\a -> a) ((\a -> \b -> seq a ([]::[] Bool)) (undefined::Bool) (undefined::([] Int) -> Bool))
\a -> a
\a -> ([]::[] Int)
id
\a -> seq a (seq a ((!!) (seq a ((\b -> seq b (seq b ((undefined::([] (Bool -> Bool)) -> [] ([] Int)) (undefined::[] (Bool -> Bool))))) (\b -> (!!) (seq a ([]::[] (Bool -> Bool -> Bool))) (seq b (undefined::Int))))) ((undefined::(Bool -> Bool) -> Int -> Int) (seq a (seq a id)) (head (seq a (seq a (undefined::Bool -> [] Int)) (undefined::Bool))))))
(\a -> seq a (\b -> \c -> seq a (\d -> seq d c) (seq a (seq c a)))) (id (\a -> seq a (undefined::Int)) ((!!) ([]::[] ([] ([] Int))) 1)) ((\a -> id (seq a ((\b -> \c -> seq b (undefined::Bool)) (id a)))) (case1 (\a -> head) 0 ([]::[] Int)))
tail
(\a -> seq a id) (\a -> seq a (\b -> seq b b))
\a -> seq a (seq a (undefined::(([] ([] (([] ([] Int)) -> [] Bool))) -> [] ([] (([] ([] Int)) -> [] Bool))) -> [] Int)) (seq a (seq a (seq a id)))
(\a -> seq a take 2) ((\a -> seq a (head (seq a (seq a (seq a (seq a (undefined::[] (([] ([] Int)) -> [] ([] Int))))))))) (head (head (filter (undefined::([] Int) -> Bool) (undefined::[] ([] Int))))))
(undefined::Bool -> ([] Int) -> [] Int) (((==)::Int -> Int -> Bool) (id (undefined::Bool -> Int) (head (undefined::[] Bool))) ((\a -> seq a (seq a (undefined::Int))) (\a -> seq a (\b -> b))))
id
id (\a -> (undefined::([] Int) -> [] Int)) ((\a -> not (seq a odd 1)) (\a -> \b -> case1 (\c -> (undefined::([] Int) -> Bool)) (seq b (undefined::Bool)) (undefined::[] Int)))
\a -> map (seq a (\b -> 0)) (undefined::[] (([] Int) -> Int -> Bool))
\a -> a
(:) ((undefined::Int -> (Int -> Bool) -> Int) ((+1) (undefined::Int)) odd)
(\a -> seq a ((:) a)) (undefined::Int)
id
case1 ((!!) (undefined::[] (Bool -> ([] Bool) -> ([] Int) -> [] Int)) ((\a -> a) (undefined::Int))) ((\a -> (\b -> seq b (undefined::([] Int) -> [] Int)) (seq a (seq a (undefined::Bool)))) (\a -> head ([]::[] (Int -> [] Bool)) 2)) ((\a -> (\b -> seq b (undefined::[] Bool)) (seq a (\b -> (undefined::Int -> Bool)))) ((\a -> seq a True) ([]::[] Bool)))
\a -> (undefined::[] Int)
\a -> a
\a -> a
(\a -> case1 (seq a (seq a (\b -> (undefined::([] Bool) -> ([] Int) -> [] Int)))) (seq a (\b -> head ([]::[] ([] Int)))) (undefined::[] Bool)) (undefined::([] (([] (Int -> Int)) -> Int -> Int)) -> ([] ([] (([] Int) -> [] Int))) -> Bool)
\a -> map (seq a (head ((\b -> (\c -> seq c (undefined::[] (Int -> Int))) (seq a (seq b ([]::[] (Int -> [] Int))))) ((\b -> seq a (seq b (undefined::[] (Bool -> Bool)))) (\b -> b))))) a
\a -> (\b -> (undefined::(([] Int) -> ([] (Bool -> Bool)) -> Bool -> Bool) -> [] Int) (\c -> (undefined::Int -> ([] (Bool -> Bool)) -> Bool -> Bool) (seq b 1))) (\b -> \c -> b c)
case1 (\a -> \b -> seq a (\c -> take) (seq a a) ((\c -> seq b c) (undefined::Int))) ((\a -> seq a (seq a (undefined::Bool -> ([] Int) -> [] Int)) (not False)) id) (map (\a -> seq a (a (undefined::Bool))) ((:) (undefined::Bool -> Bool) (undefined::[] (Bool -> Bool))))
\a -> a
(\a -> (\b -> seq b (seq b (\c -> id))) (seq a (seq a (seq a a))) (seq a ((+) (seq a a) a))) ((undefined::(([] ([] Bool)) -> [] ([] (Bool -> Bool))) -> Int) (\a -> (\b -> seq b (head (undefined::[] ([] ([] (Bool -> Bool)))))) ((+1) (seq a 0))))
\a -> seq a (seq a (\b -> head (seq b (undefined::[] (Bool -> Bool -> [] Int))) (odd (seq b (undefined::Int))) ((\c -> seq c (seq a (undefined::Bool))) (seq a (seq b (\c -> (+1))))))) (seq a (\b -> (\c -> seq c (map (\d -> seq b (undefined::Int -> Int)) (seq b ([]::[] (Int -> Int))))) (head (seq a (seq a (undefined::Int -> [] Int)) (undefined::Int)))))
(undefined::Int -> (([] Int) -> Int -> Int) -> ([] Int) -> [] Int) (id ((undefined::(Bool -> ([] Bool) -> Bool) -> Int) (undefined::Bool -> ([] Bool) -> Bool))) (case1 (\a -> (undefined::([] Bool) -> ([] Int) -> Int -> Int)) ((undefined::(Int -> Int) -> ([] Int) -> Int -> Int) ((!!) ([]::[] Int))) (undefined::[] Bool))
\a -> (undefined::[] Int)
\a -> (!!) (seq a (take (seq a (id (undefined::Int -> Int) (undefined::Int))) (case1 (undefined::Int -> ([] Int) -> [] ([] Int)) ([]::[] ([] Int)) a))) ((!!) (seq a (\b -> a) (undefined::[] ([] (Int -> Bool)))) (case1 (seq a (undefined::Int -> ([] Int) -> Int)) (seq a (undefined::Int)) a))
id
(\a -> seq a (seq a (\b -> id)) (\b -> seq b (seq a ((\c -> seq c (\d -> d)) (id False))))) ((\a -> seq a (seq a (seq a (\b -> (undefined::Int))) (\b -> (undefined::Bool -> Bool)))) ((\a -> seq a (\b -> (undefined::[] (Bool -> Bool)))) (\a -> id True)))
tail
(\a -> (undefined::Int -> Bool -> ([] Int) -> [] Int) (seq a ((+1) 1)) ((\b -> seq b (seq a False)) (\b -> seq b (seq a (seq b (undefined::[] ([] (Int -> Int)))))))) (\a -> \b -> b)
(\a -> seq a ((\b -> seq b (\c -> c)) (seq a (\b -> seq a (seq a (undefined::([] Int) -> ([] Bool) -> [] Bool)) b)))) (id (undefined::(Int -> Int) -> Int -> Bool) (\a -> a) ((\a -> seq a (seq a (seq a (undefined::Int)))) (\a -> seq a False)))
\a -> take (head a) a
(++) ((\a -> take ((\b -> b) (seq a (seq a (seq a 1)))) (a (a ([]::[] Int) 0 2) (seq a (undefined::Int)) (seq a 1))) (\a -> \b -> seq a (\c -> seq b (seq b (undefined::(Int -> Bool) -> Int -> [] Int)) even) (\c -> \d -> (undefined::Int -> Bool) b)))
id
\a -> a
(undefined::([] Int) -> [] Int)
\a -> id (\b -> a) (seq a ([]::[] ([] (Bool -> Bool))))
(undefined::(([] ([] Int)) -> [] ([] Bool)) -> ([] Int) -> [] Int) (\a -> map (seq a (id (seq a (seq a (undefined::Bool -> [] Bool))))) (head (seq a ([]::[] ((Int -> Int) -> [] Bool))) id))
\a -> (enumFromTo::Int -> Int -> [Int]) (seq a (case1 (\b -> (undefined::([] Int) -> Bool -> Int)) (seq a (undefined::Bool -> Int)) (seq a ([]::[] Int)) (id (seq a False)))) (seq a ((\b -> seq b (undefined::(([] Int) -> [] (Int -> Bool)) -> Int)) (seq a (seq a (seq a (undefined::Bool))))) (\b -> seq a ((undefined::Bool -> [] (Int -> Bool)) (undefined::Bool))))
(undefined::([] Int) -> [] Int)
(\a -> seq a (\b -> seq b (undefined::([] Int) -> ([] Int) -> [] Int) (b (seq b ([]::[] (([] Int) -> Int)))))) ((+) ((+1) (undefined::Int)) (head ([]::[] Int))) (undefined::([] (([] Int) -> Int)) -> [] Int)
id
\a -> map (\b -> seq a 2) ((\b -> seq b (\c -> seq c (undefined::[] Bool))) (\b -> \c -> 2) (seq a (id (+1)) (undefined::Int)))
\a -> (undefined::(([] ([] (([] ([] Bool)) -> [] Bool))) -> [] Int) -> [] Int) (\b -> seq b a)
filter odd
\a -> (undefined::Bool -> [] Int) ((\b -> seq b True) (seq a ((\b -> seq b 2) (seq a (seq a (seq a True))))))
id
id
(undefined::([] ([] ([] (Int -> [] Int)))) -> Bool -> ([] Int) -> [] Int) (filter (\a -> seq a (seq a True)) (undefined::[] ([] ([] (Int -> [] Int))))) ((\a -> case1 (\b -> head) (seq a (undefined::Bool)) (seq a ([]::[] Bool))) ((\a -> seq a (seq a (seq a ([]::[] ([] (Int -> Bool)))))) (\a -> seq a (seq a (seq a True)))))
\a -> a
case1 (\a -> \b -> \c -> take (a 1 1) c) ((undefined::Bool -> ([] Int) -> [] Int) ((\a -> a) (not False))) (undefined::[] (Int -> Int -> Int))
\a -> a
(undefined::(Int -> Int -> Int -> Int) -> ([] Int) -> [] Int) (undefined::Int -> Int -> Int -> Int)
\a -> seq a ((undefined::(([] Int) -> [] (([] Int) -> Bool)) -> [] Int) (seq a (\b -> seq b (\c -> seq a (undefined::([] Int) -> [] (([] Int) -> Bool))) False) (seq a ([]::[] (Bool -> Bool)))))
(\a -> seq a (\b -> seq a (\c -> (undefined::(Bool -> Bool) -> [] Int) (undefined::Bool -> Bool))) ([]::[] (([] Int) -> [] Int))) ([]::[] (([] (([] Int) -> ([] Int) -> Bool)) -> Int -> [] Int))
case1 (undefined::(Int -> Int -> Bool) -> ([] (Int -> Int -> Bool)) -> ([] Int) -> [] Int) (\a -> head (seq a (seq a ([]::[] (Bool -> [] Int)))) (seq a (\b -> False) (id (undefined::[] Int)))) (take (id (undefined::Int)) ((\a -> seq a (undefined::[] (Int -> Int -> Bool))) True))
id
id
(undefined::([] Int) -> [] Int)
\a -> a
\a -> a
id
\a -> (\b -> seq a ((++) (map (seq a (undefined::Bool -> Int)) (seq b ([]::[] Bool))) a)) (seq a ((undefined::Int -> ([] Int) -> [] ([] Int)) ((+1) (seq a (undefined::Int)))))
\a -> filter (seq a ((\b -> \c -> seq a (\d -> b)) (seq a (undefined::Bool)) ((\b -> seq b (seq a 1)) (odd 0)))) ([]::[] Int)
\a -> a
(!!) ((\a -> seq a (seq a (seq a (undefined::Int -> [] (([] Int) -> [] Int)))) (id (seq a a))) ((!!) (undefined::[] ((([] Int) -> Int) -> Int)) (undefined::Int) ((!!) (undefined::[] (([] Int) -> Int)) (undefined::Int)))) (head (take ((+) (undefined::Int) 2) ([]::[] Int)))
(\a -> seq a (seq a (seq a (undefined::([] (Int -> [] Int)) -> ([] Int) -> [] Int))) (map (\b -> id (undefined::Int -> [] Int)) (tail (undefined::[] Int)))) (undefined::(([] Int) -> ([] (([] Int) -> [] (([] Int) -> Bool))) -> Bool) -> Int)
id (\a -> head (seq a (seq a (\b -> seq b (undefined::Bool -> [] (([] Int) -> [] Int)) (seq b (undefined::Bool))) (map (\b -> seq a (seq a (undefined::Bool))))))) ((!!) (id ([]::[] (([] (Bool -> Bool)) -> [] (Bool -> Bool)))) ((\a -> seq a ((+1) 2)) (undefined::Int -> Int)))
\a -> id (undefined::(Bool -> Int -> Int) -> [] Int) (\b -> (\c -> seq c (id (undefined::(Int -> Bool) -> Int -> Int))) (seq b (undefined::[] ([] Bool))) (head ([]::[] (Bool -> Int -> Bool)) b))
\a -> (\b -> seq b (seq b (\c -> a)) (map (seq b ((==)::[Int] -> [Int] -> Bool)))) (head (undefined::[] ([] ([] (Int -> Int)))))
(\a -> seq a (seq a (undefined::(([] Int) -> Int -> Bool) -> ([] Int) -> [] Int)) (case1 (\b -> (undefined::([] Int) -> Int -> Bool)) (seq a (\b -> False)))) (\a -> head)
\a -> (++) (seq a ((undefined::(([] ([] Int)) -> [] Int) -> Bool -> [] Int) (seq a (\b -> ([]::[] Int)))) ((undefined::(Int -> Int) -> Bool) (seq a (undefined::Int -> Int)))) ((undefined::(([] Int) -> [] Int) -> [] Int) (\b -> seq b (seq a (\c -> seq b ([]::[] Int)) (seq b (seq b 1)))))
(\a -> seq a (undefined::([] (([] ([] Bool)) -> Int)) -> ([] Int) -> [] Int)) ((\a -> a) False) ((\a -> seq a ((undefined::(([] Int) -> Int) -> [] (([] ([] Bool)) -> Int)) (\b -> a))) ((+1) ((\a -> seq a (undefined::Int)) ((+1) (undefined::Int)))))
(undefined::Bool -> ([] Int) -> [] Int) ((\a -> head (seq a ([]::[] ((([] Int) -> [] Int) -> Bool)))) (\a -> a) (\a -> case1 (undefined::Bool -> ([] Bool) -> [] Int) a (seq a ([]::[] Bool))))
(\a -> \b -> seq a b) (head ([]::[] ([] (([] (([] Int) -> Int -> Int -> [] Int)) -> ([] Int) -> Bool))))
(\a -> (!!) (seq a (seq a ([]::[] (Bool -> ([] Int) -> [] Int)))) 1) (\a -> a) ((\a -> seq a ((!!) ([]::[] Bool) (head ([]::[] Int)))) (id (\a -> (undefined::Bool)) (undefined::Bool -> [] ([] ([] Bool)))))
(\a -> seq a (seq a (\b -> case1 (:) (seq a (undefined::[] Int))))) (case1 (undefined::Int -> ([] Int) -> Int) (undefined::Int) ([]::[] Int)) (\a -> (\b -> take b (seq a (undefined::[] (Int -> Int)))) (head (seq a (undefined::[] ((Int -> Bool) -> Int))) (\b -> seq b (seq b (seq a (undefined::Bool))))))
(\a -> seq a ((++) (undefined::[] Int))) (map (\a -> (undefined::Int -> Bool)))
(undefined::(([] Int) -> ([] (([] ([] ([] Int))) -> [] ([] Bool))) -> Int -> Int) -> ([] Int) -> [] Int) (undefined::([] Int) -> ([] (([] ([] ([] Int))) -> [] ([] Bool))) -> Int -> Int)
(\a -> seq a (\b -> id)) ((undefined::([] (([] Int) -> Int)) -> Int) ([]::[] (([] Int) -> Int))) ((||) ((\a -> seq a (seq a (undefined::Bool))) (\a -> seq a ([]::[] Bool))) (case1 (\a -> (undefined::([] Int) -> Bool)) False (undefined::[] Int)))
\a -> seq a (seq a (\b -> seq b (\c -> c (seq c (undefined::Int)) True) (seq a (\c -> (undefined::Bool -> Bool -> [] Int) (seq c (seq a (undefined::Bool))))))) ((\b -> \c -> seq b (seq b (seq b (tail (seq c (undefined::[] (([] Int) -> [] Int))))))) (seq a (seq a (\b -> seq b a))))
(\a -> seq a (\b -> map (seq b (\c -> id (c (seq b b)))) ((\c -> seq a (seq c ([]::[] (([] Int) -> Int)))) (\c -> seq b True)))) (map ((!!) (undefined::[] ((([] Bool) -> [] Bool) -> ([] Bool) -> [] Bool)) 0))
case1 (\a -> (undefined::([] (([] Bool) -> [] Bool)) -> ([] Int) -> [] Int)) (\a -> a) ([]::[] (([] Bool) -> [] Bool))
(!!) ((\a -> seq a (\b -> (undefined::[] (([] Int) -> [] Int))) (seq a (seq a (seq a False)))) (id ((\a -> seq a (seq a 2)) True))) (case1 (\a -> (undefined::([] Bool) -> Bool -> Int)) (undefined::Bool -> Int) ([]::[] Bool) ((!!) ([]::[] (Int -> Bool)) 2 2))
case1 (\a -> seq a (\b -> \c -> seq c (\d -> b))) ((\a -> seq a (:)) ([]::[] Int)) ((undefined::([] ([] Bool)) -> [] Int) (undefined::[] ([] Bool))) (undefined::Int)
case1 ((\a -> head ((undefined::Bool -> [] (Int -> ([] Int) -> [] Int)) (seq a (seq a True)))) ((\a -> \b -> seq a (seq a ([]::[] (Int -> Bool)))) (take (undefined::Int) (undefined::[] ([] Bool))))) (map ((undefined::(Int -> [] Int) -> Int -> Int) (\a -> id (undefined::[] Int))) ((\a -> seq a (seq a (undefined::[] Int))) False))
\a -> a
\a -> case1 (seq a (undefined::Bool -> ([] Bool) -> [] Int)) a (tail (case1 (seq a (:)) (seq a (undefined::[] Bool)) (seq a (undefined::[] Bool))))
(\a -> (!!) (seq a (seq a (seq a (seq a (undefined::Bool -> [] (([] Int) -> [] Int))) (seq a (seq a (undefined::Bool)))))) (seq a (seq a ((\b -> seq b 0) (seq a (seq a ([]::[] Bool))))))) (id (\a -> seq a (seq a (seq a (id (id (undefined::Int -> ([] Int) -> Bool)))) (seq a (undefined::Int)))))
(\a -> seq a ((:) (seq a (head ((\b -> seq b (undefined::[] Int)) (seq a (seq a (undefined::Bool)))))))) (\a -> \b -> seq b (undefined::([] (Int -> Int -> Int)) -> [] (Bool -> Bool)) (filter (seq b (\c -> (undefined::Bool))) (undefined::[] (Int -> Int -> Int))))
\a -> a
\a -> a
(\a -> \b -> seq b (seq b (seq a (seq b (seq b (undefined::Int -> Bool -> [] Int) (seq a (undefined::Int))))) (seq a (seq b (\c -> a)) (seq a (head b))))) ((undefined::(Int -> Int) -> Int -> Bool) (\a -> seq a (seq a (seq a a))) 2)
\a -> a
(\a -> (\b -> seq b (seq a (\c -> (undefined::([] Int) -> [] Int)))) (seq a (seq a (seq a 2)))) ((:) (undefined::[] (Bool -> Bool)) ((!!) (undefined::[] ([] ([] (Bool -> Bool)))) 0)) ((!!) ([]::[] (Int -> [] ([] Bool))) ((+1) 0) ((undefined::(([] Int) -> [] Int) -> Int) (\a -> a)))
\a -> (\b -> (++) (id (\c -> a) (\c -> \d -> seq b False)) (id (\c -> a) (seq b (seq b (seq b (undefined::[] ([] (Int -> Bool)))))))) (seq a (seq a (seq a (seq a (\b -> id (undefined::(([] Bool) -> Bool) -> Bool) (seq a (\c -> (undefined::Bool))))) (\b -> seq b (seq b ((undefined::Bool -> [] ([] (Int -> Bool))) (seq a (undefined::Bool))))))))
(\a -> (++) (seq a (seq a (seq a (\b -> seq b (seq b (a (undefined::[] (Int -> Bool -> Bool))))))) (\b -> (undefined::Bool -> [] (Bool -> Bool)) True))) ((\a -> (undefined::Int -> ([] (Int -> Bool -> Bool)) -> [] Int) a) ((undefined::(Int -> Int -> Int -> [] Int) -> Int) (id (\a -> (enumFromTo'::Int -> Int -> [Int])))))
\a -> take ((!!) a (seq a (seq a (seq a (undefined::Bool -> Int))) (seq a (head (undefined::[] Bool))))) a
case1 (\a -> \b -> seq a (seq b (\c -> \d -> seq a (undefined::[] Int))) (case1 (\c -> (undefined::([] Int) -> Bool)) (seq a (undefined::Bool)))) ((\a -> seq a (\b -> seq a (seq b (seq b (undefined::[] Int))))) (id (undefined::Int -> Int -> ([] Int) -> Bool) ((+1) 2))) (head ([]::[] (([] ([] Int)) -> [] ([] ([] (Int -> Int))))) (id (undefined::[] ([] Int))))
case1 (\a -> case1 (\b -> seq a (undefined::([] Int) -> [] Int)) (seq a (\b -> seq b (undefined::[] Int)) (id (seq a ([]::[] ([] (Bool -> Bool))))))) ((\a -> (enumFromTo::Int -> Int -> [Int]) (id (undefined::Int)) (seq a 1)) ((\a -> seq a (seq a (seq a (undefined::Bool)))) id))
(\a -> seq a (case1 (\b -> \c -> take (undefined::Int)) (seq a (undefined::([] Int) -> ([] Int) -> [] Int) (seq a ([]::[] Int))) (seq a (seq a (seq a (seq a (undefined::[] Int))))))) (\a -> (\b -> (!!) (head ([]::[] ([] ([] Bool)))) (seq b (seq b (undefined::Int)))) (seq a (seq a (\b -> seq a (undefined::Int -> ([] Int) -> [] Bool)))))
\a -> case1 (seq a (seq a (\b -> (undefined::([] (Bool -> Bool)) -> [] Int)))) ((enumFromTo::Int -> Int -> [Int]) (seq a (seq a (undefined::Int))) (seq a (seq a (seq a (undefined::Int))))) ((\b -> seq a (seq b (seq a (undefined::[] (Bool -> Bool))))) (seq a (undefined::([] Int) -> Bool -> Bool) (seq a (seq a a))))
(undefined::Bool -> ([] Int) -> [] Int) (even ((undefined::(Bool -> Int -> Bool) -> Int) (undefined::Bool -> Int -> Bool)))
\a -> a
(undefined::(([] Int) -> [] (Int -> Bool)) -> Bool -> ([] Int) -> [] Int) (\a -> seq a (seq a ((undefined::([] ([] ([] ([] Bool)))) -> [] (Int -> Bool)) ([]::[] ([] ([] ([] Bool))))))) (id (undefined::(([] (([] ([] Bool)) -> [] ([] (Bool -> Bool)))) -> Int) -> Bool) (\a -> seq a (undefined::(([] ([] Int)) -> [] Int) -> Int) (\b -> seq a (seq a ([]::[] Int)))))
id
head (map (\a -> a (a (seq a (head ([]::[] ((Bool -> Bool) -> [] Int)) (\b -> (undefined::Bool)))) (seq a (\b -> seq b ([]::[] Int)) (\b -> seq b (\c -> c))))) ((undefined::Bool -> [] (([] Int) -> ([] Int) -> [] Int)) (((==)::[Int] -> [Int] -> Bool) (undefined::[] Int) (id (undefined::[] Int)))))
tail
(\a -> (!!) (map (id (undefined::Bool -> ([] Int) -> [] Int)) (tail (undefined::[] Bool))) (seq a 2)) (\a -> (undefined::Bool -> Int -> [] Int) (case1 (undefined::Bool -> ([] Bool) -> Bool) (seq a (undefined::Bool)) (seq a (undefined::[] Bool))))
\a -> a
(!!) ((\a -> (\b -> seq b (seq a (undefined::[] (([] Int) -> [] Int)))) (\b -> seq a False)) ((\a -> seq a ([]::[] (([] ([] Bool)) -> [] ([] Bool)))) (id (undefined::Int)))) (case1 (case1 (undefined::Int -> ([] Int) -> Int)) 0 (id (undefined::(([] Int) -> Bool -> Bool) -> [] Int) (\a -> seq a (\b -> seq a b))))
id (\a -> a)
(\a -> seq a (\b -> (undefined::[] Int))) 1
head (tail ([]::[] ((([] Int) -> [] ([] (([] ([] Bool)) -> [] ([] Bool)))) -> ([] Int) -> [] Int))) (\a -> seq a ((\b -> (undefined::Int -> [] ([] (([] ([] Bool)) -> [] ([] Bool)))) (seq b (seq b (seq a 0)))) (seq a ((++) (id (undefined::[] ([] Bool))) (seq a (seq a ([]::[] ([] Bool))))))))
tail
case1 (case1 (\a -> \b -> seq b (seq a (seq a (undefined::Int -> ([] Int) -> [] Int)))) take ([]::[] Bool)) ([]::[] Int)
\a -> ([]::[] Int)
(\a -> seq a (undefined::(([] Bool) -> Bool) -> ([] Int) -> [] Int)) ((\a -> seq a (seq a (seq a a))) (undefined::Int)) (\a -> seq a (seq a (seq a (head (head ([]::[] ([] ((([] Int) -> [] ([] Bool)) -> Bool)))) ((undefined::Bool -> ([] Int) -> [] ([] Bool)) (seq a False))))))
(undefined::Int -> (([] Int) -> [] (([] Int) -> Bool)) -> ([] Int) -> [] Int) ((\a -> head (seq a ([]::[] Int))) ([]::[] ([] ([] Int)))) (undefined::([] Int) -> [] (([] Int) -> Bool))
\a -> map (id (\b -> seq b (seq b (seq a (seq a (seq b (head (undefined::[] (Bool -> Int)))) (undefined::Bool)))))) (seq a (seq a (undefined::[] (([] ([] (([] Int) -> Int -> [] Int))) -> [] (Int -> ([] ([] Int)) -> [] Bool)))))
(\a -> (\b -> seq b ((undefined::Bool -> ([] Int) -> [] Int) (seq b a))) (seq a (map (undefined::(Bool -> Bool) -> [] (Int -> Int)) (head ([]::[] ([] (Bool -> Bool))))))) ((\a -> case1 (undefined::Bool -> ([] Bool) -> Bool) (undefined::Bool) (seq a ([]::[] Bool))) (id ([]::[] (([] (([] Int) -> ([] Int) -> [] Bool)) -> Bool -> Bool))))
(\a -> \b -> seq a (\c -> case1 (undefined::Bool -> ([] Bool) -> [] Int) ([]::[] Int) (undefined::[] Bool))) ((\a -> seq a (seq a (seq a (undefined::Bool)))) (undefined::Int -> [] (Int -> Bool))) ((\a -> seq a (\b -> \c -> seq c id) (seq a 2)) ((\a -> seq a (undefined::Int)) (\a -> \b -> seq a (seq b (undefined::[] Int)))))
(undefined::([] (([] ([] ([] Int))) -> [] ([] Bool))) -> ([] Int) -> [] Int) ((\a -> seq a ((undefined::Int -> [] (([] ([] ([] Int))) -> [] ([] Bool))) 0)) ((\a -> seq a (seq a (seq a ([]::[] ([] Int))))) (\a -> a)))
\a -> id (case1 (seq a (seq a take)) (seq a (undefined::[] Int)) (seq a ((undefined::([] ([] (([] Int) -> [] Int))) -> [] Int) (undefined::[] ([] (([] Int) -> [] Int))))))
\a -> a
(:) (undefined::Int)
\a -> head (seq a (seq a (seq a ([]::[] ((([] (([] Int) -> ([] Int) -> Bool)) -> ([] ([] Int)) -> [] Bool) -> [] Int))))) (\b -> \c -> seq a (\d -> head (undefined::[] (Int -> [] Bool)) (seq c (seq b (undefined::Int)))) (\d -> \e -> seq c (seq a (seq e (seq c (seq b (seq c ([]::[] Bool))))))))
(!!) ((undefined::Int -> [] (Int -> ([] Int) -> [] Int)) (head (undefined::[] Int))) ((\a -> seq a (seq a (seq a 2))) (undefined::([] Bool) -> ([] ([] Bool)) -> [] Bool)) 1
\a -> (undefined::[] Int)
id ((undefined::(([] Int) -> [] Int) -> ([] Int) -> [] Int) (\a -> seq a (\b -> (\c -> seq c (seq a a)) (seq b (seq a True))) (seq a (seq a (seq a (\b -> 0) ([]::[] Int))))))
filter (\a -> seq a (\b -> seq a (seq b ((==)::Int -> Int -> Bool))) (undefined::Int) ((!!) ([]::[] ((Int -> Int) -> Int)) a ((+) a)) (seq a (seq a (\b -> a) (\b -> (!!) (seq b (seq a (undefined::[] (Bool -> Bool)))) a))))
\a -> (\b -> \c -> seq a (\d -> seq b a) (seq c (tail (undefined::[] Bool)))) ((undefined::([] ([] (Bool -> Bool))) -> Int) (undefined::[] ([] (Bool -> Bool)))) (\b -> (\c -> id (seq c (seq b (\d -> (undefined::[] (([] Int) -> Bool))) (c (\d -> (undefined::Int -> Int -> Bool)))))) (undefined::(([] Int) -> Int -> Int -> Bool) -> Int))
(\a -> seq a (undefined::Bool -> Bool -> ([] Int) -> [] Int) (seq a False) (seq a (seq a (seq a (undefined::(Int -> Bool) -> Bool))) (seq a (id (undefined::Int -> Bool))))) (undefined::([] ([] ([] Bool))) -> ([] ([] Int)) -> ([] Int) -> Bool)
(\a -> (\b -> seq a ((undefined::(([] Bool) -> [] Bool) -> ([] Int) -> [] Int) (seq a (seq b (\c -> c))))) (\b -> not ((\c -> seq c (seq a False)) (undefined::[] ([] ([] Bool)))))) ((\a -> map (id (\b -> a))) ((undefined::(([] (([] Int) -> Int)) -> Bool) -> Bool) (\a -> True)))
\a -> (\b -> seq b (\c -> \d -> c) (undefined::[] Int) ((undefined::(([] Int) -> Int -> Int) -> [] ([] Int)) (\c -> \d -> (undefined::Int)))) (seq a (head (seq a (undefined::[] (([] Int) -> [] ([] Int))))))
tail
(\a -> (\b -> (!!) (seq b (seq a ([]::[] (([] Int) -> [] Int)))) (undefined::Int)) (seq a (head (seq a ([]::[] (Bool -> Int -> Int))) (seq a (seq a (seq a True)))))) (id (\a -> (\b -> seq b (id (undefined::(Int -> [] Int) -> [] ([] Bool))) (\c -> seq c (seq b ([]::[] Int)))) (seq a (seq a ((\b -> \c -> seq b ([]::[] (Bool -> Bool))) False)))))
id (\a -> \b -> seq a (case1 (seq b (seq a (seq b (undefined::Bool -> ([] Bool) -> [] Int)))) (a 1 1) (seq a (seq a (seq a ([]::[] Bool)))))) (\a -> seq a (\b -> seq a (\c -> seq c (undefined::Bool -> [] Int)) ([]::[] ([] Int)) (undefined::Bool)))
(\a -> \b -> (\c -> seq c (seq c (\d -> b)) (c (seq b 1))) (case1 (\c -> (undefined::([] Int) -> Int -> Bool)) (\c -> (undefined::Bool)) (seq a b))) ([]::[] (([] ([] ([] ([] Bool)))) -> Int -> Int))
head (case1 (\a -> seq a (seq a (head (undefined::[] (([] (([] Bool) -> Bool)) -> [] (([] Int) -> [] Int)))))) ((\a -> seq a (id ([]::[] (([] Int) -> [] Int)))) ((\a -> seq a (undefined::[] (Bool -> Bool))) (id ([]::[] Bool)))) ((undefined::(Int -> Int) -> [] (([] Bool) -> Bool)) ((!!) (tail (undefined::[] Int)))))
tail
(\a -> (\b -> \c -> (undefined::(([] Int) -> [] Int) -> [] Int) (seq a (seq b id))) (seq a True)) (\a -> tail (seq a (id (id (undefined::(([] Int) -> [] ([] Bool)) -> [] Int))) (undefined::([] Int) -> [] ([] Bool))))
id (\a -> (undefined::Bool -> ([] Int) -> [] Int)) (map (id (undefined::([] (Int -> Int)) -> [] Bool)) (undefined::[] ([] (Int -> Int)))) ((\a -> (\b -> b (tail (undefined::[] Int))) (seq a (seq a (\b -> seq b a)))) (id (\a -> (undefined::Bool)) (\a -> \b -> even (undefined::Int))))
(undefined::(([] ([] ([] (Int -> [] Int)))) -> [] (Int -> [] (Int -> [] Int))) -> ([] Int) -> [] Int) (\a -> ([]::[] (Int -> [] (Int -> [] Int))))
(\a -> \b -> seq a (\c -> c)) (\a -> \b -> seq a (\c -> seq a (undefined::Int)) (seq a (\c -> c))) ((+1) 0)
filter ((\a -> (!!) ((\b -> seq a (seq b (undefined::[] (Int -> Bool)))) (seq a (seq a (undefined::Int)))) (seq a (seq a ((\b -> b) (seq a (seq a 0)))))) (filter ((\a -> seq a (\b -> a)) (undefined::Bool)) ((undefined::Int -> [] (([] Int) -> [] (Bool -> Bool))) (undefined::Int))))
(\a -> \b -> seq b (\c -> seq c (\d -> ([]::[] Int))) id (((==)::Int -> Int -> Bool) (seq a 0) 1)) (\a -> (+1) (seq a (head (seq a (seq a (seq a (\b -> seq a ([]::[] Int)))) (\b -> seq a (seq a (seq b (tail ([]::[] ([] Int))))))))))
head (undefined::[] (((Int -> Bool) -> [] (([] (([] Bool) -> [] Bool)) -> Int)) -> ([] Int) -> [] Int)) ((!!) ([]::[] ((Int -> Bool) -> [] (([] (([] Bool) -> [] Bool)) -> Int))) ((\a -> seq a (seq a 2)) ([]::[] Int)))
\a -> a
\a -> a
\a -> map (\b -> seq b (head (seq b (seq b ([]::[] (((Bool -> Bool) -> Int -> Bool) -> Int))))) (\c -> id (seq a (\d -> c (c (undefined::Bool)))))) (undefined::[] (([] Int) -> [] ([] Bool)))
\a -> (\b -> (undefined::(Int -> Bool) -> Int -> [] Int) (undefined::Int -> Bool) b) ((\b -> (\c -> seq c 2) (seq b (undefined::[] ([] (Int -> Int))))) ((undefined::([] ([] (Int -> Int))) -> [] ([] Int)) (seq a (seq a (seq a ([]::[] ([] (Int -> Int))))))))
id (undefined::([] Int) -> [] Int)
tail
(\a -> \b -> head (undefined::[] (Int -> ([] Int) -> [] Int)) a) (case1 (\a -> \b -> 1) 2 (undefined::[] Bool)) ((undefined::Bool -> Bool -> ([] Int) -> Int -> Int) False ((!!) ([]::[] ((Bool -> Bool) -> Bool)) 2 (\a -> a)))
case1 (\a -> \b -> \c -> c) (\a -> seq a (seq a (undefined::(Int -> Bool) -> [] Int)) (seq a (\b -> (undefined::Int -> Bool)) (seq a (seq a (undefined::Int))))) (id (head (undefined::[] (Bool -> [] (([] Int) -> Int))) ((undefined::Int -> Bool) 0)))
tail
\a -> id (\b -> ([]::[] Int)) ((\b -> (\c -> seq b (seq a (seq c (undefined::[] ([] Bool))))) (seq b (id (undefined::Int)))) ((\b -> seq b (seq b (\c -> ([]::[] ([] Bool))))) (head (seq a ([]::[] Bool)))))
case1 ((undefined::Int -> Bool -> ([] Bool) -> ([] Int) -> [] Int) (id ((+1) (undefined::Int)))) (id (\a -> seq a (\b -> (undefined::[] Int))) ((\a -> seq a (undefined::[] (Int -> Bool))) ((+) (undefined::Int)))) ((undefined::(([] ([] Int)) -> [] Bool) -> [] Bool) (\a -> seq a (undefined::(Bool -> Bool) -> [] Bool) (\b -> b)))
\a -> seq a a
(\a -> \b -> \c -> seq a (\d -> ([]::[] Int))) (undefined::Bool) ((\a -> seq a (seq a (seq a (undefined::Bool)))) ((+1) (undefined::Int))) ((undefined::(([] ([] Int)) -> [] Bool) -> Bool -> Int) (undefined::([] ([] Int)) -> [] Bool) (head (undefined::[] Bool)))
\a -> (\b -> head (seq b (seq b ([]::[] ((([] Int) -> ([] Bool) -> [] Bool) -> [] Int)))) (seq a (\c -> seq b (\d -> tail)) (undefined::Int))) (\b -> map (head (seq b (seq b (seq a (seq a ([]::[] (([] (([] ([] ([] Bool))) -> [] ([] Bool))) -> Int -> [] Int))))))))
\a -> a
\a -> (\b -> seq b (seq b a)) (\b -> id (undefined::Int))
\a -> ([]::[] Int)
\a -> seq a a
case1 (undefined::Int -> ([] Int) -> ([] Int) -> [] Int) tail ((\a -> id (undefined::Bool -> [] Int) (seq a False)) ([]::[] ([] ([] ([] ([] Bool))))))
\a -> seq a (id (\b -> seq a (undefined::(([] Bool) -> Bool) -> Bool -> [] Int) (\c -> seq c (seq a (undefined::Bool)))) (seq a (undefined::([] ([] ([] Int))) -> [] ([] ([] Bool)))) (((==)::Int -> Int -> Bool) ((+1) ((\b -> seq b b) (undefined::Int))) 2))
\a -> a
tail
take ((\a -> seq a (seq a (seq a (seq a (\b -> head (seq b (undefined::[] Int)))))) (seq a (\b -> seq a (seq b (undefined::Int -> ([] Int) -> Bool))) (tail (seq a (undefined::[] Int))))) (head (undefined::[] ((([] Int) -> [] (Bool -> Bool)) -> Bool)) (\a -> seq a (undefined::[] (Bool -> Bool)))))
id (\a -> id (seq a (undefined::([] (Int -> Int)) -> ([] Int) -> [] Int)) (seq a (seq a (seq a (seq a (undefined::(Bool -> Bool) -> [] (Int -> Int))) ((&&) True))))) (undefined::([] ([] Int)) -> [] ([] ([] Bool)))
(undefined::Bool -> (Int -> [] Int) -> ([] Int) -> [] Int) ((\a -> seq a (seq a (seq a True))) ((+1) (undefined::Int))) ((\a -> seq a (\b -> \c -> seq b ([]::[] Int))) (head (undefined::[] Int)) ((\a -> seq a (undefined::Int)) not))
(\a -> \b -> seq a b) ((undefined::Int -> (([] Int) -> [] (Bool -> Bool)) -> Bool) 1 (undefined::([] Int) -> [] (Bool -> Bool)))
take ((\a -> seq a ((undefined::([] (Int -> Bool)) -> Bool -> Int) (seq a (undefined::[] (Int -> Bool))) (head (seq a (undefined::[] (([] (Int -> Int)) -> Bool))) (undefined::[] (Int -> Int))))) ((\a -> (undefined::Bool -> ([] Int) -> [] Bool) (not (seq a True))) ((!!) (tail (undefined::[] Int)) 2)))
\a -> a
(undefined::([] Int) -> [] Int)
\a -> case1 (seq a (seq a (\b -> \c -> seq b tail)) (map (undefined::([] Int) -> Int) (tail ([]::[] ([] Int))))) a a
\a -> id (\b -> a) (undefined::([] (([] Int) -> Int)) -> ([] (Int -> Int)) -> Int -> Int)
id
\a -> id a
\a -> a
case1 ((undefined::Bool -> Bool -> ([] Bool) -> ([] Int) -> [] Int) (odd ((+1) 1))) ((\a -> head (seq a ([]::[] (([] Int) -> [] Int)))) (\a -> (\b -> seq b (undefined::[] Int)) (even 1))) ((\a -> seq a (undefined::Int -> [] Bool)) (id 0) 2)
\a -> a
\a -> (\b -> map (\c -> seq c (\d -> seq d (undefined::Int)) (seq c (seq a (undefined::Bool)))) (seq a (take b (seq b (undefined::[] (Int -> Int -> [] Int)))))) (case1 (undefined::Bool -> ([] Bool) -> Int) (seq a (undefined::Int)) (seq a (seq a (undefined::Int -> [] Bool)) (seq a (seq a (undefined::Int)))))
\a -> a
\a -> a
\a -> (!!) (undefined::[] ((Int -> Int -> [] Int) -> [] Int)) ((undefined::Int -> Int) 2) (\b -> seq a (undefined::Int -> [] Int))
tail
\a -> a
(\a -> \b -> seq b (seq a (\c -> b)) (undefined::([] Int) -> ([] ([] Int)) -> [] Bool)) (\a -> seq a (undefined::(([] Int) -> [] Int) -> Bool -> Bool) (seq a (take (seq a 2))))
\a -> map (id (id (id (\b -> b (id (seq a ([]::[] (Int -> Int)))) (seq b (seq b (seq a 0))))))) (seq a (filter (\b -> odd (b (seq a ([]::[] (Int -> Int))) (seq b (undefined::Int)))) (seq a (id (seq a (seq a ([]::[] (([] (Int -> Int)) -> Int -> Int))))))))
case1 ((undefined::Bool -> Int -> Int -> ([] Int) -> [] Int) True (id ((\a -> seq a (seq a 2)) (undefined::Bool)))) (head (tail (id ((undefined::Int -> [] ([] Int)) ((\a -> seq a 1) (not (undefined::Bool)))))))
head ((\a -> (!!) (undefined::[] ([] (Int -> ([] Int) -> [] Int))) (seq a (seq a (undefined::Int)))) (\a -> (\b -> seq b (seq a (undefined::[] Int))) (seq a (seq a (seq a False))))) (case1 (\a -> \b -> seq b (seq a (undefined::Int))) (undefined::Int) ((undefined::Int -> [] Bool) (id (undefined::Int))))
(\a -> case1 (\b -> \c -> \d -> (undefined::[] Int)) (case1 (undefined::Int -> ([] Int) -> [] Int) ([]::[] Int)) ((\b -> seq b ([]::[] Int)) (seq a True))) (\a -> \b -> (!!) (undefined::[] (Bool -> (Bool -> Bool) -> Bool)) 1 (((==)::Int -> Int -> Bool) 0 (undefined::Int)) (case1 (seq b (undefined::Bool -> ([] Bool) -> Bool -> Bool)) (seq b id) (seq a (undefined::[] Bool))))
id (undefined::([] (([] Int) -> [] Int)) -> ([] Int) -> [] Int) (tail ((\a -> (\b -> seq a (seq b (undefined::[] (([] Int) -> [] Int)))) 1) ((\a -> seq a (seq a (undefined::[] (([] Bool) -> [] Bool)))) (undefined::([] Int) -> Int))))
(++) ((\a -> seq a (\b -> \c -> seq c (undefined::[] Int)) (seq a ((!!) ([]::[] Bool))) True) (undefined::([] (([] Int) -> Int -> Bool)) -> ([] Int) -> [] (([] ([] Int)) -> [] (([] Int) -> Bool))))
\a -> a
case1 ((\a -> seq a (\b -> id (\c -> id))) True) (\a -> map (seq a (\b -> seq b (seq a 1))) (seq a (seq a (seq a (undefined::[] (([] Int) -> [] (Int -> Bool))))))) ((\a -> seq a (seq a (seq a (seq a ([]::[] Bool))))) (\a -> seq a (\b -> (undefined::Int)) (undefined::Bool)))
head (undefined::[] ((([] (([] ([] Int)) -> [] (([] Int) -> Bool))) -> ([] Int) -> [] Bool) -> ([] Int) -> [] Int)) (id (\a -> (\b -> (!!) (seq a (undefined::[] (([] Int) -> [] Bool))) b) (seq a (\b -> seq a (undefined::Int)) (id (seq a ([]::[] Bool))))))
\a -> seq a (undefined::[] Int)
\a -> seq a (seq a a)
\a -> (!!) (map ((\b -> \c -> seq b (undefined::[] Int)) (undefined::Int)) (undefined::[] (Int -> Bool -> Bool))) ((+1) (seq a ((undefined::Bool -> Int) (not False))))
tail
\a -> a
\a -> seq a a
(\a -> seq a (undefined::Int -> Bool -> ([] Int) -> [] Int)) (undefined::Int) ((\a -> seq a (id a)) 1) (even 0)
\a -> a
\a -> a
(\a -> seq a (undefined::([] Int) -> [] Int)) (undefined::Int -> ([] Int) -> Bool)
(undefined::(([] Int) -> [] ([] Bool)) -> ([] Int) -> [] Int) ((\a -> seq a (undefined::([] Int) -> [] ([] Bool))) (\a -> \b -> (undefined::Int -> Bool) (seq b (seq a (seq b a)))))
\a -> (undefined::(([] Int) -> ([] (Int -> [] Bool)) -> [] (Int -> [] Bool)) -> [] Int) (seq a (seq a (\b -> \c -> map (undefined::(Bool -> Bool) -> Int -> [] Bool) (seq c (seq a (seq c (undefined::Bool -> [] (Bool -> Bool))) True)))))
\a -> seq a (seq a (\b -> seq b (seq a ((:) ((undefined::Bool -> Int) (seq a (undefined::Bool))) ([]::[] Int))))) (\b -> tail)
\a -> (\b -> (\c -> head (seq c (undefined::[] (Bool -> [] Int)))) (seq b (head ([]::[] Bool)))) (seq a (seq a ((+1) (undefined::Int)))) (case1 (seq a (\b -> \c -> not (undefined::Bool))) False (seq a ((++) (undefined::[] (Bool -> Bool)) ([]::[] (Bool -> Bool)))))
(\a -> \b -> (\c -> seq c (seq b (seq a (undefined::([] Bool) -> [] Int))) (seq b (seq c (seq a (undefined::[] Bool))))) (head (seq b ([]::[] (([] Bool) -> Int))) (undefined::[] Bool))) (id (\a -> id (undefined::[] (Int -> ([] Int) -> Int -> Int -> Bool))) (undefined::Bool))
(undefined::((([] (Int -> Bool)) -> Int -> Bool) -> Bool) -> ([] Int) -> [] Int) (\a -> (undefined::(([] Int) -> [] (([] Int) -> Bool)) -> Bool) ((undefined::Bool -> ([] Int) -> [] (([] Int) -> Bool)) (not (a (undefined::[] (Int -> Bool)) 0))))
\a -> a
(\a -> a) ((!!) (undefined::[] (([] Int) -> [] Int)) (id (\a -> (undefined::Int)) (\a -> (undefined::[] Bool))))
\a -> seq a ((\b -> seq b a) (seq a (\b -> (-))))
take (id ((\a -> (+1) (seq a ((!!) (undefined::[] ((Int -> ([] Int) -> Bool) -> Int)) 0 (head (seq a ([]::[] (Int -> ([] Int) -> Bool))))))) (\a -> seq a (tail (undefined::[] ((([] Int) -> Int -> [] Int) -> ([] Int) -> Int -> [] Int))))))
\a -> (\b -> seq a (seq b (seq a (\c -> a)) ((\c -> seq a (seq a (seq c (undefined::Int)))) ((!!) (undefined::[] (Bool -> ([] Int) -> [] Bool)) 2)))) (\b -> \c -> seq a (seq c (\d -> \e -> seq a (undefined::Int -> Bool)) 1) (seq a (seq a (seq a (\d -> True)) (seq a (seq b (undefined::[] (Bool -> Bool)))))))
tail
take (case1 (\a -> (!!) (seq a (seq a ([]::[] (([] (Bool -> Bool -> Bool)) -> Int)))) (head (seq a ([]::[] Int)))) 2 ((:) ((!!) (undefined::[] (Bool -> Bool -> Bool)) 2) ((++) ([]::[] (Bool -> Bool -> Bool)) ([]::[] (Bool -> Bool -> Bool)))))
\a -> (undefined::(([] Int) -> Int -> Int -> [] Int) -> [] Int) (seq a (\b -> \c -> (undefined::Int -> Int -> [] Int)) (seq a ((\b -> seq b (undefined::Bool)) a)))
id
(undefined::([] Int) -> [] Int)
\a -> a
\a -> case1 (\b -> case1 (undefined::Bool -> ([] Bool) -> [] Int) (seq b a)) ([]::[] Int) (seq a (map (undefined::((Int -> Int) -> Int -> Int) -> Bool)) (seq a (tail (seq a (undefined::[] ((Int -> Int) -> Int -> Int))))))
(\a -> \b -> seq b (\c -> b) (seq a (\c -> seq c (seq a (\d -> (undefined::([] Int) -> Bool)) (seq c True))))) (id (\a -> \b -> seq b (seq b (seq a (seq b (seq b ([]::[] (Bool -> Bool))))))) (map (\a -> \b -> a) (id ([]::[] ([] Bool)))))
(\a -> seq a (\b -> \c -> tail)) (undefined::Bool) ((\a -> seq a 1) (\a -> (undefined::Bool))) ((undefined::Int -> (([] ([] Bool)) -> [] Bool) -> Int) (head (undefined::[] Int)) (\a -> (:) (seq a (seq a False)) ([]::[] Bool)))
case1 (:) ((!!) ([]::[] (Int -> [] Int)) (undefined::Int) ((\a -> (+1) (seq a (undefined::Int))) ([]::[] Int)))
(\a -> (\b -> seq b (\c -> (undefined::Bool -> [] Int) (seq b (seq c True)))) (seq a (\b -> \c -> seq c (undefined::([] Bool) -> [] Bool)) True)) (undefined::[] (Int -> [] Int))
\a -> a
case1 (\a -> (undefined::([] Bool) -> ([] Int) -> [] Int)) ((undefined::([] Int) -> Int -> ([] Int) -> [] Int) ([]::[] Int) ((\a -> seq a 2) (head (undefined::[] ([] Bool))))) ([]::[] Bool)
id (\a -> seq a (seq a (\b -> tail))) (\a -> seq a ((\b -> seq a (seq b (undefined::Int))) (seq a False))) (take 1 (id (\a -> (undefined::[] Bool)) (undefined::Bool)))
(undefined::([] Int) -> [] Int)
(\a -> (undefined::(Int -> Int) -> Bool -> ([] Int) -> [] Int) (seq a (seq a (\b -> seq b 0))) (seq a ((\b -> b (b (undefined::Bool))) (seq a (seq a (seq a not)))))) (\a -> \b -> \c -> c)
\a -> a
(\a -> \b -> \c -> seq a (seq a (\d -> c)) (seq b (seq c (seq b (undefined::Int))))) ((undefined::Int -> ([] Int) -> Bool -> Bool -> Bool) ((+) 2 0)) (undefined::Bool)
\a -> head ((\b -> seq b (case1 (undefined::Int -> ([] Int) -> [] ([] Int)) (seq b (seq a (undefined::[] ([] Int)))) a)) (head ([]::[] ((Bool -> Bool -> Bool) -> [] Int)) (id (\b -> seq b (\c -> (undefined::Bool -> Bool)) 1))))
id
head (take ((+1) ((undefined::(([] ([] Int)) -> [] ([] Bool)) -> Int) (\a -> (undefined::Int -> [] ([] Bool)) (seq a (seq a (undefined::Int)))))) (map (\a -> seq a (seq a (\b -> (undefined::([] Int) -> [] Int)) (tail (undefined::[] ([] Int))))) ((undefined::Bool -> [] (([] Int) -> [] ([] Int))) True)))
\a -> a
(!!) ((\a -> seq a (map (undefined::Bool -> ([] Int) -> [] Int) (seq a (undefined::[] Bool)))) (even ((-) 0 (undefined::Int)))) ((undefined::Bool -> Int) ((\a -> a) (id False)))
take ((\a -> seq a id) (undefined::Int) ((+1) 1))
id (\a -> \b -> id) (\a -> seq a (seq a (\b -> seq b ([]::[] Bool)) (head (seq a (undefined::[] Int))))) ((\a -> seq a (seq a (\b -> True)) a) ((undefined::Int -> Bool) 0))
case1 ((\a -> seq a (\b -> \c -> seq a (seq c id))) ((\a -> seq a (undefined::Int)) (((==)::[Int] -> [Int] -> Bool) ([]::[] Int)))) (\a -> a) (id (\a -> ([]::[] Bool)) (\a -> (\b -> seq b ([]::[] Bool)) (seq a (seq a 2))))
(\a -> \b -> take (seq b ((undefined::([] Bool) -> Int) (seq a (seq a ([]::[] Bool))))) (seq b ((undefined::([] Bool) -> [] Int) (seq a (undefined::[] Bool))))) (\a -> (undefined::Int -> [] (Int -> ([] Int) -> Int -> Int -> Int)) (seq a (head (seq a (seq a (seq a (id (undefined::[] Int))))))))
tail
id (undefined::(([] Int) -> ([] Int) -> [] ([] Int)) -> ([] Int) -> [] Int) ((\a -> \b -> seq a (seq a (\c -> (undefined::([] Int) -> [] ([] Int)))) (undefined::[] Bool)) ((\a -> id (seq a (undefined::Int))) (undefined::[] (Int -> Int))))
head (id ([]::[] ((([] (([] Int) -> ([] ([] Int)) -> [] Bool)) -> [] Int) -> ([] Int) -> [] Int))) (head (take ((\a -> seq a (seq a 1)) (tail ([]::[] Bool))) (undefined::[] (([] (([] Int) -> ([] ([] Int)) -> [] Bool)) -> [] Int))))
(\a -> seq a ((undefined::(([] ([] Int)) -> [] (([] Int) -> Bool)) -> ([] Int) -> [] Int) (\b -> ([]::[] (([] Int) -> Bool))))) (\a -> head (seq a (seq a (seq a (undefined::[] ([] ((([] Int) -> [] ([] Int)) -> ([] Int) -> [] ([] Int))))))))
(\a -> seq a (\b -> (undefined::Bool -> [] Int) ((\c -> seq c (seq a True)) (head ([]::[] ([] Bool)))))) ((\a -> seq a ((undefined::Bool -> ([] ([] ([] Bool))) -> [] ([] ([] Bool))) (seq a (seq a (seq a (undefined::Bool)))))) ((undefined::Bool -> Int) (id False)))
\a -> a
(undefined::(([] (([] Int) -> [] (Int -> [] Int))) -> ([] Int) -> [] (Bool -> Bool)) -> ([] Int) -> [] Int) (\a -> \b -> seq a (seq b (undefined::Int -> [] (Bool -> Bool)) 2))
(++) (case1 ((\a -> (!!) (seq a (seq a ([]::[] (([] Int) -> [] Int))))) ((\a -> seq a 2) (not (undefined::Bool)))) (id (\a -> seq a (seq a ([]::[] Int))) (id (+1) 1)) ((undefined::(Int -> Bool) -> Int -> [] Int) (\a -> seq a (undefined::Bool)) ((\a -> seq a 2) False)))
\a -> seq a a
(\a -> (\b -> \c -> map (id (undefined::(Int -> Int) -> Int)) (seq b ([]::[] (Int -> Int)))) ((!!) (undefined::[] ((([] Bool) -> Bool) -> Bool)) 0 (seq a (\b -> a)))) (undefined::Bool)
\a -> ([]::[] Int)
\a -> id ((\b -> case1 (\c -> (undefined::([] Bool) -> Bool -> [] Int)) (seq b (undefined::Bool -> [] Int)) (seq a ([]::[] Bool))) (\b -> (undefined::[] ([] (Int -> Bool))))) True
\a -> a
\a -> (\b -> seq a ((undefined::([] ([] (Int -> Int))) -> [] Int) ((\c -> seq a (seq a (seq c ([]::[] ([] (Int -> Int)))))) (seq b (odd 0))))) (\b -> seq b (seq a (\c -> seq b (seq a (undefined::Int -> [] (Int -> Bool)) 1))) (\c -> ((==)::[Int] -> [Int] -> Bool) a a))
(undefined::Int -> Bool -> ([] Int) -> [] Int) ((\a -> seq a (seq a (seq a 1))) (undefined::Bool)) ((\a -> seq a ((\b -> seq b (undefined::Bool)) (undefined::Int))) ((\a -> seq a (undefined::Int)) (head (undefined::[] Int))))
(!!) (tail ([]::[] (([] (Int -> [] Int)) -> ([] Int) -> [] Int))) ((undefined::(([] ([] ([] Int))) -> [] ([] Bool)) -> Int) (\a -> (undefined::[] ([] Bool)))) ((:) (id (\a -> (undefined::Int -> [] Int)) (tail (undefined::[] (Bool -> Bool)))) ([]::[] (Int -> [] Int)))
(undefined::(Int -> Int -> [] Bool) -> ([] Int) -> [] Int) (undefined::Int -> Int -> [] Bool)
\a -> a
\a -> ([]::[] Int)
take ((\a -> seq a (head ([]::[] (Bool -> Bool -> Int))) a a) ((undefined::Int -> (([] Int) -> [] (Bool -> Bool)) -> Bool) (undefined::Int) (undefined::([] Int) -> [] (Bool -> Bool))))
map (\a -> seq a (\b -> 0) ((+) a (seq a a)))
\a -> a
\a -> seq a a
(!!) ([]::[] (Bool -> ([] Int) -> [] Int)) (case1 (undefined::([] Int) -> ([] ([] Int)) -> Int) (undefined::Int) ([]::[] ([] Int))) ((undefined::(([] ([] Int)) -> [] (([] ([] Int)) -> [] ([] Bool))) -> Bool) (undefined::([] ([] Int)) -> [] (([] ([] Int)) -> [] ([] Bool))))
head (map (\a -> (undefined::([] Int) -> [] Int)) (map (\a -> seq a (undefined::([] ([] ([] Bool))) -> [] ([] Bool))) ((:) (undefined::Bool) (undefined::[] Bool))))
id
\a -> seq a (\b -> (\c -> map (\d -> 1) (seq b (seq c a))) (tail (seq b (seq b (seq b (seq a (seq a (undefined::[] ([] (Int -> Int)))))))))) (\b -> seq a (case1 (\c -> \d -> seq d (seq a ([]::[] (([] Int) -> Bool -> Bool -> Bool)))) ((!!) ([]::[] ([] (([] Int) -> Bool -> Bool -> Bool))) ((+1) (undefined::Int)))))
\a -> a
case1 ((\a -> seq a (seq a (\b -> (undefined::Bool -> ([] Int) -> [] Int) (seq a (seq b (undefined::Bool)))))) ((\a -> seq a (tail (undefined::[] (([] Int) -> [] Int)))) 1)) (map (head ([]::[] ((([] Int) -> Int -> Bool) -> Int))) ((\a -> seq a (undefined::[] (([] Int) -> Int -> Bool))) (undefined::Int)))
\a -> seq a (seq a (\b -> (!!) (seq b (seq b ([]::[] ([] Int)))) (head (seq a (undefined::Bool -> [] Int) (seq b (undefined::Bool)))))) (\b -> (\c -> \d -> seq c (seq c (\e -> (undefined::[] Bool)) (seq a (seq a (undefined::Int))))) id)
(undefined::([] Int) -> [] Int)
case1 (\a -> \b -> seq b (undefined::Int -> Int -> ([] Int) -> [] Int) ((+1) (undefined::Int)) (seq b (seq a (seq b 0)))) (\a -> seq a (\b -> (undefined::Bool -> [] Int)) (seq a False) (seq a (((==)::Int -> Int -> Bool) 2 (undefined::Int)))) (head (undefined::[] ((([] Int) -> Bool) -> [] ([] (Bool -> Bool)))) (\a -> seq a (seq a (seq a (seq a (undefined::Bool))))))
\a -> seq a (map (\b -> id ((\c -> seq c (\d -> (undefined::Int))) 2 True)) (undefined::[] ([] (([] ([] Bool)) -> [] ([] Bool)))))
id ((\a -> (\b -> seq b (seq a (seq b (undefined::Bool -> ([] Int) -> [] Int)))) (undefined::[] ([] Int)) (undefined::Bool)) (\a -> \b -> case1 (\c -> head (seq b ([]::[] (([] Int) -> [] ([] ([] Bool)))))) ([]::[] ([] ([] Bool))) a))
(undefined::Bool -> (Int -> Int -> Bool) -> ([] Int) -> [] Int) (case1 (\a -> \b -> (undefined::Bool)) (undefined::Bool) (undefined::[] ([] Int))) (undefined::Int -> Int -> Bool)
(\a -> seq a (\b -> seq b (\c -> \d -> (undefined::[] Int)) (seq a (seq b (undefined::Int))))) (case1 (undefined::([] Bool) -> ([] ([] Bool)) -> Bool) (undefined::Bool) ([]::[] ([] Bool))) (\a -> ([]::[] ([] Int)))
\a -> a
head (id (undefined::[] (Int -> (Bool -> Bool) -> ([] Int) -> [] Int))) (case1 (\a -> seq a (undefined::([] Bool) -> Int)) (undefined::Int) (undefined::[] Bool)) (head (case1 (\a -> \b -> seq b (seq b (undefined::[] (Bool -> Bool)))) (undefined::[] (Bool -> Bool)) ([]::[] Bool)))
id (\a -> a)
\a -> seq a (\b -> case1 (\c -> (undefined::([] Bool) -> Int -> [] Int)) (seq b (undefined::Int -> [] Int)) ([]::[] Bool)) (\b -> (!!) (map (\c -> c) (seq a (undefined::[] (([] Int) -> Bool))))) (seq a (seq a ((\b -> seq b (\c -> c) (seq a ((+1) (undefined::Int)))) (seq a (\b -> False) (seq a (seq a (seq a (undefined::[] (Bool -> Bool)))))))))
id
\a -> a
(undefined::([] (Int -> [] Int)) -> Bool -> ([] Int) -> [] Int) (id (take (undefined::Int) (undefined::[] (Int -> [] Int)))) ((undefined::Int -> Bool -> Bool) (undefined::Int) (((==)::[Int] -> [Int] -> Bool) (undefined::[] Int) (tail ([]::[] Int))))
\a -> seq a (undefined::[] Int)
\a -> a
(undefined::(([] Int) -> Int -> [] Int) -> ([] Int) -> [] Int) ((\a -> \b -> \c -> seq c (undefined::Int -> [] Int) a) 1)
\a -> a
\a -> a
\a -> ([]::[] Int)
(\a -> (\b -> (!!) ([]::[] (Bool -> ([] Int) -> [] Int)) (undefined::Int) (seq a (b (undefined::Int) (undefined::Int)))) ((\b -> head (seq b ([]::[] (Int -> Int -> Bool)))) (seq a (id (undefined::([] Bool) -> Bool))))) (id (map (id (\a -> ([]::[] Bool)))))
\a -> seq a a
(undefined::((([] ([] Int)) -> [] ([] Bool)) -> [] ([] (Int -> Int))) -> ([] Int) -> [] Int) (undefined::(([] ([] Int)) -> [] ([] Bool)) -> [] ([] (Int -> Int)))
(undefined::([] ([] (Int -> Bool))) -> ([] Int) -> [] Int) ((\a -> map (\b -> seq a (undefined::[] (Int -> Bool))) (seq a ([]::[] Int))) (\a -> \b -> seq a (head (undefined::[] (Bool -> Bool))) (seq a (seq b True))))
(\a -> (\b -> \c -> seq b ((enumFromTo::Int -> Int -> [Int]) (undefined::Int) (seq a 0))) ((undefined::(Int -> Bool) -> Bool) (seq a (((==)::Int -> Int -> Bool) 0)))) (\a -> seq a ((!!) ([]::[] (Int -> ([] ([] Int)) -> [] ([] Bool))) (seq a 2)) ((undefined::Int -> Int) (seq a (seq a (seq a 0)))))
(\a -> seq a (undefined::(([] ([] Int)) -> [] ([] (Int -> Bool))) -> ([] Int) -> [] Int) (\b -> filter (seq b (\c -> seq b a)) (seq a (seq a ([]::[] ([] (Int -> Bool))))))) (case1 (\a -> seq a (undefined::([] Bool) -> Bool)) ((\a -> seq a a) True) ((\a -> seq a ([]::[] Bool)) (head (undefined::[] Bool))))
head (undefined::[] ((([] Int) -> Int -> Bool) -> ([] Int) -> [] Int)) (\a -> (undefined::Int -> Bool))
\a -> seq a a
id (\a -> seq a (seq a (\b -> filter (\c -> True)))) 1 (\a -> \b -> a)
(undefined::([] ([] (Int -> Int))) -> ([] Int) -> [] Int) (map (head ((\a -> seq a (undefined::[] (Bool -> [] (Int -> Int)))) ((+1) (undefined::Int)))) ((\a -> seq a (seq a ([]::[] Bool))) (odd 2)))
\a -> seq a (seq a (\b -> \c -> a)) (seq a ((\b -> seq b ([]::[] (Int -> Int))) (seq a (seq a (seq a (undefined::[] ([] (Int -> Int)))))))) (head ([]::[] (([] ([] Bool)) -> [] Bool)))
tail
\a -> id (seq a (id (\b -> \c -> seq a (seq b (undefined::[] Int))))) (seq a (seq a (seq a (seq a (undefined::(([] Int) -> Int) -> Int)) (\b -> id (undefined::Int))))) (head (seq a (\b -> (!!) ([]::[] ([] (([] Int) -> [] ([] Int)))) (id 2)) (((==)::[Int] -> [Int] -> Bool) a a)))
tail
head (id (undefined::[] (((([] Bool) -> [] (Bool -> Bool)) -> Int -> [] (Int -> Int)) -> ([] Int) -> [] Int))) (\a -> (undefined::Int -> [] (Int -> Int)))
(\a -> seq a (\b -> \c -> tail) (seq a (id (undefined::Int))) (seq a (seq a (seq a (seq a (undefined::Bool -> Int)) (seq a (seq a a)))))) True
(undefined::(([] ([] (Int -> Int))) -> ([] ([] Int)) -> [] Bool) -> ([] Int) -> [] Int) (\a -> (undefined::(([] ([] (([] Bool) -> Bool))) -> [] Bool) -> ([] ([] Int)) -> [] Bool) (\b -> map (((==)::Int -> Int -> Bool) (undefined::Int)) (seq a (seq a (undefined::[] Int)))))
tail
tail
\a -> map (\b -> (undefined::(([] Int) -> [] (Int -> [] Int)) -> Int) (\c -> (:) (\d -> c) (seq a (seq a (undefined::[] (Int -> [] Int)))))) (seq a (seq a ([]::[] ([] (([] ([] (Bool -> Bool))) -> Int -> Bool -> Bool)))))
\a -> (\b -> seq b (seq a (undefined::[] Int))) (seq a (undefined::Bool -> ([] Int) -> [] ([] Bool)) (seq a (case1 (\b -> (undefined::([] Int) -> Bool)) (seq a (undefined::Bool)) (undefined::[] Int))))
(\a -> seq a ((undefined::Bool -> Bool -> ([] Int) -> [] Int) (head (seq a ([]::[] Bool)))) False) ((undefined::(Bool -> Int) -> ([] ([] ([] Int))) -> [] ([] ([] Bool))) (case1 (\a -> seq a (undefined::([] Bool) -> Bool -> Int)) (\a -> seq a 0) ([]::[] Bool)))
\a -> seq a (\b -> (undefined::(Int -> Bool) -> [] Int)) (map ((!!) ([]::[] (Int -> Int))) (seq a (undefined::[] Int))) ((\b -> \c -> seq a ((\d -> d) (seq c (seq b False)))) (seq a (seq a (seq a ([]::[] (([] Bool) -> [] Bool))))))
\a -> a
\a -> a
id (\a -> (undefined::([] Int) -> Bool -> ([] Int) -> [] Int) (tail (seq a (undefined::[] Int))) ((\b -> seq b (seq a (undefined::Bool))) (seq a (seq a (seq a 2))))) (take ((undefined::Bool -> Int) (undefined::Bool)) ([]::[] (([] (([] Int) -> [] ([] Bool))) -> Int -> Int)))
(\a -> (++) ((++) (seq a (\b -> (undefined::[] Int)) (head ([]::[] Int))) ((\b -> seq a (seq b ([]::[] Int))) not))) (\a -> \b -> (+) (seq b (undefined::Int -> (([] Int) -> Int -> Int) -> Int) ((+1) (undefined::Int)) (seq a (seq a (undefined::([] Bool) -> ([] Int) -> Int -> Int) (id ([]::[] Bool))))))
id
(\a -> \b -> seq a (seq a take)) 2 (id ((\a -> seq a (seq a 0)) (undefined::Bool))) ((\a -> seq a (head (seq a (undefined::[] (Bool -> Int))) (even (seq a 0)))) ((undefined::(Int -> [] Bool) -> Int) (\a -> seq a ([]::[] Bool))))
(\a -> (:) a) ((\a -> \b -> id a) (head ([]::[] Int)) ((\a -> seq a (\b -> seq a (undefined::Int -> [] Int))) (undefined::Bool)))
(undefined::(Int -> Int) -> (([] ([] Int)) -> [] Int) -> ([] Int) -> [] Int) ((\a -> (!!) (seq a ([]::[] Int))) (((==)::Int -> Int -> Bool) (undefined::Int) 0)) (\a -> ([]::[] Int))
\a -> (enumFromTo::Int -> Int -> [Int]) ((\b -> seq a (seq a (\c -> seq a c) (seq b (seq b (undefined::Int))))) (seq a (undefined::Bool -> ([] ([] Int)) -> [] ([] ([] Int))) (seq a (seq a (seq a (undefined::Bool)))))) (seq a (head ((++) ((!!) (undefined::[] ([] Int)) (seq a (seq a (undefined::Int)))) ((\b -> seq b a) (seq a (undefined::Int))))))
head ((\a -> seq a (\b -> ([]::[] (Int -> ([] Int) -> [] Int))) (undefined::Int)) ((undefined::(([] ([] Int)) -> [] ([] Int)) -> [] Int) (\a -> a))) ((!!) ((undefined::(Int -> ([] Int) -> Int) -> [] Int) (\a -> seq a (seq a (undefined::([] Int) -> Int)))) ((\a -> seq a (seq a 0)) (even 0)))
\a -> a
\a -> a
head (undefined::[] ((([] (Int -> Int -> [] Int)) -> [] ([] (([] Int) -> Int -> Int))) -> ([] Int) -> [] Int)) (\a -> map (seq a (map (id (\b -> seq b (!!))))) (map (\b -> seq b (undefined::[] ([] Int))) ([]::[] Int)))
(\a -> (\b -> seq b (\c -> c)) (head ([]::[] ((([] Int) -> Int -> Int) -> Int)) (\b -> seq a (seq a id)))) (id (odd (undefined::Int)))
\a -> a
\a -> ([]::[] Int)
\a -> seq a (seq a (seq a ((undefined::Int -> (([] (Bool -> Bool)) -> [] (Bool -> Bool)) -> [] Int) (seq a ((\b -> seq b 1) (seq a (seq a False))))) (seq a (\b -> seq a (seq a (undefined::([] ([] (Int -> Int))) -> [] (Bool -> Bool))) (seq b (\c -> seq b ([]::[] ([] (Int -> Int)))) (seq b (seq a (seq b (undefined::Int)))))))))
id
(undefined::Int -> (([] Int) -> Int -> [] Int) -> ([] Int) -> [] Int) ((\a -> seq a (undefined::Int)) not) (case1 (\a -> seq a (\b -> seq b (seq a (undefined::Bool -> Int -> [] Int)) (seq a (seq b (undefined::Bool))))) (undefined::Int -> [] Int))
(\a -> \b -> map (undefined::([] (([] ([] (Bool -> Bool))) -> Int)) -> Int) ((undefined::Bool -> [] ([] (([] ([] (Bool -> Bool))) -> Int))) (even (seq a 2)))) ((undefined::(Int -> Bool) -> ([] ([] (Int -> [] Int))) -> ([] Int) -> [] Int) even)
(\a -> \b -> seq a (\c -> case1 (:) c c)) (id ((undefined::([] Int) -> ([] ([] Int)) -> [] Bool) (id (undefined::[] Int)))) ((!!) ((\a -> seq a ([]::[] (Int -> Int))) (head ([]::[] Bool))) (undefined::Int))
\a -> seq a (seq a (\b -> seq b a)) ((\b -> seq a (\c -> seq a (seq c (\d -> (undefined::Bool)) (seq b (seq c (undefined::Bool)))))) 1)
(\a -> \b -> seq a (seq a (seq b (seq b (seq a ((undefined::([] (Int -> [] ([] ([] Bool)))) -> [] Int) (seq a ((\c -> seq c ([]::[] (Int -> [] ([] ([] Bool))))) (seq a 1))))))))) ([]::[] ([] (Int -> Bool)))
\a -> id (undefined::(([] Int) -> Bool -> Bool -> Bool) -> [] Int) ((undefined::Int -> ([] Int) -> Bool -> Bool -> Bool) (id ((undefined::([] Bool) -> Int) (seq a (seq a ([]::[] Bool))))))
\a -> (\b -> seq b (\c -> seq c (\d -> a)) (seq a False)) (seq a (\b -> b (seq a (undefined::Bool))) (seq a (\b -> b))) (seq a (\b -> seq b (\c -> id (undefined::([] Bool) -> Bool) b) (\c -> \d -> seq d (\e -> seq a (undefined::[] Bool)) (seq d (seq d (\e -> e))))))
\a -> map (seq a (seq a (seq a (undefined::(([] Int) -> Int) -> Int)))) ((\b -> (undefined::([] (Int -> Bool)) -> [] (([] Int) -> Int)) (seq b (undefined::[] (Int -> Bool)))) ((undefined::(([] Int) -> Bool) -> Bool) (\b -> seq b (not False))))
\a -> a
case1 (\a -> \b -> a) (\a -> map (\b -> seq b (undefined::Int)) ([]::[] (([] Bool) -> [] Bool))) ([]::[] (([] Int) -> [] Int))
(:) ((-) ((+) (case1 (undefined::Bool -> ([] Bool) -> Int) (undefined::Int) (undefined::[] Bool)) (undefined::Int)) (case1 (id (\a -> seq a (undefined::([] ([] Bool)) -> Int))) (id 1) ([]::[] ([] Bool))))
take (head ((\a -> seq a (seq a (seq a (seq a ([]::[] ((([] ([] Int)) -> [] ([] Bool)) -> Int)))))) (not False)) ((\a -> seq a (seq a (seq a ((\b -> seq b (undefined::([] ([] Int)) -> [] ([] Bool))) a)))) (head ((undefined::([] Bool) -> [] Bool) (undefined::[] Bool)))))
\a -> (!!) (seq a (undefined::[] ((([] Int) -> Int -> Bool) -> [] Int))) 0 ((!!) (map (\b -> \c -> \d -> True) (undefined::[] ([] Bool))) (seq a (seq a (seq a (seq a (undefined::(Bool -> Bool) -> Int)) not))))
\a -> a
(!!) ((\a -> seq a (undefined::[] (Int -> ([] Int) -> [] Int))) (undefined::Int)) (undefined::Int) (id ((undefined::(([] Int) -> [] ([] Bool)) -> Bool -> Int) (\a -> (undefined::[] ([] Bool))) ((\a -> seq a (seq a (undefined::Bool))) 2)))
(\a -> (:) (seq a (seq a (undefined::Int)))) ((undefined::Bool -> (([] Int) -> [] ([] Bool)) -> Bool) ((\a -> not (seq a False)) (undefined::Int)))
\a -> a
(++) (map ((\a -> head (seq a ([]::[] ((([] Int) -> [] Bool) -> Int)))) (id (\a -> ((==)::[Int] -> [Int] -> Bool)) (undefined::Bool))) (head ([]::[] (([] ([] (Int -> Int))) -> [] (([] Int) -> [] Bool))) ((\a -> seq a (seq a ([]::[] ([] (Int -> Int))))) True)))
\a -> (undefined::([] (([] Bool) -> [] Bool)) -> [] Int) (seq a (\b -> \c -> ([]::[] (([] Bool) -> [] Bool))) (seq a (id (undefined::Int))) ((undefined::(([] Int) -> [] ([] Bool)) -> Int) (\b -> seq b (tail ([]::[] ([] Bool))))))
(\a -> seq a (undefined::([] Int) -> Bool -> ([] Int) -> [] Int) (tail ([]::[] Int))) ((+1) ((\a -> seq a (seq a 0)) (undefined::Int -> [] Bool))) (((==)::[Int] -> [Int] -> Bool) (case1 (undefined::Bool -> ([] Bool) -> [] Int) ([]::[] Int) ([]::[] Bool)) ((\a -> seq a (seq a (undefined::[] Int))) ([]::[] Bool)))
(undefined::([] Int) -> [] Int)
id (head (undefined::[] (([] (([] ([] Bool)) -> [] ([] Bool))) -> ([] Int) -> [] Int))) (map (undefined::(([] Int) -> [] Int) -> ([] ([] Bool)) -> [] ([] Bool)) ((\a -> seq a (id ([]::[] (([] Int) -> [] Int)))) ((&&) (undefined::Bool) True)))
\a -> a
(\a -> seq a (\b -> (undefined::([] Int) -> [] Int)) (id (case1 (undefined::Bool -> ([] Bool) -> Int) 1 ([]::[] Bool)))) (\a -> (!!) (undefined::[] (([] ([] ([] (Int -> Int)))) -> [] (Int -> [] (Int -> Int)))) a)
(undefined::([] Int) -> [] Int)
\a -> seq a (seq a (\b -> a)) (\b -> (undefined::([] ([] Int)) -> Int -> Int -> Int -> Int) (undefined::[] ([] Int)) ((undefined::(Int -> ([] Int) -> Bool) -> Int) ((!!) ([]::[] (Int -> ([] Int) -> Bool)) 1)))
\a -> (undefined::Bool -> [] Int) ((\b -> seq b (undefined::Bool)) (id (id (undefined::Bool -> ([] Int) -> ([] Int) -> [] Int))))
(\a -> \b -> (\c -> seq b ((\d -> seq a (seq c d)) (seq b ([]::[] Int)))) ((undefined::([] (([] ([] ([] Bool))) -> Bool)) -> Bool) ([]::[] (([] ([] ([] Bool))) -> Bool)))) (\a -> seq a (\b -> seq a (seq b ((!!) (seq b ([]::[] (([] ([] Int)) -> [] Int))) b (case1 (undefined::Int -> ([] Int) -> [] ([] Int)) (undefined::[] ([] Int)) ([]::[] Int))))))
(undefined::([] Int) -> [] Int)
(\a -> take (seq a ((\b -> seq a (undefined::([] Bool) -> Int) (seq a (seq b (undefined::[] Bool)))) ((undefined::(([] Int) -> Int -> Int) -> ([] Bool) -> Bool) (id (\b -> id)))))) (\a -> \b -> id (undefined::([] (([] ([] Bool)) -> [] ([] Bool))) -> Bool -> Bool) (seq a (undefined::Bool -> [] (([] ([] Bool)) -> [] ([] Bool))) (id b)))
\a -> seq a a
\a -> a
filter ((!!) ((\a -> \b -> seq a (\c -> ([]::[] Bool))) True (id (\a -> 0) ([]::[] Bool)) ((\a -> case1 (\b -> (undefined::([] Bool) -> Int)) (seq a (undefined::Int)) ([]::[] Bool)) ((\a -> seq a (seq a (undefined::Int -> [] ([] ([] (Bool -> Bool)))))) False))))
(\a -> (\b -> \c -> seq a (seq b (undefined::([] Int) -> [] Int))) (head ([]::[] Bool))) ((\a -> seq a (seq a (seq a ([]::[] (([] ([] Bool)) -> [] ([] Bool)))))) (head ([]::[] Bool))) (case1 (id (undefined::Bool -> Int -> ([] Int) -> Bool) (undefined::Bool)) ((\a -> seq a False) (head ([]::[] Int))) (id (undefined::Int -> [] Int) ((+1) (undefined::Int))))
(\a -> \b -> seq a b) ((undefined::(([] Int) -> Int -> Int) -> Int -> Int) (undefined::([] Int) -> Int -> Int) ((undefined::Bool -> Int) ((&&) True (undefined::Bool))))
\a -> map (undefined::(([] (Int -> Bool)) -> [] (Int -> Bool)) -> Int) (seq a (seq a (seq a (\b -> id (seq a ([]::[] (([] (Int -> Bool)) -> [] (Int -> Bool))))) (seq a (id (undefined::([] ([] (Int -> Int))) -> Int)) (seq a (seq a (seq a (undefined::[] ([] (Int -> Int))))))))))
(\a -> seq a (undefined::Int -> Int -> ([] Int) -> [] Int) (seq a ((+1) (undefined::Int)))) (id (\a -> seq a False) (undefined::([] Bool) -> Bool)) ((undefined::Int -> Int) (undefined::Int))
id (\a -> seq a (seq a ((!!) (head ([]::[] ([] (([] Int) -> [] Int)))) ((-) (seq a (undefined::Int)) (seq a 2))))) ((\a -> \b -> (undefined::([] Bool) -> ([] Int) -> ([] Int) -> [] Int) (seq a ([]::[] Bool))) (even ((-) 0 (undefined::Int))))
\a -> seq a (seq a (\b -> seq b (seq b (\c -> \d -> a) (seq b (seq a (\c -> 0))) (((==)::[Int] -> [Int] -> Bool) a a)))) (seq a (head (seq a ([]::[] (([] Int) -> ([] (([] ([] Bool)) -> [] ([] Bool))) -> [] (([] ([] Bool)) -> [] ([] Bool)))))))
(\a -> (\b -> (!!) (seq a (seq b (undefined::[] (([] Int) -> [] Int)))) a) (\b -> \c -> (\d -> seq d (seq c False)) (seq c (seq a (\d -> (undefined::[] Bool)))))) ((\a -> a) ((\a -> head (seq a ([]::[] Int))) (undefined::Bool)))
map id
(\a -> \b -> (:) ((-) 0 (seq a (seq a 2))) b) (\a -> even (seq a (head (seq a (case1 (\b -> \c -> seq b ([]::[] Int)) (id (undefined::[] Int)) (seq a ([]::[] Bool)))))))
(\a -> seq a (\b -> \c -> seq a (seq b (\d -> c) (a (\d -> id)))) (map (seq a (\b -> True)) (seq a (seq a (undefined::[] Int))))) (\a -> (\b -> seq b (undefined::([] (Int -> Bool)) -> Int)) (undefined::Int) ((\b -> seq b (seq a ([]::[] (Int -> Bool)))) (\b -> \c -> seq b c)))
(undefined::(([] ([] Bool)) -> [] (Int -> Bool)) -> ([] Int) -> [] Int) (undefined::([] ([] Bool)) -> [] (Int -> Bool))
(\a -> seq a (\b -> b)) (case1 (head (undefined::[] ((Bool -> Bool) -> ([] (Bool -> Bool)) -> Bool))) ((\a -> seq a (undefined::Bool)) (-)))
(\a -> seq a (\b -> seq a (\c -> seq b (undefined::([] Int) -> [] Int)) (\c -> c))) (undefined::Int) (\a -> seq a (seq a (\b -> seq a (seq a (case1 (seq b (\c -> \d -> id)) (\c -> seq b c) a)))))
(undefined::([] Int) -> [] Int)
\a -> seq a ((\b -> (undefined::Int -> ([] ([] (Bool -> Bool))) -> [] Int) b) 2 (seq a ((\b -> id (\c -> (undefined::[] ([] (Bool -> Bool)))) (head (seq b ([]::[] Bool)))) (case1 (\b -> (undefined::([] ([] Int)) -> Int)) 1 (seq a ([]::[] ([] Int)))))))
(\a -> seq a (\b -> b)) (\a -> \b -> (undefined::[] ([] (Int -> Bool))))
\a -> seq a (case1 (\b -> \c -> a) (seq a a) (id (undefined::Bool -> Bool -> [] Bool) (seq a (seq a (undefined::Bool))) True))
(\a -> \b -> filter (id (undefined::([] ([] Bool)) -> Int -> Bool) (seq a (seq a ([]::[] ([] Bool)))))) ((\a -> a) (undefined::Bool)) (id (\a -> \b -> seq b (seq b (undefined::Bool -> ([] Int) -> Bool) (seq b False))) tail)
tail
\a -> (\b -> head (seq b (seq b (seq a (seq a ([]::[] (([] (([] Bool) -> [] Bool)) -> [] Int)))))) ([]::[] (([] Bool) -> [] Bool))) ((\b -> \c -> seq c (b (undefined::Int))) (seq a (id (undefined::Int -> Bool))) (seq a (seq a (seq a id)) (seq a (seq a (seq a True)))))
(\a -> \b -> seq b (seq a (\c -> (undefined::Int -> [] Int) (seq b (undefined::Int)))) (seq a (seq a True))) (undefined::([] ([] (([] Int) -> [] (Int -> [] Int)))) -> [] (Int -> [] Int))
\a -> map ((\b -> seq a (\c -> \d -> b) (seq b (tail (undefined::[] Bool)))) ((\b -> b (seq a (seq a (undefined::[] ([] ([] Bool)))))) (\b -> seq b (id (undefined::Int))))) (seq a (id (seq a (\b -> (undefined::[] Bool))) (seq a (\b -> ([]::[] (Int -> Bool))))))
\a -> a
\a -> map ((\b -> seq b (undefined::Bool -> (Int -> ([] Int) -> Int) -> Int) (seq b False)) (seq a ((undefined::([] (Int -> [] Int)) -> Bool) (seq a ([]::[] (Int -> [] Int)))))) (seq a (seq a (map (\b -> (undefined::Int -> ([] Int) -> Int))) (seq a ((\b -> seq a (seq b ([]::[] (([] Bool) -> [] Bool)))) ([]::[] ([] Bool))))))
take ((\a -> seq a (\b -> \c -> seq a 1) (seq a (seq a (seq a (undefined::[] (Int -> Int -> Int)))))) (map (\a -> seq a (undefined::Bool)) (head (undefined::[] ([] Int)))) (((==)::Int -> Int -> Bool) ((\a -> a) 2) ((\a -> seq a (head (undefined::[] Int))) (((==)::Int -> Int -> Bool) (undefined::Int) 1))))
(undefined::Bool -> ([] Int) -> [] Int) (id (id ((undefined::Int -> (Bool -> Bool) -> Bool) (undefined::Int)) ((\a -> seq a (seq a id)) (undefined::[] ([] (Int -> Int))))))
\a -> a
id
(:) ((+) (case1 (\a -> seq a (\b -> a)) ((!!) (undefined::[] Int) 1) (undefined::[] Int)) 2)
(\a -> seq a id) (case1 (\a -> (undefined::([] Int) -> ([] ([] Bool)) -> [] ([] Bool)) (seq a (id (undefined::[] Int)))) ((\a -> seq a (seq a (undefined::[] ([] Bool)))) (undefined::Int)))
case1 (\a -> (undefined::Int -> ([] Int) -> [] Int) a) (id ([]::[] Int))
\a -> seq a ((\b -> (\c -> seq a (seq a (id (undefined::Int -> [] Int) (seq c (seq c 2))))) (\c -> \d -> seq a (seq c (seq b (seq a id) (id (undefined::Bool)))))) (seq a (seq a (seq a (seq a (undefined::Int))))))
\a -> a
\a -> a
case1 (\a -> seq a (seq a (seq a (undefined::Bool -> ([] Int) -> ([] Int) -> [] Int) (seq a (seq a (seq a (undefined::Bool))))))) (case1 (\a -> \b -> \c -> ([]::[] Int)) (\a -> seq a ([]::[] Int)) (head ([]::[] ([] Bool)))) ((\a -> (undefined::([] (Int -> Int)) -> [] Int) (seq a (undefined::[] (Int -> Int)))) ((\a -> a) (undefined::Int)))
\a -> map ((!!) ((undefined::([] Int) -> [] ((Int -> Int -> Bool) -> Int)) (seq a a)) (id ((\b -> seq b (undefined::Int)) (seq a ([]::[] Bool))))) (seq a (seq a (\b -> seq b (undefined::Int -> [] (Int -> Int -> Bool)) 0)) (((==)::Int -> Int -> Bool) (head ([]::[] Int)) (seq a (seq a (undefined::Int)))))
case1 (\a -> \b -> \c -> (undefined::[] Int)) ((\a -> seq a (\b -> b)) (head (undefined::[] Bool))) (map ((!!) ([]::[] (([] ([] Bool)) -> Bool)) (undefined::Int)) (id (undefined::[] ([] ([] Bool)))))
\a -> seq a (map (head (undefined::[] ((([] (([] Int) -> Int -> Int -> Bool)) -> ([] Int) -> [] (Bool -> Bool)) -> Int)))) (seq a (seq a (seq a (seq a (id (seq a (undefined::[] (([] (([] Int) -> Int -> Int -> Bool)) -> ([] Int) -> [] (Bool -> Bool)))))))))
\a -> a
\a -> a
\a -> case1 (\b -> (\c -> seq c (seq a (\d -> seq a a))) ((||) (seq b False) True)) (case1 (seq a (\b -> (undefined::([] ([] Bool)) -> [] Int))) a (seq a (seq a (undefined::[] ([] Bool))))) (seq a (\b -> head (undefined::[] ([] (Bool -> Int)))) (\b -> (undefined::Bool -> [] Bool) (seq a True)))
\a -> seq a ((\b -> seq b (id (seq a (\c -> a))) ((undefined::Bool -> ([] Int) -> Int) (b a))) ((!!) (seq a (filter (seq a (undefined::(([] Int) -> Bool) -> Bool)) ([]::[] (([] Int) -> Bool)))) (seq a (seq a (seq a (undefined::(([] Int) -> Int) -> Int))) (\b -> (undefined::Int)))))
\a -> (undefined::[] Int)
case1 (undefined::Bool -> ([] Bool) -> Bool -> ([] Int) -> [] Int) (\a -> seq a (\b -> seq a (seq b b))) ((undefined::Bool -> [] Bool) (undefined::Bool)) (undefined::Bool)
\a -> a
(undefined::Bool -> ([] Int) -> [] Int) (even ((\a -> seq a (seq a (undefined::Bool -> Int))) (head (undefined::[] ([] ([] (Int -> Bool))))) ((undefined::([] Int) -> Bool) (undefined::[] Int))))
case1 (undefined::Bool -> ([] Bool) -> ([] Int) -> [] Int) (undefined::([] Int) -> [] Int) (filter ((\a -> seq a (undefined::Bool -> Bool)) (undefined::[] Bool)) ((undefined::([] Int) -> [] Bool) (undefined::[] Int)))
tail
(\a -> seq a (\b -> \c -> c)) ((+) (id (undefined::Int)) (undefined::Int)) (head (undefined::[] (Bool -> ([] (Int -> [] Int)) -> Int)) ((!!) (undefined::[] ((Bool -> Bool) -> Bool)) 0 (\a -> a)))
(\a -> seq a (\b -> \c -> seq c (seq a (\d -> c) (tail (undefined::[] ([] Bool))))) ((||) (seq a (a (undefined::([] Int) -> ([] Bool) -> [] Bool))) (seq a (seq a False)))) (\a -> id (seq a (seq a not) ((\b -> b) (not False))))
\a -> seq a a
(\a -> (\b -> (\c -> seq c tail) (\c -> seq b (seq a (seq b (undefined::[] Int))))) (\b -> map (seq b (seq b (undefined::([] Int) -> Bool -> Bool))) (seq a ([]::[] ([] Int))))) (undefined::([] Int) -> Int -> Int -> Int)
\a -> ([]::[] Int)
(!!) (map (\a -> (:)) (head (undefined::[] ([] Bool)))) (id (\a -> (undefined::Int)) (head (undefined::[] Bool))) (id (\a -> (undefined::Int)) ((\a -> seq a (\b -> seq b (undefined::[] (Bool -> Bool)))) (\a -> a)))
\a -> a
tail
(\a -> seq a (case1 (seq a (\b -> (undefined::Int -> ([] Int) -> [] Int)) 1))) ((\a -> seq a (seq a (seq a (undefined::Bool)))) ((-) 1 (undefined::Int))) ([]::[] Int)
map (\a -> (\b -> head (tail (seq b ((undefined::Bool -> Int -> [] Int) (not (undefined::Bool)) (seq b (\c -> a) (undefined::[] ([] (Int -> Int)))))))) (seq a (\b -> (\c -> \d -> seq c ([]::[] ([] Bool))) True) (map (head (undefined::[] (([] Bool) -> [] ([] Bool)))) (seq a (undefined::[] ([] Bool))))))
\a -> (undefined::(Int -> [] Bool) -> [] Int) (seq a (seq a (seq a (\b -> b) (seq a (seq a ((undefined::Int -> Int -> [] Bool) (seq a (seq a (undefined::Int)))))))))
(\a -> seq a (seq a (\b -> seq a (seq b take) (seq b (seq b 2))) (\b -> seq b (\c -> c) (seq a ([]::[] Bool))))) (\a -> (undefined::Int -> Int -> Int -> [] Int) (seq a (seq a a)) a)
(\a -> seq a (seq a (\b -> id)) (seq a (\b -> map (undefined::Int -> ([] Int) -> Bool) b))) (id (\a -> case1 (undefined::Bool -> ([] Bool) -> Bool) (undefined::Bool) ([]::[] Bool)) (map (\a -> a)))
(\a -> \b -> id take a) 0 (map (id ((\a -> seq a (undefined::Int -> Int -> ([] Int) -> Bool)) (id (undefined::Int))) 2))
(\a -> seq a (\b -> map (\c -> c (c (undefined::Int) b) (seq c b)) ([]::[] (Int -> ([] Int) -> Int)))) (head (tail ((!!) (undefined::[] (Bool -> [] ([] ([] Int)))) (undefined::Int) ((\a -> seq a (seq a (undefined::Bool))) (id 2)))))
take (undefined::Int)
(\a -> seq a (undefined::([] Int) -> Int -> ([] Int) -> [] Int) (seq a (seq a (seq a (undefined::[] Int))))) ((\a -> seq a (seq a (\b -> (undefined::[] ([] Bool))))) (undefined::Int)) ((\a -> (\b -> head (seq b ([]::[] Int))) (seq a (\b -> \c -> a))) (((==)::[Int] -> [Int] -> Bool) ([]::[] Int) ([]::[] Int)))
id ((\a -> \b -> seq a (filter (seq b odd) (seq b (seq b (seq a (undefined::Bool -> [] Int)) (undefined::Bool))))) (id (undefined::[] (([] Bool) -> [] Bool))))
case1 (\a -> seq a (\b -> \c -> (undefined::[] Int))) ((\a -> seq a (seq a (seq a (seq a (undefined::([] Int) -> [] Int))))) ((\a -> seq a (undefined::Bool)) (undefined::Int))) (map (\a -> seq a (seq a (seq a even))) (head (undefined::[] ([] (Int -> Bool)))))
case1 (\a -> \b -> \c -> map (seq b (head ([]::[] ((([] Bool) -> Bool) -> Int)))) (undefined::[] (([] Bool) -> Bool))) (\a -> (undefined::[] Int)) ((\a -> (undefined::Bool -> [] (Int -> [] ([] Bool))) (seq a (seq a False))) (undefined::[] Bool))
(\a -> \b -> seq b ((undefined::([] ([] ([] Bool))) -> [] Int) (head (seq a ((undefined::(Int -> Bool) -> [] ([] ([] ([] Bool)))) (a head (undefined::Int))))))) (\a -> \b -> \c -> a ((!!) (seq c ((!!) ([]::[] ([] ([] Bool))) b)) c))
(!!) ((!!) ([]::[] (Bool -> [] (([] Int) -> [] Int))) (undefined::Int) ((undefined::(Bool -> Bool) -> Bool) (\a -> a))) ((undefined::([] (([] (([] (Int -> Bool)) -> Int -> Bool)) -> [] Bool)) -> Int) (tail (undefined::[] (([] (([] (Int -> Bool)) -> Int -> Bool)) -> [] Bool))))
(++) (map id ((\a -> (\b -> seq a (seq b ([]::[] Int))) (seq a (seq a (seq a (undefined::[] ([] (Bool -> Bool))))))) (undefined::Bool)))
(\a -> seq a (seq a (\b -> b))) (((==)::[Int] -> [Int] -> Bool) (map (\a -> (undefined::Int)) (id ([]::[] ([] (Bool -> Bool))))) ([]::[] Int))
\a -> seq a a
\a -> (!!) (take (undefined::Int) (seq a ([]::[] (Int -> [] Int)))) (seq a ((undefined::([] ([] Int)) -> Int) (seq a (seq a (undefined::[] ([] Int)))))) (seq a ((\b -> seq b (\c -> (undefined::Int))) ((++) ([]::[] Int) a) (id (\b -> seq b (\c -> id True)))))
(undefined::Int -> ([] Int) -> [] Int) (case1 (\a -> \b -> a (a (seq a (undefined::Int)))) ((\a -> seq a a) ((+1) 0)) ((undefined::([] ([] Bool)) -> [] (Int -> Int)) ([]::[] ([] Bool))))
case1 (\a -> seq a (\b -> seq b (seq a (undefined::([] ([] Int)) -> ([] Int) -> [] Int))) (seq a (\b -> (undefined::Bool)) (seq a (\b -> a)))) id ((\a -> \b -> seq a ([]::[] ([] Int))) (undefined::Int) ((\a -> seq a (undefined::Bool)) (head ([]::[] (Int -> Bool)))))
(\a -> \b -> seq b (map ((!!) ([]::[] (Bool -> Int)) (seq a 1)) (seq b (undefined::(([] (Bool -> Bool)) -> Int) -> [] Bool) (\c -> 0)))) (\a -> seq a ([]::[] (Int -> [] Int)))
\a -> map (\b -> head (seq b (id (head ([]::[] ([] (Bool -> Int)))))) (odd (seq a (\c -> (undefined::Int)) (seq a (seq a (undefined::[] (([] Bool) -> [] ([] Bool)))))))) ((undefined::(([] ([] Int)) -> [] ([] Int)) -> [] Bool) (\b -> seq b (seq a (\c -> b)) 0))
(undefined::([] Int) -> [] Int)
take 0
\a -> ([]::[] Int)
(\a -> seq a (seq a (seq a (\b -> \c -> seq c id) 0) (seq a (seq a (id (undefined::Bool)))))) (id (id (\a -> seq a (seq a (id ([]::[] (Int -> Bool))))) (\a -> \b -> seq a (seq a (\c -> b) (seq a (seq a True))))))
\a -> a
id (undefined::Bool -> ([] Int) -> [] Int) ((\a -> case1 (\b -> (undefined::([] Bool) -> Bool)) (seq a True) (seq a (undefined::[] Bool))) (head ([]::[] ([] (([] (([] Int) -> ([] Int) -> [] Bool)) -> [] Bool)))))
tail
\a -> seq a (\b -> head (id (id (\c -> seq b (seq b ([]::[] ([] Int))))) (head (seq b (undefined::[] (([] Int) -> Bool -> Bool)))))) (map (seq a (seq a (\b -> seq a ([]::[] ([] Bool))))) (id ((++) ([]::[] ([] ([] (Int -> Bool)))) (seq a ([]::[] ([] ([] (Int -> Bool))))))))
id
\a -> a
\a -> map (\b -> id (\c -> seq b (seq a (seq c 1))) (\c -> \d -> seq c (\e -> ((==)::[Int] -> [Int] -> Bool) c a))) (undefined::[] ([] (([] Int) -> Bool)))
id ((undefined::Int -> Int -> Bool -> ([] Int) -> [] Int) (head (undefined::[] Int)) 0) (undefined::Bool)
\a -> case1 (\b -> seq a (map (\c -> seq a (undefined::Int)))) (seq a (map (seq a (seq a (seq a (undefined::(Int -> Int) -> Int)))) (head (seq a ([]::[] ([] (Int -> Int))))))) (seq a (map (seq a (seq a (seq a (undefined::([] ([] Bool)) -> Bool)))) (seq a (seq a (seq a ([]::[] ([] ([] Bool))))))))
(\a -> (undefined::(([] Int) -> Bool -> Bool) -> ([] Int) -> [] Int) (seq a (head ([]::[] (Bool -> ([] Int) -> Bool -> Bool)) (seq a (seq a (undefined::Bool)))))) ((\a -> (\b -> seq b (seq a (seq b ([]::[] ([] Bool))))) (head (seq a ([]::[] Bool)))) ((\a -> seq a (seq a (seq a 2))) head))
tail
\a -> seq a (map (head (seq a (seq a (undefined::[] ((([] ([] ([] Int))) -> [] ([] ([] Int))) -> Int))))) ((!!) ([]::[] ([] (([] ([] ([] Int))) -> [] ([] ([] Int))))) (seq a ((\b -> seq b 1) (\b -> (undefined::Int))))))
(undefined::(([] Int) -> [] (([] Int) -> Bool)) -> ([] Int) -> [] Int) ((undefined::Bool -> ([] Int) -> [] (([] Int) -> Bool)) ((\a -> seq a True) head))
filter even
(\a -> (!!) (seq a (seq a (undefined::[] (Bool -> ([] Int) -> [] Int)))) (seq a (undefined::Int)) ((\b -> id (seq b (undefined::Bool))) (head (undefined::[] ([] Int))))) ((\a -> seq a (\b -> \c -> id (undefined::Bool -> Int -> Int) (seq a (seq b (undefined::Bool))))) (\a -> ((==)::Int -> Int -> Bool) a (seq a (seq a a))))
(:) ((\a -> seq a ((\b -> b) (seq a (\b -> seq b (undefined::Int)) (undefined::[] Int)))) ((\a -> id (undefined::Bool -> [] (([] Int) -> Int -> Int)) (not (seq a True))) (\a -> \b -> seq a ((undefined::Int -> Bool) b))))
\a -> head (tail (seq a (undefined::[] ((([] Int) -> [] ((Int -> Int -> Bool) -> Int -> Int -> Bool)) -> [] Int)))) (undefined::([] Int) -> [] ((Int -> Int -> Bool) -> Int -> Int -> Bool))
id
\a -> seq a (seq a (seq a a))
\a -> ([]::[] Int)
\a -> a
\a -> seq a (\b -> \c -> map (\d -> (undefined::Int)) a) (seq a (seq a ((\b -> seq b (seq a (undefined::Bool))) (seq a (seq a (undefined::Int)))))) (\b -> seq a ((\c -> (undefined::([] (([] Int) -> Int)) -> [] (Int -> Int)) (seq a (seq c (undefined::[] (([] Int) -> Int))))) ((\c -> \d -> seq c (seq d (undefined::[] (Bool -> Bool)))) (\c -> False))))
id ((\a -> \b -> (:) (seq a (seq b 2))) ((!!) (undefined::[] (([] ([] Int)) -> [] Int)) (undefined::Int))) (odd (case1 (undefined::Int -> ([] Int) -> Int) (id (undefined::Int)) ((enumFromTo::Int -> Int -> [Int]) 0 1)))
(undefined::((([] ([] Int)) -> [] Int) -> Int -> Int) -> ([] Int) -> [] Int) (id (undefined::(([] ([] Int)) -> [] Int) -> Int -> Int))
tail
(undefined::([] (([] (Int -> Int)) -> Int -> [] Int)) -> ([] Int) -> [] Int) ((\a -> seq a (seq a (undefined::[] (([] (Int -> Int)) -> Int -> [] Int)))) ((:) (\a -> seq a (seq a (undefined::Bool))) (head (undefined::[] ([] (Int -> Bool))))))
id (id (id (\a -> (\b -> \c -> seq b tail c) (head (tail (undefined::[] Int)))))) (undefined::([] ([] ([] (Bool -> Bool)))) -> ([] Bool) -> [] Bool)
id (\a -> \b -> b) ((\a -> id (seq a (undefined::[] (([] (([] Int) -> [] (Int -> [] Int))) -> Int)))) (((==)::Int -> Int -> Bool) 1 0))
(undefined::([] Int) -> [] Int)
\a -> map (\b -> seq b (seq a (seq a (\c -> (undefined::([] (Int -> Bool)) -> Int)) a)) (seq a (undefined::[] (Int -> Bool)))) (seq a (\b -> seq b (seq b (undefined::[] (([] ([] ([] Int))) -> [] ([] ([] Int)))))) ((\b -> seq b ([]::[] Bool)) (seq a 2)))
\a -> (\b -> take (seq b (seq a (\c -> seq c c) (id 2))) (seq a a)) (seq a (seq a (undefined::([] (Bool -> Bool)) -> ([] ([] Int)) -> [] ([] (Int -> Bool)))) ((\b -> seq b (id (undefined::[] (Bool -> Bool)))) (\b -> (+1) b)))
\a -> (\b -> (undefined::(Int -> Int) -> Int -> [] Int) ((+) 0) ((-) (seq a (seq b 2)) (undefined::Int))) (undefined::(Int -> Int -> Int) -> ([] ([] Bool)) -> [] Bool)
(undefined::([] Int) -> [] Int)
\a -> seq a (\b -> \c -> seq c (undefined::Bool -> [] Int)) (id (undefined::Int)) ((\b -> seq b (undefined::Bool)) ((++) (undefined::[] ([] Int)) ([]::[] ([] Int)))) False
id (undefined::(([] ([] ([] (Int -> Int)))) -> [] ([] ([] (([] Int) -> ([] Int) -> Bool)))) -> ([] Int) -> [] Int) (undefined::([] ([] ([] (Int -> Int)))) -> [] ([] ([] (([] Int) -> ([] Int) -> Bool))))
(\a -> head (take (seq a 2) (seq a (undefined::[] (Bool -> ([] Int) -> [] Int))))) (\a -> seq a (\b -> seq a (seq a (||))) (\b -> False)) (not ((\a -> seq a id) (undefined::Bool) ((\a -> seq a (undefined::Bool)) (head ([]::[] ([] Bool))))))
case1 ((\a -> \b -> case1 (\c -> \d -> d) (seq a ([]::[] Int))) ((\a -> seq a (head ([]::[] Bool))) ([]::[] (Int -> [] Int)))) ((\a -> seq a (\b -> seq b (undefined::[] Int)) (seq a (id (+1)))) (\a -> \b -> (\c -> seq c ([]::[] Bool)) (undefined::Int)))
\a -> seq a (id (id ((\b -> head ([]::[] (Int -> Bool -> [] Int)) b) (seq a (seq a (id (seq a (undefined::Int))))))) (undefined::Bool))
id
case1 (\a -> seq a (head (seq a ([]::[] (([] (([] Bool) -> [] Bool)) -> ([] Int) -> [] Int))))) ((\a -> seq a (undefined::Bool -> ([] Int) -> [] Int)) (undefined::Int) ((\a -> seq a True) (tail ([]::[] ([] Int))))) (head (id (\a -> seq a ([]::[] ([] (([] Bool) -> [] Bool)))) ((\a -> seq a (undefined::Int)) (\a -> a))))
\a -> (!!) ((undefined::Bool -> [] ((Bool -> Bool -> Bool) -> [] Int)) (seq a False)) (undefined::Int) (seq a (seq a ((undefined::Bool -> (Int -> Bool) -> Bool -> Bool -> Bool) False (\b -> ((==)::Bool -> Bool -> Bool) (undefined::Bool) (seq b (undefined::Bool))))))
(\a -> (!!) (seq a (undefined::[] (([] Int) -> ([] Int) -> [] Int))) (seq a (seq a (undefined::Int))) (case1 (\b -> seq a (undefined::([] Int) -> [] Int)) ([]::[] Int) (seq a ([]::[] Int)))) (\a -> seq a (seq a (id ((\b -> \c -> seq b ([]::[] (([] Int) -> Bool))) (seq a (seq a False))) ((\b -> seq a (seq b False)) (seq a (seq a (seq a 0)))))))
\a -> a
(\a -> \b -> \c -> map (seq a id) c) ((undefined::Bool -> Int -> Bool) (id True)) (head (map (undefined::(([] Int) -> [] ([] Int)) -> Int) (map (\a -> \b -> (undefined::[] ([] Int))) (undefined::[] ([] Bool)))))
\a -> a
case1 ((\a -> seq a (undefined::Bool -> Int -> ([] Int) -> [] Int) a) ((\a -> seq a (even (undefined::Int))) ([]::[] Bool))) (undefined::[] Int)
(undefined::([] Int) -> [] Int)
(undefined::(([] Int) -> ([] Int) -> Int) -> ([] Int) -> [] Int) (\a -> \b -> seq b 1)
\a -> a
\a -> map (seq a (seq a (\b -> seq b (seq b (\c -> seq c (+1) (seq b 0)) ((undefined::([] Int) -> Bool) a))))) ((undefined::(([] Int) -> [] (Int -> Bool)) -> [] ([] (Int -> Bool))) (seq a (\b -> \c -> seq b ([]::[] (Int -> Bool))) (undefined::Int)))
case1 ((\a -> seq a (seq a (:))) (undefined::([] Int) -> [] ([] Int))) (take ((\a -> seq a (seq a 0)) ((+1) (undefined::Int))) (map (\a -> seq a (undefined::Int)) (undefined::[] ([] ([] ([] (Int -> Bool)))))))
\a -> case1 ((\b -> (undefined::Int -> Int -> ([] Int) -> [] Int) (seq b 1)) (id (undefined::Int -> [] ([] Bool)) (undefined::Int))) a ((!!) (seq a ([]::[] ((Bool -> Bool) -> [] Int))) (seq a (undefined::Int)) ((!!) (seq a ([]::[] (Bool -> Bool))) (seq a (undefined::Int))))
id
\a -> seq a (\b -> seq a (seq b (seq b (head ([]::[] (Bool -> [] Int))) (even 0)))) (\b -> \c -> seq b ((\d -> seq d (\e -> c)) (seq a (seq c (seq b True))) (case1 (\d -> (undefined::([] ([] Int)) -> Bool)) (undefined::Bool) (seq b ([]::[] ([] Int))))))
\a -> a
(\a -> case1 (\b -> \c -> c) (filter (undefined::Int -> Bool) (seq a (undefined::[] Int)))) (\a -> seq a (seq a ((\b -> seq b (seq b (seq b (map (undefined::Int -> [] Int))))) a)))
\a -> seq a (seq a (undefined::[] Int))
(\a -> seq a (seq a ((\b -> seq b (seq b take)) (undefined::Int)) (seq a ((\b -> seq b 1) ([]::[] Bool))))) (\a -> (!!) (seq a (\b -> seq b (undefined::[] ([] ([] (Int -> [] Bool))))) ([]::[] Int)) (head (seq a ([]::[] ((([] Int) -> Bool) -> Int))) (((==)::[Int] -> [Int] -> Bool) (seq a (undefined::[] Int)))))
\a -> (undefined::[] Int)
(\a -> seq a (\b -> \c -> seq c (seq c (undefined::([] Bool) -> [] Int)) ([]::[] Bool)) (\b -> seq a (seq b (seq a (seq a (undefined::Bool -> Int))) (seq a (seq b (seq a True)))))) ((undefined::(Bool -> Bool) -> Int -> [] ([] (Bool -> Bool))) (\a -> id False) ((undefined::([] ([] ([] (([] Int) -> Int)))) -> Int) ([]::[] ([] ([] (([] Int) -> Int))))))
tail
(:) (head ([]::[] Int))
\a -> a
id (undefined::(Int -> Int -> Int) -> ([] Int) -> [] Int) ((undefined::([] (Int -> Bool -> Bool)) -> Int -> Int -> Int) ((\a -> seq a (seq a (undefined::[] (Int -> Bool -> Bool)))) (\a -> seq a a)))
head (map (\a -> (undefined::(([] Int) -> [] Bool) -> ([] Int) -> [] Int) (seq a (seq a (\b -> (undefined::([] Int) -> [] Bool))) (seq a (undefined::[] Int)))) ([]::[] (Int -> [] Bool)))
(\a -> (undefined::(([] Int) -> [] (Int -> Bool)) -> ([] Int) -> [] Int) ((\b -> seq a (\c -> seq b (undefined::[] (Int -> Bool)))) (seq a (tail (undefined::[] Int))))) (\a -> seq a ((undefined::(([] ([] ([] Int))) -> [] ([] ([] Int))) -> Int) (seq a ((\b -> seq b (\c -> seq b c)) (head (undefined::[] Bool))))))
(undefined::(([] (Int -> Int)) -> [] (Int -> Int)) -> ([] Int) -> [] Int) ((\a -> (undefined::Bool -> ([] (Int -> Int)) -> [] (Int -> Int)) (seq a (odd a))) ((undefined::(Int -> Bool) -> Int) (\a -> odd (seq a (undefined::Int)))))
(\a -> case1 (undefined::Int -> ([] Int) -> ([] Int) -> [] Int) (\b -> tail b) ((undefined::([] ([] Bool)) -> [] Int) (seq a (undefined::[] ([] Bool))))) (head ((\a -> seq a ([]::[] (Bool -> (([] Bool) -> Bool) -> Int -> Int -> Bool))) ((\a -> seq a (seq a (undefined::Int))) (undefined::Bool))))
(\a -> take (seq a (id (seq a (undefined::Int -> Bool -> Int)) (undefined::Int) (seq a ((undefined::(Int -> Bool) -> Bool) (seq a (\b -> seq b True))))))) 0
(\a -> \b -> seq a (\c -> ([]::[] Int)) (case1 (seq b (undefined::Bool -> ([] Bool) -> Int)) (seq a (undefined::Int)) (seq a ([]::[] Bool)))) (case1 (id (head (undefined::[] (Int -> ([] Int) -> [] (Int -> [] Int))))) ([]::[] (Int -> [] Int)))
head (id (undefined::[] ((([] Int) -> ([] (Int -> Bool -> Bool)) -> Int -> Bool) -> ([] Int) -> [] Int))) ((!!) (undefined::[] (([] Int) -> ([] (Int -> Bool -> Bool)) -> Int -> Bool)) (id (undefined::Bool -> Int) (undefined::Bool)))
head (map (\a -> (undefined::Bool -> Bool -> ([] Int) -> [] Int) True) ((\a -> seq a (seq a (undefined::[] ([] Bool)))) (head ([]::[] Int)))) ((!!) ((\a -> seq a (undefined::[] Bool)) ((+1) (undefined::Int))) ((undefined::Bool -> Int) (not False)))
\a -> a
(undefined::(([] Int) -> Int -> Int -> Bool) -> ([] Int) -> [] Int) (\a -> \b -> \c -> (undefined::Bool))
id
case1 (\a -> \b -> seq a (\c -> tail) ((!!) (seq a ([]::[] (([] Int) -> Bool))) (seq b 0))) (\a -> (enumFromTo::Int -> Int -> [Int]) (seq a (head a)) (undefined::Int)) ((\a -> seq a (tail (seq a (undefined::[] Int)))) (id (undefined::(([] Bool) -> Bool) -> Int) (\a -> seq a (undefined::Bool))))
\a -> a
take (id ((\a -> seq a (seq a (id (\b -> seq b a)))) (id (\a -> a) ((+1) (undefined::Int)))) ((\a -> (\b -> \c -> \d -> b) (seq a (seq a (seq a ([]::[] Bool))))) (\a -> seq a (\b -> seq b (undefined::Int -> Bool)) (seq a ([]::[] (Int -> Int))))))
case1 (undefined::Bool -> ([] Bool) -> ([] Int) -> [] Int) tail ((undefined::Int -> Bool -> [] Bool) (id (undefined::Int)) (id even ((+1) 0)))
(undefined::(Int -> ([] Int) -> Int) -> ([] Int) -> [] Int) (undefined::Int -> ([] Int) -> Int)
\a -> a
\a -> case1 (\b -> seq a ((!!) (seq b (seq a (seq a ([]::[] (([] Int) -> [] Int))))) (seq a (seq a (undefined::Int))))) (seq a (case1 take ([]::[] Int) (undefined::[] Int))) ((undefined::(Bool -> Int -> [] Int) -> [] Int) (seq a (\b -> \c -> id ([]::[] Int))))
(undefined::((([] Int) -> Bool -> Bool) -> ([] (Int -> Bool -> Bool)) -> Int -> Int -> Bool) -> ([] Int) -> [] Int) (\a -> \b -> \c -> seq a ((\d -> seq a ((==)::Int -> Int -> Bool) d) c))
\a -> id (\b -> a) (seq a (seq a (\b -> case1 (undefined::Bool -> ([] Bool) -> Int) (undefined::Int) ([]::[] Bool))) (\b -> (!!) (undefined::[] (Int -> Bool)) 1 (seq b (seq b (undefined::Int)))))
\a -> a
\a -> id a
(undefined::Int -> ([] Int) -> [] Int) ((!!) (case1 (\a -> tail) ([]::[] Int) ([]::[] Int)) (case1 (\a -> (undefined::([] Bool) -> Int)) 0 ([]::[] Bool)))
take ((\a -> seq a (\b -> seq a ((+1) (seq a (id (undefined::Int))))) (seq a (not (undefined::Bool)))) (map (id (undefined::([] (([] ([] Int)) -> [] ([] Int))) -> Int -> Int))))
(\a -> seq a (undefined::Bool -> ([] Int) -> [] Int)) (head (undefined::[] ((Int -> Int -> Bool) -> Int)) (\a -> \b -> seq a (seq a (undefined::Bool)))) ((&&) (undefined::Bool) (head ([]::[] (([] Int) -> Bool)) (undefined::[] Int)))
case1 ((\a -> seq a (\b -> head (undefined::[] (([] Bool) -> ([] Int) -> [] Int)))) ((\a -> seq a (undefined::[] Int)) (undefined::[] ([] Int)))) ((\a -> seq a (\b -> (undefined::[] Int))) (undefined::Int -> Bool)) (case1 (\a -> seq a (undefined::([] Bool) -> [] Bool)) (tail ([]::[] Bool)) ([]::[] Bool))
(\a -> seq a (head (seq a (undefined::[] ((Int -> Int -> Int) -> ([] Int) -> [] Int)))) (\b -> (!!) (undefined::[] (Int -> Int -> Int)) b (seq b b))) (undefined::([] Int) -> ([] Int) -> [] ([] Int))
\a -> (undefined::[] Int)
case1 (undefined::Int -> ([] Int) -> ([] Int) -> [] Int) ((\a -> case1 take (seq a ([]::[] Int))) (\a -> seq a ([]::[] (Bool -> Bool)))) ((undefined::(Int -> Int) -> Int -> [] Int) (\a -> seq a (undefined::Int)) ((+1) (id 2)))
\a -> seq a (seq a (id (\b -> seq b (seq b (\c -> a))))) (seq a (head (seq a ([]::[] (Int -> [] ([] Int)))) 1)) (seq a (head (seq a ([]::[] ((([] Int) -> ([] Int) -> Bool) -> [] ([] Bool)))) (seq a (\b -> seq b (\c -> (\d -> seq d False) (head b))))))
\a -> seq a a
(\a -> \b -> map (undefined::(([] Int) -> [] (Int -> Int -> [] Int)) -> Int) (seq a (seq b (seq b (undefined::[] (([] Int) -> [] (Int -> Int -> [] Int))))))) (\a -> a)
(!!) ((\a -> seq a (seq a (seq a ((undefined::Bool -> [] (([] Int) -> [] Int)) (seq a False))))) 2) (undefined::Int)
id
(:) ((\a -> id (id (seq a (seq a (seq a (undefined::Int)))))) (map ((==)::Int -> Int -> Bool) (undefined::[] Int)))
map (\a -> (undefined::Int))
id
\a -> a
\a -> seq a ((!!) (seq a ([]::[] ((([] ([] Int)) -> [] ([] ([] Int))) -> [] Int))) (seq a (seq a ((+) (seq a 1) (seq a (undefined::Int)))))) (\b -> map (seq a (\c -> seq c ([]::[] ([] Int)))) (seq b (head (undefined::[] ([] ([] (([] ([] (Int -> Bool))) -> [] Bool)))))))
(\a -> seq a (\b -> (undefined::(([] Int) -> Bool -> Bool) -> [] Int) (seq a (undefined::([] Int) -> Bool -> Bool)))) (undefined::(([] ([] ([] ([] Bool)))) -> Int -> Int -> Int) -> Int)
\a -> seq a (seq a (\b -> \c -> seq c (\d -> a) (undefined::Bool))) (seq a (seq a (seq a (\b -> (&&))) ((+1) 1))) ((\b -> \c -> seq c (seq b True)) id (seq a (seq a ((undefined::([] Int) -> ([] Int) -> Int) (head (undefined::[] ([] Int)))))))
\a -> a
(\a -> seq a (\b -> \c -> seq c (\d -> seq a c) (seq a (seq c (undefined::[] (Int -> Bool))))) (\b -> seq b (seq b (seq a (seq b (undefined::Bool)))))) (\a -> seq a (seq a (\b -> (undefined::[] (Bool -> Bool)))) ((undefined::Bool -> [] ([] ([] (Int -> ([] Int) -> Int)))) (seq a (seq a (seq a (undefined::Bool))))))
(\a -> (!!) (undefined::[] ((Int -> Bool) -> ([] Int) -> [] Int)) (seq a (seq a 0))) (\a -> \b -> seq a (map (undefined::Int -> Int) (seq a (seq a ([]::[] Int))))) (undefined::Int -> Bool)
\a -> map ((\b -> (undefined::Int -> Bool -> Int) (b (undefined::Bool -> Bool) (undefined::Int))) (\b -> \c -> seq a (seq b 0))) (seq a ((!!) ((undefined::([] ([] Int)) -> [] ([] Bool)) (seq a ([]::[] ([] Int))))) (case1 (seq a (undefined::Int -> ([] Int) -> Int)) (seq a 1) (seq a a)))
(++) ((\a -> (\b -> map (seq a (seq b (undefined::(Int -> [] Bool) -> Int))) (id ([]::[] (Int -> [] Bool)))) (head (map (undefined::Int -> ([] ([] Int)) -> [] Bool) (seq a (seq a ([]::[] Int)))))) (\a -> \b -> \c -> b))
case1 (undefined::Bool -> ([] Bool) -> ([] Int) -> [] Int) ((\a -> filter (\b -> seq a (seq a (undefined::Bool)))) ((-) (undefined::Int) ((+1) (undefined::Int)))) ([]::[] Bool)
(\a -> \b -> seq b (seq a (seq a (seq a (\c -> seq a b))) (\c -> seq b (id (undefined::([] Bool) -> [] (([] Int) -> Bool)) (seq b (seq a ([]::[] Bool))))))) ((undefined::(Int -> Bool) -> Int) odd)
head (undefined::[] (([] Int) -> Int -> ([] Int) -> [] Int)) ((\a -> tail (seq a ([]::[] Int))) (\a -> seq a (seq a 2))) (head ([]::[] (Bool -> Int)) (case1 (\a -> \b -> True) True ([]::[] ([] Bool))))
\a -> a
\a -> (\b -> seq b (head (take (undefined::Int) ([]::[] (Bool -> [] Int)))) ((\c -> head (seq c (undefined::[] Bool))) ((!!) (undefined::[] (([] ([] Int)) -> [] Int)) 0))) (\b -> seq b (seq a ((\c -> seq c (\d -> c)) (seq a (seq a (\c -> seq c (undefined::Bool)) (seq b 1))))))
(\a -> \b -> seq b (seq b (seq b (\c -> seq b (undefined::([] (Bool -> Bool)) -> [] Int)) (seq a (seq b (undefined::Bool))))) (undefined::[] (Bool -> Bool))) ((\a -> \b -> seq b ((undefined::Int -> [] ([] (Int -> [] Int))) a)) 1)
(\a -> (\b -> (\c -> seq c (\d -> ([]::[] Int))) ((!!) (seq b ([]::[] Bool)))) (seq a (\b -> \c -> seq a id) 2)) ((undefined::Int -> ([] ([] ([] (([] Int) -> [] Int)))) -> [] (Int -> Bool)) ((undefined::(Int -> Int -> Bool) -> Int) ((==)::Int -> Int -> Bool)))
take (case1 (head ((undefined::Int -> [] (Int -> ([] Int) -> Int)) (head (undefined::[] Int)))) ((undefined::([] ([] Bool)) -> (Bool -> Bool) -> Int) (undefined::[] ([] Bool)) (\a -> (undefined::(([] Bool) -> Bool) -> Bool) (\b -> a))) (id (\a -> tail ([]::[] Int)) (id (\a -> head ([]::[] ([] Int))))))
(\a -> seq a (\b -> (!!) (head (seq b (seq a (seq a (undefined::[] ([] ([] Int))))))) (seq a ((!!) b (undefined::Int))))) (\a -> (!!) (seq a (seq a ((undefined::Int -> [] ([] (Int -> Bool))) (seq a (undefined::Int))))) (seq a ((\b -> seq b (seq a 2)) (seq a (seq a (seq a (undefined::[] ([] (Int -> Bool)))))))))
head ((\a -> seq a ([]::[] (Bool -> ([] Int) -> [] Int))) (\a -> seq a (seq a (\b -> ([]::[] Bool)) (seq a (seq a True))))) ((\a -> seq a id) (\a -> seq a ([]::[] Bool)) False)
(undefined::([] Int) -> [] Int)
\a -> a
(!!) ((\a -> (\b -> seq a (seq b (undefined::[] (([] Int) -> [] Int)))) 0) ((\a -> id (seq a (undefined::[] (Int -> Int)))) True)) ((+1) ((!!) ((\a -> seq a (seq a (undefined::[] Int))) (undefined::Bool)) ((undefined::(([] (([] Bool) -> Bool)) -> Int) -> Int) (\a -> seq a (undefined::Int)))))
(\a -> seq a (undefined::([] Int) -> [] Int)) ((\a -> \b -> seq a ((\c -> \d -> seq c ([]::[] Bool)) (seq b (seq a (undefined::Int))))) (undefined::[] (Int -> Int)))
\a -> a
\a -> seq a (seq a (head (seq a (head (seq a ([]::[] ([] ((([] (([] Int) -> ([] Int) -> Bool)) -> Bool) -> [] Int))))))) (undefined::([] (([] Int) -> ([] Int) -> Bool)) -> Bool))
id
(\a -> seq a (\b -> \c -> id (seq a (undefined::Bool -> [] Int) (seq c (undefined::Bool)))) (\b -> seq a (\c -> seq c (seq b (undefined::[] (Bool -> Bool)))) (seq a b))) ((!!) ([]::[] (([] ([] (([] ([] Int)) -> [] Bool))) -> [] (Int -> Bool))) ((\a -> a) ((+1) (undefined::Int))))
id
case1 (undefined::Int -> ([] Int) -> ([] Int) -> [] Int) (id (\a -> seq a (\b -> seq b b)) (\a -> (undefined::[] Bool))) ((undefined::Bool -> Int -> [] Int) (undefined::Bool) ((\a -> a) (head (undefined::[] Int))))
\a -> seq a (\b -> case1 (\c -> (undefined::([] Bool) -> Int -> [] Int)) (\c -> a) (seq b (undefined::[] Bool))) (undefined::([] Int) -> [] ([] Int)) (seq a (undefined::(([] (([] ([] Int)) -> [] ([] ([] Int)))) -> Int -> Bool) -> Int) (seq a (seq a (undefined::([] (([] ([] Int)) -> [] ([] ([] Int)))) -> Int -> Bool))))
tail
id
(undefined::(([] Int) -> Bool) -> ([] Int) -> [] Int) (undefined::([] Int) -> Bool)
(\a -> take (seq a ((\b -> seq a b) (seq a (seq a (seq a (undefined::Int))))))) (take ((\a -> seq a (seq a (undefined::Int))) ([]::[] (([] Int) -> Bool))) (undefined::[] (([] (Int -> ([] Int) -> Bool)) -> Int -> [] Int)))
(undefined::Bool -> Bool -> ([] Int) -> [] Int) True ((undefined::Bool -> (([] ([] Bool)) -> [] ([] Bool)) -> Bool) (((==)::[Int] -> [Int] -> Bool) (undefined::[] Int) (undefined::[] Int)) (\a -> map (\b -> seq a ([]::[] Bool)) (seq a (undefined::[] Int))))
(undefined::(([] (Int -> [] (([] Bool) -> [] Bool))) -> Int -> [] (([] Bool) -> [] Bool)) -> ([] Int) -> [] Int) (\a -> (undefined::Int -> [] (([] Bool) -> [] Bool)))
(undefined::(([] (([] ([] ([] Int))) -> [] ([] ([] Bool)))) -> [] Bool) -> ([] Int) -> [] Int) ((\a -> \b -> seq a (seq a (seq a (undefined::Int -> [] Bool))) (seq b (head (undefined::[] Int)))) True)
(\a -> \b -> seq b (seq a (\c -> b)) (seq b (\c -> (undefined::Bool -> [] ([] (Int -> Int))) (seq a (undefined::Bool))))) (\a -> case1 ((undefined::Int -> Int -> Bool -> ([] Bool) -> [] Bool) (undefined::Int) ((undefined::(([] Bool) -> [] (Bool -> Bool)) -> Int) (\b -> ([]::[] (Bool -> Bool))))))
case1 (\a -> (undefined::([] (([] Int) -> Bool)) -> ([] Int) -> [] Int)) (\a -> a) ((\a -> (++) ([]::[] (([] Int) -> Bool)) (seq a ([]::[] (([] Int) -> Bool)))) ((\a -> seq a ([]::[] (Bool -> Bool))) (even (undefined::Int))))
head (tail (undefined::[] ((Bool -> ([] ([] ([] Bool))) -> [] ([] Bool)) -> ([] Int) -> [] Int))) ((undefined::(([] Int) -> Bool) -> Bool -> ([] ([] ([] Bool))) -> [] ([] Bool)) (case1 (undefined::Int -> ([] Int) -> Bool) True))
tail
\a -> a
\a -> a
\a -> (undefined::(Int -> Bool) -> Bool -> Bool -> [] Int) (\b -> (undefined::Bool)) (seq a (head (undefined::[] (([] ([] Int)) -> Bool))) (seq a ([]::[] ([] Int)))) (undefined::Bool)
(\a -> \b -> seq a ([]::[] Int)) (\a -> (undefined::([] (([] ([] Int)) -> [] ([] Int))) -> Bool -> Bool))
(\a -> take (seq a (\b -> seq a ((!!) (seq b (undefined::[] Int)) (seq a (undefined::Int)))) (head (undefined::[] (([] (([] Int) -> ([] Int) -> Bool)) -> Int -> Bool))))) ((\a -> seq a (\b -> True) (seq a (\b -> seq b (seq b 0)))) (case1 (\a -> seq a (undefined::([] Bool) -> [] Int)) ([]::[] Int) ([]::[] Bool)))
tail
filter (\a -> (undefined::([] (Int -> Bool)) -> Bool) (take (seq a a) (seq a ((\b -> seq b ([]::[] (Int -> Bool))) (even a)))))
\a -> (!!) (seq a ((\b -> seq b (seq b (undefined::[] (Int -> [] Int)))) (\b -> (undefined::Bool)))) ((!!) a (head a)) ((\b -> seq b (seq a (undefined::([] Int) -> Int)) a) (seq a ((\b -> seq b (seq a 1)) (seq a (seq a ([]::[] (([] (Bool -> Bool)) -> Int -> Int)))))))
\a -> a
(undefined::([] Int) -> [] Int)
(\a -> id (seq a (\b -> \c -> c))) (undefined::Bool) (\a -> seq a (\b -> (undefined::(Int -> ([] Int) -> Bool) -> Bool) ((undefined::([] ([] ([] Bool))) -> Int -> ([] Int) -> Bool) (seq a (seq a (seq b ([]::[] ([] ([] Bool)))))))))
id (\a -> a)
(\a -> \b -> (++) (seq b (\c -> b) (id (seq a ([]::[] ([] ([] Int)))))) (case1 (\c -> (undefined::([] ([] Bool)) -> [] Int)) ([]::[] Int) (seq a (undefined::[] ([] Bool))))) (undefined::([] (([] Int) -> ([] Int) -> Bool)) -> ([] Int) -> [] ([] Int))
(!!) (undefined::[] ((Int -> ([] Int) -> Bool) -> ([] Int) -> [] Int)) (case1 (\a -> \b -> 2) 2 ([]::[] ([] Int))) (\a -> seq a (head (take a (take (seq a a) (seq a ([]::[] (([] Int) -> Bool)))))))
(\a -> seq a (seq a (seq a (seq a (\b -> seq b (\c -> tail) (seq a (seq a (undefined::Bool)))) (seq a (\b -> (!!) (seq a ([]::[] Int)) (undefined::Int))))))) (\a -> \b -> (\c -> seq a (\d -> 0) (seq c c)) (seq b (head ([]::[] ((([] Int) -> [] Int) -> Bool))) (seq b (\c -> c))))
id (\a -> seq a (\b -> seq a (\c -> (undefined::[] Int))) (seq a (\b -> seq a ((++) ([]::[] ([] Bool)) (seq b (undefined::[] ([] Bool))))))) (head (head (tail (id (undefined::[] ([] (([] (([] (([] Int) -> Int -> Int -> Int)) -> Bool)) -> Int)))))))
(!!) ((undefined::Bool -> [] (Bool -> ([] Int) -> [] Int)) (undefined::Bool)) (undefined::Int) ((\a -> (!!) (tail (undefined::[] Bool)) (seq a (seq a (undefined::Int)))) (\a -> id (seq a (undefined::([] (Int -> Bool)) -> Bool)) (seq a (undefined::[] (Int -> Bool)))))
(\a -> seq a (\b -> \c -> (\d -> seq d (seq d c)) (seq a (seq c 1)))) ((\a -> seq a (((==)::Int -> Int -> Bool) 2)) (undefined::Bool)) (\a -> (undefined::(([] Int) -> [] ([] Int)) -> Bool) (seq a ((\b -> seq b (\c -> ([]::[] ([] Int)))) (\b -> seq a (seq a (undefined::Bool))))))
(++) ([]::[] Int)
\a -> case1 (\b -> id (seq a (\c -> (undefined::(Int -> Int) -> [] Int)))) ((\b -> \c -> seq b (undefined::[] Int)) (head (undefined::[] Bool))) ((undefined::Bool -> [] Bool) (even 2)) (seq a ((\b -> \c -> seq b (\d -> b)) (seq a (seq a (seq a 0)))) (\b -> \c -> c))
(undefined::(Int -> Int) -> (Int -> ([] Int) -> Int) -> ([] Int) -> [] Int) (\a -> seq a ((-) (head (undefined::[] Int)) a)) (case1 (\a -> \b -> id (\c -> \d -> c)) ((\a -> seq a (undefined::Int -> ([] Int) -> Int)) (even 2)) ((\a -> seq a (undefined::[] Bool)) ([]::[] (Int -> Int))))
map (id ((\a -> (!!) ((:) (undefined::Int -> Int) (seq a ([]::[] (Int -> Int)))) (case1 (undefined::Bool -> ([] Bool) -> Int) (undefined::Int) ([]::[] Bool))) (id (\a -> \b -> b))))
(\a -> seq a (undefined::(([] Int) -> Bool -> Bool) -> ([] Int) -> [] Int) (undefined::([] Int) -> Bool -> Bool)) (id (\a -> \b -> a) ((undefined::Int -> Bool) ((-) (undefined::Int) 0)))
\a -> a
map (undefined::Int -> Int)
\a -> seq a (undefined::((([] Int) -> Int -> Bool) -> Int) -> [] Int) (\b -> (+1) (seq b (case1 (undefined::Int -> ([] Int) -> Int -> Int) (seq b (+1)) a (seq a (\c -> c) 0))))
head ((\a -> \b -> seq a (seq b (\c -> ([]::[] (([] Int) -> [] Int)))) ((+1) 1)) ((\a -> seq a (seq a (seq a (undefined::Int)))) (\a -> (undefined::[] Int))) ((undefined::(([] (Int -> Bool)) -> Bool) -> ([] Int) -> Bool -> Bool) (\a -> (\b -> seq b (seq b (undefined::Bool))) (seq a (seq a (undefined::[] Bool))))))
(++) ([]::[] Int)
tail
\a -> seq a (map (\b -> seq b ((\c -> \d -> c) (seq a (seq b 0)) (map (\c -> seq a c) (seq b (undefined::[] (Int -> Int)))))) (undefined::[] (([] (([] Int) -> [] Int)) -> ([] ([] Int)) -> [] Bool)))
\a -> seq a (\b -> seq b ((!!) (seq a (undefined::[] (Int -> [] Int))) 2)) (\b -> map (seq a (\c -> ([]::[] ([] Bool)))) (undefined::[] ([] Int))) 1
filter (\a -> id (case1 ((undefined::Bool -> Int -> ([] Int) -> Bool) (not (undefined::Bool))) ((undefined::Int -> (Int -> Int -> Bool) -> Bool) a (\b -> (!!) (seq a ([]::[] Bool)))) (seq a (\b -> seq a (seq a (undefined::[] Int))) (seq a (\b -> ([]::[] (([] Int) -> Bool)))))))
case1 (\a -> \b -> (undefined::([] Int) -> [] Int)) (undefined::([] Int) -> [] Int) (head (id ([]::[] (Int -> [] (([] Int) -> [] Bool)))) ((\a -> a) (id (undefined::Int))))
id
(\a -> \b -> id (head (seq a ([]::[] (([] (Int -> Int)) -> [] Int))) (seq a (seq b ([]::[] (Int -> Int)))))) (id (undefined::Int))
(\a -> seq a (\b -> seq b (\c -> id) (\c -> seq b (undefined::Bool)))) (id (head ([]::[] ((Int -> [] Int) -> Int)) (\a -> tail (undefined::[] Int)))) (\a -> \b -> (\c -> c (seq a (\d -> seq d ([]::[] Int)) (seq c (seq a (undefined::Bool))))) ((!!) (seq a (seq b ([]::[] (([] Int) -> [] Int)))) a))
(undefined::([] Int) -> [] Int)
(\a -> seq a (\b -> id (undefined::Int -> ([] Int) -> [] Int)) (seq a (id (undefined::Int)))) (head (head ([]::[] (([] ([] ([] Int))) -> [] Int)) ([]::[] ([] ([] Int))))) ((\a -> seq a (id (seq a (undefined::([] ([] ([] (Int -> Bool)))) -> Int)) (seq a (head ([]::[] ([] ([] ([] (Int -> Bool))))))))) ((\a -> seq a (seq a (seq a (undefined::[] (Int -> Bool))))) ((+1) (undefined::Int))))
(undefined::([] Int) -> [] Int)
case1 ((!!) ([]::[] (Int -> ([] Int) -> [] Int)) (case1 (\a -> (undefined::([] ([] Int)) -> Int)) (undefined::Int) (undefined::[] ([] Int)))) ((\a -> seq a (\b -> seq b (undefined::[] Int)) (seq a (seq a (seq a ([]::[] (Bool -> Bool)))))) (\a -> id (\b -> (undefined::Int -> Int)) 2))
case1 (\a -> seq a (\b -> \c -> seq c c)) ((undefined::Bool -> ([] Int) -> [] Int) ((\a -> seq a True) (undefined::Int))) ((!!) ((\a -> seq a (undefined::[] ([] (([] Int) -> Int)))) (undefined::Int)) (undefined::Int))
(undefined::(([] ([] ([] ([] (Int -> Int))))) -> [] Bool) -> ([] Int) -> [] Int) ((\a -> seq a (seq a (\b -> seq a ((undefined::Bool -> [] Bool) (a (undefined::[] Bool)))))) ((undefined::Bool -> ([] Bool) -> Bool) ((!!) ([]::[] Bool) 0)))
(\a -> (\b -> take (seq b (head (undefined::[] Int)))) (\b -> (undefined::([] Bool) -> [] ([] Bool)) (seq b (seq b (seq a (undefined::[] Bool)))))) (undefined::([] ([] (([] Int) -> [] ([] Bool)))) -> [] (Int -> [] ([] (Int -> Int))))
(\a -> seq a (undefined::(([] ([] ([] Int))) -> [] ([] ([] Int))) -> ([] Int) -> [] Int) (\b -> b)) (head (undefined::[] ([] (([] (([] ([] Int)) -> [] ([] Int))) -> Bool -> Bool))))
(\a -> \b -> seq b ((\c -> \d -> seq c c) (seq b (seq a ([]::[] Int))) (case1 (seq b (undefined::([] Int) -> ([] ([] Int)) -> Int)) (seq b (undefined::Int)) ([]::[] ([] Int))))) (\a -> \b -> \c -> c)
(\a -> seq a (\b -> seq b (undefined::Bool -> ([] Int) -> [] Int))) (undefined::Int) ((\a -> seq a (undefined::Bool)) ((+1) 0)) ((undefined::(([] Bool) -> Bool) -> Bool) ((!!) (undefined::[] (Bool -> ([] Bool) -> Bool)) 1 (((==)::[Int] -> [Int] -> Bool) ([]::[] Int) (undefined::[] Int))))
\a -> (undefined::(([] ([] (Bool -> Bool -> Bool))) -> [] (([] Int) -> [] Bool)) -> [] Int) ((\b -> \c -> seq b (take (seq b 0) (seq b ([]::[] (([] Int) -> [] Bool))))) ((undefined::([] (([] ([] (Int -> Int))) -> [] Bool)) -> Bool) (seq a (seq a ([]::[] (([] ([] (Int -> Int))) -> [] Bool))))))
id
(:) (case1 (id (undefined::Int -> ([] Int) -> Int)) ((!!) ([]::[] Int) (undefined::Int)) ((:) 2 (undefined::[] Int)))
head (undefined::[] ((([] Int) -> ([] (Int -> Int)) -> [] (([] Int) -> [] (Bool -> Bool))) -> ([] Int) -> [] Int)) (\a -> seq a (seq a (\b -> seq b (\c -> (\d -> seq d (undefined::[] (([] Int) -> [] (Bool -> Bool)))) (undefined::Bool)) (head (seq a (undefined::[] (Bool -> Int))) (id True)))))
\a -> seq a (\b -> b (seq a (seq a ([]::[] ([] ([] (([] (Int -> Int)) -> [] (Int -> Int))))))) (case1 (\c -> (undefined::([] ([] Bool)) -> Int)) (undefined::Int) (seq b (undefined::[] ([] Bool))))) (\b -> seq b (seq a ((!!) ([]::[] (Bool -> Int -> [] Int)) (seq b (id (undefined::Int)))) (seq b (seq a (head ([]::[] (([] Bool) -> Bool)) (undefined::[] Bool))))))
\a -> seq a a
(:) ((\a -> seq a (undefined::(([] Int) -> ([] ([] (Int -> Int))) -> Bool) -> Int) (\b -> seq a ((!!) (undefined::[] (([] ([] (Int -> Int))) -> Bool)) 1))) (\a -> seq a (\b -> head (map (\c -> seq c not) (seq a (undefined::[] ([] ([] Int))))))))
\a -> seq a (map (head ([]::[] ((([] Int) -> Bool -> Bool) -> ([] ([] Bool)) -> Int)) (\b -> head (seq a (\c -> (undefined::[] (Bool -> Bool))) (\c -> seq c (undefined::Bool))))) ((\b -> (\c -> seq b (seq c (seq b ([]::[] ([] ([] Bool)))))) (seq a (seq a (undefined::Int)))) (\b -> map (undefined::(([] Int) -> [] Bool) -> [] Bool) ([]::[] (([] Int) -> [] Bool)))))
\a -> seq a (seq a (undefined::Int -> [] Int)) (seq a (\b -> seq a (\c -> seq a (undefined::Int)) (head (seq b ([]::[] (([] Int) -> Int))))) (seq a (seq a (\b -> seq b (\c -> seq c (undefined::[] (Bool -> Bool))) (\c -> (+1) (undefined::Int))))))
tail
(++) ((undefined::Int -> ((([] ([] (Int -> [] Bool))) -> Int) -> Int) -> [] Int) 0 (head (undefined::[] ((([] ([] (Int -> [] Bool))) -> Int) -> Int))))
\a -> case1 (\b -> (!!) ([]::[] (([] (([] Int) -> Int -> Int)) -> [] Int)) (b a (seq b 1))) ((\b -> seq b a) (take (seq a (undefined::Int)) (seq a (undefined::[] Bool)))) (head (seq a (\b -> seq b (seq b (undefined::[] ([] (([] Int) -> Int -> Int))))) False))
case1 (undefined::(Int -> Bool -> Bool) -> ([] (Int -> Bool -> Bool)) -> ([] Int) -> [] Int) (\a -> (enumFromTo::Int -> Int -> [Int]) ((+1) (seq a 0)) (seq a (seq a (seq a 0)))) ((\a -> seq a (undefined::[] (Int -> Bool -> Bool))) (\a -> id (seq a (seq a (undefined::[] Bool)))))
(\a -> (\b -> (undefined::Bool -> ([] Int) -> [] Int) ((!!) (undefined::[] Bool) b)) (head (seq a (\b -> seq b ([]::[] Int)) (undefined::Int)))) (id (\a -> \b -> (undefined::(([] Bool) -> Bool) -> Int) (\c -> id True)))
\a -> ([]::[] Int)
(!!) (undefined::[] ((([] ([] ([] Bool))) -> [] ([] Bool)) -> ([] Int) -> [] Int)) ((\a -> seq a (seq a (undefined::Int))) ([]::[] Int)) ((!!) ((:) (\a -> ([]::[] ([] Bool))) ([]::[] (([] ([] ([] Bool))) -> [] ([] Bool)))) (undefined::Int))
tail
(\a -> \b -> seq a (seq a (\c -> (undefined::(Int -> Bool) -> [] Int) (seq c (undefined::Int -> Bool))) (seq a (\c -> seq b (undefined::([] ([] Int)) -> [] ([] ([] Int)))) (seq b (seq a (seq b (undefined::Bool))))))) ((\a -> seq a ((!!) (seq a ([]::[] ([] Bool))))) (undefined::([] Int) -> [] (Int -> Bool)))
(undefined::(Int -> [] Int) -> ([] Int) -> [] Int) ((\a -> \b -> seq a (seq a (\c -> c)) (seq b (seq a (seq b (undefined::[] Int))))) ((++) (tail ([]::[] (([] Int) -> [] Int))) (undefined::[] (([] Int) -> [] Int))))
(\a -> seq a (seq a (\b -> \c -> seq b id) (undefined::Bool)) (undefined::Bool)) ((\a -> seq a (\b -> (\c -> seq a (seq c (undefined::[] (Int -> Int)))) a)) ([]::[] Bool))
\a -> (undefined::(([] ([] Int)) -> [] Int) -> [] Int) (seq a (head ((:) (seq a (seq a ((!!) (undefined::[] (([] ([] Int)) -> [] Int)) 1))) (seq a ((undefined::Bool -> [] (([] ([] Int)) -> [] Int)) (seq a True))))))
\a -> a
(\a -> map (seq a ((!!) (seq a ((\b -> seq b ([]::[] (Int -> Int))) (head (undefined::[] (([] Int) -> Bool))))) ((\b -> b) (seq a 2))))) (\a -> seq a (\b -> (\c -> seq c (\d -> (undefined::Bool))) (seq b (\c -> take c (seq b (undefined::[] Bool))))))
\a -> a
\a -> map (\b -> seq a (seq a (seq a (seq a (\c -> (+1) 2)))) (seq a (id (undefined::([] Int) -> Int -> Int -> Int)))) (seq a (seq a (take (seq a (seq a (\b -> 0) 2)) (undefined::[] (([] (Int -> Int -> Int)) -> Int -> Int -> Int)))))
\a -> a
case1 (undefined::Bool -> ([] Bool) -> ([] Int) -> [] Int) (\a -> (\b -> seq b a) (\b -> \c -> ([]::[] (Bool -> Bool)))) ((\a -> id (undefined::(Bool -> Bool) -> [] Bool) (seq a (\b -> b))) ((\a -> \b -> seq a ([]::[] Int)) (undefined::[] ([] (Int -> Int)))))
\a -> a
id (\a -> \b -> (:) (seq b (seq a (undefined::([] ([] Int)) -> Int)) (seq b (seq a ([]::[] ([] Int))))) (case1 (undefined::Bool -> ([] Bool) -> [] Int) (undefined::[] Int) ([]::[] Bool))) (\a -> head (seq a ([]::[] (Bool -> [] (([] Int) -> [] Bool)))) (seq a (not ((!!) ([]::[] Bool) (seq a 2)))))
\a -> seq a ((enumFromTo'::Int -> Int -> [Int]) ((\b -> seq b (\c -> seq c (undefined::Int)) b) (head (seq a (undefined::[] (Int -> Bool))) (head (seq a a)))) (id (seq a ((undefined::(Int -> Int -> [] (Bool -> Bool)) -> Int) (seq a ((!!) ([]::[] (Int -> Int -> [] (Bool -> Bool))) 0))))))
id
(\a -> (\b -> (undefined::([] ([] Bool)) -> ([] Int) -> [] Int) (seq a (seq b (undefined::[] ([] Bool))))) (seq a (seq a ((\b -> seq b (seq b (undefined::Int))) (seq a (seq a (undefined::[] Int))))))) (\a -> filter (\b -> (&&) (undefined::Bool) (odd 2)) ((\b -> seq b (seq a ([]::[] (Int -> [] Int)))) (head (seq a (undefined::[] ([] (Int -> Int)))))))
\a -> a
\a -> seq a a
(\a -> seq a (\b -> seq b (seq a (seq a (\c -> \d -> ([]::[] Int)) (seq a (seq a (undefined::[] (Int -> Bool))))) (seq b (\c -> seq a (undefined::Int)) (head (undefined::[] ([] ([] (Int -> Bool))))))))) (head ([]::[] ((([] Int) -> [] ([] Bool)) -> Bool)) ((\a -> seq a (undefined::([] Int) -> [] ([] Bool))) (\a -> id (seq a True))))
(\a -> case1 ((!!) (seq a ([]::[] (([] Int) -> ([] Int) -> [] Int)))) (\b -> seq b (seq b (seq a b))) ((\b -> seq b ([]::[] Int)) (seq a False))) (\a -> (!!) ((++) (seq a (seq a (undefined::[] ([] (Int -> Bool))))) (seq a (seq a ([]::[] ([] (Int -> Bool)))))) ((!!) (seq a (undefined::[] Int)) (seq a (seq a (seq a 1)))))
\a -> id (seq a (seq a (\b -> \c -> \d -> a) (undefined::Bool) ((!!) (seq a a) (seq a (seq a 0))))) (id (undefined::Bool))
\a -> a
(\a -> \b -> seq b (\c -> seq a (undefined::([] Int) -> [] Int)) (seq b (id False))) (id (\a -> seq a (undefined::Int)) ((!!) ([]::[] ([] (([] Bool) -> [] Bool))) 0)) (undefined::([] Int) -> Int -> Int -> Int)
head (head ((\a -> seq a (seq a (seq a (seq a ([]::[] ([] (Int -> ([] Int) -> [] Int))))))) (undefined::Int))) ((\a -> seq a (seq a (\b -> seq b 0) ([]::[] ([] (Int -> [] Int))))) (id (\a -> ([]::[] Bool)) (not (undefined::Bool))))
id (\a -> map (seq a (seq a (seq a (\b -> seq a ((+1) (seq b (seq a (undefined::Int)))))))) (seq a (id (seq a ((\b -> seq b (\c -> ([]::[] (Int -> [] Bool))) (head (undefined::[] Int))) (seq a (id (id (undefined::[] (Int -> ([] Int) -> Bool))))))))))
\a -> (++) (seq a a) a
head (undefined::[] (((([] Int) -> Bool) -> ([] (([] Bool) -> [] Bool)) -> ([] Int) -> Bool) -> ([] Int) -> [] Int)) (\a -> seq a (seq a ((!!) (seq a (seq a ([]::[] (([] (([] Bool) -> [] Bool)) -> ([] Int) -> Bool)))) ((+) (seq a 1) 1))))
take ((\a -> (+) ((+1) a) a) ((undefined::(([] ([] Int)) -> [] Bool) -> Int) (\a -> id (seq a (undefined::(([] Int) -> [] Bool) -> [] Bool)) (\b -> seq b (seq a (undefined::[] Bool))))))
(\a -> seq a (\b -> seq b (\c -> ([]::[] Int))) ((\b -> seq a (seq b (seq b (undefined::Int)))) 0)) (\a -> seq a ((\b -> seq a (map b (seq a ([]::[] Int)))) (\b -> id (seq a (seq a (seq a ([]::[] (Int -> Int))))))))
\a -> (undefined::[] Int)
(\a -> seq a (seq a (seq a (\b -> seq a (\c -> c)) (seq a (\b -> \c -> ([]::[] (Int -> [] Int))) (seq a (seq a (seq a True))))))) ((!!) (id (undefined::[] ((Int -> Int -> Int) -> (Int -> Int) -> Int))) ((\a -> seq a (undefined::Int)) ((==)::[Int] -> [Int] -> Bool)))
(\a -> \b -> (undefined::(([] ([] Bool)) -> [] Bool) -> [] Int) (seq a (\c -> seq a (head (undefined::[] (Int -> [] Bool)) (seq c a))))) 0
id
case1 (undefined::Int -> ([] Int) -> [] Int) ((undefined::([] (Int -> ([] Int) -> ([] Int) -> Bool)) -> [] Int) (id (id (undefined::[] (Int -> ([] Int) -> ([] Int) -> Bool)))))
(\a -> seq a (\b -> seq a (\c -> (undefined::([] Int) -> [] Int))) ((:) a (undefined::[] Bool))) ((\a -> seq a (seq a False)) (((==)::Bool -> Bool -> Bool) (undefined::Bool) True)) (id (\a -> (undefined::Int)) (head (head ([]::[] ([] (((([] Int) -> [] ([] Int)) -> Int) -> Bool))))))
id
(\a -> seq a (\b -> \c -> seq b (undefined::([] Int) -> [] Int)) ((!!) ([]::[] ([] Int)) 2) a) ((\a -> not (seq a (not (seq a (seq a (undefined::Bool)))))) (\a -> (undefined::([] Int) -> Int)))
\a -> take 2 (id a)
id (\a -> \b -> \c -> c) (\a -> \b -> b) ((\a -> seq a (\b -> a) (seq a (seq a (seq a (undefined::Bool))))) (case1 (\a -> \b -> a) (undefined::Int) (undefined::[] Int)))
(\a -> seq a (\b -> seq b (undefined::(([] ([] (Int -> Int))) -> Int) -> [] Int) (seq a ((!!) (seq b ([]::[] (([] ([] (Int -> Int))) -> Int))) (seq b 0))))) (\a -> (\b -> seq b (seq b (seq b ((!!) (undefined::[] ([] (Int -> Bool))) (head (undefined::[] Int)))))) (\b -> map (seq a (\c -> ([]::[] (Bool -> Bool)))) (undefined::[] (Int -> Int))))
(\a -> seq a ((\b -> seq b id) (undefined::([] Int) -> Int -> Int -> [] Int))) 2
(\a -> \b -> (\c -> seq c (map (\d -> seq b (undefined::Int)) (seq a (undefined::[] (Int -> Bool))))) (seq a (seq b (undefined::[] (([] (([] Bool) -> [] (Bool -> Bool))) -> Int))))) (\a -> (undefined::Bool -> [] ([] ([] (([] Int) -> ([] Int) -> [] Bool)))) (seq a True))
tail
(!!) (map (\a -> id (head (undefined::[] (([] Int) -> [] Int)))) (map (\a -> seq a (undefined::Bool)) ([]::[] Int))) ((!!) (take (id 0) ([]::[] Int)) ((undefined::([] ([] ([] ([] Bool)))) -> Int) ([]::[] ([] ([] ([] Bool))))))
(undefined::Int -> ([] Int) -> [] Int) ((\a -> seq a ((!!) (id ([]::[] Int)) (seq a (seq a 2)))) (id (\a -> seq a (\b -> seq b ([]::[] (Bool -> Bool))) (undefined::Bool))))
(\a -> \b -> seq a ((\c -> c b) (\c -> (++) ([]::[] Int) (undefined::[] Int)))) (head ((++) (undefined::[] ([] (([] ([] (Bool -> Bool))) -> Bool -> Bool))) (head (undefined::[] ([] ([] (([] ([] (Bool -> Bool))) -> Bool -> Bool)))))))
\a -> a
\a -> (enumFromTo::Int -> Int -> [Int]) ((undefined::([] (([] Bool) -> [] Bool)) -> Int) (seq a ((undefined::Int -> [] (([] Bool) -> [] Bool)) (seq a (seq a (seq a 0)))))) (seq a (seq a (undefined::(([] ([] (Int -> Int))) -> [] ([] (Int -> Int))) -> Int) (seq a (seq a (seq a id)))))
\a -> a
case1 ((undefined::Bool -> Bool -> ([] Bool) -> ([] Int) -> [] Int) False) (case1 (\a -> \b -> \c -> c) (\a -> a) (id ([]::[] Int))) ((\a -> seq a (undefined::(Int -> Int) -> [] Bool)) (undefined::[] Int) ((undefined::Bool -> Int -> Int) (id True)))
\a -> a
\a -> (\b -> seq a (\c -> \d -> seq b a)) ((&&) True False) (seq a (seq a (\b -> (undefined::Bool)) ((+1) (seq a 2)))) ((\b -> seq a (seq b (seq b (seq a (undefined::([] Bool) -> [] (Bool -> Bool))) (seq b ([]::[] Bool))))) (\b -> map (\c -> seq a ([]::[] (Bool -> Bool))) ([]::[] ([] Int))))
\a -> (\b -> take (id (\c -> c) (seq a (seq a (seq b 2)))) (map (undefined::([] ([] Bool)) -> Int) (undefined::[] ([] ([] Bool))))) (seq a (seq a (\b -> seq b (head (id (\c -> seq c (seq a (seq c ([]::[] ([] (Int -> Bool)))))) (id (\c -> \d -> d)))))))
\a -> (!!) (seq a (seq a (seq a (undefined::[] ((([] (Int -> Int)) -> Int -> Int) -> [] Int))))) ((undefined::Bool -> Int) (undefined::Bool)) (seq a (seq a (\b -> (!!) (undefined::[] (([] (Int -> Int)) -> Int -> Int)) (seq b (undefined::Int))) (id (seq a (seq a (seq a (seq a (seq a (undefined::Int)))))))))
(undefined::([] Int) -> [] Int)
case1 (\a -> \b -> b) (undefined::[] Int)
\a -> seq a a
\a -> tail a
case1 (:) (head ((\a -> seq a ((undefined::Int -> [] ([] Int)) (seq a (seq a 0)))) ((\a -> \b -> seq a (seq b ([]::[] ([] ([] Bool))))) (head ([]::[] Int)))))
tail
\a -> seq a (seq a (undefined::((Bool -> Int) -> Bool) -> [] Int) (seq a (id (\b -> odd (seq b (\c -> seq b c) (seq a (b False)))))))
head (undefined::[] (Bool -> (([] Int) -> Bool) -> ([] Int) -> [] Int)) (not ((\a -> seq a (seq a True)) (id 0))) (\a -> (undefined::Bool))
id
case1 (\a -> \b -> \c -> (undefined::Int -> (Int -> Bool) -> [] Int) (seq c 2) ((undefined::Bool -> Int -> Bool) (seq b (undefined::Bool)))) ((\a -> seq a (undefined::Bool -> ([] Int) -> [] Int)) (id ([]::[] Int)) False) ((undefined::Bool -> Int -> [] (([] Int) -> Bool)) (id True) ((\a -> seq a (undefined::Int)) (id (undefined::[] Int))))
(undefined::(([] Int) -> [] (Int -> [] Int)) -> Bool -> ([] Int) -> [] Int) (undefined::([] Int) -> [] (Int -> [] Int)) (even (case1 (\a -> seq a (id (undefined::([] Int) -> Int))) 0 ([]::[] Int)))
(\a -> \b -> seq a (seq b (id (undefined::Bool -> Int -> [] Int)) True) (seq b (seq b id) (seq a (id (undefined::Int))))) head
\a -> a
id
\a -> a
(\a -> \b -> seq b ((\c -> seq c (\d -> b)) (undefined::[] Bool)) (seq a (head (seq b (seq b (undefined::[] ([] (Int -> Bool)))))))) (undefined::([] Int) -> [] (Int -> Int))
(undefined::(([] (Int -> Int -> Int)) -> [] ([] Bool)) -> ([] Int) -> [] Int) ((\a -> seq a (head ([]::[] (([] (Int -> Int -> Int)) -> [] ([] Bool))))) ((\a -> seq a (seq a (seq a 0))) (head ([]::[] ([] ([] Int))))))
\a -> case1 (seq a (seq a (seq a (seq a (\b -> take)) ((+1) (seq a (undefined::Int)))))) ([]::[] Int) (seq a (tail ([]::[] Int)))
(\a -> case1 (\b -> \c -> take b c) (seq a ((!!) (undefined::[] ([] Int))) (seq a (seq a (undefined::Int))))) (id (\a -> head (seq a ([]::[] ((([] Int) -> [] Bool) -> Int -> Bool))) (map (id (seq a (\b -> seq b True))))))
id
\a -> seq a (seq a (\b -> case1 (\c -> (undefined::([] Int) -> Int -> [] Int)) (undefined::Int -> [] Int) a (seq b (seq a (id (seq b (seq b (seq a 1)))))))) (\b -> \c -> seq b (seq a (case1 (seq a (undefined::Bool -> ([] Bool) -> [] (Int -> [] Int))) (seq c (head b)) ([]::[] Bool))))
(undefined::([] (([] Int) -> Bool)) -> ([] Int) -> [] Int) ((\a -> seq a (seq a (map (seq a (undefined::Int -> ([] Int) -> Bool)) (seq a (undefined::[] Int))))) ((!!) ([]::[] ((([] Bool) -> Bool) -> Bool)) (undefined::Int) (head (undefined::[] (([] Bool) -> Bool)))))
head (head (filter (\a -> seq a (\b -> (undefined::Bool)) (seq a (seq a ([]::[] Bool)))) (id (id ([]::[] ([] (Bool -> ([] Int) -> [] Int))))))) ((undefined::Bool -> Bool) (id (undefined::(Int -> ([] Int) -> [] Int) -> Bool) (\a -> seq a (seq a (seq a id)))))
\a -> map (seq a (\b -> seq a (undefined::(Int -> [] Bool) -> Int) (\c -> seq a (\d -> seq a (undefined::[] Bool)) (tail (undefined::[] (Int -> [] Int)))))) a
case1 ((undefined::Bool -> Int -> ([] Int) -> [] Int) ((\a -> seq a (odd 1)) (\a -> seq a (id True)))) ((!!) ([]::[] (([] Bool) -> Int -> [] Int)) (undefined::Int) ((!!) ([]::[] ([] Bool)) (undefined::Int)) (undefined::Int))
(\a -> seq a ((:) ((\b -> seq b (\c -> seq a (undefined::Int)) a) (\b -> \c -> seq b (undefined::Int -> [] Bool) (head ([]::[] Int)))))) ((\a -> odd (seq a (\b -> seq a 0) (a True (undefined::Bool)))) (\a -> \b -> seq b (id id (seq b b))))
\a -> seq a (\b -> seq b (\c -> (undefined::Int -> [] Int))) (seq a (seq a (seq a False))) ((\b -> seq a (seq b (seq a (undefined::Bool)))) ([]::[] ([] ([] (([] Int) -> [] Int))))) (id ((-) (head (undefined::[] (([] Bool) -> Int)) (seq a ([]::[] Bool))) (seq a (seq a (undefined::Bool -> Int)) (seq a True))))
\a -> map (\b -> seq b (seq b (undefined::Int -> (([] Int) -> Bool) -> Int) (undefined::Int) (seq b ((undefined::([] Bool) -> ([] Int) -> Bool) (seq a (seq a (undefined::[] Bool))))))) (seq a (seq a (id (undefined::Bool -> [] (([] ([] Int)) -> [] ([] (Int -> Bool)))) (id (\b -> b) (seq a True)))))
(++) (id ((\a -> id (\b -> seq a (seq b (seq b (seq a (undefined::[] Int))))) (((==)::Bool -> Bool -> Bool) (seq a (seq a False)) (seq a (seq a (undefined::Bool))))) (id (!!) (id ([]::[] Int)) (head ((\a -> seq a a) (id (undefined::[] Int)))))))
\a -> (:) 1 a
\a -> seq a ([]::[] Int)
\a -> a
(undefined::Bool -> ([] Int) -> [] Int) ((\a -> id (\b -> (undefined::Bool)) (\b -> seq a (seq a (undefined::[] (([] Int) -> Bool))))) (\a -> \b -> (undefined::(Int -> Int -> Bool) -> Bool) (head (seq a (undefined::[] (Int -> Int -> Bool))))))
\a -> ([]::[] Int)
(\a -> (++) (head (seq a (undefined::[] (([] Bool) -> Int -> [] Int))) (id (seq a ([]::[] Bool))) (seq a ((undefined::(Int -> [] Int) -> Int) (seq a (\b -> seq a (undefined::[] Int))))))) (undefined::(([] Int) -> Bool -> Bool) -> ([] ([] Int)) -> [] ([] Int))
(\a -> (\b -> seq b (\c -> filter (seq a (undefined::Int -> Bool)) c)) (map (\b -> seq a (seq b ([]::[] Bool))))) (\a -> seq a (seq a (\b -> (undefined::([] Int) -> [] ([] Int)))) (undefined::(([] Int) -> [] Int) -> Int))
\a -> seq a (seq a (map (\b -> seq a (\c -> \d -> (undefined::Int)) (seq a b) (\c -> (undefined::[] ([] Int)))) (case1 (seq a (seq a (\b -> seq a (undefined::([] ([] Int)) -> [] Bool)))) (seq a (seq a ([]::[] Bool))) (seq a (seq a (undefined::[] ([] Int)))))))
\a -> a
take ((-) ((undefined::Bool -> Int) (undefined::Bool)) ((\a -> a) ((+1) 2)))
\a -> seq a (\b -> case1 (\c -> seq b (undefined::([] Int) -> [] Int)) ([]::[] Int) ([]::[] Int)) (seq a (seq a (seq a (id (seq a (\b -> seq a (seq a (seq a ([]::[] (([] ([] Bool)) -> [] ([] Bool))))))) ((\b -> seq b False) (seq a (seq a (undefined::Bool))))))))
(\a -> case1 (\b -> \c -> id) (\b -> b) ((\b -> seq b (undefined::[] Bool)) (seq a (undefined::Int)))) ((undefined::Bool -> Bool -> ([] ([] ([] Bool))) -> [] ([] ([] Bool))) ((\a -> a) ((&&) (undefined::Bool) False)))
\a -> seq a (seq a (undefined::(([] (Bool -> Bool -> Bool)) -> ([] Int) -> [] Bool) -> [] Int)) (\b -> (!!) (undefined::[] (([] ([] Bool)) -> ([] Int) -> [] Bool)) (seq a (undefined::Int)) (undefined::[] ([] Bool)))
head ([]::[] ((([] ([] Int)) -> [] ([] (([] Bool) -> Bool))) -> ([] Int) -> [] Int)) (\a -> (\b -> map (seq b (seq b (undefined::Int -> [] (([] Bool) -> Bool)))) (seq b (seq b ([]::[] Int)))) ((!!) (id (undefined::Bool -> [] (([] Int) -> Int)) (seq a (seq a False)))))
(undefined::(([] Int) -> ([] Int) -> [] (Bool -> Bool)) -> ([] Int) -> [] Int) (undefined::([] Int) -> ([] Int) -> [] (Bool -> Bool))
(undefined::([] Int) -> [] Int)
(:) ((undefined::(([] Int) -> [] Bool) -> Int) (\a -> (\b -> seq b (\c -> ([]::[] Bool))) (seq a (seq a False)) (seq a ((\b -> seq b b) (seq a (seq a (seq a (undefined::Int))))))))
\a -> a
(undefined::(Int -> Int -> [] Int) -> ([] Int) -> [] Int) (enumFromTo'::Int -> Int -> [Int])
\a -> (\b -> seq a (seq b (seq b (seq a (undefined::Bool -> Int -> [] Int))) (seq a (undefined::Bool))) (seq a (seq b (case1 (undefined::Int -> ([] Int) -> Int) (undefined::Int) ([]::[] Int))))) (id (\b -> seq a (undefined::Int -> [] (Bool -> Bool))) (head ([]::[] Bool)) 2)
\a -> tail (seq a ((enumFromTo::Int -> Int -> [Int]) (seq a (\b -> head (undefined::[] (Int -> Int)) (seq a 2)) (seq a (seq a ((undefined::([] ([] Int)) -> Int) (seq a (seq a (undefined::[] ([] Int)))))))) ((\b -> seq a (\c -> seq b c)) (seq a (undefined::[] ([] (Int -> Int)))) ((undefined::([] Bool) -> Int) (seq a (seq a (seq a (undefined::[] Bool))))))))
(undefined::([] Int) -> [] Int)
\a -> (++) (map (case1 (\b -> \c -> seq b (undefined::Int)) (undefined::Int)) ([]::[] ([] ([] ([] Bool))))) (seq a (seq a (seq a (undefined::(Int -> Int) -> Bool -> [] Int))) (\b -> 1) ((\b -> seq b (seq a (seq b True))) (seq a (seq a (seq a (undefined::[] ([] Int)))))))
\a -> seq a (\b -> seq a (undefined::(Int -> [] (([] Bool) -> [] Bool)) -> [] Int) (head (take (seq a (undefined::Int)) ([]::[] (Int -> [] (([] Bool) -> [] Bool)))))) (\b -> seq b (undefined::(([] ([] Int)) -> [] ([] Int)) -> ([] Int) -> ([] ([] Int)) -> [] ([] Int)))
(\a -> take ((\b -> seq a (seq b ((undefined::([] ([] Bool)) -> Int) (seq b ([]::[] ([] Bool)))))) ((undefined::Bool -> ([] Int) -> [] ([] Bool)) (seq a (seq a (seq a (undefined::Bool))))))) (\a -> a)
(\a -> (!!) (seq a ((undefined::([] Bool) -> [] (([] Int) -> [] Int)) (a (seq a (undefined::Int))))) (head (seq a (undefined::(Int -> Int) -> [] Int) (head ([]::[] (Int -> Int)))))) ((\a -> seq a (seq a (seq a (seq a (undefined::([] Bool) -> Int -> [] Bool))) (seq a (id ([]::[] Bool))))) (map (\a -> ([]::[] (Int -> Bool))) (undefined::[] (([] Bool) -> Bool))))
\a -> (\b -> (\c -> seq a (\d -> a) (seq b (seq c (seq a (undefined::Int))))) (seq b (seq b (seq b (+1) (seq a (seq a (undefined::Int))))))) (seq a ((\b -> seq a (seq b (seq a (seq b (undefined::Bool -> Bool)) (seq b (seq a (undefined::Bool)))))) (id (\b -> (undefined::[] ([] (Int -> Bool)))))))
head ([]::[] ((([] Int) -> ([] ([] Int)) -> [] Bool) -> ([] Int) -> [] Int)) (\a -> (\b -> seq b (\c -> map (\d -> d) (seq a (undefined::[] Bool)))) ((undefined::([] Bool) -> ([] Int) -> Int -> Int -> Int) ([]::[] Bool)))
(\a -> (:) (seq a (seq a (seq a (seq a (undefined::([] ([] ([] (Int -> Int -> Bool)))) -> Int))) (seq a (filter (\b -> seq a (undefined::Bool)) (seq a ([]::[] ([] ([] (Int -> Int -> Bool)))))))))) ((\a -> (\b -> seq a (\c -> \d -> seq b 2)) (seq a (id (undefined::Bool)))) ((\a -> seq a (\b -> seq a a)) (undefined::Int)))
\a -> (undefined::Int -> [] Int) ((\b -> seq b (seq a (\c -> seq b 1)) (seq a (seq b (\c -> (undefined::[] ([] (Bool -> Bool))))))) ((\b -> seq a (even b)) (seq a (seq a (seq a (undefined::Int))))))
\a -> map (seq a (undefined::([] (([] Int) -> [] Int)) -> Int)) ((undefined::Bool -> [] ([] (([] Int) -> [] Int))) (id (\b -> False) (head (undefined::[] Bool))))
(undefined::(([] Int) -> Int -> ([] Int) -> Int -> Int) -> ([] Int) -> [] Int) (\a -> \b -> seq a (\c -> (undefined::Bool -> ([] Int) -> Int -> Int)) (seq a 2) (seq a (seq b (seq b (seq a (\c -> c) (head (undefined::[] Bool)))))))
\a -> seq a (map (head (seq a (seq a ([]::[] ((([] ([] (Int -> Int))) -> ([] Bool) -> [] Bool) -> Int))))) ((!!) (seq a ([]::[] ([] (([] ([] (Int -> Int))) -> ([] Bool) -> [] Bool)))) (undefined::Int)))
filter (case1 ((undefined::([] ([] Int)) -> Bool -> ([] Bool) -> Int -> Bool) ((\a -> seq a a) (tail (undefined::[] ([] Int))))) (\a -> (undefined::Bool -> Bool) ((\b -> seq b False) (seq a a))) ((undefined::(([] Int) -> [] Int) -> [] Bool) (map (\a -> seq a a))))
id (\a -> (undefined::(Int -> Int) -> ([] Int) -> [] Int) (seq a (\b -> \c -> seq c 0) 0)) (\a -> \b -> filter (\c -> seq b (\d -> (undefined::Bool)) (seq a (seq a True))) (seq b (seq b (seq a (seq a (undefined::[] (([] (Int -> Bool)) -> [] (Int -> Bool))))))))
\a -> a
(undefined::(([] ([] (([] Bool) -> [] (Bool -> Bool)))) -> [] Int) -> ([] Int) -> [] Int) (id ((\a -> map (\b -> seq a (seq a a))) 1))
\a -> seq a (\b -> \c -> seq c (undefined::Bool -> [] Int) (seq c (seq a c))) ((undefined::(Int -> Int) -> Int) (\b -> b)) (seq a (((==)::Int -> Int -> Bool) ((\b -> seq b (seq a (undefined::Int))) (head (seq a ([]::[] Bool)))) (seq a ((\b -> b) (id (undefined::Int))))))
id ((\a -> \b -> seq b (seq a (undefined::([] Bool) -> ([] Int) -> [] Int)) (undefined::[] Bool)) True) (head (map (undefined::Bool -> Bool -> Bool -> Bool -> Bool) (undefined::[] Bool)) ((\a -> seq a (seq a (undefined::Bool))) (undefined::Int)))
(\a -> \b -> head ((!!) ((\c -> seq c (seq a ([]::[] ([] ([] Int))))) (seq a (seq b even))) (id (undefined::Int)))) ((undefined::(([] ([] ([] (Int -> [] Int)))) -> [] Int) -> Bool) (undefined::([] ([] ([] (Int -> [] Int)))) -> [] Int))
(\a -> seq a (\b -> seq a (seq a (seq a (undefined::([] Bool) -> ([] Int) -> [] Int)) a))) ((\a -> seq a (seq a (seq a ([]::[] Bool)))) ((&&) True False)) (case1 (\a -> \b -> ([]::[] (([] Int) -> [] Int))) ((\a -> seq a (undefined::[] (([] Int) -> [] Int))) (head (undefined::[] Int))) ((undefined::Bool -> [] Int) (undefined::Bool)))
(:) ((+) ((undefined::((([] Int) -> [] (Bool -> Bool)) -> ([] Bool) -> Int) -> Int) (undefined::(([] Int) -> [] (Bool -> Bool)) -> ([] Bool) -> Int)) 0)
(\a -> (\b -> \c -> seq b (\d -> seq c ([]::[] Int))) (seq a (tail ([]::[] Bool)))) (\a -> seq a (\b -> a)) (undefined::[] Bool)
head ((\a -> seq a (seq a ((\b -> seq b (undefined::[] (Int -> ([] Int) -> [] Int))) (seq a (seq a (undefined::Int)))))) ((undefined::Int -> [] (([] Int) -> [] Int)) (undefined::Int))) ((undefined::Bool -> Int) ((\a -> a) (not True)))
(\a -> seq a (\b -> (undefined::([] ([] Bool)) -> ([] Int) -> [] Int) (seq a (seq b (undefined::[] ([] Bool)))))) ((\a -> seq a (a (seq a id))) (\a -> 1)) (\a -> seq a (head (seq a (id (seq a (seq a ([]::[] (Bool -> Bool -> Bool))))))))
id (\a -> (undefined::([] (Int -> [] Int)) -> ([] Int) -> [] Int)) (odd (case1 (undefined::Int -> ([] Int) -> Int) 2 ([]::[] Int))) (id ((undefined::Int -> Int -> [] (Int -> [] Int)) 2) (undefined::Int))
(\a -> \b -> id (\c -> (undefined::[] Int)) (seq a (\c -> \d -> seq c (undefined::[] (Bool -> Bool))) (id (seq a (undefined::Int))))) (case1 (undefined::Int -> ([] Int) -> Bool) ((\a -> seq a True) ((+1) (undefined::Int))) ((\a -> seq a (undefined::[] Int)) (undefined::[] Int)))
(undefined::(([] (Int -> [] Int)) -> Int -> Int -> [] Int) -> ([] Int) -> [] Int) (\a -> \b -> \c -> seq c ((\d -> seq d (\e -> ([]::[] Int))) (seq c (even c))) (\d -> c))
(\a -> id (seq a (\b -> \c -> c)) ((\b -> seq a (seq a (seq b (undefined::Int)))) (seq a (seq a (undefined::[] ([] ([] Bool))))))) (id ((\a -> head (seq a ([]::[] (Bool -> Bool))) (undefined::Bool)) (undefined::([] ([] ([] Bool))) -> [] ([] Bool))))
id
\a -> a
\a -> (\b -> seq b (\c -> id (undefined::Int -> [] Int)) b (seq b (seq a (id (seq a (seq b (seq a (undefined::Int)))))))) (undefined::Bool)
(\a -> seq a (seq a (seq a (\b -> seq a (undefined::Bool -> ([] Int) -> [] Int))) (seq a (undefined::Bool)) (seq a (seq a (seq a (\b -> (undefined::Bool))) (seq a (head (undefined::[] ([] Bool)))))))) ((\a -> id (\b -> seq b (undefined::([] ([] Bool)) -> [] Bool)) a) (head ([]::[] ((([] ([] Int)) -> [] Int) -> Int)) (\a -> (undefined::[] Int))))
head ((++) ((undefined::Int -> [] (Int -> ([] Int) -> [] Int)) 1) (undefined::[] (Int -> ([] Int) -> [] Int))) ((undefined::(([] Int) -> [] (Int -> ([] Int) -> Bool -> Bool -> Bool)) -> Int) (id (map (undefined::Int -> Int -> ([] Int) -> Bool -> Bool -> Bool))))
tail
\a -> a
case1 (\a -> \b -> seq a ((:) 2 (seq a (\c -> b) (id (undefined::[] (Int -> Int)))))) (map (\a -> seq a (seq a (seq a (+1)) (seq a (seq a (undefined::Int))))) (id (undefined::[] (Int -> Int -> ([] ([] Int)) -> [] ([] Bool)))))
(!!) ([]::[] (Bool -> Bool -> ([] Int) -> [] Int)) 1 (case1 (undefined::Int -> ([] Int) -> Bool) True ([]::[] Int)) ((\a -> seq a (seq a (\b -> a))) (odd 1) (undefined::Bool))
head (head (id (undefined::[] ([] ((([] Int) -> [] (Int -> [] Int)) -> ([] Int) -> [] Int))))) ((\a -> (!!) (undefined::[] (([] Int) -> [] (Int -> [] Int))) (seq a (seq a (undefined::Int)))) (id (\a -> (undefined::[] ([] Int))) (undefined::[] (([] Int) -> Bool))))
\a -> seq a (\b -> a) (\b -> b)
take ((undefined::(([] ([] ([] (Bool -> Bool)))) -> ([] ([] ([] (Bool -> Bool)))) -> [] ([] ([] (Bool -> Bool)))) -> Int) (\a -> \b -> (\c -> seq c (\d -> (undefined::[] ([] ([] (Bool -> Bool)))))) (id (seq a (undefined::Int))) (case1 (undefined::([] Bool) -> ([] ([] Bool)) -> Bool) (seq b True) ([]::[] ([] Bool)))))
case1 (\a -> seq a (seq a (\b -> \c -> \d -> d) (seq a (undefined::Int -> [] Bool) a))) (\a -> seq a (\b -> (undefined::([] ([] ([] Bool))) -> [] Int)) (undefined::Bool) ((undefined::Int -> [] ([] ([] Bool))) (seq a (seq a 0)))) ((:) ((undefined::Bool -> Int) (undefined::Bool)) (tail (tail ([]::[] Int))))
(\a -> seq a (\b -> ([]::[] Int))) (\a -> \b -> seq a (undefined::Bool -> [] (([] Int) -> [] Bool)) (seq b (undefined::Int -> Bool) (seq a 1)))
(\a -> seq a (id (\b -> take a)) (\b -> \c -> seq b ((\d -> d) (seq c (undefined::Bool))))) ((!!) (case1 (\a -> head) (undefined::[] Int) ([]::[] ([] Int))) (head (undefined::[] (([] Bool) -> Int)) (tail ([]::[] Bool))))
\a -> (undefined::(([] Int) -> Bool -> Bool) -> [] Int) (\b -> \c -> c)
id
id (\a -> (undefined::([] (([] Bool) -> [] Bool)) -> ([] Int) -> [] Int)) 1 ((:) (\a -> seq a (seq a (seq a a))) (undefined::[] (([] Bool) -> [] Bool)))
take 0
tail
id (\a -> map ((\b -> seq b ((\c -> \d -> seq c 1) a)) (seq a (\b -> True) ((+1) 1))) (seq a (head (undefined::[] (([] Int) -> Bool -> [] Bool))) a (seq a (case1 (undefined::Bool -> ([] Bool) -> Bool) True (undefined::[] Bool)))))
\a -> seq a (seq a (seq a (head (tail (undefined::[] (([] (([] ([] (([] ([] Bool)) -> [] ([] Bool)))) -> Int -> Int)) -> [] Int)))))) (id (undefined::[] (([] ([] (([] ([] Bool)) -> [] ([] Bool)))) -> Int -> Int)))
\a -> ([]::[] Int)
(\a -> seq a (\b -> (++) (head ([]::[] ([] Int))))) ((\a -> seq a False) (((==)::[Int] -> [Int] -> Bool) ([]::[] Int) ([]::[] Int))) (id (\a -> seq a (seq a (\b -> seq b (head (undefined::[] ([] (Int -> Bool))))))) ((!!) (head ([]::[] ([] ([] (Int -> [] Int))))) 0))
head (head (undefined::[] ([] (([] (Int -> ([] Int) -> [] ([] Bool))) -> ([] Int) -> [] Int)))) (map (\a -> \b -> \c -> id (undefined::Bool -> [] ([] Bool)) (id True)) ([]::[] Int))
map (id (\a -> \b -> a) id ((\a -> seq a (seq a (\b -> ((==)::Int -> Int -> Bool)))) (head ([]::[] Bool)) ((\a -> id (seq a 0)) (\a -> even))))
tail
head ([]::[] ((([] Int) -> [] (Int -> Bool)) -> ([] Int) -> [] Int)) ((\a -> seq a (\b -> (\c -> seq c ([]::[] (Int -> Bool))) (seq a (seq a (undefined::[] (Int -> Int)))))) ([]::[] ([] ([] Bool))))
\a -> (\b -> tail (map (+1) (seq b (\c -> c) (seq a a)))) (\b -> (\c -> (:) (seq b (seq c (undefined::([] Int) -> [] Bool))) (undefined::[] (([] Int) -> [] Bool))) (seq b ((!!) ([]::[] (([] Int) -> Bool)) (seq b ((+1) b)))))
id
case1 (\a -> \b -> \c -> c) id ((!!) ([]::[] (Bool -> [] ([] (([] Int) -> Bool)))) 0 ((\a -> seq a False) (undefined::[] ([] Int))))
\a -> (\b -> seq b (seq a (\c -> seq a (id a)))) (undefined::[] (Bool -> Bool)) ((undefined::Bool -> Bool -> ([] Int) -> [] (Int -> Bool)) (seq a True) (case1 (\b -> (undefined::([] Int) -> Bool)) (seq a (undefined::Bool)) a))
(\a -> (!!) (seq a (map (seq a (undefined::Bool -> ([] Int) -> [] Int)) (seq a ([]::[] Bool)))) 1) ((\a -> seq a head (seq a ([]::[] Bool))) (head (undefined::[] (([] (([] Int) -> Bool)) -> [] (([] Int) -> Bool)))))
(undefined::([] Int) -> [] Int)
(++) (undefined::[] Int)
tail
\a -> (undefined::[] Int)
filter (\a -> head (seq a (seq a (id ((!!) (undefined::[] ((Int -> ([] Int) -> Bool) -> [] Bool)))) a (\b -> case1 (seq b (undefined::Int -> ([] Int) -> Bool)) (seq a (seq a id) (seq a (seq b (undefined::Bool))))))))
id (\a -> \b -> b) ((undefined::Bool -> ([] (Bool -> Bool)) -> [] (Bool -> Bool)) ((\a -> a (seq a (seq a True))) (\a -> seq a a)))
(undefined::(([] ([] Int)) -> [] Int) -> ([] Int) -> [] Int) ((undefined::Int -> Bool -> ([] ([] Int)) -> [] Int) ((+1) 2) ((undefined::(Int -> Int -> Bool) -> Bool) (\a -> \b -> seq b (seq b (undefined::Bool)))))
(undefined::(([] (([] Bool) -> Bool)) -> [] (([] (([] Bool) -> Bool)) -> ([] Bool) -> Bool)) -> ([] Int) -> [] Int) (\a -> tail ([]::[] (([] (([] Bool) -> Bool)) -> ([] Bool) -> Bool)))
\a -> seq a (\b -> seq a (seq a (\c -> a) (\c -> c))) ((!!) (undefined::[] (([] Int) -> (Int -> Bool) -> ([] Int) -> Int -> Bool)) (seq a ((-) (undefined::Int) ((+1) (undefined::Int)))))
id
\a -> (:) (case1 (\b -> (undefined::([] Bool) -> Int)) ((+) 0 0) ([]::[] Bool)) (undefined::[] Int)
\a -> seq a (\b -> a) (seq a (seq a (case1 (\b -> \c -> seq c b) (seq a ((+1) (undefined::Int))) ([]::[] Int))))
id
(:) (id (\a -> seq a ((undefined::([] Bool) -> Int -> Int) (seq a (seq a (undefined::[] Bool)))) (seq a ((!!) (seq a (undefined::[] Int)) 2))) (undefined::([] ([] (([] (Int -> Bool)) -> [] (Int -> Bool)))) -> [] (Int -> [] Int)))
head ((undefined::(([] Int) -> ([] Int) -> [] Int) -> [] (([] Int) -> [] Int)) ((\a -> (\b -> seq b (seq b (undefined::([] Int) -> ([] Int) -> [] Int))) (seq a (seq a (seq a (undefined::[] Int))))) ((undefined::Bool -> [] (([] Int) -> Bool)) True)))
\a -> case1 (id (seq a (undefined::Bool -> ([] Bool) -> Int -> [] Int))) (\b -> seq b (undefined::Bool -> [] Int) (seq b (undefined::Bool))) (seq a (seq a (undefined::Bool -> [] Bool)) (seq a (seq a True))) (seq a (head (seq a (seq a ([]::[] ((Int -> [] ([] (Int -> Bool))) -> Int))))) ((!!) (undefined::[] (Int -> [] ([] (Int -> Bool)))) (seq a (seq a 0))))
(\a -> seq a (\b -> \c -> tail c)) ((undefined::([] ([] Bool)) -> Bool) (undefined::[] ([] Bool))) head
\a -> seq a a
(undefined::([] Int) -> [] Int)
\a -> head (seq a (seq a (id (seq a (undefined::[] (([] (([] ([] ([] (Bool -> Bool)))) -> [] ([] ([] (Bool -> Bool))))) -> [] Int)))))) ((\b -> seq b (undefined::[] (([] ([] ([] (Bool -> Bool)))) -> [] ([] ([] (Bool -> Bool)))))) (((==)::Int -> Int -> Bool) (id (undefined::Int)) (id 1)))
id
(:) 2
(\a -> seq a (\b -> (\c -> seq c (undefined::([] Int) -> [] Int)) (seq b (seq b (seq b (undefined::Int))))) (undefined::Bool -> Bool -> Bool)) ((\a -> take (seq a (undefined::Int)) (seq a (undefined::[] ([] (Int -> Int))))) (\a -> head (map (undefined::Bool -> ([] ([] Int)) -> [] ([] Int)) (seq a ([]::[] Bool)))))
\a -> (++) (map (\b -> seq b b) (undefined::[] Int)) (seq a (\b -> seq b (id (undefined::Int -> [] Int) (seq a (seq a (undefined::Int))))) (\b -> head (undefined::[] (([] (Int -> Int -> Int)) -> Int)) (undefined::[] (Int -> Int -> Int))))
id (\a -> \b -> (\c -> seq c id) (seq b (seq a 1))) (not True) ((\a -> \b -> seq a (seq a ([]::[] (Int -> [] Int)))) ((+1) 2) (case1 (undefined::Bool -> ([] Bool) -> Bool) False ([]::[] Bool)))
(\a -> seq a (seq a (\b -> filter (seq b (seq a (seq b (undefined::Int -> Bool)))))) (\b -> (undefined::Int))) ((\a -> seq a (seq a (\b -> 1))) (undefined::[] ([] Bool)) (id (\a -> seq a (undefined::[] (Int -> Int))) (undefined::Int)))
map (id (id (\a -> (undefined::Bool -> Int) (((==)::Int -> Int -> Bool) a 1))))
(undefined::Bool -> (([] Int) -> ([] Int) -> Bool) -> ([] Int) -> [] Int) ((\a -> seq a (seq a (seq a False))) 2) ((\a -> seq a (seq a (\b -> ((==)::[Int] -> [Int] -> Bool))) False) ((\a -> a) ((!!) ([]::[] Int) 1)))
(undefined::(Int -> [] Int) -> ([] Int) -> [] Int) (\a -> seq a ((\b -> seq b (undefined::(Int -> Int -> [] Int) -> [] Int)) (seq a (head (undefined::[] Bool)))) ((undefined::Int -> Int -> Int -> [] Int) a))
\a -> map (seq a (seq a (undefined::Int -> (([] (Int -> Bool)) -> Int -> Bool) -> Int)) (seq a (seq a (seq a (undefined::Bool -> Int) (odd 2))))) (seq a (\b -> seq a (take (seq a (undefined::Int)) (undefined::[] (([] (Int -> Bool)) -> Int -> Bool)))) (id odd 1))
(undefined::(Int -> ([] Int) -> ([] Int) -> [] Int) -> ([] Int) -> [] Int) (undefined::Int -> ([] Int) -> ([] Int) -> [] Int)
head (id ([]::[] (((([] Int) -> [] ([] Bool)) -> ([] Int) -> [] (Bool -> Bool)) -> ([] Int) -> [] Int))) ((undefined::Bool -> (([] Int) -> [] ([] Bool)) -> ([] Int) -> [] (Bool -> Bool)) ((\a -> id (seq a True)) (\a -> seq a (head ([]::[] ([] ([] Bool)))))))
case1 (undefined::Bool -> ([] Bool) -> ([] Int) -> [] Int) ((\a -> seq a (\b -> b)) ((!!) (undefined::[] Bool) 0)) (tail ((++) (tail ([]::[] Bool)) (undefined::[] Bool)))
(\a -> seq a (\b -> \c -> seq a c) (seq a (seq a ((undefined::Bool -> ([] Bool) -> [] (Bool -> Bool)) (seq a (seq a True)))))) ((\a -> (\b -> seq a (seq b (undefined::[] (Int -> [] Int)))) ((!!) (undefined::[] Bool) (undefined::Int))) ((undefined::Bool -> ([] Int) -> Int) (undefined::Bool)))
case1 (\a -> id (\b -> (undefined::([] Int) -> [] Int))) (case1 (\a -> \b -> seq a tail) (take (undefined::Int)) (id ([]::[] Bool))) ((\a -> seq a (seq a (seq a (seq a (undefined::[] Bool))))) ((\a -> \b -> seq a b) (undefined::Bool)))
(!!) ((\a -> seq a (seq a ([]::[] (Int -> ([] Int) -> [] Int)))) (not (undefined::Bool))) (head (head ([]::[] (([] ([] Bool)) -> [] Int)) ([]::[] ([] Bool)))) 1
\a -> seq a (seq a (seq a ((undefined::([] ([] (Int -> Int))) -> Bool -> [] Int) ((!!) (seq a ([]::[] ([] ([] (Int -> Int))))) (seq a (seq a (seq a 1)))))) (seq a (head (seq a ((++) (seq a (\b -> (undefined::[] Bool)) (seq a (seq a (undefined::[] ([] Bool))))) (seq a ((undefined::([] ([] Int)) -> [] Bool) (seq a (undefined::[] ([] Int))))))))))
\a -> seq a (undefined::(([] Int) -> ([] Int) -> [] Bool) -> [] Int) (seq a (undefined::(Bool -> ([] Int) -> Bool) -> ([] Int) -> ([] Int) -> [] Bool) (undefined::Bool -> ([] Int) -> Bool))
map ((undefined::(([] (Bool -> Bool)) -> Int -> Bool -> Bool) -> Int -> Int) (head (undefined::[] (Bool -> ([] (Bool -> Bool)) -> Int -> Bool -> Bool)) ((&&) (undefined::Bool) (odd 1))))
(undefined::([] ([] (Int -> Bool))) -> ([] (Int -> Int)) -> ([] Int) -> [] Int) (head ((\a -> seq a (seq a (undefined::[] ([] ([] (Int -> Bool)))))) (id ([]::[] Bool)))) (id (\a -> \b -> ([]::[] (Int -> Int))) ((:) False ([]::[] Bool)) ((||) (undefined::Bool) (even (undefined::Int))))
\a -> a
\a -> head (seq a (\b -> \c -> ([]::[] ([] Int))) (seq a (seq a (undefined::(Int -> ([] Int) -> Bool) -> Bool)) (seq a (seq a (seq a (undefined::Int -> ([] Int) -> Bool))))) (\b -> seq a (map (undefined::Bool -> Int -> [] Int) (map (seq b head) (seq a (undefined::[] ([] Bool)))))))
\a -> seq a (seq a a)
(undefined::([] Int) -> [] Int)
id (\a -> seq a (\b -> \c -> head (seq c (seq c (seq c (undefined::[] ([] Int)))))) (\b -> (-) (undefined::Int))) (\a -> seq a (seq a (map ((\b -> seq b (seq b (undefined::([] (Bool -> Bool)) -> Int -> Int))) (seq a (seq a (undefined::Bool)))) (seq a (seq a (undefined::([] Int) -> [] ([] (Bool -> Bool)))) (seq a (seq a (undefined::[] Int)))))))
(\a -> case1 (id (\b -> seq a (undefined::([] Bool) -> ([] Int) -> [] Int))) (take (seq a (undefined::Int))) ([]::[] Bool)) ((undefined::(([] Int) -> ([] Int) -> [] Int) -> ([] Int) -> [] (Int -> Int)) (\a -> \b -> ([]::[] Int)))
\a -> id (\b -> a) (seq a ((undefined::(([] (Bool -> Bool)) -> [] (Bool -> Bool)) -> Int) (map (seq a (\b -> \c -> not) (seq a True)))))
\a -> case1 (seq a (\b -> seq a (\c -> seq b (\d -> seq d a) (seq c (seq c (seq b (undefined::[] (([] Int) -> Bool)))))))) a ([]::[] (([] Int) -> [] ([] Bool)))
(!!) ((\a -> (\b -> seq b (seq a ([]::[] (([] Int) -> [] Int)))) a) ((\a -> seq a (seq a (seq a (undefined::Bool)))) (\a -> seq a (seq a (seq a even))))) (undefined::Int)
\a -> (enumFromTo::Int -> Int -> [Int]) (seq a (undefined::Int)) (case1 (\b -> case1 (undefined::Int -> ([] Int) -> Int) b) 2 a)
take ((\a -> (!!) (undefined::[] Int) (seq a ((+1) ((undefined::Int -> Int) (undefined::Int))))) (\a -> (!!) ([]::[] Bool)))
\a -> a
(\a -> id (seq a (\b -> \c -> (undefined::[] Int)) (\b -> \c -> tail (seq a (seq b (seq c (seq a ([]::[] Int)))))))) ((\a -> id (filter (\b -> seq a (not True)))) (undefined::([] ([] Int)) -> [] Int))
(undefined::([] Int) -> [] Int)
\a -> a
case1 (\a -> (undefined::(Bool -> Bool) -> ([] Bool) -> ([] Int) -> [] Int) (\b -> seq b a)) ((\a -> seq a (seq a (seq a (undefined::([] Int) -> [] Int)))) ((\a -> seq a (undefined::Int)) (undefined::Int))) (map (undefined::Int -> Bool) ([]::[] Int))
(undefined::([] (([] (([] Int) -> Int -> Bool)) -> Int -> Bool)) -> ([] Int) -> [] Int) ((\a -> seq a (undefined::[] (([] (([] Int) -> Int -> Bool)) -> Int -> Bool))) (head (undefined::[] (Bool -> [] ([] Int))) (undefined::Bool)))
\a -> ([]::[] Int)
\a -> a
\a -> a
(undefined::([] Int) -> [] Int)
\a -> seq a (\b -> seq a (undefined::[] Int)) (\b -> seq a (seq a (seq a (seq b (seq a ([]::[] (Int -> ([] (Int -> Int)) -> [] (Int -> Int))))))))
\a -> (undefined::Int -> (([] ([] (Bool -> Bool))) -> Int -> Int -> Int) -> [] Int) 2 (undefined::([] ([] (Bool -> Bool))) -> Int -> Int -> Int)
\a -> a
id (\a -> (\b -> seq a (++) (id (seq b ([]::[] Int)))) (seq a (\b -> ([]::[] ([] (Int -> Int)))) (head (seq a (undefined::[] ([] Int)))))) (\a -> \b -> seq b (\c -> id (seq c (seq b (undefined::[] Bool)))) (seq b ((!!) ([]::[] (Int -> Int -> Bool))) 2))
(undefined::([] ([] (([] Bool) -> [] (Bool -> Bool)))) -> ([] Int) -> [] Int) (take ((undefined::([] (([] Int) -> Bool)) -> Int) (tail (undefined::[] (([] Int) -> Bool)))) ([]::[] ([] (([] Bool) -> [] (Bool -> Bool)))))
\a -> seq a a
(undefined::(([] ([] Int)) -> [] ([] Bool)) -> ([] Int) -> [] Int) ((\a -> seq a (\b -> seq a (undefined::([] ([] Int)) -> [] ([] Bool)))) ((!!) (undefined::[] Bool) 0) ((undefined::Bool -> Int) ((!!) ([]::[] Bool) 0)))
case1 ((undefined::Int -> Int -> ([] Int) -> ([] Int) -> [] Int) ((undefined::([] Bool) -> Int) (id (undefined::[] Bool)))) (map (\a -> (+1) ((undefined::([] Bool) -> Int) (seq a (seq a ([]::[] Bool)))))) (undefined::[] Int)
(\a -> (undefined::Int -> Int -> ([] Int) -> [] Int) ((!!) ([]::[] Int) a) (seq a (seq a (\b -> seq a a) (seq a (not (undefined::Bool)))))) ((\a -> id (undefined::Bool -> Int) (odd (seq a (undefined::Int)))) (\a -> seq a (\b -> seq a ([]::[] Bool)) (id id)))
(\a -> (!!) (seq a (seq a (undefined::[] (Bool -> ([] Int) -> [] Int)))) (seq a (seq a 2)) ((&&) (seq a True) (seq a (seq a (seq a (undefined::Bool)))))) ((\a -> \b -> seq a (undefined::Int)) (undefined::Int) ((+1) ((-) 2 ((+1) (undefined::Int)))))
take ((!!) (undefined::[] Int) ((+1) (head ([]::[] (Bool -> Int)) (odd (undefined::Int)))))
case1 (\a -> \b -> \c -> (!!) (undefined::[] ([] Int)) (seq a (undefined::Int))) ((undefined::Bool -> ([] Int) -> [] Int) False) ((++) (map (map odd) ([]::[] ([] Int))) (case1 (\a -> (undefined::([] Int) -> [] ([] Bool))) (undefined::[] ([] Bool)) (undefined::[] Int)))
(\a -> seq a (\b -> seq a (seq a (:) (seq b (seq b 0))))) (undefined::Bool) (\a -> \b -> True)
\a -> (undefined::[] Int)
\a -> a
id
(++) (map ((\a -> seq a (\b -> seq b (\c -> (undefined::Int)) (\c -> ([]::[] Bool)))) (\a -> seq a ((\b -> seq a (seq b ([]::[] Bool))) (id False)))) (undefined::[] (([] Int) -> Int -> Bool)))
\a -> a
(\a -> \b -> seq a (seq b b)) (\a -> a)
\a -> seq a (undefined::(([] Int) -> [] (Int -> Int -> Int)) -> [] Int) (\b -> seq b (seq a ([]::[] (Int -> Int -> Int))))
\a -> a
\a -> (\b -> case1 (seq b (\c -> \d -> (undefined::[] Int))) (take (undefined::Int) a) (seq a a)) (\b -> seq b (seq a (\c -> seq c (undefined::Int -> [] Int))) (\c -> seq c (\d -> ([]::[] Int))))
(undefined::([] Int) -> [] Int)
(\a -> (\b -> \c -> seq b c) (seq a (\b -> ([]::[] Int)))) (case1 (\a -> (\b -> \c -> seq b (\d -> ([]::[] Bool))) a) (\a -> (undefined::Int -> [] Bool) (id (seq a 2))))
\a -> seq a (seq a (seq a (\b -> \c -> a))) (seq a ((\b -> seq a (seq b 0)) (seq a (seq a (seq a (undefined::Bool)))))) (head ((\b -> (\c -> seq c ([]::[] ([] (([] ([] Bool)) -> [] ([] Bool))))) (id (seq b 0))) (\b -> b)))
\a -> seq a (map (\b -> id (undefined::([] Bool) -> ([] (Bool -> Bool)) -> Int) (undefined::[] Bool) ((undefined::([] Int) -> [] (Bool -> Bool)) (seq a (seq a (seq a a))))) ((:) (seq a ((undefined::Int -> ([] Int) -> Int -> Int) ((+1) 2))) (id (seq a (id (seq a ([]::[] (([] Int) -> Int -> Int))))))))
(undefined::Int -> ([] Int) -> [] Int) ((\a -> \b -> seq b (seq a (undefined::Int))) (undefined::[] Bool) ((\a -> seq a ([]::[] ([] (Int -> Bool)))) ((+1) (undefined::Int))))
(undefined::(([] Int) -> ([] Int) -> [] ([] Int)) -> ([] Int) -> [] Int) ((\a -> (\b -> seq b (undefined::([] Int) -> ([] Int) -> [] ([] Int))) ((-) a a)) ((\a -> seq a (seq a (seq a 1))) (id ([]::[] (([] Int) -> [] Bool)))))
\a -> seq a ((\b -> (undefined::Bool -> Bool -> [] Int) (seq b (seq a (seq a True)))) ((!!) (seq a (undefined::[] (([] Int) -> ([] Int) -> [] Int))) (undefined::Int)) (seq a (seq a ((||) (seq a (((==)::Int -> Int -> Bool) 1 (seq a 2))) (case1 (undefined::Bool -> ([] Bool) -> Bool) False (undefined::[] Bool))))))
id
(undefined::(([] Int) -> ([] Int) -> [] ([] Int)) -> ([] Int) -> [] Int) (\a -> (\b -> seq b (\c -> id (seq c (undefined::Bool -> [] ([] Int)) (seq b False)))) (\b -> seq a (id (seq a tail) (seq a (undefined::[] Int)))))
\a -> a
(undefined::(Int -> ([] Int) -> Bool) -> ([] Int) -> [] Int) (\a -> seq a (\b -> seq b (head ([]::[] ((([] ([] Int)) -> [] ([] ([] ([] Bool)))) -> Bool)) (undefined::([] ([] Int)) -> [] ([] ([] ([] Bool)))))))
(\a -> \b -> \c -> seq a c) (undefined::([] Int) -> ([] Int) -> [] Bool) ((\a -> seq a (seq a (seq a id))) (head ([]::[] (Int -> Int -> Bool))) ((!!) ([]::[] (Int -> Int)) (undefined::Int) (undefined::Int)))
\a -> a
(!!) ([]::[] ((([] Int) -> ([] Int) -> [] Bool) -> ([] Int) -> [] Int)) ((-) (head (undefined::[] Int)) (head ([]::[] Int))) (\a -> \b -> map ((!!) (seq a (seq a (undefined::[] (Bool -> Bool)))) 2) (seq b (seq b (seq b ((++) (undefined::[] Bool) (undefined::[] Bool))))))
case1 (\a -> \b -> \c -> c) (\a -> (\b -> seq b (seq b a)) (\b -> (undefined::Bool -> ([] Int) -> Int -> [] Int) (seq a (undefined::Bool)))) ((undefined::Bool -> [] (([] Int) -> [] Bool)) ((\a -> seq a (undefined::Bool)) 2))
head ((:) tail ((\a -> seq a (seq a (\b -> seq b ([]::[] (([] Int) -> [] Int))) (seq a (seq a ([]::[] Bool))))) (\a -> seq a (seq a (undefined::Int)))))
\a -> map (seq a (\b -> (+1) ((!!) ([]::[] ((Int -> Int -> [] Int) -> Int)) (seq b 1) ((\c -> seq c (seq c (undefined::Int -> Int -> [] Int))) (seq b (seq a (undefined::Int))))))) (head (seq a (seq a ([]::[] ((([] Int) -> [] (Int -> Int)) -> [] Bool)))) (\b -> (undefined::[] (Int -> Int))))
\a -> (!!) (id (seq a (seq a (seq a (seq a ((undefined::(Int -> [] Int) -> [] ([] Int)) (seq a (\b -> seq a ([]::[] Int))))))))) ((!!) a (seq a (seq a (seq a (undefined::Int -> Int)) (seq a (seq a (undefined::Int))))))
(undefined::([] Int) -> [] Int)
tail
(undefined::([] Int) -> [] Int)
\a -> (\b -> (undefined::([] Int) -> Bool -> [] Int) (seq b a) ((undefined::Bool -> Bool) (seq b (seq b True)))) (seq a (seq a (\b -> (\c -> seq b (seq c (undefined::([] ([] Int)) -> [] ([] Bool)))) (seq b (seq b (undefined::Int)))) ((undefined::Int -> Bool) (seq a ((+1) 0)))))
(\a -> seq a (head (seq a ([]::[] ((([] Bool) -> Bool) -> ([] Int) -> [] Int))) (head (id (undefined::([] Bool) -> [] (([] Bool) -> Bool)) (seq a (seq a ([]::[] Bool))))))) ((\a -> (\b -> \c -> seq a (seq b (undefined::[] ([] Bool)))) (seq a (id 1))) ((\a -> seq a (\b -> \c -> seq c False)) (head (undefined::[] Int))))
\a -> seq a a
(:) ((\a -> seq a (\b -> seq b (undefined::([] ([] (Bool -> Bool))) -> Int)) (id (seq a 2))) (((==)::[Int] -> [Int] -> Bool) (map (\a -> (undefined::Int)) ([]::[] ([] (([] Int) -> [] Int))))) (case1 ((!!) (undefined::[] (([] Int) -> [] ([] (Bool -> Bool))))) (id (id ([]::[] ([] (Bool -> Bool))))) ((\a -> seq a ([]::[] Int)) (\a -> seq a a))))
(\a -> seq a take) ((+1) ((\a -> seq a (seq a 0)) (id 0))) (head (undefined::[] ((([] ([] Int)) -> [] ([] Bool)) -> Int)) (id (undefined::([] ([] Int)) -> [] ([] Bool))))
\a -> case1 (seq a (\b -> (undefined::Int -> ([] (([] Int) -> Bool -> Bool)) -> [] Int) ((undefined::([] (Int -> Bool)) -> Int) (seq a (undefined::[] (Int -> Bool)))))) (id a) (seq a ((\b -> seq a (seq b (seq b ([]::[] (([] Int) -> Bool -> Bool))))) True))
(!!) ([]::[] ((([] ([] ([] Int))) -> [] ([] Bool)) -> ([] Int) -> [] Int)) (undefined::Int) (undefined::([] ([] ([] Int))) -> [] ([] Bool))
(\a -> seq a (\b -> (undefined::Int -> [] Int) (seq b (seq b (undefined::(Int -> Int) -> Int)) (id id)))) (undefined::Int -> ([] Int) -> Int -> [] Int)
\a -> (++) a (seq a ((\b -> seq a (seq b (undefined::(([] Bool) -> Bool) -> [] Int))) (undefined::Int)) (\b -> even (seq a (seq b (seq a 2)))))
(\a -> seq a (undefined::([] ([] ([] Bool))) -> ([] Int) -> [] Int)) ((\a -> seq a (head (undefined::[] ([] ([] Bool))))) True) ((\a -> map (seq a (undefined::([] Bool) -> [] ([] Bool))) (seq a (seq a ([]::[] ([] Bool))))) (undefined::([] ([] (([] Int) -> [] Int))) -> Int -> Bool))
id (:) ((undefined::Int -> (([] ([] Bool)) -> [] ([] Bool)) -> Int) ((+) (undefined::Int) 1) tail)
(\a -> seq a (\b -> \c -> (undefined::[] Int)) ((undefined::([] Int) -> ([] ([] Bool)) -> [] ([] Bool)) (seq a (tail (undefined::[] Int))))) (\a -> \b -> seq a (seq a (\c -> id (undefined::([] ([] Bool)) -> Bool) (tail ([]::[] ([] Bool))))) (\c -> (\d -> seq d ([]::[] (([] ([] Bool)) -> [] ([] Bool)))) c))
\a -> seq a a
\a -> a
\a -> a
\a -> a
(\a -> \b -> seq a (undefined::(Bool -> Bool -> Bool) -> [] Int) (\c -> a)) ((!!) ([]::[] (([] (Int -> [] Int)) -> Bool -> Bool)) (undefined::Int) (head ([]::[] (([] Bool) -> [] (Int -> [] Int))) (undefined::[] Bool)))
\a -> a
case1 ((\a -> \b -> seq a (\c -> seq b (\d -> seq b d))) (head ([]::[] ((Bool -> Bool) -> Bool)) (undefined::Bool -> Bool))) (\a -> ([]::[] Int)) (map ((!!) ([]::[] (([] Bool) -> Bool)) (undefined::Int)) (undefined::[] ([] Bool)))
\a -> seq a (head (take (seq a (undefined::Int)) ([]::[] ((Int -> Bool) -> Int -> [] Int)))) (\b -> head (seq b (take b (seq a ([]::[] Bool))))) (undefined::Int)
head (tail ([]::[] (([] ([] ([] Bool))) -> ([] Int) -> [] Int))) ((undefined::((Int -> Int) -> [] (Bool -> Bool)) -> [] ([] ([] Bool))) (undefined::(Int -> Int) -> [] (Bool -> Bool)))
\a -> (\b -> (\c -> seq c (\d -> seq b a)) (undefined::[] ([] Bool)) (seq b (\c -> seq b (seq c (undefined::[] (Int -> Bool)))) ((:) (undefined::Int) a))) (id (undefined::([] (Int -> Bool -> Bool)) -> Int -> Int -> Bool))
(undefined::((([] Int) -> ([] Int) -> Bool) -> Bool) -> ([] Int) -> [] Int) ((\a -> seq a (\b -> b (seq b ([]::[] Int)) (seq a (seq a ([]::[] Int))))) ((\a -> a) (undefined::Bool)))
\a -> map (\b -> seq b (seq b (seq a (undefined::([] Int) -> Int) (map (\c -> seq c (undefined::Int)) (seq b ([]::[] Bool)))))) (seq a (\b -> id ([]::[] (([] Int) -> ([] (Bool -> Bool)) -> Bool -> Bool))) (seq a (\b -> not True) (\b -> (undefined::Bool))))
(undefined::([] Int) -> [] Int)
\a -> seq a a
(!!) ((undefined::Bool -> [] (([] Int) -> [] Int)) (case1 (\a -> (undefined::([] ([] Bool)) -> Bool)) False (undefined::[] ([] Bool)))) ((undefined::(Int -> [] Int) -> Bool -> Int) (head (undefined::[] (Int -> [] Int))) (head (undefined::[] ((Int -> ([] Int) -> Bool) -> Bool)) (\a -> (undefined::([] Int) -> Bool))))
\a -> a
\a -> (!!) (seq a (map (undefined::Bool -> Int -> [] Int)) (seq a (seq a ([]::[] Bool)))) (head a) (head (map (seq a (undefined::(Int -> Bool) -> Bool -> Int)) (undefined::[] (Int -> Bool))) True)
\a -> a
(\a -> seq a (id ((\b -> seq b take) (seq a (seq a 1))))) ((\a -> a) ([]::[] ([] Int))) (id ((\a -> id (\b -> (undefined::Int)) (seq a (\b -> seq a ([]::[] Int)))) ((\a -> \b -> seq a ([]::[] ([] Bool))) (head (undefined::[] ([] Int))))))
(:) ((+) (head (map ((\a -> seq a (undefined::([] ([] Int)) -> Int)) (undefined::Int)) ((undefined::Bool -> [] ([] ([] Int))) (id (undefined::Bool))))) ((\a -> seq a (\b -> (undefined::Int)) a) ((+) 2 (undefined::Int))))
(\a -> \b -> seq a (seq b (undefined::(([] Int) -> [] (Int -> Bool)) -> [] Int)) (seq b (seq b (undefined::Int -> ([] Int) -> [] (Int -> Bool)) (id (seq b (undefined::Int)))))) (\a -> \b -> seq b ((undefined::Int -> Int -> ([] Int) -> Int -> [] Int) (id (seq b 0))) (seq a (seq b (\c -> seq a (undefined::Int)) a)))
\a -> a
(\a -> seq a (\b -> b)) (id (undefined::([] ([] (Int -> Int))) -> Int -> ([] Int) -> Int) (undefined::[] ([] (Int -> Int))))
(\a -> filter ((\b -> seq a (seq a (\c -> even) (seq a (seq b (undefined::Bool))))) (seq a (seq a (\b -> (undefined::Int))) (undefined::[] Int)))) ((\a -> \b -> seq b (\c -> \d -> seq d (undefined::Bool)) (seq a (id (undefined::[] (([] Int) -> Bool))))) (case1 (undefined::([] Bool) -> ([] ([] Bool)) -> Int) (undefined::Int) (undefined::[] ([] Bool))))
(undefined::(([] (([] Int) -> Bool)) -> ([] ([] (([] Int) -> Bool))) -> [] (([] Int) -> Bool)) -> ([] Int) -> [] Int) (\a -> id (\b -> \c -> seq c (undefined::Bool -> [] (([] Int) -> Bool)) b) (undefined::Bool))
\a -> a
\a -> head ((undefined::((Int -> [] (Int -> Bool)) -> Bool) -> [] ([] Int)) (undefined::(Int -> [] (Int -> Bool)) -> Bool))
\a -> seq a (undefined::[] Int)
(\a -> id (\b -> map (seq a (\c -> (undefined::Int))) (id (seq b ([]::[] (([] (Int -> Int -> Int)) -> [] Int)))))) (\a -> (undefined::[] (Int -> ([] Int) -> Bool)))
id (\a -> take) (undefined::([] ([] ([] Bool))) -> Int) ((\a -> seq a a) ((\a -> seq a (id 0)) (even 0)))
\a -> seq a (seq a a)
case1 (\a -> \b -> tail) ((\a -> seq a (undefined::Bool -> ([] Int) -> [] Int)) (head ([]::[] Int)) ((\a -> seq a (undefined::Bool)) (undefined::Bool))) ((undefined::([] Bool) -> [] ([] (([] Int) -> Bool))) ((\a -> seq a (undefined::[] Bool)) (\a -> 2)))
\a -> map ((undefined::([] (([] Bool) -> [] Bool)) -> Int -> Int) (seq a (seq a (seq a ([]::[] (([] Bool) -> [] Bool)))))) (seq a ((\b -> map (seq b (undefined::(Int -> Int) -> Int)) (seq a (undefined::[] (Int -> Int)))) (\b -> tail)))
case1 (\a -> (undefined::([] Int) -> Int -> ([] Int) -> [] Int)) (\a -> (++) (seq a ([]::[] Int))) ((undefined::(Bool -> Bool) -> [] Int) (\a -> seq a (undefined::Bool))) 2
\a -> seq a (seq a ([]::[] Int))
(\a -> seq a (seq a (seq a (\b -> (:) (seq a (seq a 0))))) (\b -> \c -> seq a (id (undefined::([] (Int -> Int)) -> Bool)) (seq b (tail ([]::[] (Int -> Int)))))) ((undefined::(([] ([] ([] Int))) -> [] ([] ([] Bool))) -> [] (([] Int) -> [] Int)) (undefined::([] ([] ([] Int))) -> [] ([] ([] Bool))))
(undefined::(([] Int) -> ([] Int) -> [] ([] Int)) -> ([] Int) -> [] Int) (\a -> \b -> seq a (\c -> \d -> (undefined::[] ([] Int))) (seq a (seq b (seq a True))) (head (seq b (undefined::[] Bool))))
(\a -> (\b -> seq a (seq a (seq b (undefined::Int -> ([] Int) -> [] Int)))) ((:) (undefined::Bool) (undefined::[] Bool))) (case1 (undefined::Bool -> ([] Bool) -> ([] Bool) -> Bool) (\a -> seq a True) (undefined::[] Bool)) ((\a -> \b -> seq a b) (filter (undefined::([] Int) -> Bool) (undefined::[] ([] Int))) 1)
(!!) (map (\a -> seq a (undefined::Int -> ([] Int) -> [] Int)) (tail ([]::[] ([] Int)))) 2 1
case1 (undefined::Int -> ([] Int) -> ([] Int) -> [] Int) id ((\a -> seq a ([]::[] Int)) (undefined::([] Int) -> ([] Int) -> [] Bool))
(\a -> seq a (seq a (undefined::(([] Int) -> Int -> [] Int) -> ([] Int) -> [] Int))) 2 (\a -> case1 (\b -> seq b (seq a (\c -> (undefined::Int -> [] Int)))) (undefined::Int -> [] Int) (seq a (head (seq a (undefined::[] ([] Bool))))))
\a -> a
(\a -> seq a (\b -> \c -> seq b tail) 0) (\a -> (undefined::Int -> [] ([] Int)) (seq a (seq a (seq a 1)))) ([]::[] Bool)
(undefined::Bool -> ([] Int) -> [] Int) ((\a -> head (seq a (undefined::[] (([] ([] ([] Bool))) -> Bool)))) (\a -> seq a (seq a (seq a False))) ((\a -> seq a (seq a (seq a ([]::[] ([] ([] Bool)))))) ((+1) (undefined::Int))))
(undefined::(([] Int) -> [] (Int -> [] Int)) -> ([] Int) -> [] Int) (\a -> seq a (undefined::[] (Int -> [] Int)))
(\a -> take (seq a (\b -> seq a (+1)) (seq a (seq a (seq a ((==)::Int -> Int -> Bool)))) ((\b -> seq b 0) (head ([]::[] Bool))))) (head (head ((undefined::Bool -> [] ([] (Bool -> Bool))) True)) (head (undefined::[] ((Bool -> Bool) -> Bool)) not))
case1 (\a -> (!!) (seq a (undefined::[] (([] Bool) -> ([] Int) -> [] Int))) ((\b -> seq b (undefined::Int)) (undefined::Bool))) ((!!) (undefined::[] (Bool -> ([] Int) -> [] Int)) (undefined::Int) ((\a -> a 2) (\a -> (undefined::Bool)))) (map (\a -> seq a (seq a (seq a (undefined::Bool)))) (tail (undefined::[] ([] Int))))
\a -> seq a ((undefined::([] (([] (([] Int) -> [] ([] Bool))) -> Int -> ([] ([] Int)) -> [] (([] Int) -> Bool))) -> [] Int) (seq a (seq a (seq a (seq a (undefined::[] (([] (([] Int) -> [] ([] Bool))) -> Int -> ([] ([] Int)) -> [] (([] Int) -> Bool))))))))
(undefined::Bool -> (Int -> [] Int) -> ([] Int) -> [] Int) (undefined::Bool) (\a -> (\b -> seq a (case1 (\c -> head) (seq b ([]::[] Int)) (seq a ([]::[] ([] Int))))) (\b -> \c -> (undefined::Bool)))
tail
take (case1 (undefined::(([] Bool) -> [] Bool) -> ([] (([] Bool) -> [] Bool)) -> Int) ((\a -> (+1) (seq a (seq a (undefined::Int)))) ((undefined::Bool -> ([] (Int -> Bool)) -> [] Bool) (even (undefined::Int)))) ((undefined::Int -> [] (([] Bool) -> [] Bool)) ((\a -> seq a (undefined::Int)) (head ([]::[] ([] Int))))))
case1 ((\a -> seq a (\b -> seq a (seq b (undefined::([] Bool) -> ([] Int) -> [] Int)) (head (undefined::[] ([] Bool))))) (undefined::Bool)) ((\a -> a (seq a (undefined::Int))) (case1 (\a -> (undefined::([] Bool) -> Int -> [] Int)) (undefined::Int -> [] Int) (undefined::[] Bool)))
\a -> a
(\a -> \b -> seq a (seq a b)) ((\a -> \b -> seq b (seq a (\c -> even)) (seq a (head ([]::[] ([] Int))))) (undefined::([] ([] Int)) -> [] Bool))
(++) (case1 (\a -> seq a (\b -> (undefined::[] Int))) (id (undefined::Bool -> (Int -> Bool) -> [] Int) (id False) (\a -> (undefined::Bool))) (id (\a -> seq a (seq a ([]::[] ([] ([] (Int -> Bool)))))) id))
\a -> a
\a -> seq a (seq a a)
\a -> seq a a
(\a -> \b -> head (undefined::[] ((Bool -> Bool) -> Int -> [] Int)) (seq b (seq b (\c -> seq a c))) (seq a ((\c -> seq c (seq a 0)) (\c -> seq a False)))) (\a -> (undefined::[] (([] Int) -> Bool)))
(\a -> seq a (seq a (\b -> take ((\c -> seq c c) (undefined::Int)) (seq a (seq a (undefined::Int -> [] Int) 2))))) ((\a -> seq a (\b -> a)) (((==)::Bool -> Bool -> Bool) True True) ((!!) (undefined::[] (Int -> Int))))
(\a -> seq a (\b -> (\c -> seq c (\d -> seq c ([]::[] Int))) False) ((\b -> \c -> b) (seq a (seq a (seq a 0))))) ((\a -> seq a (\b -> (undefined::[] (Bool -> Bool)))) ((\a -> seq a (\b -> seq b False)) (filter (\a -> False))))
case1 (\a -> \b -> seq b (undefined::(([] (Int -> Int)) -> Int -> Int) -> [] Int) (seq a (\c -> \d -> \e -> a) (odd (seq b a)))) ((undefined::Bool -> (([] Int) -> [] ([] Bool)) -> [] Int) (undefined::Bool) ((undefined::Bool -> ([] Int) -> [] ([] Bool)) (even 0)))
(\a -> seq a (\b -> \c -> case1 (undefined::Bool -> ([] Bool) -> [] Int) ([]::[] Int) ([]::[] Bool)) a) (head ((\a -> (\b -> seq b b) (head (seq a ([]::[] ([] Bool))))) ((!!) (take (undefined::Int) ([]::[] (([] (Int -> Bool)) -> Int -> Bool))))))
(undefined::(([] (Bool -> Bool)) -> [] (Bool -> Bool)) -> ([] Int) -> [] Int) (\a -> (\b -> map (seq b (\c -> id)) (undefined::[] Bool)) ((\b -> head (seq b ([]::[] Int))) (\b -> seq a (\c -> c))))
\a -> seq a (seq a (\b -> seq b (\c -> (undefined::([] (Bool -> Bool)) -> [] Int)) (seq b (seq a False)))) ((undefined::(Int -> Int) -> ([] Int) -> Int -> Int) (seq a (\b -> b))) (seq a (undefined::(([] Int) -> Int -> Int) -> [] (Bool -> Bool)) (\b -> (undefined::(Int -> Bool -> Bool) -> Int -> Int) (seq a (\c -> seq c (\d -> (undefined::Bool))))))
(\a -> seq a (\b -> b)) (case1 (\a -> seq a (undefined::([] Bool) -> ([] Int) -> Bool)) (undefined::([] Int) -> Bool) ((\a -> seq a ([]::[] Bool)) (tail ([]::[] Int))))
(undefined::(([] ([] Int)) -> [] Int) -> ([] Int) -> [] Int) (\a -> seq a (seq a (seq a ((++) (map (seq a (undefined::Bool -> Int)) (seq a ([]::[] Bool))) (seq a (\b -> seq b ([]::[] Int)) (seq a (seq a False)))))))
case1 (\a -> (++)) (\a -> a) (undefined::[] Int)
\a -> a
take ((undefined::Int -> Int) ((\a -> (+1) (seq a (undefined::(Int -> Int) -> Int) (id (undefined::Int -> Int)))) (map (head (take 1 (undefined::[] ((Int -> Bool) -> Int -> Bool)))))))
\a -> ([]::[] Int)
id
id
map (+1)
(!!) ((\a -> seq a (seq a ([]::[] (Bool -> ([] Int) -> [] Int)))) (even 1)) (head ([]::[] (([] (Int -> [] Int)) -> Int)) (head (undefined::[] ([] (Int -> [] Int))))) ((\a -> a) ((\a -> seq a (seq a (seq a False))) (take (undefined::Int) (undefined::[] ([] ([] (Bool -> Bool)))))))
(\a -> (\b -> \c -> seq b (\d -> c) (\d -> d)) (seq a (\b -> seq b (seq b (undefined::([] Int) -> [] (Int -> Bool)))) (seq a (undefined::[] Bool)))) (head (head ([]::[] ([] (([] ([] ([] (Int -> Int -> Bool)))) -> [] ([] ([] (([] ([] Int)) -> [] ([] Int)))))))))
tail
\a -> a
\a -> a
tail
id (undefined::(([] ([] Bool)) -> [] Bool) -> ([] Int) -> [] Int) ((undefined::(Int -> [] Bool) -> ([] ([] Bool)) -> [] Bool) ((undefined::([] ([] Bool)) -> Int -> [] Bool) ((:) ([]::[] Bool) (undefined::[] ([] Bool)))))
\a -> a
filter ((undefined::(([] ([] ([] (Int -> Bool)))) -> ([] ([] (Bool -> Bool))) -> Int -> [] (Bool -> Bool)) -> Int -> Bool) (undefined::([] ([] ([] (Int -> Bool)))) -> ([] ([] (Bool -> Bool))) -> Int -> [] (Bool -> Bool)))
case1 (undefined::Int -> ([] Int) -> ([] Int) -> [] Int) (\a -> a) ((\a -> seq a (undefined::[] Int)) (id (\a -> \b -> b)))
\a -> seq a a
(\a -> seq a (\b -> seq b (seq b (undefined::Bool -> ([] Int) -> [] Int)) (seq b (seq b (undefined::Bool))))) (case1 (\a -> seq a (undefined::([] Int) -> [] ([] Int))) ([]::[] ([] Int)) (undefined::[] Int)) (map (undefined::(([] ([] Bool)) -> [] ([] Bool)) -> ([] Bool) -> [] Bool) ((!!) (undefined::[] ([] (([] ([] Bool)) -> [] ([] Bool)))) ((+1) 0)))
\a -> seq a (filter even a)
(++) ((\a -> seq a (\b -> map (\c -> seq a (undefined::Int)) ([]::[] Bool)) (\b -> (undefined::Bool -> ([] ([] ([] (Bool -> Bool)))) -> Int) (undefined::Bool))) (\a -> ([]::[] ([] (Int -> Bool)))))
(\a -> seq a (\b -> (undefined::([] Int) -> [] Int))) (\a -> (\b -> seq b (seq a (\c -> c))) (seq a (\b -> seq b (\c -> (undefined::Bool))))) (not (undefined::Bool))
(\a -> seq a (take (seq a (seq a (seq a (seq a (\b -> seq b (undefined::Int)) (seq a ([]::[] (([] (Int -> [] Int)) -> Bool -> Bool))))))))) (\a -> (undefined::Int -> ([] Int) -> [] (([] Int) -> Int -> Int -> [] Int)) (seq a (head ([]::[] (Bool -> Int)) (seq a (seq a (seq a True))))))
\a -> seq a a
(undefined::(([] Int) -> Int) -> (Int -> [] ([] Int)) -> ([] Int) -> [] Int) ((\a -> seq a (id (undefined::([] Int) -> Int))) ((||) (undefined::Bool) (undefined::Bool))) (head (head ((\a -> (:) (seq a ([]::[] (Int -> [] ([] Int)))) (seq a ([]::[] ([] (Int -> [] ([] Int)))))) (\a -> seq a (seq a (seq a (undefined::Int -> [] Bool)) (seq a a))))))
\a -> a
(!!) ((\a -> (:) (seq a (seq a id)) (seq a ([]::[] (([] Int) -> [] Int)))) True) ((\a -> seq a (seq a (seq a (seq a (head ([]::[] Int)))))) (\a -> seq a (\b -> (undefined::[] Int)) a))
case1 (\a -> seq a (\b -> id)) (\a -> map (\b -> 2) (seq a (seq a (seq a ([]::[] (Int -> Int)))))) ((undefined::(Int -> Bool) -> [] (([] Bool) -> [] Bool)) (undefined::Int -> Bool))
\a -> case1 (head ([]::[] ((Int -> Int -> Int) -> ([] (Int -> Int -> Int)) -> [] Int))) a ([]::[] (Int -> Int -> Int))
(undefined::(([] Int) -> ([] (([] ([] Int)) -> [] ([] (Int -> Int)))) -> Bool -> Bool) -> ([] Int) -> [] Int) (\a -> \b -> (\c -> seq c (seq b not)) (seq b (head (undefined::[] (Bool -> Int -> ([] Int) -> Int)) (undefined::Bool))))
\a -> seq a a
id
(!!) ([]::[] ((([] Int) -> ([] Int) -> Bool) -> ([] Int) -> [] Int)) (head ((\a -> seq a ([]::[] Int)) (undefined::[] (Bool -> Bool)))) ((!!) ((undefined::Bool -> [] (([] Int) -> ([] Int) -> Bool)) (not False)) ((\a -> seq a (seq a 1)) (not (undefined::Bool))))
(\a -> (\b -> seq a take (head (seq b ([]::[] Int)))) (\b -> id)) (undefined::Bool)
\a -> id (undefined::(([] Int) -> ([] Int) -> [] ([] Int)) -> Bool -> [] Int) ((undefined::Int -> ([] Int) -> ([] Int) -> [] ([] Int)) (seq a (id (undefined::Int)))) (seq a ((\b -> head (seq b (b (undefined::Int) (undefined::Int) a))) (seq a (seq a (undefined::Int -> Int -> ([] Int) -> [] Bool)))))
head ((\a -> seq a (seq a ([]::[] (([] (([] Int) -> Bool)) -> ([] Int) -> [] Int)))) ((undefined::([] (Bool -> Bool)) -> Int) ([]::[] (Bool -> Bool)))) (undefined::[] (([] Int) -> Bool))
\a -> case1 (\b -> \c -> seq c (seq c (seq b (\d -> a))) (seq c (seq a (seq b (seq b True))))) a ((\b -> seq a (seq b (seq b (seq a (undefined::[] ([] Int)))))) (undefined::([] Int) -> ([] Bool) -> [] Bool))
\a -> a
(\a -> seq a (undefined::([] Int) -> [] Int)) ((\a -> (!!) (seq a ([]::[] (([] ([] Bool)) -> [] ([] Bool)))) (seq a (seq a (undefined::Int)))) (\a -> (undefined::([] Bool) -> Int -> Bool) (seq a (seq a (seq a ([]::[] Bool))))))
(\a -> seq a (case1 (\b -> \c -> \d -> d) (\b -> ([]::[] Int)) ((\b -> seq b (undefined::[] Bool)) a))) (undefined::Int)
\a -> filter ((\b -> seq a ((\c -> \d -> c ([]::[] ([] ([] Int)))) (\c -> b))) (undefined::Bool)) (seq a (\b -> head (undefined::[] (Int -> [] Int)) (seq a (seq b (undefined::Int)))) ((undefined::(([] ([] (Bool -> Bool))) -> Int) -> [] ([] Bool)) (seq a (\b -> (+1) (undefined::Int)))))
\a -> seq a (\b -> a) (seq a (seq a (seq a (seq a (seq a (seq a (\b -> ([]::[] ((([] ([] Bool)) -> [] Bool) -> ([] ([] Bool)) -> [] Bool)))))))))
\a -> seq a (undefined::(([] ([] (Int -> [] Bool))) -> [] (Bool -> Bool)) -> [] Int) (\b -> (\c -> head ([]::[] ((Int -> Bool) -> [] (Bool -> Bool))) (\d -> c)) True)
id
\a -> seq a (\b -> a) (head ([]::[] (([] (([] ([] Int)) -> [] (([] Int) -> Bool))) -> Int)))
\a -> a
\a -> (undefined::[] Int)
case1 (\a -> \b -> (++) (seq b (seq a (seq a (seq b (undefined::([] ([] ([] Bool))) -> [] Int)) (seq b (seq b (undefined::[] ([] ([] Bool))))))))) (\a -> a) ((\a -> seq a (seq a (tail ([]::[] Int)))) (undefined::([] Int) -> ([] Int) -> [] ([] Int)))
case1 (\a -> \b -> (!!) (seq a (undefined::[] (([] Int) -> [] Int)))) (\a -> \b -> seq a ([]::[] Int)) (id (undefined::(Bool -> Bool) -> [] Int) (\a -> seq a False)) (head (undefined::[] ((([] (Int -> Int)) -> Int -> [] ([] Bool)) -> Int)) (\a -> \b -> seq b (case1 (undefined::Int -> ([] Int) -> [] ([] Bool)) ([]::[] ([] Bool)) ([]::[] Int))))
(\a -> seq a (\b -> \c -> map (\d -> d) c) ((:) (seq a (\b -> seq b ([]::[] Int))) (seq a (seq a (undefined::[] (Int -> [] Int)))))) (case1 ((!!) (undefined::[] (Bool -> ([] Bool) -> Int -> Bool)) 0) even ((\a -> seq a ([]::[] Bool)) (undefined::Int -> Int -> Bool)))
(\a -> \b -> (++) ((undefined::Int -> [] Int) a) (seq b (undefined::(Int -> Int -> Int) -> [] Int) (seq a (\c -> \d -> (undefined::Int))))) (case1 (\a -> (\b -> seq b (undefined::([] Bool) -> Int)) (seq a ([]::[] Bool))) ((undefined::Bool -> Int) (undefined::Bool)) ((\a -> seq a ([]::[] Bool)) (id (undefined::[] (([] (Int -> Int)) -> Int)))))
(\a -> seq a (id (\b -> \c -> ([]::[] Int)))) ((\a -> a) ((||) False True)) (\a -> seq a (map (undefined::(([] ([] (Int -> Int -> [] Int))) -> [] Bool) -> [] Bool) (id (undefined::[] (([] ([] (Int -> Int -> [] Int))) -> [] Bool)))))
tail
tail
filter (\a -> case1 (undefined::Bool -> ([] Bool) -> Bool) (seq a ((undefined::([] ([] Bool)) -> Bool) ((\b -> seq b ([]::[] ([] Bool))) (seq a (undefined::Bool))))) (seq a (seq a (undefined::Int -> (Bool -> Bool) -> [] Bool)) (seq a (seq a (undefined::Int))) (\b -> b)))
(\a -> (\b -> \c -> a c (seq b (seq a (undefined::Int)))) (seq a ((undefined::Int -> ([] Int) -> ([] Int) -> Bool) ((+1) (seq a 1))))) (\a -> \b -> a)
(\a -> \b -> map ((\c -> \d -> c) (seq b (seq a (seq b (undefined::Int))))) (seq a ((undefined::Bool -> [] (Int -> [] (Int -> [] Bool))) (undefined::Bool)))) ((undefined::(Int -> ([] Int) -> Int) -> ([] (Int -> [] Bool)) -> Bool -> Bool) (\a -> \b -> seq a (head ((!!) (undefined::[] ([] Int)) a))))
(\a -> \b -> seq a (seq b (\c -> id) a)) ((\a -> seq a (undefined::Int)) ((enumFromTo::Int -> Int -> [Int]) (undefined::Int) (undefined::Int))) (id (\a -> (\b -> seq b (seq a (undefined::([] Int) -> Bool))) (seq a (seq a (undefined::[] (Int -> Int))))) (\a -> (:) (undefined::Bool) (seq a (seq a (seq a (undefined::[] Bool))))))
(!!) ([]::[] (([] ([] (Int -> Int))) -> ([] Int) -> [] Int)) (case1 (\a -> (undefined::([] Bool) -> Int)) 2 ([]::[] Bool)) ((:) (case1 (\a -> (undefined::([] Bool) -> [] (Int -> Int))) (undefined::[] (Int -> Int)) (undefined::[] Bool)) ((\a -> seq a (seq a ([]::[] ([] (Int -> Int))))) (head ([]::[] Int))))
\a -> seq a (seq a (map (\b -> seq b ((+1) ((\c -> seq c 1) (undefined::Bool)))) (seq a ([]::[] (([] Int) -> ([] (Int -> ([] Int) -> Int)) -> ([] ([] ([] Int))) -> [] ([] ([] Int)))))))
(undefined::([] (([] (Int -> ([] Int) -> Int)) -> ([] Int) -> Bool)) -> ([] Int) -> [] Int) ((\a -> seq a (seq a (undefined::[] (([] (Int -> ([] Int) -> Int)) -> ([] Int) -> Bool)))) ((\a -> a) (undefined::Int)))
(!!) ((undefined::(Bool -> Bool -> Bool) -> [] (([] Int) -> [] Int)) ((\a -> seq a (\b -> seq a id)) (\a -> seq a False))) (case1 (\a -> (undefined::([] Int) -> Int -> Int)) (\a -> a) ([]::[] Int) ((\a -> seq a (seq a (seq a (undefined::Int)))) (head ([]::[] Bool))))
\a -> id (\b -> a) (id (seq a (head (seq a (undefined::[] (Bool -> ([] ([] Int)) -> [] ([] Int)))))) ((\b -> id (seq b False)) (seq a (seq a (seq a (undefined::[] Bool))))))
(!!) ((\a -> (\b -> seq b (seq b ([]::[] (([] Int) -> [] Int)))) (seq a (\b -> seq a (undefined::Bool)))) ((\a -> seq a ([]::[] ([] Bool))) (head ([]::[] Int)))) ((\a -> seq a (case1 (\b -> (undefined::([] Bool) -> Int)) (seq a 2) (seq a ([]::[] Bool)))) (undefined::([] (([] ([] Int)) -> [] ([] ([] Int)))) -> [] Int))
(\a -> id (\b -> seq a (undefined::[] Int))) ((!!) (tail ((\a -> seq a (undefined::[] Bool)) 1)) (head ([]::[] (([] Bool) -> Int)) (id ([]::[] Bool))))
filter ((\a -> seq a (\b -> a)) ((!!) ((\a -> seq a (seq a ([]::[] Bool))) (+1)) (case1 (\a -> head) (undefined::Int) ([]::[] Int))))
case1 (\a -> seq a (case1 (seq a (\b -> seq b (undefined::([] Int) -> ([] Int) -> [] Int))) (\b -> seq a (seq a b)))) (\a -> id (\b -> a) ((!!) (seq a (undefined::[] (([] Int) -> ([] Int) -> Bool))) (seq a (undefined::Int)))) ((\a -> seq a ((:) (undefined::Int) ([]::[] Int))) (\a -> (\b -> seq b False) a))
tail
\a -> seq a ((\b -> (!!) (seq b (undefined::[] (Bool -> [] Int)))) (seq a ((+1) 2)) ((\b -> seq b (seq a (seq b 2))) (seq a (seq a (seq a False)))) (((==)::[Int] -> [Int] -> Bool) (seq a (\b -> seq a a) (odd 2)) (map (seq a (\b -> (undefined::Int))) (tail (undefined::[] Bool)))))
\a -> (\b -> seq b (seq a (undefined::Int -> ([] ([] (Int -> Bool))) -> [] Int) (seq b (id (undefined::Int))))) (seq a (seq a (seq a (take (seq a 0) ([]::[] (Int -> Int)))))) ((undefined::Int -> [] ([] (Int -> Bool))) (seq a (undefined::Int)))
(undefined::([] (([] (([] Int) -> [] (Bool -> Bool))) -> Int -> Int)) -> ([] Int) -> [] Int) (undefined::[] (([] (([] Int) -> [] (Bool -> Bool))) -> Int -> Int))
tail
(\a -> head (seq a (seq a (undefined::Int -> [] (([] Int) -> [] Int)) (seq a (\b -> seq b (undefined::Int)) (id (seq a (undefined::Bool))))))) (\a -> (\b -> \c -> (!!) (seq a (seq c (undefined::[] (([] Int) -> Bool)))) (seq b (seq a (undefined::Int)))) (seq a (\b -> (undefined::(([] Bool) -> Bool) -> [] Bool) (\c -> True))))
\a -> a
(\a -> seq a ((\b -> \c -> seq b (\d -> ([]::[] Int))) (seq a (seq a (seq a ([]::[] Bool))))) (seq a (seq a (seq a (even (seq a (seq a (undefined::Int)))))))) (\a -> filter (\b -> b (seq b ((undefined::([] ([] Int)) -> Bool) (id ([]::[] ([] Int)))))) ([]::[] (Bool -> Bool)))
(undefined::(([] Int) -> (Int -> Int) -> ([] ([] (([] Int) -> [] Int))) -> Int -> Int) -> ([] Int) -> [] Int) (\a -> (undefined::(Int -> Int) -> ([] ([] (([] Int) -> [] Int))) -> Int -> Int))
case1 ((\a -> seq a (seq a (\b -> \c -> \d -> d))) ((\a -> a) (undefined::Bool))) (\a -> (\b -> seq b b (seq a False)) (\b -> a)) (id ((!!) (id ([]::[] ([] Bool))) 2))
head ((++) ((undefined::Bool -> [] (Bool -> ([] Int) -> [] Int)) False) ((\a -> seq a (seq a (undefined::[] (Bool -> ([] Int) -> [] Int)))) 2)) (not (not False))
\a -> a
(\a -> \b -> head (filter (id (\c -> (undefined::Bool))) (seq a (undefined::Int -> [] ([] Int)) (seq b (seq b 1))))) (\a -> seq a (seq a (\b -> (:) (undefined::Int -> Int) (seq a ([]::[] (Int -> Int)))) (id (\b -> \c -> (undefined::Bool)) (\b -> b))))
\a -> take ((\b -> seq b (\c -> c a)) ((!!) (undefined::[] (Bool -> Bool)) 1) (seq a (\b -> head) (seq a (tail ([]::[] ([] Int)))))) (filter (\b -> False) (seq a (undefined::([] (Int -> Bool -> Bool)) -> [] Int) (seq a (seq a (undefined::[] (Int -> Bool -> Bool))))))
(\a -> (undefined::(Int -> ([] Int) -> [] (Int -> [] Int)) -> ([] Int) -> [] Int) (seq a (\b -> seq b (\c -> \d -> (undefined::[] (Int -> [] Int))) (a (head (undefined::[] Int)))))) (head ((\a -> seq a (seq a (seq a (\b -> ([]::[] (Int -> Bool))) (seq a (seq a ([]::[] ([] Bool))))))) (head (undefined::[] (([] (Int -> Int)) -> Int)) ([]::[] (Int -> Int)))))
(\a -> (\b -> \c -> seq c (a c (undefined::Int) (b (undefined::Int)))) (\b -> b)) (\a -> case1 (\b -> \c -> \d -> \e -> a) (\b -> \c -> a) ([]::[] Bool))
(++) (head ((\a -> seq a (\b -> \c -> seq c (undefined::[] ([] Int))) (seq a (seq a (seq a False)))) (\a -> head (seq a (\b -> a) (seq a (seq a (undefined::Bool))))) (undefined::Bool)))
head ([]::[] ((([] Bool) -> Bool) -> Bool -> ([] Int) -> [] Int)) head ((undefined::Bool -> Bool) ((\a -> seq a (seq a (seq a True))) ((!!) (undefined::[] Int))))
\a -> map (seq a ((\b -> seq b (seq b (\c -> seq a (seq a (seq b 1))))) (undefined::([] ([] Int)) -> [] Int))) ([]::[] Bool)
(undefined::(([] (Int -> Bool)) -> [] (Int -> Bool)) -> ([] Int) -> [] Int) (\a -> a)
\a -> (\b -> (\c -> seq c (seq a (\d -> a))) (seq b (seq a (seq a 2))) (\c -> seq c (seq a (seq b (undefined::(([] Int) -> Int) -> Int -> Bool))) (seq b (\d -> 1)))) (seq a (seq a (\b -> \c -> seq a (undefined::Bool)) (seq a (seq a (seq a (undefined::Bool))))) (\b -> seq a (\c -> head (seq c (undefined::Int -> [] Bool) c))))
(\a -> seq a (filter (\b -> (undefined::Bool)))) (head (id (undefined::[] ((([] Int) -> [] ([] Bool)) -> [] (Bool -> Bool)))) (\a -> seq a ((\b -> seq b (seq b ([]::[] ([] Bool)))) (undefined::([] Int) -> [] Bool))))
(!!) (tail (tail (undefined::[] ((Bool -> Int) -> ([] Int) -> [] Int)))) ((\a -> seq a (id (undefined::Int))) (\a -> a)) (\a -> seq a (\b -> 0) (head (seq a (seq a (seq a (seq a (undefined::[] (([] Int) -> Int -> Int -> [] Int))))))))
(!!) ([]::[] (([] ([] (Bool -> Bool))) -> ([] Int) -> [] Int)) (case1 (\a -> (undefined::([] ([] Int)) -> Int)) (undefined::Int) (undefined::[] ([] Int))) ((\a -> (\b -> head (seq b (undefined::[] ([] ([] (Bool -> Bool)))))) (seq a (id (undefined::[] ([] Bool))))) ((-) (undefined::Int) (head (undefined::[] Int))))
(\a -> id (seq a ((\b -> \c -> seq b (undefined::([] Int) -> [] Int)) (seq a (seq a (undefined::Int)))))) (\a -> map (seq a (\b -> True)) (id ([]::[] ([] ([] Bool))))) ((\a -> seq a (\b -> a) a) (case1 (\a -> \b -> (undefined::Int)) 2 ([]::[] ([] Bool))))
\a -> seq a (take ((\b -> (\c -> seq c (seq b c)) (seq b (seq b (seq b (undefined::Int))))) (seq a (\b -> head (seq a (undefined::([] Bool) -> [] (Int -> [] Int)) (seq a ([]::[] Bool)))))) ([]::[] Int))
case1 (undefined::([] (Int -> Int)) -> ([] ([] (Int -> Int))) -> ([] Int) -> [] Int) ((!!) ((\a -> seq a ([]::[] (([] Int) -> [] Int))) ([]::[] Int)) ((\a -> seq a (undefined::Int)) ([]::[] Bool))) ((undefined::Bool -> Int -> [] ([] (Int -> Int))) (head (undefined::[] Bool)) ((\a -> seq a 0) (not True)))
(\a -> (\b -> id (seq b (undefined::Bool -> ([] Int) -> [] Int))) (undefined::Bool -> Int) (head ((++) (seq a (undefined::[] Bool)) (seq a (undefined::[] Bool))))) ((\a -> \b -> map (seq b (\c -> (undefined::[] Bool))) (seq a (seq b ([]::[] Bool)))) ((\a -> \b -> seq a (seq a (undefined::[] (Int -> Int)))) (\a -> a)))
\a -> seq a a
\a -> seq a ((\b -> seq b ((\c -> \d -> c) a)) (seq a (id (undefined::(Int -> Int) -> Int -> [] Int)) (\b -> b))) ([]::[] ([] ([] Bool)))
(!!) ((\a -> seq a ((undefined::Int -> [] (([] Int) -> [] Int)) (undefined::Int))) (\a -> \b -> b)) ((!!) (map (\a -> (undefined::Int)) (undefined::[] Int)) (case1 (undefined::Int -> ([] Int) -> Int) (undefined::Int) (undefined::[] Int)))
\a -> a
(\a -> id (seq a (\b -> \c -> filter odd c)) (seq a ((undefined::Bool -> ([] Int) -> ([] Int) -> Bool) (seq a True)))) ((!!) ([]::[] (([] (([] Int) -> [] Bool)) -> Int)) (undefined::Int) ((:) (undefined::([] Int) -> [] Bool) (head (undefined::[] ([] (([] Int) -> [] Bool))))))
case1 (id (\a -> (undefined::([] (([] Int) -> Int)) -> ([] Int) -> [] Int))) ((\a -> \b -> seq a (undefined::([] Int) -> [] Int)) 2 (undefined::Int)) ([]::[] (([] Int) -> Int))
take ((\a -> (\b -> case1 (\c -> (undefined::([] Bool) -> Int)) (seq b 2) (seq a ([]::[] Bool))) (seq a (seq a (\b -> seq a (undefined::[] Int))))) (\a -> seq a (\b -> (undefined::(Int -> Int) -> [] ([] Bool)) (\c -> c)) (\b -> \c -> seq c (\d -> d) (even 1))))
\a -> ([]::[] Int)
\a -> a
(\a -> seq a (id (undefined::(([] Int) -> Bool) -> ([] Int) -> [] Int)) (seq a ((\b -> \c -> not b) (a (undefined::Int) (undefined::[] Int))))) ((\a -> \b -> \c -> seq a (((==)::Int -> Int -> Bool) b) ((+1) (seq b b))) ((\a -> seq a (map (undefined::([] ([] Int)) -> [] ([] Bool)))) False))
(!!) ([]::[] (([] Int) -> [] Int)) (id (undefined::Int))
id
\a -> map (\b -> (!!) (seq a (undefined::[] ((Bool -> [] ([] Bool)) -> Int))) b ((\c -> seq a (\d -> seq c (undefined::[] ([] Bool)))) (seq b (seq b (seq b (undefined::[] Bool)))))) a
\a -> seq a (map (\b -> seq b 1) (seq a (seq a ([]::[] (([] ([] (([] Int) -> [] (Int -> Int)))) -> [] (Int -> ([] Int) -> [] (Int -> Int)))))))
\a -> seq a (seq a ((undefined::Bool -> ((([] Int) -> [] Bool) -> [] Bool) -> [] Int) (seq a (\b -> seq a (seq a False)) (head a))) ((\b -> \c -> head (seq b ((undefined::Int -> [] ([] Bool)) (seq b (undefined::Int))))) (((==)::[Int] -> [Int] -> Bool) a a)))
\a -> a
id
\a -> (\b -> seq b a) (\b -> ([]::[] ([] Int)))
map (\a -> a)
(:) ((\a -> seq a (\b -> (+) (seq b (undefined::Int)) (seq b (undefined::Int))) (\b -> (\c -> seq c (seq c ([]::[] Bool))) (id (undefined::Bool)))) (\a -> seq a (seq a (\b -> b))))
take (undefined::Int)
\a -> a
(\a -> seq a (undefined::([] (([] ([] Bool)) -> Int -> Bool)) -> ([] Int) -> [] Int) (filter (\b -> seq b (undefined::Bool)) (seq a ([]::[] (([] ([] Bool)) -> Int -> Bool))))) (id (id (case1 (\a -> seq a (undefined::([] (Int -> Bool)) -> [] (Int -> Bool))) ((\a -> seq a (undefined::[] (Int -> Bool))) False))))
(\a -> case1 (\b -> seq a (\c -> \d -> ([]::[] Int)) False) (seq a (undefined::Int -> [] Int) (a (undefined::[] Int) ([]::[] ([] (([] Bool) -> [] Bool))) 1))) (\a -> seq a (\b -> seq b (\c -> seq b (+1)) (\c -> map (\d -> even) a)))
\a -> a
\a -> a
\a -> (!!) (seq a (seq a (seq a (\b -> (undefined::([] (Int -> Bool)) -> [] ([] Int)) (seq a (seq b ([]::[] (Int -> Bool))))) ((\b -> seq b (seq a ([]::[] ([] ([] (Int -> Int -> Bool)))))) (seq a (seq a (seq a (undefined::Int)))))))) (seq a (seq a (case1 (\b -> seq a (seq b (\c -> 2))) (seq a (id 1)) (seq a (undefined::[] Bool)))))
\a -> (\b -> id (seq a (\c -> seq a (undefined::Bool -> [] Int)) (id ([]::[] (Int -> Int)))) b) ((\b -> seq a ((\c -> seq a (seq c (undefined::Bool))) (seq b 2))) (\b -> take (id (undefined::Int)) (seq a ([]::[] Bool))))
id ((!!) (undefined::[] ((Int -> Int -> Bool) -> ([] Int) -> [] Int))) ((\a -> seq a a) (head (undefined::[] Int))) (\a -> \b -> (\c -> \d -> c) (undefined::Bool) (undefined::Int -> [] Int))
\a -> a
\a -> (\b -> seq b (\c -> (undefined::([] (Int -> Int)) -> [] Int) (seq c (seq c ([]::[] (Int -> Int))))) (\c -> (!!) (tail (undefined::[] ([] ([] Bool)))) (seq c (seq b (undefined::Int))))) (case1 (\b -> (undefined::Int -> ([] ([] (Int -> Bool))) -> Int) (seq a (id 2))) (seq a (id ((\b -> b) (seq a 0)))))
\a -> a
id
(\a -> \b -> map (\c -> seq c (\d -> 2) (seq c (seq a 0))) (seq b (seq b (seq a (seq a (seq a ([]::[] (([] (Int -> Int -> Int)) -> [] Bool)))))))) (id (\a -> \b -> (\c -> seq c ([]::[] ([] ([] Bool)))) (seq a False)) ([]::[] Int))
(\a -> (\b -> seq a (seq b (\c -> (undefined::([] Int) -> [] Int)))) (seq a (undefined::[] ([] Bool)))) ((\a -> seq a (tail ([]::[] Bool))) ([]::[] ([] Int))) ((undefined::([] Int) -> ([] Bool) -> Int) ([]::[] Int) (case1 (\a -> \b -> (undefined::[] Bool)) ([]::[] Bool) (undefined::[] ([] Int))))
id (\a -> \b -> b) ((\a -> seq a ([]::[] (([] ([] (([] Int) -> Bool))) -> [] ([] (([] Int) -> Bool))))) ((\a -> seq a False) (\a -> \b -> True)))
\a -> a
\a -> seq a (undefined::[] Int)
tail
\a -> a
id
(undefined::([] Int) -> [] Int)
\a -> ([]::[] Int)
\a -> ([]::[] Int)
\a -> head (seq a (\b -> seq a (\c -> seq a (undefined::[] (Int -> [] Int))) a) (\b -> seq b (\c -> seq b ([]::[] ([] ([] Int)))) (head ([]::[] ([] Bool))))) 2
head (undefined::[] (([] ([] ([] Bool))) -> Bool -> ([] Int) -> [] Int)) ((\a -> seq a ([]::[] ([] ([] Bool)))) (undefined::Int)) (((==)::[Int] -> [Int] -> Bool) (map (\a -> seq a 2) (undefined::[] Bool)) (map (\a -> seq a 1) ([]::[] Int)))
(\a -> (\b -> \c -> seq b (\d -> d)) (seq a (seq a (\b -> seq a b))) (seq a (\b -> id (undefined::Int)) (undefined::Int -> [] Int))) (\a -> tail ((\b -> \c -> seq b ([]::[] ([] Bool))) (undefined::Bool) (undefined::Bool)))
case1 ((\a -> \b -> seq b (seq a ((\c -> seq c tail) (seq b ([]::[] (Int -> Int)))))) ((\a -> seq a (seq a (seq a (undefined::Int)))) (undefined::([] Int) -> Bool -> Bool))) (take ((undefined::Bool -> Int) True) ((\a -> seq a (seq a (undefined::[] Int))) ([]::[] ([] (Int -> Bool)))))
(\a -> seq a (seq a id (\b -> seq a (\c -> b) (seq b (seq a (seq b (undefined::Bool))))))) (\a -> seq a (\b -> (undefined::Bool -> [] ([] (Int -> Int))) (seq a (not True))) (undefined::([] Int) -> Int -> Int -> [] Int))
\a -> seq a (\b -> seq a (seq a (undefined::((Int -> [] Int) -> Int -> Bool -> Bool) -> [] Int)) (seq b (\c -> (!!) ([]::[] (Int -> Bool -> Bool)) (seq b 1)))) ((\b -> seq a (\c -> \d -> (undefined::Bool -> [] Int) b)) (((==)::Int -> Int -> Bool) (seq a 2) (seq a (seq a (seq a 0)))))
\a -> seq a (\b -> seq a ((undefined::Int -> Bool -> [] Int) (seq a (seq b (seq b 2))) (seq b (seq a (seq b (undefined::Int -> Bool))) (undefined::Int)))) (\b -> head (undefined::[] (([] (([] Int) -> Bool)) -> [] (([] Int) -> Bool))) ((\c -> seq c (seq a (undefined::[] (([] Int) -> Bool)))) (undefined::([] Int) -> Int)))
(++) ((\a -> seq a ((undefined::Bool -> [] Int) ((\b -> b) True))) (\a -> (!!) ((\b -> b) (tail ([]::[] ([] Int)))) (case1 (\b -> (undefined::([] Bool) -> Int)) (seq a (undefined::Int)) (seq a ([]::[] Bool)))))
(undefined::([] Int) -> [] Int)
id (\a -> \b -> id (\c -> (undefined::Int -> [] Int)) a 1) ((!!) ([]::[] ((Int -> Int) -> Bool)) ((+1) (undefined::Int)) (undefined::Int -> Int))
(\a -> \b -> (undefined::(([] ([] ([] (Bool -> Bool)))) -> [] ([] (Bool -> Bool))) -> [] Int) (\c -> seq a (\d -> seq c (undefined::[] ([] (Bool -> Bool)))) a)) ((\a -> seq a (\b -> True) ([]::[] (([] ([] Int)) -> [] ([] Int)))) (\a -> (undefined::(([] ([] ([] Int))) -> [] ([] Bool)) -> [] Bool) (id (seq a (undefined::([] ([] ([] Int))) -> [] ([] Bool))))))
\a -> a
(\a -> \b -> seq b (seq b (seq a (undefined::([] Bool) -> ([] Int) -> [] Int))) (undefined::[] Bool)) ((!!) ([]::[] (([] ([] Bool)) -> Bool)) 0 (head ([]::[] ([] ([] Bool))))) ((\a -> case1 (undefined::Int -> ([] Int) -> Int) (seq a (undefined::Int)) (seq a ([]::[] Int))) (head (map (undefined::Bool -> ([] Int) -> [] ([] Int)) (id ([]::[] Bool)))))
id
(undefined::Bool -> (Int -> [] Int) -> ([] Int) -> [] Int) ((undefined::Int -> Bool) (id (undefined::Int))) ((!!) ((\a -> seq a ([]::[] (Int -> [] Int))) (undefined::Int)) ((\a -> seq a (seq a 0)) (\a -> head (undefined::[] ([] ([] Int))))))
(!!) ((\a -> seq a (undefined::[] (Bool -> ([] Int) -> [] Int))) (not (undefined::Bool))) (undefined::Int) ((\a -> (\b -> seq a (seq a (seq b False))) ((:) (undefined::Int -> Int) ([]::[] (Int -> Int)))) ((\a -> seq a (seq a (seq a (undefined::Int)))) (\a -> \b -> seq b (seq b (undefined::Bool)))))
\a -> ([]::[] Int)
take ((\a -> (undefined::Int -> (([] ([] Int)) -> [] ([] Bool)) -> Int) (seq a (a (undefined::([] Int) -> Bool) (undefined::Int) (undefined::Int))) ((\b -> seq a (seq b (seq a (undefined::([] ([] Int)) -> [] ([] Bool))))) (seq a (\b -> seq a False)))) (\a -> \b -> \c -> (\d -> d) (seq c 1)))
(undefined::(([] Int) -> [] ([] Int)) -> ([] Int) -> [] Int) ((undefined::([] ([] (Int -> Int))) -> ([] Int) -> [] ([] Int)) (id (filter (\a -> (undefined::Bool)) ([]::[] ([] (Int -> Int))))))
case1 (undefined::Bool -> ([] Bool) -> ([] Int) -> [] Int) ((\a -> \b -> seq a (undefined::([] (Int -> Int)) -> [] Int) (seq a (undefined::[] (Int -> Int)))) (head (undefined::[] (Bool -> Int -> Int -> Int)) (even 1))) ((\a -> seq a (filter (undefined::Bool -> Bool) (undefined::[] Bool))) (\a -> head (seq a (seq a ([]::[] ([] ([] (Bool -> Bool))))))))
\a -> a
head (filter (undefined::((Int -> [] Bool) -> ([] Int) -> [] Int) -> Bool) (head ([]::[] ([] ((Int -> [] Bool) -> ([] Int) -> [] Int))))) ((\a -> id (seq a (\b -> seq a (undefined::[] Bool)))) (\a -> seq a (seq a ([]::[] ([] Int)))))
\a -> seq a (map (\b -> seq b (seq a (undefined::(([] (Int -> [] Int)) -> ([] Int) -> Bool) -> Int) (seq a (seq b (seq b (seq b (undefined::([] (Int -> [] Int)) -> ([] Int) -> Bool))))))) ((\b -> (\c -> seq c (undefined::[] (([] Int) -> [] (Int -> [] Int)))) (seq a (seq b (seq a 1)))) (id (\b -> (undefined::([] Int) -> [] Bool)) (\b -> seq a b))))
(\a -> (\b -> \c -> seq b (undefined::(Int -> Int -> Bool) -> [] Int) (seq c (\d -> seq a even))) (((==)::Int -> Int -> Bool) (undefined::Int) (seq a (seq a (undefined::Int))))) (undefined::Int -> [] (Int -> Int))
(\a -> seq a (head (undefined::[] ((([] Int) -> [] Bool) -> ([] Int) -> [] Int)))) ((!!) ((undefined::Int -> [] Bool) ((+1) (undefined::Int)))) (\a -> (undefined::[] Bool))
head (id (undefined::[] ((Bool -> Bool) -> Int -> ([] Int) -> [] Int))) ((\a -> seq a (head (undefined::[] (Bool -> Bool)))) (id (undefined::[] (([] Int) -> [] Int)))) (undefined::Int)
\a -> (\b -> seq b (id (undefined::(([] ([] Bool)) -> [] ([] (Bool -> Bool))) -> [] Int)) (map ((!!) ([]::[] (([] Bool) -> [] (Bool -> Bool))) ((+1) (undefined::Int))))) (undefined::Bool)
tail
\a -> seq a (\b -> (\c -> seq c (tail a)) (seq b ((undefined::([] ([] (Int -> Bool))) -> Int) (head (seq a ([]::[] ([] ([] (Int -> Bool))))))))) (\b -> seq a (seq a (seq a (seq b (undefined::[] (([] (([] Bool) -> [] Bool)) -> ([] Bool) -> [] Bool))))))
\a -> seq a ([]::[] Int)
(undefined::Bool -> ([] (Int -> Int)) -> ([] Int) -> [] Int) (head (map (undefined::(Bool -> Bool) -> Bool) (undefined::[] (Bool -> Bool)))) ((undefined::(([] Int) -> ([] Int) -> Bool) -> [] (Int -> Int)) (\a -> \b -> seq a (((==)::[Int] -> [Int] -> Bool) a b)))
\a -> a
id
(!!) (id (\a -> (undefined::[] (([] Int) -> [] Int))) ([]::[] (Int -> [] Int))) ((undefined::((([] ([] ([] Bool))) -> [] ([] ([] Bool))) -> Bool) -> Int) (\a -> seq a (head (undefined::[] ((Int -> Int -> Int) -> Bool))) (seq a (\b -> seq a id))))
(\a -> filter (seq a (seq a (seq a (undefined::Int -> Int -> Int -> Bool))) (seq a (seq a (seq a (undefined::Int)))) (seq a (seq a (undefined::Bool -> Int)) (seq a (head (undefined::[] Bool)))))) (id (\a -> seq a (undefined::Int -> ([] Int) -> Int -> [] Int)))
\a -> (undefined::Bool -> (([] Int) -> ([] Int) -> ([] Int) -> [] Int) -> [] Int) (case1 (\b -> seq a (undefined::([] Bool) -> Bool)) (seq a True) (seq a ([]::[] Bool))) (seq a (\b -> seq b (seq a (undefined::Bool -> ([] Int) -> ([] Int) -> [] Int)) (not (seq b (seq b (seq b (undefined::Bool)))))))
(undefined::(([] (Int -> Int -> Int -> [] Int)) -> [] (Int -> Int -> Int -> [] Int)) -> ([] Int) -> [] Int) (\a -> a)
(undefined::(([] Int) -> ([] ([] (Int -> Int))) -> Bool) -> ([] Int) -> [] Int) (\a -> (undefined::([] ([] (Int -> Int))) -> Bool))
\a -> case1 ((\b -> seq b (\c -> \d -> d)) ((+1) (seq a (seq a (undefined::Int))))) a a
(\a -> seq a (\b -> seq a (\c -> \d -> d) (undefined::[] Bool)) (undefined::Bool -> Bool -> Bool)) (undefined::Int)
\a -> seq a (\b -> seq a (undefined::(Int -> ([] Int) -> Int) -> [] Int)) ((undefined::Bool -> Bool) (id (seq a True))) (case1 (seq a (\b -> \c -> \d -> \e -> d)) (seq a (seq a (\b -> \c -> b))) (undefined::[] Int))
\a -> (++) a ([]::[] Int)
case1 ((!!) ((undefined::Bool -> Bool -> [] (([] Int) -> [] Int)) (head (undefined::[] Bool)) ((\a -> seq a (seq a (undefined::Bool))) (\a -> ([]::[] Int))))) ((\a -> (undefined::([] Bool) -> [] Int) (seq a (seq a (seq a (undefined::[] Bool))))) ((\a -> id (seq a False)) (\a -> a)))
tail
\a -> a
\a -> a
id
\a -> map (seq a (undefined::Int -> (Int -> [] Int) -> Int) (seq a (undefined::(Int -> ([] Int) -> Int) -> Int) (undefined::Int -> ([] Int) -> Int))) (tail (seq a (undefined::Int -> [] (Int -> [] Int)) (seq a (seq a (+1) ((+1) 2)))))
\a -> seq a (seq a (seq a (seq a (case1 (\b -> seq a (\c -> \d -> a) (seq a (seq b True))) (seq a (seq a (undefined::Bool -> [] Int)) (seq a (seq a False))) (seq a (seq a (seq a (seq a (\b -> seq b (seq a (undefined::[] Bool)))))) (case1 (\b -> (undefined::([] Bool) -> Int)) (seq a 0) (seq a ([]::[] Bool))))))))
(undefined::([] Int) -> [] Int)
(undefined::(([] (Bool -> Bool)) -> (Int -> [] Bool) -> Int -> [] Bool) -> ([] Int) -> [] Int) (\a -> head (seq a (map (seq a (\b -> \c -> seq b (\d -> c d))) ((!!) ([]::[] ([] Bool)) (seq a (seq a 1))))))
(:) (undefined::Int)
head (id ((\a -> seq a ((undefined::Bool -> Int -> [] (([] Int) -> [] Int)) True)) (((==)::Int -> Int -> Bool) ((+1) 1) (undefined::Int)) ((\a -> \b -> seq a 0) (head ([]::[] Bool)) ((+1) 2))))
(\a -> case1 (seq a (\b -> seq a (seq b (undefined::([] Int) -> ([] Int) -> [] Int)))) (\b -> seq b ([]::[] Int)) (id (seq a (undefined::[] Int)))) (id (\a -> (\b -> seq b (seq a (undefined::Bool))) (\b -> seq a (undefined::Int -> Int))) (\a -> seq a (seq a (seq a (undefined::[] (Int -> [] (([] Bool) -> [] Bool)))))))
tail
(undefined::([] Int) -> [] Int)
\a -> (\b -> (undefined::(([] Int) -> [] (([] Int) -> ([] ([] Int)) -> [] Bool)) -> [] Int) (\c -> seq b (seq a (tail (seq a (undefined::[] (([] Int) -> ([] ([] Int)) -> [] Bool))))))) (seq a (not (id (\b -> (undefined::([] (([] Int) -> Bool)) -> Bool)) (seq a ((+1) 2)) ([]::[] (([] Int) -> Bool)))))
\a -> seq a (seq a a)
\a -> head (seq a (undefined::[] (([] ([] (Bool -> Bool))) -> Int -> [] Int))) (seq a ((\b -> seq b (seq b ([]::[] ([] (Bool -> Bool))))) 1)) ((\b -> b) ((\b -> seq b ((+1) 1)) (\b -> take 1)))
\a -> a
\a -> ([]::[] Int)
(++) (map ((\a -> seq a (undefined::(([] ([] Bool)) -> [] ([] (Bool -> Bool))) -> Int)) ((undefined::(([] Int) -> Int) -> Int -> Int) (id (\a -> (undefined::Int))))) (undefined::[] (([] ([] Bool)) -> [] ([] (Bool -> Bool)))))
(\a -> (\b -> (!!) (seq a (seq a ([]::[] (([] Int) -> [] Int)))) (seq b (seq b (undefined::Int)))) ((\b -> b) (seq a (seq a (seq a (undefined::Bool)))))) ((!!) (undefined::[] ([] ([] (Int -> Bool)))))
(undefined::((([] ([] (([] Int) -> [] Int))) -> [] (([] Int) -> Bool)) -> ([] Bool) -> [] Bool) -> ([] Int) -> [] Int) (\a -> \b -> b)
\a -> (undefined::[] Int)
\a -> seq a ((\b -> seq b (undefined::[] Int)) (\b -> (\c -> \d -> \e -> seq c (seq b (undefined::[] (Int -> [] Int)))) (seq b ((+1) 0)) (seq b (seq b ((\c -> seq c (seq c c)) (seq b (seq a (undefined::Bool))))))))
\a -> filter (\b -> (undefined::(Bool -> ([] (Int -> [] Int)) -> Int -> [] Int) -> Bool) (\c -> \d -> (undefined::Int -> Int -> [] Int) b)) ((undefined::(Bool -> Bool) -> Bool -> [] Int) (\b -> b) (seq a (id (undefined::Int -> Bool)) 0))
filter (\a -> False)
case1 (\a -> \b -> seq b ((\c -> seq b (seq c (\d -> seq c d))) True)) (\a -> seq a ((undefined::(Int -> Bool) -> [] Int) (\b -> seq b (undefined::Bool)))) ((\a -> (undefined::Int -> [] Bool) (seq a (seq a 1))) (head ([]::[] ((Bool -> Bool) -> Bool)) (\a -> False)))
\a -> a
\a -> id (undefined::(([] (Int -> Bool)) -> [] (Int -> Bool)) -> [] Int) (seq a (\b -> case1 (seq a (id (\c -> (undefined::([] Bool) -> [] (Int -> Bool))))) ([]::[] (Int -> Bool)) ([]::[] Bool)))
\a -> tail a
(undefined::([] Int) -> [] Int)
\a -> (undefined::(([] Int) -> [] (Int -> Int)) -> [] Int) (\b -> (undefined::(Int -> Int) -> Bool -> [] (Int -> Int)) (\c -> seq c c) (undefined::Bool))
(\a -> (!!) (seq a (seq a (seq a (seq a (undefined::[] (([] Int) -> [] Int)))))) ((undefined::((Int -> Bool) -> Int -> Bool) -> Int) (seq a (seq a (\b -> \c -> (undefined::Bool)))))) (\a -> head ((++) ([]::[] (Bool -> ([] ([] Int)) -> [] Bool)) ([]::[] (Bool -> ([] ([] Int)) -> [] Bool))) (seq a (seq a False)))
case1 (:) (undefined::[] Int)
\a -> a
tail
case1 (\a -> \b -> b) ((enumFromTo'::Int -> Int -> [Int]) ((\a -> id a) (head (undefined::[] Int))) ((undefined::(Int -> Int -> [] Int) -> Int) (enumFromTo'::Int -> Int -> [Int])))
\a -> tail (head (seq a (seq a (\b -> seq b (\c -> (undefined::[] ([] Int))) (seq b (seq a False))) (seq a (seq a ((\b -> seq b (undefined::([] (Int -> Bool)) -> [] ([] Bool))) (head a)))))))
(undefined::(([] (([] Int) -> ([] Int) -> [] Bool)) -> ([] ([] Int)) -> [] Bool) -> ([] Int) -> [] Int) (\a -> case1 (\b -> \c -> id (undefined::Bool -> [] Bool) (undefined::Bool)) ((++) (seq a (undefined::[] Bool)) (seq a (undefined::[] Bool))))
\a -> a
head (map (\a -> \b -> (\c -> seq c (\d -> b) (seq a (seq b False))) (id (undefined::[] (Int -> ([] Int) -> ([] Int) -> [] Bool)))) (undefined::[] (([] ([] ([] (Int -> Int)))) -> [] (Int -> [] (Int -> Int)))))
\a -> seq a (seq a (seq a (undefined::Int -> (([] Int) -> ([] ([] Int)) -> [] Bool) -> [] Int) (id (seq a ((+1) (seq a (seq a (undefined::Int)))))))) (seq a (undefined::(([] Bool) -> Bool) -> ([] Int) -> ([] ([] Int)) -> [] Bool) (\b -> not (seq b (id (undefined::Bool)))))
\a -> map (seq a (seq a (\b -> b ([]::[] (([] Int) -> [] (Int -> [] Int))) 2 (undefined::Int)))) (seq a (seq a (seq a (seq a (seq a (id (undefined::[] (([] (([] Int) -> [] (Int -> [] Int))) -> Int -> Int -> Int))))))))
(\a -> seq a ((!!) (seq a (seq a ([]::[] (Int -> ([] Int) -> [] Int)))) 1) (case1 (\b -> (undefined::([] Bool) -> Int)) (seq a 1) (seq a ([]::[] Bool)))) ((undefined::(([] (Bool -> Bool)) -> Bool) -> ([] Bool) -> [] Bool) (undefined::([] (Bool -> Bool)) -> Bool))
(\a -> seq a (\b -> seq b (\c -> (undefined::Bool -> [] Int)) (id (\c -> True)) (id (undefined::([] Int) -> Bool) b))) ((undefined::(([] Int) -> Bool) -> [] ([] (Bool -> Bool))) (((==)::[Int] -> [Int] -> Bool) (case1 (:) (undefined::[] Int) (undefined::[] Int))))
(undefined::Int -> (([] Int) -> Bool -> Bool -> Bool) -> ([] Int) -> [] Int) 2 ((undefined::Int -> ([] Int) -> Bool -> Bool -> Bool) ((\a -> seq a (undefined::Int)) (\a -> \b -> even 1)))
case1 ((\a -> seq a ((\b -> seq a (seq b take)) (seq a (seq a False)))) ((undefined::([] ([] Bool)) -> ([] ([] Bool)) -> [] ([] Bool)) ([]::[] ([] Bool)))) ((\a -> id (seq a (\b -> (undefined::[] Int)) (seq a (undefined::Bool)))) ((!!) ([]::[] (([] Int) -> Int -> Int)) 0))
head ([]::[] ((([] Int) -> [] (Int -> Bool)) -> ([] Int) -> [] Int)) (undefined::([] Int) -> [] (Int -> Bool))
case1 (\a -> seq a (\b -> (\c -> seq c ((:) 2)) ([]::[] Bool))) (case1 (\a -> seq a (undefined::([] Bool) -> ([] Int) -> [] Int)) (\a -> a) (id (undefined::[] Bool))) ((\a -> seq a (undefined::Int -> [] (([] Int) -> [] Bool))) (undefined::Bool) ((\a -> seq a 2) (head ([]::[] Bool))))
head ([]::[] (([] (([] Int) -> Bool)) -> Bool -> ([] Int) -> [] Int)) ((\a -> head (seq a ([]::[] ([] (([] Int) -> Bool))))) True) ((\a -> case1 (seq a (undefined::Bool -> ([] Bool) -> Bool)) a (undefined::[] Bool)) (((==)::Int -> Int -> Bool) (head ([]::[] Int)) ((+1) 0)))
\a -> map (\b -> (!!) (seq a (seq b (seq b (undefined::Int -> [] Int) (seq a (undefined::Int))))) (seq b (id (id (seq b (undefined::Int)))))) (head (seq a (undefined::[] (Bool -> [] (([] Int) -> ([] Int) -> Bool)))) (seq a (seq a (id (undefined::([] Bool) -> Bool)) ([]::[] Bool))))
take ((\a -> (+1) ((\b -> seq a (seq b (seq a (head ([]::[] Int))))) (seq a (\b -> seq b (\c -> (undefined::[] Int)) (head ([]::[] (Int -> Int))))))) (\a -> (undefined::([] (([] Int) -> [] ([] Int))) -> Bool -> Bool)))
\a -> a
\a -> a
\a -> take (id (seq a (seq a ((\b -> seq b (seq a (undefined::Bool -> Int)) (seq b (seq b False))) (\b -> seq b (\c -> \d -> seq c d)))))) (seq a (seq a (seq a a)))
(undefined::([] Int) -> [] Int)
tail
(\a -> seq a (\b -> seq b b)) ((\a -> seq a (\b -> head (undefined::[] (([] Int) -> Int -> Bool))) (seq a (undefined::Int))) (\a -> seq a (seq a (undefined::Int -> [] (Int -> Bool)) (seq a (id (undefined::Int))))))
(\a -> case1 (undefined::Int -> ([] Int) -> ([] Int) -> [] Int) (\b -> b) ((\b -> seq b b) (seq a ([]::[] Int)))) ((undefined::(([] Int) -> Int -> Bool) -> Bool) (case1 (id (undefined::Int -> ([] Int) -> Int -> Bool)) (\a -> seq a (seq a (undefined::Bool)))))
(\a -> seq a (seq a (seq a (\b -> (undefined::Bool -> ([] Int) -> [] Int))) (not (seq a (undefined::Bool))))) (\a -> (\b -> head (seq b (undefined::[] Int))) (seq a (seq a (seq a a)))) ((\a -> seq a (undefined::((([] ([] Int)) -> [] Bool) -> Int) -> Bool) (\b -> 0)) (map (\a -> seq a (\b -> a) 1)))
\a -> a
(\a -> (!!) (seq a ([]::[] (Bool -> ([] Int) -> [] Int))) a) 0 (not (id (\a -> head) (tail ([]::[] (Bool -> Bool))) ((undefined::(Int -> Int -> Int) -> [] Bool) (\a -> \b -> seq a (seq b 0)))))
filter ((\a -> \b -> seq b (\c -> seq c (seq a (not (seq c True)))) (seq b (\c -> seq c (seq b (undefined::Int -> [] (Int -> Int))) (seq a b)))) ((undefined::(([] Int) -> Bool -> Bool) -> ([] Int) -> Int) (undefined::([] Int) -> Bool -> Bool)))
tail
tail
case1 (\a -> head (id (head ((:) (seq a (seq a (seq a ([]::[] (([] Int) -> [] Int))))) (seq a (seq a ([]::[] ([] (([] Int) -> [] Int))))))))) (head ([]::[] (Int -> Bool -> [] Int)) (id 2) (id ((undefined::(([] Int) -> [] ([] Int)) -> Bool) (undefined::([] Int) -> [] ([] Int)))))
\a -> (undefined::[] Int)
(\a -> seq a (\b -> b)) (undefined::([] Int) -> ([] Int) -> [] ([] Int))
\a -> seq a a
(undefined::([] ([] ([] (([] ([] Int)) -> [] Int)))) -> ([] Int) -> [] Int) (undefined::[] ([] ([] (([] ([] Int)) -> [] Int))))
case1 (undefined::([] Int) -> ([] ([] Int)) -> ([] Int) -> [] Int) (head ((\a -> seq a ([]::[] (([] Int) -> [] Int))) (undefined::Bool))) ((\a -> \b -> seq b (seq a ([]::[] ([] Int)))) (\a -> id (seq a ([]::[] Bool))) (head ((\a -> seq a (seq a ([]::[] Bool))) 1)))
(!!) ([]::[] (Bool -> ([] Int) -> [] Int)) (id ((+) 1 0)) (head ((undefined::([] Int) -> [] Bool) (case1 (undefined::([] Bool) -> ([] ([] Bool)) -> [] Int) ([]::[] Int) (undefined::[] ([] Bool)))))
tail
\a -> a
\a -> seq a a
(\a -> seq a ((!!) ([]::[] (([] Int) -> [] Int)) 1)) ((undefined::(([] Bool) -> Int) -> Bool -> [] (Bool -> Bool)) (\a -> seq a 1) ((\a -> a 2) (\a -> seq a (seq a (seq a True)))))
case1 (id (\a -> seq a (\b -> head (seq a ([]::[] (Bool -> ([] Int) -> [] Int))) (seq b (seq a (seq a True)))))) (\a -> seq a (undefined::(Int -> [] (Bool -> Bool)) -> [] Int) ((\b -> \c -> seq b (undefined::[] (Bool -> Bool))) (head a))) ((\a -> seq a ([]::[] ([] ([] ([] Bool))))) (id (not True)))
\a -> case1 (\b -> seq b ((\c -> \d -> seq b (seq d (seq c (undefined::[] Int)))) (seq b (undefined::Bool -> Int) (seq b True)))) a (seq a (seq a (\b -> seq a (seq b (undefined::[] ([] ([] (Int -> Int))))))) ((undefined::([] ([] Int)) -> Int -> Int) (head ([]::[] ([] ([] Int))))))
(undefined::((([] Int) -> [] (Int -> Int)) -> Int) -> ([] Int) -> [] Int) (\a -> seq a ((!!) (undefined::[] ((Int -> ([] Int) -> Int) -> Int)) (seq a (seq a 1))) (seq a (\b -> (\c -> seq a (\d -> c)) (seq b 1))))
(\a -> \b -> (:) a b) 1
\a -> seq a (seq a (seq a (\b -> seq a a)) (seq a (\b -> \c -> (undefined::((([] Int) -> [] ([] Bool)) -> Int -> Int) -> Int -> Int) (undefined::(([] Int) -> [] ([] Bool)) -> Int -> Int))))
id (\a -> \b -> head ((undefined::Int -> [] ([] Int)) (seq a (seq a (\c -> (undefined::Int)) (undefined::Bool))))) ((++) ((\a -> seq a ([]::[] (([] ([] ([] Bool))) -> Int -> Int))) (even (undefined::Int))) ((\a -> seq a ([]::[] (([] ([] ([] Bool))) -> Int -> Int))) (undefined::Bool)))
(undefined::(([] Int) -> Int -> Int -> Bool) -> ([] Int) -> [] Int) ((undefined::Bool -> ([] Int) -> Int -> Int -> Bool) (not (not False)))
\a -> seq a a
(\a -> (\b -> seq b (id (undefined::Bool -> ([] Int) -> [] Int)) (seq b (seq b (seq a (undefined::Bool))))) (\b -> seq a (seq a (\c -> seq b (+1))) ((-) (undefined::Int) 0))) ((undefined::(([] ([] Int)) -> [] Bool) -> ([] Int) -> [] (Bool -> Bool)) ((\a -> seq a (seq a (\b -> ([]::[] Bool)))) ((enumFromTo::Int -> Int -> [Int]) 1 2)))
\a -> map (undefined::(([] (([] (Int -> Bool)) -> [] (Int -> Bool))) -> ([] ([] Int)) -> [] Bool) -> Int) (seq a (seq a (seq a (seq a ([]::[] (([] (([] (Int -> Bool)) -> [] (Int -> Bool))) -> ([] ([] Int)) -> [] Bool))))))
\a -> seq a a
\a -> a
\a -> (undefined::(([] (([] Bool) -> Bool)) -> ([] Int) -> Bool) -> [] Int) (\b -> head ((:) (undefined::Bool -> ([] Int) -> Bool) (seq a (undefined::[] (Bool -> ([] Int) -> Bool)))) ((\c -> c) (odd (seq b 2))))
\a -> (undefined::[] Int)
(\a -> seq a (seq a (\b -> seq b (seq a (undefined::([] Bool) -> ([] Int) -> [] Int)) (seq b (seq a ([]::[] Bool)))) (seq a (head ([]::[] (Int -> Int -> ([] Int) -> Int)))))) (\a -> id ((undefined::Bool -> [] ([] Int)) (case1 (seq a (undefined::Bool -> ([] Bool) -> Bool)) (seq a (undefined::Bool)) (seq a (undefined::[] Bool)))))
\a -> case1 (undefined::Int -> ([] Int) -> [] Int) a a
\a -> seq a (undefined::[] Int)
(undefined::([] (([] Bool) -> [] Bool)) -> Bool -> ([] Int) -> [] Int) ((\a -> seq a (seq a (undefined::[] (([] Bool) -> [] Bool)))) ((!!) (undefined::[] (Int -> Int)) 2)) (case1 ((\a -> seq a (undefined::Bool -> ([] Bool) -> Bool)) (id 2)) ((!!) ([]::[] Bool) 1) ((undefined::(([] Int) -> Bool) -> [] Bool) (undefined::([] Int) -> Bool)))
(\a -> seq a (seq a ((++) (seq a (\b -> seq a (undefined::Bool -> [] Int)) (undefined::[] Bool) (seq a (head (seq a (seq a (seq a (undefined::[] Bool)))))))))) (undefined::([] Int) -> ([] (([] Int) -> Bool)) -> Int -> [] ([] (Int -> Int)))
(\a -> (\b -> seq b (seq a (\c -> seq b tail)) id) (seq a (seq a (case1 (undefined::([] Bool) -> ([] ([] Bool)) -> Int) 1 ([]::[] ([] Bool)))))) ((\a -> seq a ((\b -> seq b (\c -> seq a (undefined::[] ([] Bool)))) (seq a (seq a (undefined::Bool))))) (\a -> (undefined::Int -> Int -> Int) (seq a (seq a (undefined::Int)))))
tail
\a -> case1 (seq a (\b -> \c -> filter ((!!) c) (undefined::[] Int))) (seq a a) ((\b -> seq b (seq a (tail (undefined::[] Bool)))) ((undefined::([] ([] Bool)) -> Int -> [] Int) ([]::[] ([] Bool))))
id
\a -> a
(undefined::(([] Int) -> [] (Bool -> Bool)) -> ([] Int) -> [] Int) (head (tail (undefined::[] (([] Int) -> [] (Bool -> Bool)))))
\a -> a
\a -> a
(undefined::([] Int) -> [] Int)
(:) (undefined::Int)
\a -> a
\a -> id (case1 (\b -> \c -> (undefined::[] Int)) a ((undefined::([] (Int -> Bool -> Bool)) -> [] Bool) (id (undefined::Int -> [] (Int -> Bool -> Bool)) ((+1) (undefined::Int)))))
tail
\a -> seq a (seq a (\b -> \c -> seq a (seq b ([]::[] Int)))) (seq a ((\b -> seq a (\c -> \d -> b)) False)) (case1 ((undefined::Bool -> Bool -> ([] Bool) -> Int) (undefined::Bool)) (seq a (\b -> (undefined::Int)) (head ([]::[] Bool))) (seq a (seq a (seq a (seq a ([]::[] Bool))))))
\a -> (!!) ((\b -> seq b ([]::[] ([] Int))) (seq a (\b -> seq b (\c -> seq c (seq b (id False)))))) (seq a (seq a (seq a ((\b -> \c -> b) ((+1) 2))) ((undefined::(Int -> Int -> Bool) -> Int -> Int) (\b -> seq a even))))
(\a -> seq a (undefined::Int -> ([] Int) -> [] Int) (head (undefined::[] ((Bool -> Bool) -> Int)) (\b -> odd (seq a 1)))) (id (\a -> seq a (id (undefined::Int -> [] (([] Bool) -> [] Bool)) (seq a (seq a 0)))) (map ((\a -> seq a (\b -> ([]::[] Bool))) (\a -> id (undefined::[] Bool)))))
(\a -> id (undefined::Bool -> Bool -> ([] Int) -> [] Int) (seq a (even 1)) (seq a (\b -> seq a (seq a (undefined::Bool))) (seq a (undefined::Int)))) (\a -> a)
(\a -> id (\b -> seq a (\c -> seq b tail) b) (seq a (seq a (undefined::Bool)))) ((\a -> seq a (case1 (undefined::Bool -> ([] Bool) -> Int) (seq a 0) (seq a ([]::[] Bool)))) (\a -> seq a (seq a (seq a (undefined::Int -> ([] Int) -> Bool))) (seq a 1)))
(undefined::([] Int) -> [] Int)
(undefined::(([] ([] ([] (([] Bool) -> [] Bool)))) -> [] (Bool -> Bool)) -> ([] Int) -> [] Int) (\a -> seq a (seq a (seq a (seq a (seq a (\b -> ([]::[] (Bool -> Bool))))) (seq a (seq a (undefined::(Bool -> Bool) -> Bool -> Bool -> Bool)) (seq a (seq a (seq a not)))))))
(\a -> seq a (undefined::(([] Int) -> Int) -> ([] Int) -> [] Int) (seq a (id (undefined::(Int -> Bool) -> ([] Int) -> Int)) (seq a (\b -> odd b)))) id
case1 ((\a -> \b -> seq a (seq b (id (++)))) ((undefined::Bool -> Int) (not True))) ((undefined::([] (Int -> Int)) -> ([] Int) -> [] Int) ((\a -> seq a (undefined::[] (Int -> Int))) (id ([]::[] Int)))) (id (\a -> seq a (seq a ([]::[] Int))) ((!!) (undefined::[] (([] Int) -> [] (([] Int) -> Bool))) (undefined::Int)))
\a -> (undefined::(([] (Bool -> Bool)) -> Bool -> Bool) -> [] Int) (\b -> (\c -> seq c (seq b (\d -> id))) (((==)::Int -> Int -> Bool) (undefined::Int) 0) (even (case1 (undefined::Int -> ([] Int) -> Int) (undefined::Int) a)))
(\a -> id (seq a (undefined::Int -> Bool -> ([] Int) -> [] Int) ((+1) 2))) (undefined::[] ([] Bool)) (odd ((+1) 2))
(undefined::(([] ([] ([] Int))) -> [] (([] Int) -> [] Int)) -> ([] Int) -> [] Int) ((\a -> \b -> seq a (map (\c -> \d -> ([]::[] Int)) (seq b (undefined::[] Int)))) ((!!) ([]::[] ([] Int)) (id 0)))
\a -> seq a (seq a (seq a (seq a a)))
\a -> a
\a -> seq a (seq a (\b -> \c -> filter (seq c (undefined::Int -> Bool)) a) ((\b -> seq b (seq a (\c -> c))) (\b -> ([]::[] Bool)))) (undefined::[] (Int -> [] Int))
tail
(undefined::([] Int) -> [] Int)
\a -> a
case1 ((undefined::(([] ([] (Int -> Bool))) -> Int) -> Int -> ([] Int) -> [] Int) (\a -> id (seq a (undefined::([] Bool) -> Int)) (seq a (seq a (seq a ([]::[] Bool)))))) ((undefined::(([] ([] Int)) -> [] (([] Int) -> Bool)) -> [] Int) (undefined::([] ([] Int)) -> [] (([] Int) -> Bool)))
id
(undefined::Bool -> ([] Int) -> [] Int) (((==)::[Int] -> [Int] -> Bool) ((\a -> seq a (seq a (undefined::[] Int))) (undefined::Bool)) ((\a -> seq a (seq a (undefined::[] Int))) (head (undefined::[] Int))))
\a -> seq a ((enumFromTo'::Int -> Int -> [Int]) (seq a (undefined::Int)) (seq a (seq a (\b -> (undefined::Bool -> Int) (undefined::Bool)) (seq a (\b -> \c -> \d -> filter (undefined::(Int -> Bool) -> Bool) (seq a ([]::[] (Int -> Bool))))))))
(\a -> seq a (\b -> \c -> seq c (seq b (\d -> c) (seq a (\d -> c))))) ((\a -> a) (head (undefined::[] Int))) (case1 (\a -> seq a (\b -> a)) ((+) (undefined::Int)))
\a -> ([]::[] Int)
\a -> a
(\a -> seq a (\b -> seq b (undefined::([] Int) -> [] Int))) ((\a -> seq a (seq a (seq a (undefined::Bool)))) (\a -> (undefined::[] Int))) (id (\a -> seq a (undefined::Int -> Int)))
\a -> seq a a
\a -> a
\a -> case1 (undefined::Bool -> ([] Bool) -> [] Int) a (seq a ((undefined::Bool -> [] Bool) (seq a even (seq a 2))))
(\a -> seq a (id (undefined::Bool -> Int -> ([] Int) -> [] Int) (seq a (seq a (seq a True))) (seq a (undefined::(([] Bool) -> [] Bool) -> Int) (\b -> b)))) ((!!) ([]::[] (([] Int) -> Int -> Int -> Int)) ((undefined::Int -> Int) ((!!) (undefined::[] Int) 1)))
head (tail (undefined::[] ((([] ([] Int)) -> [] ([] (Int -> Int))) -> ([] Int) -> [] Int))) ((\a -> seq a (seq a (\b -> seq b (seq a (seq b (seq b (seq a (undefined::[] ([] (Int -> Int)))))))))) ((\a -> a) ((!!) (undefined::[] Bool) 0)))
\a -> seq a (undefined::([] (Bool -> Bool)) -> [] Int) (seq a ((++) ((\b -> seq b (seq a ([]::[] (Bool -> Bool)))) (seq a (seq a (seq a True)))) (case1 (\b -> (undefined::([] Int) -> [] (Bool -> Bool))) (seq a (undefined::[] (Bool -> Bool))) (seq a (undefined::[] Int)))))
id
(\a -> \b -> seq a (\c -> map (\d -> 1) (seq c ([]::[] (Int -> [] Int))))) (map (undefined::Bool -> [] Bool) ([]::[] Bool)) even
(\a -> seq a (\b -> \c -> take (undefined::Int) (seq c c)) (\b -> seq a (seq a (undefined::Int -> [] Bool) (id (seq b 1))))) (\a -> (undefined::(([] (Bool -> Bool)) -> [] (Bool -> Bool)) -> Int -> Int -> Bool) (\b -> (\c -> id (seq c b)) (seq a (seq b (seq a 0)))))
(\a -> seq a (\b -> id)) (\a -> (undefined::Bool -> Bool -> Bool) (seq a (undefined::Bool))) ((\a -> seq a (\b -> head (undefined::[] Int)) (seq a (seq a (seq a ([]::[] ([] Int)))))) ((undefined::(Int -> Int -> Int) -> ([] Bool) -> [] Bool) (undefined::Int -> Int -> Int)))
tail
(\a -> \b -> seq a (seq b (seq b (seq b b)))) (head ([]::[] (([] (([] Int) -> Int -> Int -> [] Int)) -> ([] Bool) -> [] Bool)))
\a -> ([]::[] Int)
\a -> (undefined::[] Int)
tail
(undefined::Int -> (([] Int) -> ([] Int) -> [] Bool) -> ([] Int) -> [] Int) ((\a -> seq a (seq a (seq a 1))) (head (undefined::[] (([] (Bool -> Bool)) -> Bool -> Bool)))) (\a -> (\b -> seq b (\c -> (!!) (undefined::[] ([] Bool)) (seq b 1))) (seq a (seq a (seq a (undefined::(([] (Bool -> Bool)) -> Bool) -> Bool))) (\b -> seq b (seq b (seq b False)))))
\a -> seq a ((undefined::([] Int) -> [] Int) a)
tail
(undefined::([] Int) -> [] Int)
take ((!!) (undefined::[] Int) ((undefined::(([] Int) -> ([] ([] Int)) -> [] Bool) -> Int) (id (head (undefined::[] (([] Int) -> ([] ([] Int)) -> [] Bool))))))
\a -> (\b -> \c -> seq c (\d -> a) (seq b (id (undefined::Bool -> Bool -> Bool)))) (((==)::Int -> Int -> Bool) (head a) (seq a (seq a (undefined::Int)))) (map ((\b -> seq b (seq b (:))) (seq a (undefined::Bool))) (undefined::[] Bool))
\a -> seq a a
id
\a -> seq a (head (seq a (\b -> seq a (seq a (undefined::[] (Bool -> [] Int)))) (\b -> case1 (\c -> (undefined::([] Bool) -> [] Bool)) (seq a (undefined::[] Bool)) (seq a ([]::[] Bool)))) (seq a (seq a (undefined::Bool -> Bool) (undefined::Bool))))
(undefined::([] Int) -> [] Int)
case1 (\a -> \b -> seq a ((undefined::Bool -> ([] Int) -> [] Int) (seq a (seq a (undefined::Bool))))) tail ((\a -> (\b -> seq b (seq b (seq a ([]::[] (Bool -> Bool))))) (\b -> seq b (seq a (seq b False)))) ((\a -> seq a (tail ([]::[] (([] Int) -> [] Int)))) (filter (undefined::([] Bool) -> Bool) (undefined::[] ([] Bool)))))
case1 (\a -> \b -> (undefined::([] Int) -> [] Int)) (id (\a -> head (undefined::[] (([] Int) -> [] Int))) (\a -> seq a 2)) (undefined::[] (([] Bool) -> Bool))
(undefined::Int -> ([] Int) -> [] Int) ((\a -> seq a ((\b -> seq a b) (head (seq a ([]::[] Int))))) ((\a -> seq a (undefined::Bool)) (undefined::Int)))
\a -> seq a a
\a -> a
(undefined::([] Int) -> [] Int)
\a -> (\b -> seq b (undefined::[] Int)) ((undefined::Bool -> (([] Int) -> Int -> Bool) -> Int) (even (seq a (undefined::Int))) (seq a (\b -> \c -> seq c (seq a (undefined::([] Int) -> Bool)) ([]::[] Int))))
(\a -> (undefined::(Int -> Bool -> Bool) -> ([] Int) -> [] Int) (seq a (id (undefined::Int -> Int -> Bool -> Bool)) a)) ((\a -> seq a ((-) (undefined::Int))) (\a -> seq a (seq a (seq a True))) ((!!) (undefined::[] (Bool -> Int)) 1 False))
\a -> a
(undefined::(([] ([] ([] Bool))) -> [] ([] Bool)) -> ([] Int) -> [] Int) (id (undefined::([] ([] ([] Bool))) -> [] ([] Bool)))
id
filter ((!!) (tail ((undefined::(([] ([] (([] ([] ([] Bool))) -> [] ([] ([] Bool))))) -> [] Bool) -> [] Bool) (\a -> (undefined::([] ([] (([] ([] ([] Bool))) -> [] ([] ([] Bool))))) -> [] Bool) (undefined::[] ([] (([] ([] ([] Bool))) -> [] ([] ([] Bool)))))))))
(:) (head ([]::[] ((Bool -> Bool) -> Int -> Int)) (\a -> a) ((undefined::(([] Int) -> [] (Bool -> Bool)) -> Int) (\a -> seq a (seq a (seq a ([]::[] (Bool -> Bool)))))))
(undefined::([] ([] Bool)) -> ([] Int) -> [] Int) (undefined::[] ([] Bool))
\a -> seq a (seq a (id (seq a (seq a (undefined::([] Int) -> Bool -> Bool -> [] Int) (seq a (seq a a)) ((\b -> seq b (seq b (undefined::Bool))) a)))) (case1 (\b -> \c -> even) (seq a (undefined::Int -> Bool)) (seq a a) 0))
(undefined::((([] ([] Bool)) -> [] Bool) -> Int) -> ([] Int) -> [] Int) (\a -> id (undefined::Int))
\a -> map (\b -> (undefined::(([] (([] ([] ([] Int))) -> [] ([] Bool))) -> [] ([] Bool)) -> Int) (\c -> (++) (seq b (seq c ([]::[] ([] Bool)))) (seq b (seq b (undefined::[] ([] Bool)))))) (seq a (\b -> seq b (\c -> ([]::[] Int))) (seq a (head ([]::[] (Int -> [] Int)))) 1)
case1 (\a -> id ((undefined::Int -> ([] ([] Int)) -> ([] Int) -> [] Int) ((+) (undefined::Int) (undefined::Int)))) (\a -> map (\b -> seq a (seq b (undefined::Int))) (seq a (seq a (seq a (seq a (undefined::[] ([] (Int -> ([] Int) -> Int)))))))) (undefined::[] ([] Int))
id (\a -> (++) (undefined::[] Int)) (undefined::([] Int) -> (Int -> Bool -> Bool) -> Int -> Bool -> Bool)
(undefined::(Int -> Bool) -> (([] Int) -> Int -> Int) -> ([] Int) -> [] Int) (id (\a -> seq a odd) False) (\a -> \b -> seq b (seq b (seq a (undefined::Int -> (Int -> ([] Int) -> Int) -> Int) (undefined::Int) (\c -> (undefined::([] ([] (Bool -> Bool))) -> ([] Int) -> Int) (head ([]::[] ([] ([] (Bool -> Bool)))))))))
case1 (undefined::(Bool -> Bool) -> ([] (Bool -> Bool)) -> ([] Int) -> [] Int) (head (undefined::[] ((Int -> Bool) -> ([] Int) -> [] Int)) (\a -> id (undefined::Int -> Bool) a)) ((\a -> seq a (undefined::Bool -> [] (Bool -> Bool))) 2 True)
\a -> case1 (seq a (\b -> (undefined::([] Bool) -> [] Int))) (case1 (\b -> \c -> seq b ([]::[] Int)) a (seq a (seq a (undefined::[] Bool)))) (id (undefined::(Int -> Bool) -> Int -> [] Bool) (\b -> seq b (undefined::Bool)) (seq a 1))
(\a -> seq a ((\b -> seq b (\c -> take (seq c (undefined::Int)) c)) (\b -> \c -> case1 (undefined::Bool -> ([] Bool) -> Bool) (seq b (undefined::Bool)) (seq b ([]::[] Bool))))) id
(undefined::([] Int) -> [] Int)
\a -> a
id (undefined::Bool -> ([] Int) -> [] Int) ((\a -> seq a (id (undefined::(([] ([] Int)) -> Int) -> Bool))) (\a -> a) (\a -> seq a (seq a (\b -> 0)) (seq a (seq a (seq a False)))))
(\a -> seq a (\b -> id (undefined::([] Bool) -> ([] Int) -> [] Int) (tail ([]::[] Bool)))) (id (\a -> a) 1) (undefined::([] Int) -> [] (Int -> [] Int))
id ((\a -> \b -> id (seq b (undefined::Bool -> ([] Int) -> [] Int)) (odd (seq a 2))) (case1 (undefined::Bool -> ([] Bool) -> Bool) (undefined::Bool) (undefined::[] Bool)) (\a -> seq a head))
\a -> head (seq a (seq a (undefined::[] ((([] ([] Int)) -> [] ([] (Int -> Int))) -> [] Int)))) (\b -> seq a (map (undefined::Bool -> [] (Int -> Int)) (head ([]::[] ([] Bool)))))
\a -> id (\b -> seq b (id (seq a (\c -> a)))) ((\b -> seq a (seq b (undefined::Bool))) 1) (\b -> id (\c -> seq c (\d -> seq b a)) odd)
filter (\a -> seq a (seq a (((==)::Int -> Int -> Bool) (seq a a) (seq a (undefined::Int)))))
id (\a -> \b -> seq a (\c -> id) True) (filter (\a -> odd (seq a (undefined::Int)))) ((||) ((undefined::([] (Int -> Bool)) -> Bool) ([]::[] (Int -> Bool))) (id (\a -> False) 1))
map (+1)
\a -> ([]::[] Int)
(undefined::Int -> (([] Int) -> [] (Int -> Int)) -> ([] Int) -> [] Int) ((undefined::(([] ([] ([] Bool))) -> [] ([] ([] Bool))) -> Int) (\a -> seq a a)) (case1 (\a -> seq a (seq a (\b -> seq b (undefined::([] Int) -> [] (Int -> Int))))) (\a -> seq a (undefined::(Bool -> Bool) -> [] (Int -> Int)) (\b -> (undefined::Bool))) ((!!) (undefined::[] ([] Int)) (undefined::Int)))
(\a -> \b -> (!!) (seq a (undefined::[] ((Int -> Int) -> [] Int))) ((!!) b 0) ((\c -> seq b (\d -> c)) (seq a (id 1)))) (\a -> (undefined::Int -> Int -> [] Int))
\a -> seq a (undefined::([] (([] Int) -> [] Int)) -> Int -> [] Int) (seq a (seq a (seq a (\b -> ([]::[] (([] Int) -> [] Int)))) a)) (id ((undefined::Int -> (([] ([] (Int -> Int))) -> Bool) -> Int) (seq a 2) (seq a (seq a ((\b -> seq b (undefined::([] ([] (Int -> Int))) -> Bool)) ((+1) (undefined::Int)))))))
(\a -> seq a (\b -> seq b (seq b (undefined::Int -> ([] Int) -> [] Int))) 0 ((!!) (seq a (seq a ([]::[] Int))) (seq a 0))) (id (\a -> id (undefined::([] ([] ([] Bool))) -> Bool) (seq a (seq a ([]::[] ([] ([] Bool)))))) ((\a -> (!!) (seq a (undefined::[] ([] ([] (([] Int) -> [] Int)))))) ((+1) (undefined::Int))))
(!!) ([]::[] (Int -> ([] Int) -> [] Int)) ((undefined::([] Int) -> Int) (undefined::[] Int)) (undefined::Int)
(\a -> seq a ((\b -> seq b (\c -> \d -> seq b ([]::[] Int)) (seq b (head (undefined::[] ([] ([] Int)))))) ((\b -> seq b (undefined::[] Bool)) (a (seq a (undefined::[] Int)) (undefined::Int))))) (\a -> (\b -> \c -> seq a (undefined::([] ([] Int)) -> Bool) (seq b (seq a (seq c ([]::[] ([] Int)))))) (undefined::([] ([] ([] ([] Bool)))) -> Int))
tail
tail
(!!) (undefined::[] (Bool -> ([] Int) -> [] Int)) ((undefined::(Bool -> Bool) -> Int) (\a -> a)) ((!!) (undefined::[] (([] ([] Bool)) -> Int -> Bool)) (undefined::Int) ([]::[] ([] Bool)) ((\a -> a) ((!!) ([]::[] Int) (undefined::Int))))
filter ((\a -> \b -> seq a a) ((\a -> ((==)::[Int] -> [Int] -> Bool) (seq a ([]::[] Int)) ([]::[] Int)) ((\a -> a (seq a (seq a 1))) (\a -> a))))
\a -> a
(:) ((undefined::Bool -> Int) ((\a -> \b -> seq a (seq b (undefined::Bool))) (\a -> (+1) a) ((-) 2 (id 2))))
\a -> (++) (id (seq a ((undefined::([] (([] Int) -> Bool)) -> Bool -> [] Int) (undefined::[] (([] Int) -> Bool)))) (undefined::Bool)) a
(:) (case1 (\a -> \b -> head ([]::[] (([] ([] Bool)) -> Int)) (undefined::[] ([] Bool))) ((undefined::Int -> Int) (id (undefined::Int))) ((undefined::(Int -> Int -> Bool) -> [] (Bool -> Bool)) (\a -> \b -> seq b (((==)::Int -> Int -> Bool) a 0))))
(\a -> \b -> (\c -> seq b (seq b (\d -> c))) (seq a b) (id b)) (id (\a -> \b -> 2) (id (\a -> seq a a)) ((undefined::([] ([] ([] ([] (Bool -> Bool))))) -> Int -> Bool) ([]::[] ([] ([] ([] (Bool -> Bool)))))))
(\a -> head (case1 (undefined::Bool -> ([] Bool) -> [] (([] Int) -> [] Int)) (seq a ([]::[] (([] Int) -> [] Int))) (seq a (seq a (seq a (undefined::[] Bool)))))) ((undefined::(Int -> [] Bool) -> [] ([] ([] Bool))) (head (id (filter (undefined::(Int -> [] Bool) -> Bool) ([]::[] (Int -> [] Bool))))))
\a -> seq a (\b -> ([]::[] Int)) (undefined::Int)
id (\a -> \b -> (\c -> \d -> seq c d) (seq a (seq a False))) (filter (\a -> (undefined::Bool)) (head (undefined::[] ([] Bool)))) ((\a -> \b -> seq b (undefined::Int -> [] Int) ((+1) (seq a 2))) (id (undefined::[] ([] (([] Int) -> Int -> Int -> Int)))))
(\a -> seq a (\b -> \c -> seq b id) False (case1 (undefined::Bool -> ([] Bool) -> Int) 2 (seq a ([]::[] Bool)))) (head (undefined::[] ((([] ([] Bool)) -> [] ([] (Bool -> Bool))) -> [] Int)) ((!!) (undefined::[] (([] ([] Bool)) -> [] ([] (Bool -> Bool)))) ((+1) 1)))
\a -> map (seq a ((undefined::Bool -> (([] Int) -> [] (Bool -> Bool)) -> Int) True)) ((\b -> seq b ([]::[] (([] Int) -> [] (Bool -> Bool)))) (\b -> (\c -> seq a (seq c ([]::[] Bool))) ([]::[] ([] (Int -> Bool)))))
\a -> map (head (seq a (tail (undefined::[] ((([] Int) -> ([] ([] ([] ([] Bool)))) -> [] (([] Bool) -> [] Bool)) -> Int))))) (seq a (seq a (head (seq a (undefined::[] ([] (([] Int) -> ([] ([] ([] ([] Bool)))) -> [] (([] Bool) -> [] Bool))))))))
(\a -> \b -> map (seq a ((-) (seq a (seq a (undefined::Int))))) (seq b (id b))) ((undefined::([] (([] Int) -> ([] Bool) -> [] Bool)) -> [] (Bool -> Bool)) (undefined::[] (([] Int) -> ([] Bool) -> [] Bool)))
\a -> map (\b -> (\c -> (\d -> seq d d) (seq b (seq c (seq a 2)))) (id (undefined::([] Int) -> [] ([] (([] ([] ([] Bool))) -> [] ([] Bool)))))) (seq a (\b -> map (\c -> seq b (undefined::[] (([] Bool) -> [] Bool))) a) (seq a (seq a (\b -> seq b (undefined::Bool))) (seq a (head a))))
\a -> a
(\a -> (\b -> seq b (id (undefined::Bool -> ([] Int) -> [] Int))) (\b -> seq b (seq a True))) (((==)::Int -> Int -> Bool) 1 ((+) 2 (undefined::Int))) ((undefined::([] (([] Bool) -> [] Bool)) -> Bool) ((\a -> seq a (seq a (seq a ([]::[] (([] Bool) -> [] Bool))))) ([]::[] Bool)))
\a -> seq a a
(\a -> head (seq a (case1 (\b -> (undefined::([] Bool) -> [] (([] Int) -> [] Int))) ([]::[] (([] Int) -> [] Int)) (a (seq a (seq a ([]::[] (Int -> Bool -> Bool)))))))) ((\a -> seq a ((undefined::Bool -> ([] (Int -> Bool -> Bool)) -> [] Bool) (seq a True))) (head ((\a -> seq a (seq a (undefined::[] (([] Int) -> [] ([] Bool))))) (undefined::Int))))
(\a -> seq a (head (seq a (\b -> ([]::[] (([] Int) -> [] Int))) (\b -> seq b (seq b (undefined::([] Bool) -> Int)) (seq b ([]::[] Bool)))))) ((++) (undefined::[] (([] ([] Bool)) -> ([] Int) -> Int -> Int -> Bool)) (undefined::[] (([] ([] Bool)) -> ([] Int) -> Int -> Int -> Bool)))
(undefined::(([] Int) -> (Int -> ([] Int) -> Int) -> ([] Int) -> Int -> ([] Int) -> Int) -> ([] Int) -> [] Int) (\a -> (undefined::(Int -> ([] Int) -> Int) -> ([] Int) -> Int -> ([] Int) -> Int))
(undefined::([] (Bool -> Bool)) -> ([] Int) -> [] Int) (undefined::[] (Bool -> Bool))
id ((undefined::(([] Int) -> Int -> Int -> [] Int) -> ([] Int) -> [] Int) ((!!) (tail (undefined::[] (([] Int) -> Int -> Int -> [] Int))) (undefined::Int)))
(\a -> \b -> seq a b) (id (head ([]::[] ((([] ([] ([] Int))) -> [] ([] ([] Int))) -> Bool))) (\a -> (undefined::Bool -> [] ([] ([] Int))) (seq a (seq a (seq a (undefined::Bool))))))
id (undefined::((([] Int) -> [] (Int -> ([] (Int -> Bool)) -> [] (Int -> Bool))) -> Int) -> ([] Int) -> [] Int) (\a -> (\b -> seq a (case1 (seq b (undefined::Int -> ([] Int) -> Int)) (seq b (undefined::Int)) (seq b (undefined::[] Int)))) (seq a (seq a (seq a (seq a (seq a True))))))
(undefined::([] Int) -> ([] ([] (Int -> Bool))) -> ([] Int) -> [] Int) (case1 (undefined::Bool -> ([] Bool) -> [] Int) (undefined::[] Int) ([]::[] Bool)) (case1 (id (\a -> (undefined::([] Bool) -> [] ([] (Int -> Bool))))) ((\a -> seq a ([]::[] ([] (Int -> Bool)))) True) (id (undefined::[] Bool)))
\a -> a
(\a -> seq a (\b -> case1 (id (undefined::Bool -> ([] Bool) -> [] Int)) b (seq a (seq b ([]::[] Bool))))) (\a -> \b -> \c -> b (seq b (\d -> \e -> c) (seq b (seq c (seq c False))) (\d -> seq c (seq d (\e -> (undefined::[] ([] Int)))) (seq d (seq c (seq b a))))))
\a -> ([]::[] Int)
\a -> a
\a -> map ((undefined::Bool -> (([] (Int -> Bool)) -> [] (Int -> Bool)) -> Int) (seq a (id (\b -> b) (seq a (seq a (seq a False)))))) ((\b -> seq a (seq b (seq b (seq b ([]::[] (([] (Int -> Bool)) -> [] (Int -> Bool))))))) (seq a (undefined::Int)))
\a -> (\b -> (undefined::(([] Int) -> [] ([] Bool)) -> Int -> [] Int) (\c -> tail (seq b (undefined::[] ([] Bool)))) (seq a ((\c -> id c) (seq a (undefined::Int))))) (seq a (seq a ((!!) (seq a ([]::[] ((([] Int) -> Bool) -> [] ([] Int)))) 2) (head (seq a (undefined::[] (Int -> ([] Int) -> Bool))) (id 0))))
\a -> a
id
\a -> map ((-) 1) ([]::[] Int)
\a -> seq a (case1 (seq a (\b -> \c -> seq b (undefined::Bool -> [] Int))) (seq a (undefined::Int -> Bool -> [] Int) (seq a 1)) a) (seq a (seq a (seq a (seq a (\b -> seq b (b False (undefined::Bool)))))) (\b -> \c -> seq b (seq c (\d -> (undefined::Bool))) (seq c ([]::[] ([] (Int -> Int))))))
(\a -> seq a (id (seq a (\b -> \c -> ([]::[] Int))))) (\a -> case1 (\b -> (undefined::([] Bool) -> Bool)) (seq a (undefined::Bool)) (seq a (undefined::[] Bool))) ((&&) ((\a -> seq a (seq a a)) (not True)) (((==)::Bool -> Bool -> Bool) (undefined::Bool) (not (undefined::Bool))))
\a -> ([]::[] Int)
(\a -> seq a (\b -> id (++) (seq b (seq a (undefined::[] Int))))) (case1 (undefined::Int -> ([] Int) -> Bool) True ([]::[] Int)) ((\a -> seq a (seq a (\b -> \c -> seq b (undefined::[] ([] Int))) (undefined::Int))) (\a -> seq a (undefined::(Int -> ([] Int) -> Bool) -> Int -> Int) (\b -> seq b (seq b (\c -> (undefined::Bool))))))
\a -> a
(!!) (undefined::[] ((Int -> Int -> [] Int) -> ([] Int) -> [] Int)) (id (\a -> (undefined::Int)) (\a -> seq a ([]::[] Bool))) ((\a -> (!!) (seq a (undefined::Bool -> [] (Int -> [] Int)) (seq a (seq a a)))) (id (\a -> seq a False) (\a -> \b -> seq a (seq b b))))
(\a -> \b -> (++) ((\c -> seq c b) (seq a (seq a (undefined::[] ([] Int))))) (seq a (case1 (undefined::Bool -> ([] Bool) -> [] Int) (undefined::[] Int) ([]::[] Bool)))) (undefined::([] ([] Bool)) -> [] ([] (Bool -> Bool)))
\a -> (\b -> seq a (id (undefined::(Int -> Int) -> Bool -> [] Int)) (\c -> head a) ((\c -> seq b (seq a (seq c False))) (seq b (undefined::Int -> ([] Int) -> Int)))) (seq a (seq a ((undefined::Int -> Int -> Int -> Int -> Int) (head (seq a (undefined::[] Int)))) (seq a (id (seq a (\b -> (undefined::Int)) (seq a (seq a False)))))))
(\a -> id (\b -> \c -> seq c (\d -> ([]::[] Int)) (seq a (\d -> (undefined::Bool))))) ((-) ((+1) 1) 0) ((\a -> seq a (seq a (\b -> (undefined::Bool))) (id (\b -> seq b False))) (undefined::([] Bool) -> [] (Bool -> Bool)))
\a -> ([]::[] Int)
(undefined::([] Int) -> [] Int)
\a -> a
head ((\a -> map (seq a (\b -> seq b (:)) (seq a 0)) (seq a (take (seq a 0) (seq a (undefined::[] Int))))) (\a -> (undefined::(([] ([] ([] Int))) -> Int -> Int -> Int) -> [] (Int -> Bool)) (\b -> id (seq a (seq b (undefined::Bool -> Int -> Int -> Int) (undefined::Bool))))))
id
(undefined::([] Int) -> [] Int)
(\a -> \b -> (undefined::([] (([] Int) -> Int)) -> ([] Int) -> [] Int) (seq a (seq a (seq a (undefined::[] (([] Int) -> Int)))))) (id (\a -> a) (id 1)) (undefined::([] Int) -> [] (Int -> [] Int))
\a -> head (seq a (take (seq a (seq a (seq a (undefined::Bool -> Int)) (not False))) ([]::[] ((Int -> ([] Int) -> Bool) -> [] Int)))) (head (undefined::[] (Int -> ([] Int) -> Bool)))
(undefined::(Int -> Int -> [] Bool) -> ([] Int) -> [] Int) (\a -> head (id (\b -> (undefined::Int -> [] (Int -> [] Bool))) a a))
\a -> case1 ((\b -> \c -> seq b (\d -> a)) ([]::[] ([] Int))) (seq a (seq a (\b -> a)) ((!!) (seq a ([]::[] ([] (([] Int) -> Bool)))) (seq a (undefined::Int)))) a
\a -> a
\a -> (\b -> seq b (undefined::([] ([] Bool)) -> [] Int)) ((undefined::Bool -> Int) (((==)::[Int] -> [Int] -> Bool) (undefined::[] Int) a)) (tail (filter (seq a (seq a (undefined::([] Int) -> ([] Bool) -> Bool)) a) (filter (\b -> seq a (undefined::Bool)) (undefined::[] ([] Bool)))))
\a -> (undefined::([] (Int -> Bool)) -> Int -> [] Int) ([]::[] (Int -> Bool)) (id (seq a ((undefined::(([] Int) -> Int) -> Int) (seq a (seq a ((\b -> \c -> seq b 2) (seq a (\b -> True))))))))
(\a -> seq a (seq a (\b -> seq a (case1 (seq a (undefined::Int -> ([] Int) -> [] Int)) (seq b (undefined::[] Int))))) (head (seq a ((\b -> seq b (undefined::[] (([] Int) -> [] (Bool -> Bool)))) (id (undefined::Bool)))))) (undefined::([] ([] (([] Bool) -> [] Bool))) -> ([] ([] Int)) -> [] Bool)
(\a -> (\b -> seq b (undefined::(Int -> Int) -> ([] Int) -> [] Int) (seq b (\c -> b))) a) (id (undefined::(([] Int) -> Int -> Bool) -> Int) ((undefined::(([] Bool) -> Bool) -> ([] Int) -> Int -> Bool) (\a -> (undefined::Bool))))
tail
(\a -> seq a (seq a (undefined::(([] ([] Int)) -> [] Bool) -> ([] Int) -> [] Int)) (seq a (\b -> \c -> seq a (undefined::[] Bool)) (take a ([]::[] ([] Int))))) ((undefined::Int -> (Int -> Int) -> Int) ((+) 0 (undefined::Int)) ((undefined::Int -> Int -> Int) ((+) (undefined::Int) (undefined::Int))))
\a -> head (seq a (map (undefined::(Bool -> Bool -> Bool) -> Bool -> [] Int) (seq a (seq a (seq a (undefined::Int -> [] (Bool -> Bool -> Bool))) 1)))) (seq a (\b -> (undefined::([] Int) -> Bool) (seq a a)) (\b -> (undefined::[] Bool)))
(undefined::(Int -> [] Int) -> ([] Int) -> [] Int) (\a -> map (\b -> head ([]::[] (Int -> Int)) a) (undefined::[] (([] Int) -> ([] Int) -> [] Bool)))
filter (\a -> seq a (case1 (\b -> seq a (seq a (seq b (\c -> seq a ((\d -> seq a d) (seq a False)))))) ((\b -> even (seq b a)) (undefined::[] (Bool -> Bool))) ([]::[] Int)))
\a -> (undefined::(([] (([] ([] Bool)) -> [] ([] Bool))) -> Int -> Bool) -> [] Int) (seq a (seq a (undefined::Int -> ([] (([] ([] Bool)) -> [] ([] Bool))) -> Int -> Bool)) (undefined::Int))
\a -> a
\a -> (undefined::[] Int)
(undefined::(([] ([] Int)) -> [] ([] (Int -> Int))) -> ([] Int) -> [] Int) (case1 (\a -> seq a (\b -> seq a (seq a (seq b (seq b (seq a ([]::[] ([] (Int -> Int))))))))) (head ((!!) ([]::[] ([] ([] ([] (Int -> Int))))) 2)))
\a -> a
(++) ((undefined::(Int -> [] Int) -> (Int -> ([] Int) -> Bool) -> [] Int) ((\a -> \b -> seq a (seq a (undefined::[] Int))) (+1)) (\a -> seq a (undefined::([] Int) -> Bool)))
(\a -> (undefined::Bool -> ([] Int) -> [] Int) ((\b -> id (seq b (undefined::Bool))) (map (\b -> seq a b)))) ((undefined::(([] Int) -> [] ([] Bool)) -> ([] Int) -> Bool -> Bool -> Bool) ((\a -> seq a (\b -> seq b (undefined::[] ([] Bool)))) True))
\a -> ([]::[] Int)
(\a -> seq a (seq a (\b -> ([]::[] Int)))) ((undefined::(Int -> Int -> ([] Int) -> [] (Int -> [] Int)) -> Int) (id (\a -> \b -> seq b (undefined::([] Int) -> [] (Int -> [] Int)))))
\a -> a
(undefined::([] Int) -> [] Int)
(\a -> (!!) (take (id 1) (seq a (undefined::[] (([] Int) -> [] Int)))) (case1 (seq a (undefined::([] Int) -> ([] ([] Int)) -> Int)) (seq a (undefined::Int)) (seq a (undefined::[] ([] Int))))) (undefined::[] ([] ([] (([] Int) -> Int -> Int -> Int))))
\a -> seq a (undefined::[] Int)
\a -> (undefined::Int -> [] Int) 2
\a -> a
(\a -> \b -> seq b (map (\c -> (+) (seq c 2) (seq b (undefined::Int))) ((undefined::([] Int) -> [] Bool) (seq a (seq a b))))) ((\a -> seq a True) (\a -> \b -> seq a (case1 (undefined::Bool -> ([] Bool) -> [] Int) (undefined::[] Int) ([]::[] Bool))))
id
id
\a -> (\b -> seq b (map ((undefined::Bool -> Bool -> Int) (seq a (seq b False))) (seq b (seq a (seq b (undefined::Int -> [] Bool) (seq a (undefined::Int))))))) (map (\b -> seq b (seq b (seq b (-))) (seq b (seq a (undefined::Int)))) (seq a (seq a ([]::[] ([] Bool)))))
case1 (\a -> seq a (\b -> id (id (undefined::([] Bool) -> ([] Int) -> [] Int)) (undefined::[] Bool))) (\a -> a) ((!!) ((undefined::(([] Bool) -> [] Bool) -> [] ([] Int)) (\a -> seq a a)) ((\a -> seq a (undefined::Int)) (\a -> seq a (undefined::Int))))
case1 (undefined::Int -> ([] Int) -> ([] Int) -> [] Int) ((undefined::Bool -> Bool -> ([] Int) -> [] Int) (odd 1) ((undefined::(Int -> Bool -> Bool) -> Bool) (\a -> seq a not))) ([]::[] Int)
(!!) ((\a -> seq a (take (a (undefined::[] Int)) (seq a ([]::[] (([] Int) -> [] Int))))) (id (id head))) ((\a -> (\b -> seq a b) 2) (\a -> id (seq a (undefined::Int -> [] (Int -> Int))) (id (seq a 2))))
(\a -> id (\b -> map (\c -> seq b (\d -> d) a) (seq a (undefined::[] ([] (Int -> ([] (Int -> Int)) -> Int -> Int)))))) ((\a -> (\b -> seq b (seq b (seq b 0))) (seq a ([]::[] ([] (([] Int) -> Bool))))) (\a -> (undefined::Bool -> Bool)))
\a -> a
(undefined::Int -> ([] (Int -> Bool -> Bool)) -> ([] Int) -> [] Int) ((\a -> seq a (undefined::Int)) (\a -> id (\b -> a))) (head (id (\a -> ([]::[] ([] (Int -> Bool -> Bool)))) (head (undefined::[] (([] (Int -> Int -> Int)) -> Int)) ([]::[] (Int -> Int -> Int)))))
filter ((\a -> seq a (\b -> (!!) (undefined::[] ((([] ([] (Int -> Int))) -> Bool) -> Bool)) b (seq b ((!!) (seq a ([]::[] (([] ([] (Int -> Int))) -> Bool))) b)))) ((\a -> \b -> head (seq a ([]::[] ((Int -> Int) -> [] Bool))) (\c -> c)) (\a -> take (seq a 2) (seq a (seq a (undefined::[] ([] (Int -> Int))))))))
(\a -> (++) (seq a (case1 (undefined::Int -> ([] Int) -> Bool -> [] Int) (seq a (undefined::Bool -> [] Int)) (seq a ([]::[] Int)) ((\b -> b (undefined::Int) 2) (undefined::Int -> Int -> Bool))))) ((\a -> (undefined::Bool -> [] (([] ([] Bool)) -> [] ([] Bool))) (seq a (undefined::Bool))) (\a -> seq a (\b -> ([]::[] ([] Bool))) (take 0 ([]::[] (([] Int) -> Bool)))))
id
\a -> id ([]::[] Int)
tail
(\a -> (:) (seq a (id (undefined::Bool -> Bool -> Int) (seq a (undefined::Bool))) (id (seq a (seq a (undefined::Bool)))))) (head (id (undefined::[] ([] (([] (([] ([] Int)) -> [] ([] ([] Int)))) -> ([] Int) -> Bool)))))
\a -> a
case1 (\a -> seq a (seq a (\b -> seq a (\c -> seq c tail) a) (seq a (\b -> seq b (seq a (seq b (seq b (seq a (undefined::Bool))))))))) ((undefined::(([] (([] Int) -> [] Int)) -> Bool) -> [] Int) (\a -> case1 (seq a (undefined::([] Bool) -> ([] ([] Bool)) -> Bool)) (seq a (undefined::Bool)) (seq a ([]::[] ([] Bool)))))
\a -> seq a (\b -> \c -> (++) a (seq c a)) (id (seq a 0)) (seq a (seq a (\b -> filter (seq a (seq b (\c -> head) 2)) (seq b ((undefined::Bool -> [] ([] Bool)) (not True))))))
tail
case1 (\a -> (undefined::Bool -> ([] Int) -> ([] Int) -> [] Int) ((\b -> b) (seq a (seq a False)))) ((\a -> seq a (undefined::Bool -> ([] Int) -> [] Int)) ((+1) (undefined::Int)) ((\a -> seq a True) (id (undefined::Int)))) ((\a -> (!!) (undefined::[] ([] Int)) (seq a (seq a 0))) (id (\a -> seq a ([]::[] Bool))))
(\a -> (\b -> seq a (take (seq b (seq a (seq a (undefined::Int)))))) ([]::[] ([] (Int -> Int)))) ((\a -> seq a (undefined::[] (([] ([] ([] (Bool -> Bool)))) -> [] ([] ([] (Bool -> Bool)))))) ((+1) (head (undefined::[] (Bool -> Int)) (head ([]::[] Bool)))))
(\a -> \b -> seq a b) ((\a -> (\b -> seq b (undefined::([] ([] ([] Int))) -> [] ([] ([] Int)))) (seq a (a False (undefined::Bool)))) (\a -> \b -> b))
\a -> a
id ((undefined::Bool -> Bool -> Bool -> ([] Int) -> [] Int) (even 1) (not (id False))) (head ((\a -> seq a ([]::[] (Bool -> Bool))) (undefined::[] Bool)) ((\a -> seq a (seq a False)) (\a -> ([]::[] (([] Int) -> Bool)))))
(\a -> head (seq a (undefined::[] ((([] Int) -> Int -> Bool) -> ([] Int) -> [] Int))) (undefined::([] Int) -> Int -> Bool)) (head (undefined::[] ((([] Int) -> [] ([] Int)) -> ([] Int) -> Int -> Int)) (undefined::([] Int) -> [] ([] Int)))
\a -> case1 (undefined::Bool -> ([] Bool) -> [] Int) ([]::[] Int) (seq a (\b -> seq b (seq a (seq b (undefined::[] Bool)))) ((\b -> \c -> seq b (undefined::Int -> Int -> Int)) (id (undefined::Bool))))
(undefined::([] Int) -> [] Int)
(!!) (case1 (\a -> seq a (\b -> seq a (undefined::[] (([] Int) -> [] Int)))) ((:) tail (undefined::[] (([] Int) -> [] Int))) (undefined::[] Int)) ((\a -> \b -> seq a (undefined::Int)) ((:) (undefined::([] Int) -> [] Int) ([]::[] (([] Int) -> [] Int))) ((\a -> a (seq a (seq a 1))) (\a -> True)))
\a -> id (seq a (seq a (undefined::(([] ([] (Int -> Int))) -> [] (([] ([] (Int -> Int))) -> [] ([] (Int -> Int)))) -> [] Int))) (undefined::([] ([] (Int -> Int))) -> [] (([] ([] (Int -> Int))) -> [] ([] (Int -> Int))))
(\a -> seq a ((undefined::(([] ([] Int)) -> [] ([] Int)) -> ([] Int) -> [] Int) ((\b -> \c -> seq b ([]::[] ([] Int))) ((+1) 2)))) ((\a -> (\b -> seq b (\c -> seq b ([]::[] (Bool -> Bool)))) (id (seq a (undefined::Int)))) (\a -> seq a (\b -> seq a (seq a (undefined::[] Bool))) (seq a (seq a (seq a True)))))
id (\a -> seq a (\b -> ([]::[] Int))) (undefined::([] Int) -> Int -> Int -> Int)
(undefined::([] Int) -> [] Int)
case1 ((\a -> seq a (seq a (\b -> seq b (seq b (undefined::([] Bool) -> ([] Int) -> [] Int))))) ((\a -> seq a 0) (id True))) ((\a -> (\b -> \c -> b) (seq a (undefined::[] Int))) ((\a -> seq a a) (undefined::Int))) ((!!) (undefined::[] (Int -> [] Bool)) (undefined::Int) ((\a -> seq a 2) False))
(undefined::((([] Int) -> [] (Int -> Bool)) -> Int) -> ([] Int) -> [] Int) ((\a -> \b -> seq a (head ([]::[] (([] (Bool -> Bool)) -> Int))) (seq b (seq a (seq a (undefined::[] (Bool -> Bool)))))) (head ((\a -> seq a (seq a ([]::[] Bool))) (undefined::[] (Bool -> Bool)))))
\a -> ([]::[] Int)
\a -> (\b -> id (\c -> seq c a) (\c -> seq c (seq a (head ([]::[] (Bool -> ([] Int) -> Bool))) (seq a (seq b (seq c (undefined::Bool))))))) (\b -> b)
\a -> map (\b -> seq b (seq b (seq b (\c -> (undefined::Bool -> Int))) (\c -> \d -> seq b (seq c (undefined::Int))) (seq b (undefined::([] ([] (Int -> Bool))) -> Bool) (undefined::[] ([] (Int -> Bool)))))) ([]::[] ([] (([] Int) -> Bool)))
id
\a -> case1 (undefined::([] ([] Bool)) -> ([] ([] ([] Bool))) -> [] Int) a (map (\b -> seq a (seq b (undefined::[] ([] Bool)))) (head (seq a (undefined::[] ([] Int)))))
map ((\a -> \b -> seq a (\c -> seq b (undefined::(Int -> ([] Int) -> Int) -> Int)) (seq b (seq a True)) (seq b (undefined::Int -> ([] Int) -> Int))) ((\a -> a) ((undefined::(Int -> Bool -> Bool) -> Int) (\a -> (undefined::Bool -> Bool)))))
(undefined::([] Int) -> [] Int)
(\a -> \b -> seq a b) ((\a -> \b -> seq a ((undefined::Int -> [] ([] Bool)) (seq a 1))) ((:) (head ([]::[] ([] Int))) (tail ([]::[] ([] Int)))))
\a -> a
\a -> seq a (undefined::[] Int)
(++) ((\a -> seq a (seq a (\b -> (\c -> seq c (undefined::[] Int)) (odd b)))) ((\a -> seq a (tail (undefined::[] (([] ([] ([] ([] Bool)))) -> Int)))) True) (head ([]::[] (Bool -> Int)) (id (\a -> seq a a) True)))
\a -> tail ((undefined::Bool -> [] Int) (seq a (undefined::([] Int) -> ([] (([] Int) -> Bool)) -> Bool) a (seq a (seq a (\b -> seq a (undefined::[] (([] Int) -> Bool)))) (undefined::Int -> Int))))
\a -> a
(\a -> head ([]::[] ((([] Int) -> [] ([] Int)) -> ([] Int) -> [] Int)) (seq a (\b -> \c -> seq a ([]::[] ([] Int))) (seq a (seq a (seq a (undefined::Int -> Bool)))))) ([]::[] (([] (([] Int) -> ([] Int) -> [] Bool)) -> Int -> Bool -> Bool -> Bool))
(!!) ((!!) ([]::[] (Bool -> [] (([] Int) -> [] Int))) (id (undefined::Int)) (id ((undefined::([] (Int -> [] Int)) -> Bool) (tail ([]::[] (Int -> [] Int)))))) ((\a -> (!!) (seq a (seq a (undefined::[] Int))) (seq a (undefined::Int))) (\a -> seq a (seq a ((\b -> seq b (undefined::[] ([] (Int -> Bool)))) (seq a (seq a (undefined::[] Bool)))))))
\a -> seq a (seq a (seq a (\b -> seq b (undefined::[] Int)) (\b -> (\c -> (undefined::Bool -> [] ([] (Int -> Bool))) (seq c (seq c True))) (head (take (seq b (undefined::Int)) (undefined::[] (([] ([] Bool)) -> Int -> [] Int)))))))
\a -> ([]::[] Int)
\a -> a
\a -> a
(\a -> \b -> tail ((undefined::([] (([] ([] Int)) -> Int)) -> Int -> [] Int) (seq b (head ([]::[] ([] (([] ([] Int)) -> Int))))) ((-) (seq a (seq b 0)) ((+1) 2)))) (\a -> seq a (seq a (\b -> id (undefined::([] ([] ([] ([] ([] Bool))))) -> Bool) (tail (undefined::[] ([] ([] ([] ([] Bool))))))) ((++) (seq a ([]::[] (([] (Int -> Bool)) -> Int -> Bool))) (seq a ([]::[] (([] (Int -> Bool)) -> Int -> Bool))))))
(\a -> seq a (seq a (seq a ((\b -> \c -> filter odd (seq b c)) (seq a (undefined::Bool -> Int -> Int -> Bool) False))))) id
\a -> a
case1 (\a -> seq a (\b -> id (\c -> tail)) (seq a not (head (undefined::[] Bool)))) ((\a -> \b -> seq a tail) (not (undefined::Bool)) ((\a -> seq a ([]::[] Bool)) (id (undefined::[] ([] ([] ([] Bool))))))) (map (id (\a -> seq a True)) ([]::[] (([] Int) -> ([] Int) -> Int)))
(undefined::([] Int) -> [] Int)
(\a -> (!!) (map (seq a (\b -> (undefined::([] Int) -> [] Int))) (id (undefined::[] ([] ([] Int))))) ((\b -> seq b b) 1)) (\a -> seq a (seq a (seq a (undefined::[] (Int -> Int)))))
(undefined::([] Int) -> [] Int)
(undefined::Bool -> ([] Int) -> [] Int) (head ((undefined::([] Int) -> [] ((Int -> Int) -> Bool)) (head ([]::[] ([] Int)))) (+1))
(\a -> \b -> seq a (undefined::([] Int) -> [] Int)) ((\a -> seq a (\b -> seq a ([]::[] Bool))) ((:) (undefined::[] Int) (undefined::[] ([] Int)))) (id ((\a -> seq a (seq a id)) (id (undefined::Int))) (id (\a -> seq a False) False))
take ((!!) (undefined::[] Int) (undefined::Int))
(\a -> take ((\b -> id (\c -> 0) (seq b (seq a (\c -> c)))) (undefined::(([] (Int -> Bool)) -> Bool) -> Bool -> ([] Bool) -> Bool))) (\a -> (!!) (seq a (map (undefined::Bool -> [] (([] Int) -> Bool))) (seq a (seq a (undefined::[] Bool)))) (seq a (seq a (\b -> 1) (head ([]::[] Bool)))))
\a -> map (\b -> seq a ((undefined::Bool -> Int) (seq b (head ([]::[] (([] Int) -> Bool)) a)))) (map ((undefined::Bool -> Bool -> Int -> [] (Int -> Bool)) (not (undefined::Bool))) (seq a (seq a (seq a (undefined::[] Bool)))))
tail
\a -> seq a (seq a ((undefined::Bool -> (([] Int) -> Int -> Int -> [] Int) -> [] Int) (seq a (id even) ((+1) (seq a 2))) (undefined::([] Int) -> Int -> Int -> [] Int)))
(\a -> seq a (seq a ((undefined::([] (Int -> [] Int)) -> ([] Int) -> [] Int) (seq a (\b -> seq a (undefined::[] (Int -> [] Int))) (seq a (seq a (seq a ([]::[] (Bool -> Bool))))))))) (case1 (\a -> seq a (\b -> \c -> (undefined::Bool))) (\a -> seq a (undefined::Int -> Bool) (seq a 1)) (head ([]::[] (([] ([] Bool)) -> [] Bool)) (undefined::[] ([] Bool))))
(\a -> case1 ((undefined::Int -> Int -> ([] Int) -> [] Int) (seq a (seq a (seq a (undefined::Int))))) ([]::[] Int)) (\a -> \b -> (undefined::[] Int))
(:) (undefined::Int)
head ([]::[] (([] (([] (Int -> ([] Int) -> Int)) -> Bool -> Bool)) -> ([] Int) -> [] Int)) ((undefined::([] Int) -> [] (([] (Int -> ([] Int) -> Int)) -> Bool -> Bool)) ((\a -> seq a (seq a (undefined::[] Int))) ([]::[] Bool)))
(!!) ((\a -> (!!) (seq a (seq a (undefined::[] ([] (([] Int) -> [] Int))))) (id 1)) (case1 (\a -> (undefined::([] Int) -> [] (Bool -> Bool))) ([]::[] (Bool -> Bool)) ([]::[] Int))) (id (undefined::(([] ([] (Bool -> Bool))) -> [] (Bool -> Bool)) -> Int) (\a -> ([]::[] (Bool -> Bool))))
\a -> ([]::[] Int)
\a -> a
\a -> a
head ([]::[] (Bool -> (Bool -> Bool) -> ([] Int) -> [] Int)) (((==)::Int -> Int -> Bool) (undefined::Int) 0) (id (\a -> case1 (undefined::Int -> ([] Int) -> Bool -> Bool) id (undefined::[] Int)) (\a -> \b -> (!!) (head ([]::[] (Bool -> [] Int)) (seq a (seq a (undefined::Bool))))))
\a -> a
id (\a -> \b -> \c -> (:) (seq b b) (seq a c)) ((!!) (id (undefined::[] Int)) 2) (id ((+1) (case1 (undefined::Int -> ([] Int) -> Bool -> Int) (undefined::Bool -> Int) ([]::[] Int) (odd (id 1)))))
\a -> a
case1 (\a -> \b -> (undefined::([] Int) -> [] Int)) ((\a -> id (undefined::Bool -> ([] Int) -> [] Int) (seq a (seq a True))) ((undefined::Int -> Bool -> Int) ((+1) 1))) ((undefined::(Bool -> Bool) -> [] Int) ((\a -> \b -> seq a b) (undefined::([] Int) -> Bool)))
(\a -> id (\b -> seq a (undefined::Bool -> ([] Int) -> [] Int)) 2) ((undefined::Bool -> Bool) False) (undefined::Bool)
\a -> (undefined::(([] ([] Int)) -> [] (([] Int) -> Bool)) -> [] Int) (\b -> ([]::[] (([] Int) -> Bool)))
\a -> head (take ((!!) a 0) (map (\b -> seq a a) ([]::[] (([] Int) -> [] ([] (([] Int) -> Bool))))))
\a -> seq a (seq a (\b -> seq b (\c -> a) (undefined::([] Int) -> [] (([] Int) -> [] Int))) (seq a (\b -> ([]::[] (Int -> ([] Int) -> ([] Int) -> Bool)))))
\a -> seq a (\b -> a) (id (\b -> \c -> (:) (seq c (((==)::Int -> Int -> Bool) (seq c 1) (seq b (undefined::Int)))) (id (take (undefined::Int) (undefined::[] Bool)))))
case1 (\a -> (\b -> seq a (\c -> \d -> seq b (seq b ([]::[] Int)))) (seq a (\b -> (undefined::Int -> Bool)) (seq a (seq a (undefined::Int))))) ((\a -> \b -> seq b (undefined::Int -> [] Int) (seq a a)) (head ([]::[] (Int -> Int)) ((+1) 2))) ((undefined::([] (Int -> Int)) -> [] Bool) ((\a -> seq a ([]::[] (Int -> Int))) (head ([]::[] ([] (([] Int) -> Bool))))))
(++) ((:) (case1 (\a -> (!!)) id (undefined::[] Int) ((undefined::(Int -> [] Bool) -> Int) (\a -> seq a (undefined::[] Bool)))) (map ((\a -> seq a (seq a (undefined::([] (Int -> Int)) -> Int))) False) ([]::[] ([] (Int -> Int)))))
case1 (\a -> seq a (\b -> seq b (undefined::([] Bool) -> ([] Int) -> [] Int)) a) (undefined::([] Int) -> [] Int) (take ((\a -> seq a (undefined::Int)) False) ((\a -> seq a ([]::[] Bool)) 0))
tail
\a -> (!!) ((\b -> (\c -> seq c (seq b ([]::[] ([] Int)))) (undefined::[] (([] Bool) -> [] Bool))) (\b -> tail (seq b (\c -> ([]::[] ([] Bool))) (undefined::Bool)))) (id (seq a (head ([]::[] (Int -> Int -> Int)) (id (undefined::Int))) (id (seq a (seq a (id (undefined::Int)))))))
(undefined::([] (([] (Bool -> Bool -> Bool)) -> [] Bool)) -> ([] Int) -> [] Int) ((\a -> seq a (seq a (seq a (seq a (seq a (undefined::[] (([] (Bool -> Bool -> Bool)) -> [] Bool))))))) ((\a -> a) ((!!) ([]::[] Int) 1)))
tail
(\a -> seq a (undefined::([] ([] (Bool -> Bool))) -> ([] Int) -> [] Int)) ((\a -> seq a (not False)) (undefined::([] ([] Int)) -> [] Bool)) ((undefined::Bool -> [] ([] (Bool -> Bool))) ((\a -> a ([]::[] Int) (undefined::Bool)) (\a -> seq a (id id))))
id (\a -> \b -> b) ((\a -> seq a (\b -> \c -> head ([]::[] (([] Bool) -> Bool)) (seq c (undefined::[] Bool)))) (case1 (\a -> seq a (seq a (undefined::([] Int) -> Bool -> Bool))) (undefined::Bool -> Bool)))
(\a -> (:) (seq a (undefined::Int))) (case1 (\a -> (undefined::([] Bool) -> ([] Int) -> Bool -> Int) (seq a ([]::[] Bool))) (\a -> seq a (undefined::Bool -> Int) (undefined::Bool)) ((\a -> seq a (undefined::[] Int)) (undefined::Bool)))
\a -> (enumFromTo'::Int -> Int -> [Int]) (case1 (undefined::Bool -> ([] Bool) -> Int -> Int) (undefined::Int -> Int) (seq a ([]::[] Bool)) ((\b -> seq b (undefined::Int)) (odd (seq a 0)))) ((\b -> (\c -> c) (seq b (seq a (seq b 1)))) (undefined::([] ([] ([] Int))) -> [] ([] ([] Bool))))
(!!) (id ((\a -> seq a ([]::[] (Int -> ([] Int) -> [] Int))) (undefined::Bool))) ((undefined::([] ([] (Int -> Bool))) -> Int) (id (undefined::[] ([] (Int -> Bool))))) ((\a -> seq a (\b -> seq b 1)) id ((\a -> \b -> seq b (seq a (undefined::[] Bool))) (undefined::Int -> Int -> Int)))
\a -> a
id
(++) ((!!) ([]::[] ([] Int)) (undefined::Int))
id (\a -> (undefined::Int -> ([] Int) -> [] Int)) ((!!) ([]::[] (Bool -> [] (Int -> Bool))) (id 1)) ((undefined::([] (Int -> ([] Int) -> ([] Bool) -> [] Bool)) -> Int) ([]::[] (Int -> ([] Int) -> ([] Bool) -> [] Bool)))
take ((\a -> (!!) (seq a (undefined::[] ((([] ([] Int)) -> [] Bool) -> Int))) ((+1) 2)) (head (map (undefined::Int -> Int -> Int -> Int) (undefined::[] Int))) (\a -> head (seq a (map (undefined::([] Int) -> [] Bool)) (seq a (\b -> seq a a) (seq a (seq a (seq a (undefined::Bool))))))))
(\a -> seq a (undefined::Int -> ([] Int) -> [] Int) (id (seq a (\b -> seq a b) (seq a (seq a (undefined::Int)))))) (\a -> seq a ((undefined::(([] Int) -> [] (Int -> Int)) -> Int -> Int) (\b -> seq a (map (seq b (undefined::Int -> Int -> Int)) b))))
\a -> map (seq a ((\b -> seq b (head ([]::[] (([] ([] Bool)) -> Bool -> Int))) (seq a (head ([]::[] ([] ([] Bool)))))) (seq a (\b -> seq b (undefined::[] (Bool -> Bool))) (seq a (undefined::Bool))))) ([]::[] Bool)
id
(!!) ([]::[] (([] Int) -> [] Int)) ((\a -> \b -> seq a (undefined::Int)) (undefined::[] ([] Bool)) ((:) (\a -> seq a (seq a (undefined::[] Int))) (tail ([]::[] (Int -> [] Int)))))
\a -> (!!) (seq a ([]::[] ([] Int))) (case1 (id (head (undefined::[] (Bool -> ([] Bool) -> Int)))) (id 2) (seq a (seq a (head ([]::[] ([] Bool))))))
\a -> a
\a -> a
\a -> head ((!!) (undefined::[] ([] (Int -> Int -> [] Int))) (head a)) (seq a (seq a ((\b -> seq b (undefined::Int)) (seq a False)))) ((\b -> seq a (head (seq b a))) ((!!) (id ([]::[] Bool)) (seq a (seq a 0))))
head (id ((\a -> seq a (\b -> \c -> (undefined::[] (([] Int) -> [] Int))) (seq a (seq a True)) (seq a (\b -> seq a (undefined::Int)) (seq a (seq a a)))) ((\a -> seq a (id (id (undefined::Bool)))) ((+1) ((\a -> seq a (undefined::Int)) (head (undefined::[] ([] ([] ([] ([] Int)))))))))))
\a -> a
id (\a -> \b -> ([]::[] Int)) (\a -> seq a (seq a ((\b -> \c -> seq b (undefined::Int -> [] ([] ([] Bool))) (seq b (seq b 2))) ((\b -> seq a (seq b False)) (seq a (seq a (seq a ([]::[] Bool))))))))
\a -> case1 (\b -> (undefined::([] Bool) -> [] Int)) (undefined::[] Int) (seq a (seq a (undefined::Bool -> Int -> [] Bool)) True (seq a (seq a (id 1))))
(undefined::(([] Int) -> [] (Int -> [] Int)) -> Bool -> ([] Int) -> [] Int) ((undefined::Bool -> ([] Int) -> [] (Int -> [] Int)) (undefined::Bool)) ((\a -> seq a (head (seq a (seq a ([]::[] Bool))))) (\a -> (\b -> seq a (seq b (seq b ([]::[] ([] Bool))))) (head (seq a ([]::[] ([] Int))))))
(undefined::(([] Int) -> ([] Int) -> [] Bool) -> ([] Int) -> [] Int) (head (tail ([]::[] (Bool -> ([] Int) -> ([] Int) -> [] Bool))) ((\a -> seq a (not (undefined::Bool))) (\a -> seq a (seq a (seq a (undefined::Bool))))))
\a -> (undefined::[] Int)
\a -> a
\a -> a
id ((\a -> (\b -> seq a (id (undefined::Int -> ([] Int) -> [] Int)) (seq b (seq a (seq b (undefined::Int))))) (seq a (seq a (map (\b -> (undefined::([] Int) -> Bool)) ([]::[] Int))))) (undefined::([] ([] ([] Int))) -> [] ([] ([] Bool))))
(\a -> \b -> id (\c -> seq c (seq b b)) (seq a ((\c -> \d -> \e -> seq c True) (head (seq b ([]::[] ([] Bool))))))) ((undefined::Bool -> Int) False)
\a -> seq a (seq a (undefined::(Bool -> ([] (([] (Int -> Int)) -> [] (Int -> Int))) -> Bool -> Bool -> Bool) -> [] Int)) (seq a (\b -> \c -> (undefined::Bool -> Bool -> Bool)))
(\a -> head (seq a ((\b -> \c -> seq b (seq a (undefined::[] (([] Int) -> [] Int)))) (seq a (seq a a)) (seq a (\b -> seq b (undefined::Int)) (seq a (seq a (seq a (undefined::[] ([] Bool))))))))) ((\a -> (&&) (seq a False)) (undefined::Int -> Bool -> Bool) (id (\a -> (undefined::Bool)) ((!!) (undefined::[] (([] Int) -> [] ([] Bool))) (undefined::Int))))
case1 (\a -> (undefined::([] Bool) -> Bool -> ([] Int) -> [] Int)) (\a -> \b -> b) (filter (\a -> (undefined::Bool)) (undefined::[] Bool)) True
\a -> a
take ((\a -> (undefined::([] ([] Int)) -> Int) (head ([]::[] (Bool -> [] ([] Int))) (seq a False))) ((!!) ((:) (undefined::Int) ([]::[] Int)) (case1 (undefined::Bool -> ([] Bool) -> Int) (undefined::Int) (undefined::[] Bool))))
tail
case1 (\a -> \b -> seq a (\c -> c)) (\a -> (undefined::([] (Int -> [] (([] Int) -> [] Int))) -> [] Int) (seq a (seq a (seq a (undefined::[] (Int -> [] (([] Int) -> [] Int))))))) ((++) ((\a -> seq a (undefined::[] ([] (Bool -> Bool)))) 0) ((\a -> seq a ([]::[] ([] (Bool -> Bool)))) False))
id (\a -> seq a (seq a (\b -> seq b (map (seq b (seq a (\c -> seq c 0))) (seq a (seq b (tail ([]::[] ([] ([] Int)))))))))) (\a -> seq a (\b -> seq b (\c -> (undefined::(([] Bool) -> [] Bool) -> [] Int) (seq c (seq c tail)))) (\b -> seq a (id (undefined::(Int -> Int) -> [] (Int -> Int))) (\c -> c)))
\a -> seq a (seq a (undefined::([] (Int -> Int)) -> [] Int) (head (undefined::[] (Bool -> [] (Int -> Int))) (seq a (\b -> (undefined::Bool)) (\b -> 1))))
head (head (undefined::[] ([] (([] (([] (Int -> [] Bool)) -> [] Bool)) -> ([] Int) -> [] Int)))) ([]::[] (([] (Int -> [] Bool)) -> [] Bool))
\a -> a
\a -> (++) (seq a a) ((\b -> \c -> b) a (seq a (id (\b -> b) (head (seq a a)))))
\a -> (undefined::[] Int)
head (head ([]::[] ([] ((([] (Int -> Bool -> Bool)) -> ([] Int) -> [] Bool) -> ([] Int) -> [] Int)))) (\a -> (undefined::([] Int) -> [] Bool))
\a -> a
id
(\a -> seq a (undefined::((Int -> [] Int) -> Bool) -> ([] Int) -> [] Int)) (\a -> seq a 1) (\a -> not (seq a ((\b -> seq b (\c -> (undefined::Bool))) (seq a (seq a ([]::[] Bool)))) (\b -> seq a (\c -> seq b b) b)))
(undefined::([] (([] ([] Int)) -> [] ([] Int))) -> ([] Int) -> [] Int) (filter (\a -> odd (seq a (undefined::Int))) ((\a -> seq a (seq a ([]::[] (([] ([] Int)) -> [] ([] Int))))) (undefined::[] Int)))
(\a -> filter (\b -> (undefined::([] ([] Bool)) -> Bool) ((\c -> seq c (a (undefined::([] ([] Int)) -> [] ([] ([] Int))) ([]::[] (([] Int) -> [] Bool)))) (undefined::Int)))) (\a -> \b -> seq b (case1 (seq b (seq a (seq a (undefined::Bool -> ([] Bool) -> [] ([] Bool))))) (filter (undefined::([] Bool) -> Bool) ([]::[] ([] Bool))) (seq a (seq a (undefined::[] Bool)))))
\a -> ([]::[] Int)
id
(\a -> seq a (undefined::(Bool -> Bool -> Bool) -> ([] Int) -> [] Int)) (\a -> ([]::[] Int)) ((==)::Bool -> Bool -> Bool)
(undefined::(([] Int) -> ([] Bool) -> [] Bool) -> ([] Int) -> [] Int) (head ([]::[] (([] Int) -> ([] Bool) -> [] Bool)))
\a -> (!!) (id (undefined::(([] Int) -> ([] Int) -> [] Bool) -> [] ([] Int)) (\b -> seq a (seq a (seq b (seq b (undefined::([] Int) -> ([] Int) -> [] Bool) (undefined::[] Int)))))) (undefined::Int)
(\a -> (\b -> (!!) ([]::[] (Bool -> ([] Int) -> [] Int)) 1 (head (seq b ([]::[] Bool)))) (seq a (id (undefined::Bool -> Int -> [] ([] Bool))) (seq a (seq a (undefined::Bool))))) (id (undefined::[] (([] ([] Bool)) -> [] ([] Bool))))
(++) (head ([]::[] ((([] Int) -> Int -> ([] ([] Bool)) -> [] ([] (Bool -> Bool))) -> [] Int)) (undefined::([] Int) -> Int -> ([] ([] Bool)) -> [] ([] (Bool -> Bool))))
take 2
\a -> a
id (\a -> \b -> seq b (seq a (undefined::Bool -> ([] Int) -> [] Int)) b) (\a -> seq a (seq a a)) ((!!) (undefined::[] ((Int -> Int) -> Bool -> Bool)) (undefined::Int) id (case1 (\a -> \b -> (undefined::Bool)) True (undefined::[] ([] Int))))
(\a -> seq a (\b -> b)) (\a -> seq a ((!!) (id ([]::[] (Int -> [] (Int -> [] Int)))) (seq a 2) (id (\b -> seq a b) (seq a (seq a (seq a (undefined::Int)))))))
id
\a -> a
\a -> map (seq a (\b -> seq b (\c -> seq a (seq c (seq c (b 0))))) (\b -> seq a (seq a (seq b (undefined::Int -> Int))) (seq b b))) ((\b -> seq a (seq b ([]::[] ([] (([] Bool) -> [] Bool))))) (seq a (\b -> (undefined::([] Int) -> [] Int)) (seq a 2)))
\a -> seq a (\b -> head (seq a ([]::[] (Bool -> Bool -> [] Int))) (seq b (seq a (seq a False))) (seq a (id (undefined::([] (Int -> Int)) -> Bool)) (seq b (seq a (seq b (undefined::[] (Int -> Int))))))) (seq a (\b -> filter (seq a (undefined::([] ([] (([] ([] Bool)) -> [] ([] Bool)))) -> Bool)) (seq a (seq a (seq a (seq b (undefined::[] ([] ([] (([] ([] Bool)) -> [] ([] Bool)))))))))))
case1 (\a -> seq a (\b -> (\c -> seq c tail) (id (seq a (seq b ([]::[] ([] (Int -> Int)))))))) (\a -> ([]::[] Int)) (case1 (\a -> (undefined::([] Int) -> [] (([] Int) -> Int))) (id (undefined::[] (([] Int) -> Int))) (undefined::[] Int))
(undefined::(([] (Int -> [] Int)) -> Int -> Int) -> ([] Int) -> [] Int) ((undefined::(Int -> Int) -> ([] (Int -> [] Int)) -> Int -> Int) ((\a -> seq a id) (undefined::Int)))
tail
(\a -> \b -> \c -> seq a (seq a ([]::[] Int))) ((\a -> seq a (seq a (seq a 2))) (\a -> seq a (undefined::Int))) ((\a -> seq a (undefined::[] ([] ([] Bool)))) True)
\a -> a
id (\a -> \b -> b) (\a -> seq a (\b -> (undefined::([] ([] Int)) -> [] Bool)) (seq a (head ([]::[] (Bool -> Int -> Bool -> Bool))) (seq a (not (undefined::Bool)))))
\a -> a
(undefined::(([] ([] (([] Int) -> [] ([] Bool)))) -> [] (([] Int) -> Bool)) -> ([] Int) -> [] Int) ((\a -> seq a (\b -> seq a (\c -> seq a ([]::[] (([] Int) -> Bool))) (seq a (seq b (undefined::[] Int))))) ((undefined::([] ([] Int)) -> Bool) (undefined::[] ([] Int))))
\a -> a
(undefined::Bool -> ([] (([] Int) -> [] Int)) -> ([] Int) -> [] Int) ((\a -> head (seq a ([]::[] Bool))) ((!!) (undefined::[] Int) 1)) (take (id (\a -> 2) (\a -> 2)) ((undefined::Int -> [] (([] Int) -> [] Int)) (head (undefined::[] Int))))
\a -> seq a (seq a (id (seq a (\b -> a)))) (seq a (undefined::[] (([] (([] Int) -> ([] ([] Int)) -> [] Bool)) -> Int -> Int)))
\a -> seq a (map ((undefined::(([] Int) -> Int -> Bool) -> Bool -> Int) ((\b -> seq b (seq b (undefined::([] Int) -> Int -> Bool))) (\b -> not (undefined::Bool)))) ((\b -> \c -> seq b (seq b (undefined::[] Bool))) (not (seq a (undefined::Bool))) (\b -> seq b ((++) (seq a (undefined::[] ([] Int))) (undefined::[] ([] Int))))))
(\a -> seq a (\b -> (undefined::Bool -> ([] Int) -> [] Int) (seq b (seq a (undefined::Bool))))) ((\a -> seq a (a (seq a 2))) (\a -> a)) ((+1) ((\a -> seq a (seq a ((\b -> seq a b) ((+1) 2)))) (\a -> seq a (\b -> seq b (undefined::[] ([] Bool))) (seq a ((+1) (undefined::Int))))))
id (\a -> \b -> (undefined::Bool -> [] Int) (seq a (seq b ((\c -> seq c False) (seq b (seq a 1)))))) (\a -> (\b -> seq b (seq b (seq a (\c -> seq b (undefined::Int -> [] (Bool -> Bool)) (undefined::Int))))) (seq a (undefined::Int -> ([] Int) -> Bool)))
\a -> seq a (id (\b -> seq a a)) (seq a (seq a (head (seq a (undefined::[] (([] (Int -> [] Int)) -> ([] ([] (Int -> [] Int))) -> [] ([] (Int -> [] Int))))))))
head ([]::[] ((([] ([] (([] (Bool -> Bool)) -> [] (Bool -> Bool)))) -> [] (Bool -> Bool)) -> ([] Int) -> [] Int)) (\a -> seq a ([]::[] (Bool -> Bool)))
(\a -> head (seq a (\b -> seq b ((undefined::([] ([] Int)) -> [] (([] Int) -> [] Int)) (seq b (seq b ([]::[] ([] Int)))))) (seq a (seq a (\b -> seq a True) (undefined::Int -> ([] Int) -> Int))))) (case1 (\a -> (\b -> seq b (undefined::([] Bool) -> [] (Int -> Bool))) (seq a a)) (map (undefined::Int -> Int -> Bool) (head ([]::[] ([] Int)))) ((\a -> seq a (undefined::[] Bool)) ([]::[] (([] ([] ([] Bool))) -> Bool))))
(undefined::(Bool -> Bool) -> ([] Int) -> [] Int) (case1 ((\a -> seq a (undefined::Bool -> ([] Bool) -> Bool -> Bool)) True) (\a -> a) ((\a -> seq a ([]::[] Bool)) ((+1) 0)))
\a -> seq a a
\a -> seq a (\b -> \c -> map (\d -> seq b d) (seq c a)) (seq a (id ((\b -> seq b (undefined::Int)) (seq a (seq a True))))) ((undefined::((([] Int) -> Bool) -> ([] Bool) -> Bool) -> ([] ([] Int)) -> [] Int) (\b -> head ((!!) (seq a ([]::[] ([] (([] Bool) -> Bool)))) 2)))
\a -> seq a (map (seq a (\b -> head ((undefined::(([] ([] ([] Bool))) -> [] ([] ([] Bool))) -> [] Int) (seq b (\c -> seq a (undefined::Bool -> [] ([] ([] Bool))) (undefined::Bool)))))) (seq a (undefined::[] (([] ([] Bool)) -> [] ([] (Bool -> Bool))))))
(\a -> (undefined::Bool -> Bool -> ([] Int) -> [] Int) (seq a (seq a (undefined::Bool))) (seq a (undefined::Bool))) (undefined::([] Int) -> ([] (([] (Int -> Bool)) -> [] (Int -> Bool))) -> ([] Int) -> [] Bool)
\a -> tail a
id
\a -> seq a (seq a (case1 (seq a (seq a (undefined::(Int -> Bool) -> ([] (Int -> Bool)) -> [] Int))) (seq a (seq a (\b -> a) (odd 0))))) (tail (tail (map (undefined::([] (([] Int) -> Bool)) -> Int -> Bool) (seq a ((undefined::Int -> [] ([] (([] Int) -> Bool))) 0)))))
\a -> tail a
\a -> a
(undefined::([] Int) -> [] Int)
(\a -> seq a (\b -> \c -> seq c (seq b (seq c id c))) (seq a (seq a (map (\b -> (+1)) ([]::[] Bool))))) (\a -> \b -> (undefined::(([] Int) -> Int -> [] Int) -> Int -> Int) (\c -> \d -> seq a (case1 (undefined::Bool -> ([] Bool) -> [] Int) (undefined::[] Int) (undefined::[] Bool))))
(\a -> case1 (\b -> \c -> \d -> c) (\b -> b) (seq a tail (seq a ([]::[] Int)))) (\a -> id (\b -> (\c -> \d -> c) (seq a (\c -> c) (seq a (seq b (seq a (undefined::Bool)))))))
(\a -> seq a (seq a (\b -> seq b (seq b (undefined::([] Bool) -> ([] Int) -> [] Int)) (seq a (seq b (undefined::[] Bool))))) (\b -> case1 (\c -> (undefined::([] ([] Int)) -> Bool)) (seq a True) (seq a ([]::[] ([] Int))))) (\a -> take (case1 (\b -> (undefined::([] ([] Bool)) -> Int)) (seq a 2) ([]::[] ([] Bool))) (seq a (seq a (\b -> seq b (undefined::[] (([] Int) -> Bool))) ((+1) (undefined::Int)))))
\a -> (undefined::[] Int)
tail
\a -> id a
(\a -> \b -> seq b (\c -> seq b (undefined::[] Int)) (seq a (\c -> seq b (undefined::([] ([] ([] Int))) -> [] ([] Bool))) True)) (id (\a -> seq a (\b -> \c -> b)))
id (\a -> seq a (\b -> b)) ((\a -> seq a (head (seq a (undefined::[] ([] ([] (([] Int) -> ([] Bool) -> [] Bool))))))) (undefined::Int -> [] Bool))
\a -> seq a (seq a a)
id (head ((undefined::Bool -> (Bool -> Bool -> Bool) -> [] (([] Int) -> [] Int)) (((==)::Int -> Int -> Bool) 2 (undefined::Int)) (\a -> \b -> (undefined::([] (([] Int) -> Bool)) -> Int -> Bool) (seq b (seq b (seq b ([]::[] (([] Int) -> Bool))))) ((\c -> seq a (seq c (undefined::Int))) (seq a (seq a (seq a (undefined::[] Int))))))))
id
\a -> seq a a
\a -> (undefined::[] Int)
\a -> (undefined::((([] (([] ([] ([] Int))) -> [] ([] ([] Int)))) -> ([] Int) -> [] (Int -> Int -> Bool)) -> Int) -> [] Int) (undefined::(([] (([] ([] ([] Int))) -> [] ([] ([] Int)))) -> ([] Int) -> [] (Int -> Int -> Bool)) -> Int)
id
\a -> seq a a
\a -> (\b -> seq b (filter odd ((:) (seq b (seq b (undefined::Int))) a))) (id ((\b -> seq b (\c -> head (seq a (undefined::[] ((([] Bool) -> Bool) -> ([] Bool) -> Bool))))) ((\b -> seq b (seq a False)) a)))
tail
id (\a -> \b -> \c -> seq b head (seq c (undefined::[] ([] Int)))) (case1 (\a -> \b -> False) (undefined::Bool) (undefined::[] ([] Int))) ((\a -> seq a (undefined::Int -> ([] Int) -> Bool -> Bool)) (undefined::Bool) (id 0))
(undefined::(([] (([] (Bool -> Bool)) -> [] (Bool -> Bool))) -> ([] Int) -> [] ([] (Bool -> Bool))) -> ([] Int) -> [] Int) (id (\a -> (undefined::([] ([] (Bool -> Bool))) -> ([] Int) -> [] ([] (Bool -> Bool))) (seq a (\b -> seq b ([]::[] ([] (Bool -> Bool)))) (tail (seq a ([]::[] Int))))))
\a -> seq a (seq a (seq a (\b -> (undefined::Bool -> [] Int))) (seq a (\b -> \c -> \d -> seq c (undefined::([] Int) -> Bool -> Bool) (seq a (seq d a)))) ((\b -> \c -> seq b (seq b False)) (seq a (seq a 2)) ((\b -> seq b (seq b (undefined::[] (Int -> Int -> Int)))) ((+1) (seq a 2)))))
case1 (id ((undefined::(Int -> Int) -> Int -> ([] Int) -> [] Int) ((+) ((+1) (undefined::Int))))) ((undefined::Bool -> [] Int) (case1 (undefined::([] Int) -> ([] ([] Int)) -> Bool) False (undefined::[] ([] Int))))
(!!) (map (\a -> \b -> \c -> ([]::[] Int)) (tail ([]::[] ([] Bool)))) ((\a -> seq a (seq a (undefined::Int))) (head (undefined::[] ([] (Int -> Int))))) True
(undefined::Int -> ([] (([] (([] Int) -> Bool)) -> Bool)) -> ([] Int) -> [] Int) ((\a -> seq a (undefined::Int)) ([]::[] Int)) (head ((\a -> (\b -> seq b ([]::[] ([] (([] (([] Int) -> Bool)) -> Bool)))) (seq a (seq a (seq a 1)))) (id (\a -> (undefined::Bool)) (head ([]::[] ([] ([] ([] ([] Bool)))))))))
(undefined::([] Int) -> [] Int)
\a -> a
id
\a -> (\b -> seq b (seq b (\c -> \d -> a) (\c -> tail (seq b ([]::[] Bool))) (seq b (undefined::(Int -> Bool) -> Bool) (\c -> odd 2)))) (\b -> (\c -> id (\d -> c) (seq b (seq b (seq a (undefined::Bool -> [] ([] (Int -> Int))))))) ((\c -> seq c (head b)) (seq b (seq a (seq a (undefined::Bool))))))
\a -> case1 (\b -> seq a (\c -> (undefined::Bool -> ([] Int) -> [] Int)) (odd b) (seq b (\c -> (undefined::Bool)) (seq a (seq a (undefined::Bool))))) ((undefined::Bool -> (Int -> [] Bool) -> [] Int) (seq a (undefined::Bool)) (seq a (seq a (\b -> ([]::[] Bool))))) (map (seq a (seq a id)) a)
\a -> seq a a
(\a -> seq a (undefined::Int -> ([] Int) -> [] Int)) ((undefined::Bool -> [] (([] Bool) -> [] Bool)) (((==)::Int -> Int -> Bool) 0 1)) ((undefined::((([] Bool) -> Bool) -> ([] ([] ([] Bool))) -> [] (Bool -> Bool)) -> Int) (\a -> seq a ((\b -> \c -> seq c (seq b ([]::[] (Bool -> Bool)))) (seq a (seq a (seq a (undefined::Int)))))))
(!!) (undefined::[] ((([] Int) -> ([] Int) -> [] Int) -> ([] Int) -> [] Int)) (case1 (undefined::([] Bool) -> ([] ([] Bool)) -> Int) 2 (undefined::[] ([] Bool))) ((!!) (tail (tail ([]::[] (([] Int) -> ([] Int) -> [] Int)))) ((undefined::([] Bool) -> Int) (head (undefined::[] ([] Bool)))))
(++) ((\a -> seq a (\b -> map (seq a (undefined::([] (Int -> Int)) -> Int)) (seq b ([]::[] ([] (Int -> Int)))))) 2 (map ((undefined::Int -> Int -> ([] Bool) -> [] Bool) (id 0)) (tail ((\a -> seq a ([]::[] Int)) (head ([]::[] Int))))))
(\a -> seq a (\b -> (\c -> seq c ([]::[] Int)) (even (seq a (seq b (seq b (undefined::Int))))))) ((\a -> head (seq a (undefined::[] (([] Int) -> ([] (([] Int) -> Bool)) -> Bool)))) 1)
\a -> (\b -> seq b (id a)) (seq a (seq a (\b -> \c -> (undefined::Int))) (\b -> b) (undefined::Int))
(\a -> head (seq a (seq a (seq a ([]::[] ((Int -> [] Bool) -> ([] Int) -> [] Int))))) (id (\b -> seq b (seq a (\c -> ([]::[] Bool)) (id (undefined::Bool)))))) (\a -> (\b -> head (seq b (undefined::[] ([] (Bool -> Bool))))) ((\b -> seq b (undefined::([] Int) -> [] (Int -> Bool))) ([]::[] Bool)))
(!!) (head ((\a -> seq a (\b -> seq b (undefined::[] ([] (([] Int) -> [] Int)))) (seq a (seq a True))) ((\a -> seq a (seq a (undefined::([] ([] Int)) -> [] Bool))) (head (undefined::[] Int))))) ((!!) (map (\a -> 0) (undefined::[] Int)) ((\a -> seq a (seq a (seq a (undefined::Int)))) (head (undefined::[] ([] ([] Int))))))
id (\a -> \b -> b) (case1 (undefined::Bool -> ([] Bool) -> [] ([] (Int -> Bool))) (filter (\a -> True) ([]::[] ([] (Int -> Bool)))) (tail ([]::[] Bool)))
(undefined::([] Int) -> [] Int)
\a -> (:) ((+1) (seq a (id (seq a (\b -> 2))) (seq a (\b -> seq a ((\c -> c) (undefined::Bool)))))) (undefined::[] Int)
(\a -> seq a (seq a (\b -> seq b b))) (head ([]::[] (([] ([] (([] Int) -> Bool))) -> [] (Int -> ([] (Bool -> Bool)) -> [] (Bool -> Bool)))))
\a -> head (undefined::[] ((([] (Int -> Bool)) -> Int -> Bool) -> [] Int)) (undefined::([] (Int -> Bool)) -> Int -> Bool)
(undefined::Bool -> Int -> Int -> ([] Int) -> [] Int) (undefined::Bool) (id (\a -> seq a a) 2) ((\a -> head (seq a ((!!) (seq a (undefined::[] ([] Int))) (seq a (undefined::Int))))) (undefined::([] (([] Bool) -> Bool)) -> Int -> [] Int))
id (\a -> (undefined::(([] Int) -> [] Bool) -> ([] Int) -> [] Int)) ((!!) (undefined::[] Int) (head (undefined::[] Int))) (case1 (\a -> seq a (\b -> seq b (undefined::([] Int) -> [] Bool)) (\b -> ([]::[] Bool))) (case1 (\a -> (undefined::([] Bool) -> [] Bool)) (undefined::[] Bool) (undefined::[] Bool)))
head ((++) ((:) (undefined::Bool -> ([] Int) -> [] Int) ([]::[] (Bool -> ([] Int) -> [] Int))) ((\a -> seq a (seq a (undefined::[] (Bool -> ([] Int) -> [] Int)))) (undefined::Bool))) ((undefined::Bool -> Bool -> Bool) (((==)::Bool -> Bool -> Bool) (undefined::Bool) (undefined::Bool)) (id (\a -> False) 0))
(\a -> seq a (map (\b -> seq b ((\c -> seq c (\d -> (undefined::Int)) b) (id (undefined::Bool -> Int -> [] Bool) (seq a (seq b False))))))) ((!!) ((!!) ([]::[] ([] (Int -> Bool))) (undefined::Int)) (head (undefined::[] (([] Bool) -> Int)) (head ([]::[] ([] Bool)))))
id
case1 (undefined::([] (Bool -> Bool)) -> ([] ([] (Bool -> Bool))) -> ([] Int) -> [] Int) (\a -> seq a ((\b -> seq b a) (undefined::Bool))) ((\a -> (!!) ([]::[] ([] ([] (Bool -> Bool)))) a) ((\a -> seq a (undefined::Int)) True))
case1 (\a -> \b -> id) (\a -> seq a a) (head ([]::[] ((([] Bool) -> [] Bool) -> [] Bool)) (\a -> a))
(undefined::(Int -> Int -> Int) -> ([] Int) -> [] Int) (-)
(\a -> \b -> (\c -> seq c (\d -> seq d (undefined::[] Int)) (id b)) (seq a (seq a (undefined::(([] Int) -> [] (Int -> [] Int)) -> Int)))) (undefined::([] ([] Int)) -> [] ([] ([] Int)))
tail
take ((\a -> id (\b -> (undefined::(Int -> Bool) -> Int)) (seq a (seq a (seq a (undefined::Bool))))) (undefined::([] (Int -> Int)) -> Int -> Int) ((\a -> seq a (\b -> even)) (head (undefined::[] Int)) (id ((\a -> seq a (undefined::Int)) (head (undefined::[] ([] Int)))))))
\a -> map (seq a (\b -> (\c -> c) (seq b (seq b (\c -> (undefined::Int))) (\c -> a)))) (seq a (undefined::[] (([] ([] (([] ([] Bool)) -> [] ([] Bool)))) -> Int -> Int -> Bool)))
(\a -> map (\b -> seq a (\c -> \d -> seq b (undefined::Int)) False (\c -> ([]::[] Bool)))) ((+1) 1)
take 1
\a -> a
(\a -> seq a ((undefined::Bool -> (Int -> Int) -> ([] Int) -> [] Int) (seq a (seq a False)) id)) (id (\a -> seq a (seq a (seq a (head (id (seq a (seq a (undefined::[] (([] Int) -> [] ([] (([] ([] Bool)) -> [] ([] Bool)))))))))))))
take (id (\a -> (undefined::([] (Int -> Int)) -> Int) (undefined::[] (Int -> Int))) (\a -> seq a ((undefined::Int -> [] ([] (Bool -> Bool))) (undefined::Int))))
(\a -> \b -> (\c -> seq c (seq b (seq a (undefined::Bool -> [] Int))) (undefined::Bool)) (seq b (seq b (\c -> seq b (\d -> \e -> \f -> seq b False))))) ((\a -> seq a (seq a (\b -> seq b ([]::[] ([] (Int -> Int))))) (undefined::[] ([] Bool))) ((undefined::(Int -> Int) -> ([] Int) -> Int) (\a -> seq a a)))
filter ((\a -> seq a (seq a (seq a (id (undefined::Bool -> Int -> Int -> Bool)) True ((+) (undefined::Int) (undefined::Int))))) (id (\a -> (\b -> (\c -> seq c (seq c ([]::[] ([] (Bool -> Bool -> Bool))))) (seq a (seq b ([]::[] Bool)))) (\b -> \c -> seq c c))))
\a -> a
(undefined::Bool -> ([] (Bool -> Bool)) -> ([] Int) -> [] Int) (not ((\a -> a) (even (undefined::Int)))) (id (\a -> seq a (seq a (seq a (seq a (seq a ([]::[] (Bool -> Bool))))))) (id (head (id (undefined::[] (([] ([] Bool)) -> [] ([] (Bool -> Bool))))))))
\a -> seq a (seq a a)
(undefined::(([] ([] (([] ([] Bool)) -> [] ([] (Bool -> Bool))))) -> [] (Bool -> Bool)) -> ([] Int) -> [] Int) (\a -> (undefined::(([] ([] Int)) -> [] ([] Int)) -> [] (Bool -> Bool)) (seq a (seq a (\b -> \c -> c)) 2))
(undefined::([] Int) -> [] Int)
id ((\a -> seq a (\b -> (\c -> seq c (undefined::([] Int) -> [] Int)) 2)) ((undefined::([] ([] ([] ([] Bool)))) -> Int) ([]::[] ([] ([] ([] Bool)))))) (\a -> \b -> seq b ((undefined::Int -> Bool) (seq a (\c -> c) (undefined::Int))))
\a -> seq a ([]::[] Int)
(undefined::([] Int) -> [] Int)
\a -> a
tail
\a -> seq a ((\b -> seq b ((\c -> seq c (\d -> seq c a)) (seq b (seq a (seq a (undefined::[] (Int -> Int))))))) (seq a ([]::[] ([] Int))) (seq a (\b -> seq a 2) (undefined::([] Int) -> ([] (Bool -> Bool)) -> Bool -> Bool)))
\a -> a
id
case1 (\a -> case1 (undefined::Int -> ([] Int) -> ([] Int) -> [] Int) (\b -> b)) (take ((\a -> seq a (seq a 0)) ((\a -> seq a ([]::[] Bool)) (\a -> seq a (undefined::Int))))) (tail (head (map (\a -> seq a ([]::[] Int)) (undefined::[] Int))))
(\a -> seq a ((undefined::(Int -> Bool) -> ([] Int) -> [] Int) (seq a (\b -> case1 (undefined::Int -> ([] Int) -> Bool) (undefined::Bool) (undefined::[] Int))))) ((\a -> \b -> (undefined::Int -> ([] Int) -> [] Int) (seq a a)) (undefined::Int))
(undefined::([] Int) -> [] Int)
id
head ((\a -> \b -> seq a (id (undefined::Bool -> [] (([] Int) -> [] Int)) b)) ((\a -> seq a (undefined::Bool)) ([]::[] Int)) (case1 (\a -> \b -> False) False ((\a -> head (seq a ([]::[] ([] ([] Int))))) 1)))
\a -> a
tail
(\a -> seq a (seq a (seq a (\b -> seq a ((!!) (seq a ([]::[] ((Bool -> Bool) -> [] Int))) (seq b 2) (seq a (\c -> \d -> d) (\c -> b))))))) (\a -> \b -> head (undefined::[] (([] Int) -> [] (Int -> Int))))
(undefined::Bool -> Bool -> ([] Int) -> [] Int) ((\a -> seq a (seq a (seq a False))) ((++) (undefined::[] Bool) ([]::[] Bool))) ((!!) ([]::[] ((([] ([] Int)) -> [] ([] Bool)) -> Bool)) ((+1) (undefined::Int)) (\a -> seq a (case1 (seq a (undefined::Bool -> ([] Bool) -> [] ([] Bool))) (seq a (undefined::[] ([] Bool))) ([]::[] Bool))))
\a -> (\b -> seq b (seq b (seq b (\c -> a) (seq b (seq a ((\c -> c) (id (undefined::Bool)))))))) ((\b -> seq a (seq b (undefined::Bool -> Int) b)) ((\b -> seq a (seq a (seq b True))) (seq a (\b -> seq a (seq a (undefined::Bool))))))
(\a -> seq a (undefined::([] Int) -> [] Int)) ((\a -> seq a 0) head)
\a -> seq a (id (undefined::Int -> [] Int)) (seq a 1)
\a -> a
case1 ((undefined::Int -> Int -> ([] Int) -> ([] Int) -> [] Int) (undefined::Int)) (undefined::([] Int) -> [] Int) ((++) ((\a -> seq a ([]::[] Int)) ([]::[] Int)) ([]::[] Int))
\a -> (undefined::[] Int)
\a -> (\b -> seq b (seq b (\c -> (++) a a) (seq b (seq b (\c -> c)) (seq a (seq a (seq a (undefined::Bool))))))) (id (undefined::(Int -> ([] Bool) -> [] Bool) -> [] (([] Bool) -> [] Bool)) (\b -> seq a ((\c -> \d -> seq c (seq a d)) (undefined::Bool))))
\a -> a
\a -> take (seq a (seq a ((\b -> seq b (seq a (undefined::([] (Int -> [] Int)) -> Int) (seq a (seq a (undefined::[] (Int -> [] Int)))))) ((\b -> seq b (undefined::([] Int) -> Int -> Int -> [] Int)) (seq a (seq a (seq a True))))))) ((\b -> seq a (seq b (\c -> seq a c) a)) (\b -> seq b ((!!) b) (seq a (seq a (seq b (undefined::Int))))))
\a -> (undefined::([] (([] ([] Bool)) -> [] ([] Bool))) -> ([] ([] ([] Bool))) -> [] Int) ([]::[] (([] ([] Bool)) -> [] ([] Bool))) (seq a (seq a (seq a (seq a (seq a (seq a (\b -> seq b (head ([]::[] ([] ([] ([] Bool))))))) ((!!) ([]::[] (([] Int) -> Int -> Bool)) (seq a (undefined::Int))))))))
(\a -> seq a (undefined::(([] Int) -> Int -> [] Int) -> ([] Int) -> [] Int) (\b -> \c -> b)) (\a -> seq a ((!!) (seq a ([]::[] ([] (Bool -> Bool))))) (seq a (id (seq a (undefined::(Bool -> Bool) -> Int)) (seq a (seq a (\b -> False))))))
\a -> seq a a
\a -> (!!) (id (undefined::[] ((Int -> ([] Int) -> Int) -> [] Int))) (seq a (id ((+) 2 (undefined::Int)))) (\b -> seq b (id (\c -> b)))
(undefined::(([] (Bool -> Bool)) -> [] (Bool -> Bool)) -> ([] Int) -> [] Int) (\a -> a)
(\a -> seq a ((!!) (undefined::[] (Bool -> ([] Int) -> [] Int)) (undefined::Int) (seq a (head (seq a (undefined::[] (Int -> Bool))) (seq a (seq a (seq a (undefined::Int)))))))) ((undefined::(Int -> Bool) -> Bool) ((undefined::(Int -> [] Int) -> Int -> Bool) (head ([]::[] (Int -> [] Int)))))
tail
(\a -> seq a (\b -> (undefined::([] ([] ([] Bool))) -> Bool -> [] Int) (seq a (seq b (seq a (undefined::[] ([] ([] Bool)))))) True)) (\a -> (\b -> seq b (seq b (\c -> a) (seq a (seq a (undefined::[] Int))))) ([]::[] ([] (Int -> Bool))))
(undefined::([] Int) -> [] Int)
\a -> (\b -> map ((undefined::([] Int) -> ([] ([] (Bool -> Bool))) -> Int) (head (seq b ([]::[] ([] Int))))) (undefined::[] ([] ([] (Bool -> Bool))))) (\b -> seq b ((\c -> seq a (seq c ([]::[] ([] Int)))) (undefined::Bool)))
\a -> a
take (id (\a -> seq a ((undefined::Int -> Int) (seq a 1))) (\a -> seq a (seq a (seq a ((\b -> seq b (undefined::[] ([] (([] Int) -> Bool -> Bool)))) (id (undefined::Int)))))))
(undefined::([] Int) -> [] Int)
case1 (\a -> \b -> seq a ((undefined::Int -> Int -> ([] Int) -> [] Int) 2 (head ([]::[] Int)))) ((\a -> seq a (seq a take) (seq a (seq a 1))) ((\a -> seq a (undefined::[] (Int -> Bool))) (undefined::Int))) ((\a -> seq a (undefined::(Int -> Bool) -> [] Bool)) (undefined::Int) (\a -> seq a (\b -> (undefined::Bool)) (seq a a)))
head (take (case1 (undefined::Int -> ([] Int) -> Int) (undefined::Int) (undefined::[] Int)) (undefined::[] (Bool -> ([] Int) -> [] Int))) ((undefined::(([] Int) -> ([] Int) -> Bool) -> Bool) ((undefined::Int -> ([] Int) -> ([] Int) -> Bool) ((+1) 2)))
(!!) (map (\a -> seq a (\b -> \c -> c) odd) ((undefined::Bool -> [] (([] Int) -> Int -> [] Int)) (undefined::Bool))) (head ((undefined::Int -> [] ((([] ([] Int)) -> Int) -> Int)) (undefined::Int)) (id (\a -> seq a (undefined::([] ([] Int)) -> Int)) (head (undefined::[] Bool))))
\a -> a
\a -> seq a (seq a (head ((undefined::(Bool -> Bool) -> [] ([] Int)) (undefined::Bool -> Bool))))
(undefined::([] Int) -> [] Int)
\a -> a
tail
(!!) (undefined::[] ((([] Int) -> Int -> Int -> Int) -> ([] Int) -> [] Int)) ((undefined::Bool -> Int) (id (undefined::Bool))) (\a -> \b -> head (seq b (map (\c -> \d -> d) ([]::[] Bool))))
(!!) (id ([]::[] (([] (Int -> [] Int)) -> ([] Int) -> [] Int))) (head (undefined::[] Int)) ((undefined::(Int -> ([] Int) -> Int) -> [] (Int -> [] Int)) ((\a -> (!!) (seq a (undefined::[] (([] Int) -> Int)))) (\a -> seq a (seq a (seq a (undefined::Int))))))
(\a -> seq a (seq a ((\b -> \c -> seq b ([]::[] Int)) ((\b -> \c -> \d -> seq b (undefined::[] Bool)) (head (seq a (undefined::[] Bool))))))) (undefined::([] Int) -> [] (([] Int) -> Int -> Int -> [] Int))
head (undefined::[] ((([] Int) -> ([] ([] Int)) -> [] Bool) -> ([] Int) -> [] Int)) (\a -> (\b -> case1 (\c -> seq a (undefined::([] ([] Int)) -> [] Bool)) (seq b (seq b (seq a (undefined::[] Bool))))) ((\b -> seq b (undefined::Int -> Int -> Int)) ((+1) (seq a (undefined::Int)))))
\a -> (undefined::(([] Int) -> ([] Int) -> [] ([] ([] (Int -> Bool)))) -> [] Int) (undefined::([] Int) -> ([] Int) -> [] ([] ([] (Int -> Bool))))
\a -> (!!) (seq a ((:) (\b -> a) ([]::[] (([] (Int -> [] Int)) -> [] Int)))) (seq a ((\b -> seq b (seq b 2)) (seq a (\b -> seq a ([]::[] Bool))))) (seq a (seq a (\b -> ([]::[] (Int -> [] Int))) (undefined::Bool -> [] (Bool -> Bool))))
tail
(!!) ([]::[] (([] ([] ([] Bool))) -> ([] Int) -> [] Int)) ((\a -> seq a (seq a (undefined::Int))) False) ((\a -> filter (seq a (\b -> seq b (undefined::Bool))) (seq a (seq a ([]::[] ([] ([] Bool)))))) (case1 (\a -> \b -> 2) (undefined::Int) ([]::[] ([] Bool))))
\a -> a
(\a -> seq a (undefined::([] (Bool -> Bool)) -> ([] Int) -> [] Int) ((undefined::([] Int) -> [] (Bool -> Bool)) (head ([]::[] ([] Int))))) (\a -> ([]::[] (([] (([] ([] Int)) -> [] Int)) -> [] (([] ([] Int)) -> [] Int))))
\a -> seq a (case1 (\b -> \c -> a) ((enumFromTo::Int -> Int -> [Int]) (id (seq a 0)) (seq a (seq a (seq a (undefined::Int))))) ((\b -> seq b (head (seq a ([]::[] ([] Int))))) (seq a (\b -> ([]::[] Bool)) (undefined::Bool))))
\a -> (\b -> (:) ((\c -> c a) (seq a (id (undefined::([] Int) -> Int)))) (seq b a)) (undefined::([] Int) -> ([] (([] Int) -> ([] Int) -> [] Int)) -> Bool)
map (\a -> seq a (id (\b -> (undefined::Bool -> Int) (((==)::Int -> Int -> Bool) a a)) (seq a (\b -> seq a (seq b (\c -> seq a (seq b (seq b ([]::[] (Int -> Int))))) (\c -> (undefined::Bool -> Int -> Int -> Bool) (seq c (seq a (undefined::Bool)))))))))
\a -> id (seq a (seq a (seq a (\b -> \c -> a)))) (undefined::Int -> Int -> Int) (undefined::Int)
(\a -> seq a (\b -> b)) (\a -> ([]::[] ([] ([] Int))))
tail
(\a -> id (\b -> \c -> id) (seq a (undefined::Int)) (seq a (\b -> False) (seq a (seq a (\b -> seq a even))))) (\a -> filter (seq a (undefined::([] Bool) -> Bool)) a)
(\a -> seq a ((!!) (seq a (undefined::[] (Bool -> ([] Int) -> [] Int))) (seq a (undefined::Int)))) (head (undefined::[] (Bool -> Bool -> Int -> [] Bool)) False) (id ((\a -> seq a (seq a (\b -> seq b (undefined::Bool)) (seq a (seq a (undefined::Int))))) (\a -> (undefined::Int -> Int -> ([] Int) -> [] Int) (seq a (seq a (seq a (undefined::Int)))))))
\a -> take (case1 (\b -> seq b (head ([]::[] (([] Bool) -> Int)))) (undefined::Int) (seq a (seq a ([]::[] Bool)))) a
\a -> seq a (\b -> a) (\b -> seq a (\c -> b))
\a -> a
id (undefined::(Int -> (Int -> Int -> [] Int) -> Int -> Int -> [] Int) -> ([] Int) -> [] Int) (id (undefined::Int -> (Int -> Int -> [] Int) -> Int -> Int -> [] Int))
(\a -> seq a (seq a (\b -> map (\c -> seq a c))) (seq a (\b -> (undefined::([] Int) -> Int -> [] Int)) (seq a (seq a (seq a (undefined::[] Bool)))))) (\a -> seq a (seq a (\b -> \c -> seq a (\d -> (undefined::Bool -> Bool)) (\d -> d))) (\b -> case1 (\c -> (undefined::([] ([] Int)) -> Int)) (seq a 2) (seq b (undefined::[] ([] Int)))))
(\a -> (undefined::Int -> Int -> ([] Int) -> [] Int) a) 2 ((undefined::([] (([] Bool) -> [] Bool)) -> Bool -> Int) (undefined::[] (([] Bool) -> [] Bool)) (undefined::Bool))
id ((\a -> case1 (\b -> seq b (undefined::([] Bool) -> ([] Int) -> [] Int)) ((\b -> \c -> b) (seq a ([]::[] Int))) ((\b -> seq b (undefined::[] Bool)) (seq a 1))) (\a -> \b -> (undefined::[] ([] Int))))
(\a -> \b -> seq b (seq a (undefined::(([] (([] Int) -> [] ([] Int))) -> Int -> Int) -> [] Int) (seq a (id (\c -> \d -> 2))))) (\a -> id True)
head ([]::[] (Int -> (Int -> Bool) -> ([] Int) -> [] Int)) (head ([]::[] (Bool -> Int)) True) ((undefined::(Int -> ([] Int) -> ([] Int) -> Bool) -> Int -> Bool) ((undefined::Int -> Int -> ([] Int) -> ([] Int) -> Bool) 0))
id (undefined::(Int -> Bool -> Bool) -> ([] Int) -> [] Int) ((!!) (map (\a -> \b -> seq a (seq b a)) ((\a -> seq a (seq a ([]::[] Bool))) (head ([]::[] Bool)))))
\a -> a
\a -> (\b -> seq b ((\c -> \d -> seq a c) (seq b a) ((undefined::(Bool -> Bool) -> [] ([] Int)) (\c -> seq a (id c))))) ((!!) (seq a (map (undefined::([] ([] Bool)) -> Int) (undefined::[] ([] ([] Bool))))) (head (seq a (undefined::[] ((([] Int) -> Bool) -> Int))) (\b -> id (undefined::Bool))))
\a -> map (seq a (seq a ((\b -> \c -> (\d -> seq d (seq b (undefined::Int))) a) False))) (undefined::[] Bool)
head (undefined::[] ((([] ([] Int)) -> [] ([] Int)) -> ([] Int) -> [] Int)) (\a -> seq a (\b -> map (undefined::(Bool -> Bool) -> [] Int) (seq b (undefined::[] (Bool -> Bool)))) (seq a (seq a (seq a (\b -> \c -> seq c ([]::[] ([] Bool)))))))
(\a -> (\b -> seq b (seq a (seq b take))) id 0) (:)
\a -> map (seq a (undefined::(([] Bool) -> [] Bool) -> Int)) (seq a (seq a (seq a (\b -> (undefined::Bool -> [] (([] Bool) -> [] Bool)) (seq b (seq a (undefined::Bool)))) (id (\b -> ([]::[] ([] (Int -> Int)))) (seq a (id True))))))
tail
tail
(\a -> \b -> seq a ([]::[] Int)) ((undefined::(([] ([] ([] Int))) -> [] ([] ([] Bool))) -> Int) (\a -> (:) (seq a (seq a (undefined::[] ([] Bool)))) ([]::[] ([] ([] Bool)))))
head (undefined::[] ((([] (([] (Bool -> Bool)) -> [] (Bool -> Bool))) -> Int -> Bool) -> ([] Int) -> [] Int)) ((undefined::Int -> ([] (([] (Bool -> Bool)) -> [] (Bool -> Bool))) -> Int -> Bool) (head ([]::[] (Int -> Int)) (undefined::Int)))
\a -> seq a (\b -> (undefined::(([] ([] Int)) -> [] ([] (Int -> Bool))) -> [] Int) (undefined::([] ([] Int)) -> [] ([] (Int -> Bool)))) ((\b -> \c -> map (\d -> seq b (undefined::[] (Bool -> Bool))) (seq a (seq c ([]::[] (([] Int) -> Bool))))) (seq a (seq a (\b -> True) (not (seq a (undefined::Bool))))))
\a -> map ((\b -> \c -> seq b ((\d -> seq d 0) (seq b (\d -> seq d (undefined::Bool))))) ([]::[] (Int -> Bool))) (seq a (seq a (seq a (\b -> seq a ([]::[] (([] Int) -> ([] Int) -> [] Bool)))) (undefined::Bool)))
(\a -> seq a (\b -> (undefined::([] Int) -> [] Int)) (seq a (\b -> seq a head (tail (seq b ([]::[] ([] (Int -> Bool)))))))) (\a -> seq a (seq a (seq a ((!!) ((\b -> seq a (seq b (undefined::[] ([] ([] (Int -> Bool)))))) (seq a (seq a 2))) (head (undefined::[] (Int -> Int)) (seq a (seq a (undefined::Int))))))))
\a -> map (\b -> (undefined::((([] Bool) -> Bool) -> ([] Bool) -> Bool) -> Int) (\c -> \d -> (undefined::Int -> Bool) (id (undefined::Int)))) (seq a ((\b -> (undefined::Int -> [] Bool) (seq b (seq a (seq a (undefined::Int))))) (\b -> (!!) ([]::[] (([] Int) -> Bool)) b)))
case1 (\a -> (undefined::([] Int) -> ([] Int) -> [] Int)) (head (map (\a -> \b -> b) (undefined::[] (([] Bool) -> Bool)))) ((\a -> tail a) (undefined::[] Int))
\a -> tail (undefined::[] Int)
(\a -> seq a ((\b -> seq b (seq a (case1 (undefined::Int -> ([] Int) -> [] Int) (undefined::[] Int)))) 0)) (\a -> \b -> (undefined::Int -> [] (Int -> Int)) (case1 (seq a (undefined::Int -> ([] Int) -> Int)) 0 (seq a (undefined::[] Int))))
\a -> a
(\a -> (\b -> (undefined::(Int -> [] Int) -> ([] Int) -> [] Int) (seq a (\c -> seq b (seq b (undefined::[] Int))))) (seq a (\b -> seq b (\c -> True)) (seq a (tail (undefined::[] ([] (Bool -> Bool))))))) ((-) ((undefined::([] (Int -> Int)) -> Int) ([]::[] (Int -> Int))) ((undefined::([] Int) -> Int) (id ([]::[] Int))))
\a -> a
\a -> map (id (\b -> 0)) (undefined::[] ((Int -> ([] (([] ([] Int)) -> [] Int)) -> [] (([] ([] Int)) -> [] Int)) -> Int))
\a -> seq a a
\a -> seq a (head (tail (undefined::[] ((Int -> Int -> Int) -> Int -> [] Int))) (seq a (\b -> \c -> seq a c))) (seq a ((!!) (seq a a)) (seq a ((\b -> seq b (seq a b)) (seq a (seq a (undefined::Int))))))
(undefined::([] Int) -> [] Int)
(\a -> (undefined::([] Bool) -> ([] Int) -> [] Int) (case1 (\b -> seq a (undefined::([] Int) -> [] Bool)) (seq a ([]::[] Bool)) (seq a (undefined::[] Int)))) (\a -> (:) (case1 (\b -> (undefined::([] Bool) -> Int)) 1 (seq a (undefined::[] Bool))) (seq a (map (\b -> (undefined::Int)) ([]::[] Bool))))
(\a -> \b -> seq a ((\c -> seq b (head ([]::[] (Int -> [] Int))) (seq a (seq c (seq b c)))) (id (head ([]::[] ((Int -> Bool -> Bool) -> Int)) (head (undefined::[] (Int -> Bool -> Bool))))))) ((!!) (undefined::[] ([] ([] (Int -> Int)))) 1)
tail
id (\a -> ([]::[] Int))
(undefined::(([] (Bool -> Bool)) -> Bool -> Bool) -> ([] Int) -> [] Int) (\a -> seq a (seq a (seq a (undefined::Bool -> Int -> Bool -> Bool))) (seq a (seq a (seq a True))) ((\b -> seq b (undefined::Int)) (\b -> seq b (undefined::[] Bool))))
\a -> (++) (undefined::[] Int) (id a)
id (\a -> seq a (\b -> seq b (undefined::Bool -> ([] Int) -> [] Int) a)) True (\a -> ([]::[] ([] Bool)))
(undefined::([] Int) -> [] Int)
(undefined::(([] (Int -> ([] Int) -> Int)) -> [] (([] Int) -> Int -> ([] Int) -> Int)) -> ([] Int) -> [] Int) (\a -> seq a ((!!) (seq a (seq a ([]::[] ([] (([] Int) -> Int -> ([] Int) -> Int))))) ((undefined::([] (([] Int) -> Bool)) -> Int) (seq a (tail (undefined::[] (([] Int) -> Bool)))))))
(\a -> (undefined::Int -> Int -> ([] Int) -> [] Int) (seq a (undefined::Int))) (\a -> head (seq a (undefined::[] (Bool -> [] ([] Bool)))) (seq a (not (undefined::Bool)))) ((\a -> seq a (seq a ((\b -> seq a (seq b (undefined::Int))) (head (undefined::[] Bool))))) (\a -> (\b -> a (seq b (seq a 1))) (\b -> head ([]::[] ([] Int)))))
tail
\a -> id (seq a (seq a (seq a (seq a (\b -> (undefined::(Int -> Int -> Int) -> [] Int)))))) (case1 (\b -> \c -> (undefined::Bool)) (seq a (undefined::Bool)) (undefined::[] ([] Int))) (seq a (\b -> \c -> case1 (undefined::Bool -> ([] Bool) -> Int -> Int) (+1) ([]::[] Bool)) (seq a True))
(\a -> seq a ((undefined::Bool -> Bool -> ([] Int) -> [] Int) (seq a (seq a (seq a True)))) (odd (seq a (seq a (seq a (undefined::Int)))))) ((\a -> map (seq a (seq a (\b -> (undefined::[] Bool))))) ((\a -> seq a (seq a (undefined::Bool))) (head ([]::[] ([] (Int -> Bool))))))
(undefined::([] Bool) -> ([] Int) -> [] Int) (tail ((undefined::([] Int) -> Int -> [] Bool) (tail (undefined::[] Int)) ((\a -> seq a a) ((+1) 1))))
(undefined::Int -> ([] (Int -> Int)) -> ([] Int) -> [] Int) (id (\a -> seq a (undefined::Int)) (undefined::([] Int) -> [] ([] Int))) ((!!) ([]::[] ([] (Int -> Int))) ((\a -> seq a (seq a (undefined::Int))) (undefined::[] Int)))
(undefined::Bool -> Int -> ([] Int) -> [] Int) (undefined::Bool) 2
\a -> a
tail
filter (\a -> False)
\a -> (undefined::(([] Int) -> ([] Bool) -> [] Bool) -> [] Int) ((\b -> (!!) (undefined::[] (([] Int) -> ([] Bool) -> [] Bool)) (seq a (seq b (undefined::Int)))) (head (undefined::[] ([] ([] ([] Bool))))))
(\a -> (:) (seq a (\b -> \c -> c) (id (seq a tail)) 1)) (\a -> (undefined::[] (([] Int) -> Bool)))
tail
(\a -> seq a (\b -> (undefined::(([] ([] ([] Bool))) -> [] ([] Bool)) -> [] Int) (seq a (undefined::([] ([] ([] Bool))) -> [] ([] Bool))))) ((!!) (undefined::[] (Int -> Int -> [] Int)) ((\a -> seq a (undefined::Int)) (undefined::[] ([] (Int -> Int)))))
(\a -> id (\b -> \c -> seq b (\d -> c) (undefined::([] Int) -> Bool)) (seq a ((\b -> seq b (undefined::[] (Int -> [] Int))) (seq a (id (undefined::[] Int)))))) (\a -> (\b -> map (\c -> seq c (undefined::([] Int) -> Int -> Int -> Bool)) (seq a (seq b ([]::[] Int)))) ((!!) (undefined::[] ((Int -> [] Int) -> Int)) 2 (undefined::Int -> [] Int)))
\a -> (\b -> id (seq b (seq a (seq a (id (undefined::(Bool -> Bool -> Bool) -> [] Int)))))) (undefined::([] ([] Bool)) -> [] Bool) ((\b -> (undefined::Bool -> Bool -> Bool -> Bool) (seq a (seq a (seq b (undefined::Bool))))) (\b -> (undefined::[] Bool)))
case1 ((\a -> seq a (\b -> \c -> (undefined::([] Int) -> [] Int))) (head (undefined::[] Int)) (case1 (\a -> head) (undefined::Int) (undefined::[] Int))) ((\a -> id (seq a (undefined::Bool -> [] Int)) True) (head (map (\a -> (undefined::Int -> Int -> Int)) ([]::[] Bool))))
id
\a -> a
\a -> ([]::[] Int)
case1 (\a -> \b -> head (seq a ([]::[] (Int -> ([] Int) -> [] Int)))) ((undefined::([] Int) -> Int -> ([] Int) -> [] Int) (tail (undefined::[] Int))) ((\a -> seq a ([]::[] Bool)) (undefined::Int)) ((-) ((\a -> seq a (undefined::Int)) (\a -> seq a (seq a (undefined::[] Int)))) ((\a -> (+1) (seq a 1)) (filter even (undefined::[] Int))))
(\a -> seq a (seq a (\b -> (++) (seq b (undefined::(([] Int) -> Int) -> [] Int) (undefined::([] Int) -> Int)) (undefined::[] Int)))) (\a -> seq a (seq a (seq a (\b -> (undefined::Int -> [] ([] (Int -> Int))) (seq a (seq a 1)))) (case1 (\b -> (undefined::([] ([] Bool)) -> Bool)) (seq a True) (seq a ([]::[] ([] Bool))))))
id
(undefined::(([] ([] (([] Int) -> [] (Int -> Bool)))) -> [] (([] Int) -> [] (Int -> Bool))) -> ([] Int) -> [] Int) (\a -> ([]::[] (([] Int) -> [] (Int -> Bool))))
(\a -> head (seq a (seq a (undefined::[] ((([] Int) -> Bool) -> ([] Int) -> [] Int))))) ((!!) (undefined::[] ([] (Int -> [] Int))) (undefined::Int)) (\a -> seq a (undefined::(Int -> ([] Int) -> Bool) -> Int -> Bool) (\b -> \c -> seq c (seq c True)) (seq a (case1 (seq a (undefined::Int -> ([] Int) -> Int)) (seq a 0) ([]::[] Int))))
\a -> a
\a -> (\b -> seq b (undefined::(([] Int) -> Int -> [] Int) -> [] Int) (\c -> (undefined::Int -> [] Int))) (seq a (tail (seq a (seq a (id (seq a (seq a (undefined::[] (([] (([] ([] ([] Int))) -> [] ([] ([] Bool)))) -> ([] Int) -> Bool)))))))))
(undefined::([] Int) -> [] Int)
\a -> a
\a -> seq a (seq a (head (seq a (\b -> seq b (undefined::Bool -> [] (Bool -> [] Int)) (seq b (seq b False))) (seq a (\b -> seq b (undefined::[] ([] (Bool -> Bool)))) (seq a (seq a (undefined::Bool))))))) False
(undefined::([] Int) -> [] Int)
(undefined::(([] Int) -> [] (Int -> Bool)) -> ([] Int) -> [] Int) (undefined::([] Int) -> [] (Int -> Bool))
(\a -> filter (head (seq a (\b -> ([]::[] (Bool -> Int -> Bool))) (seq a (seq a (undefined::Int)))) (undefined::Bool))) (\a -> 0)
\a -> a
(undefined::([] Int) -> [] Int)
(\a -> seq a ((\b -> \c -> id (seq b (undefined::Bool -> [] Int)) (seq b (seq a (seq b False)))) (seq a (\b -> seq a (seq b (\c -> ([]::[] (Bool -> Bool))) 2))))) ((\a -> seq a (seq a ([]::[] (([] (([] ([] ([] Bool))) -> [] ([] Bool))) -> Bool)))) (case1 (\a -> \b -> 2) 2 ([]::[] Bool)))
id (id (\a -> a))
\a -> a
\a -> head (seq a (seq a (seq a (id (undefined::[] ((([] (Int -> [] Bool)) -> [] (([] Bool) -> [] (Bool -> Bool))) -> [] Int)))))) (\b -> (\c -> seq c (seq a ((undefined::Bool -> [] (([] Bool) -> [] (Bool -> Bool))) False))) (seq b (\c -> (undefined::Int -> Int -> [] Int) c)))
\a -> seq a (tail ((undefined::(([] (Bool -> Bool)) -> [] (Bool -> Bool)) -> [] Int) (\b -> ([]::[] (Bool -> Bool)))))
\a -> (undefined::[] Int)
(undefined::([] Int) -> (([] Int) -> Int -> Int) -> ([] Int) -> [] Int) ((:) ((+1) (undefined::Int)) (id ([]::[] Int))) (\a -> \b -> seq a (seq a 2))
\a -> seq a (undefined::[] Int)
(undefined::([] Int) -> [] Int)
\a -> a
(\a -> case1 (\b -> (\c -> seq c tail) b) (map (head ([]::[] (([] Bool) -> Int))) (seq a (undefined::[] ([] Bool))))) (\a -> \b -> b)
(undefined::([] Int) -> [] Int)
(undefined::((([] Int) -> Int -> Int) -> ([] Bool) -> Int) -> ([] Int) -> [] Int) ((!!) (head ([]::[] ([] ((([] Int) -> Int -> Int) -> ([] Bool) -> Int)))) ((\a -> seq a (undefined::Int)) (id (undefined::Int))))
\a -> a
(\a -> \b -> seq a ([]::[] Int)) ((\a -> \b -> seq a (seq a ((undefined::(([] Int) -> [] ([] ([] Int))) -> Bool) (map (undefined::Int -> [] ([] Int)))))) (map (undefined::([] (([] Int) -> Bool)) -> Int -> Int) (tail (undefined::[] ([] (([] Int) -> Bool))))))
\a -> a
case1 ((\a -> seq a (seq a (undefined::Bool -> Int -> ([] Int) -> [] Int)) (head (seq a (undefined::[] Bool)))) ((\a -> seq a ([]::[] (([] Int) -> [] Int))) (not (undefined::Bool)))) ((\a -> seq a (head ([]::[] (Bool -> [] Int)) (seq a (seq a False)))) (undefined::[] Int))
\a -> id a
\a -> (\b -> \c -> take b a) (head a) (seq a (\b -> map (\c -> \d -> seq d (even 2)) ((undefined::Bool -> [] (([] ([] Int)) -> Bool -> Bool)) (seq a (seq a True)))))
(\a -> seq a (seq a (id (\b -> seq a (map (undefined::Int -> Int))))) head) (map (\a -> id (\b -> (undefined::[] (Bool -> Bool))) (\b -> (undefined::Int))) ([]::[] Int))
\a -> seq a a
(undefined::([] ([] ([] (Int -> Bool)))) -> ([] Int) -> [] Int) ((undefined::([] ([] Int)) -> [] ([] ([] (Int -> Bool)))) ((\a -> seq a (seq a (seq a (undefined::[] ([] Int))))) (\a -> a)))
\a -> case1 (\b -> id (\c -> (undefined::([] (Bool -> Bool)) -> [] Int) (id (undefined::[] (Bool -> Bool))))) a (seq a (seq a (undefined::(Bool -> Bool) -> [] ([] (([] Int) -> Bool))) ((\b -> seq b not) (seq a ([]::[] Bool)))))
(\a -> (undefined::Bool -> ([] Int) -> [] Int) (seq a (seq a (\b -> b (undefined::Bool)) (\b -> b)))) (\a -> seq a (\b -> seq b (seq b (seq a (\c -> (undefined::(Bool -> Bool) -> [] Bool))) (seq b b) ((\c -> seq c (seq c (undefined::Bool -> Bool))) ((+1) (seq b 1))))))
\a -> (undefined::Int -> [] Int) (head (seq a a))
head ([]::[] (Bool -> ([] Int) -> [] Int)) ((\a -> seq a (\b -> odd (undefined::Int)) (\b -> seq b (head (undefined::[] ([] (Bool -> Bool)))))) ((\a -> seq a (seq a (seq a (undefined::[] (Int -> Int))))) (even 2)))
\a -> seq a (filter (\b -> head (seq b (undefined::[] (([] ([] Int)) -> Bool -> Bool))) (seq a ([]::[] ([] Int))) (seq a (seq b (\c -> True) (seq a (\c -> seq b True))))) (seq a (\b -> seq b (\c -> seq c ([]::[] Int)) (seq b (seq a True))) (undefined::Bool -> ([] Bool) -> Int)))
\a -> seq a ((\b -> map (\c -> (\d -> seq d (seq b d)) (seq c (seq a 0))) ((\c -> seq c (seq b (undefined::[] Bool))) (seq b (seq b False)))) (seq a (id (\b -> seq b (undefined::Bool -> Bool -> Bool)) (\b -> seq a b) (undefined::Bool))))
(undefined::(([] (Int -> Bool)) -> [] (Int -> Bool)) -> ([] Int) -> [] Int) (\a -> seq a a)
(:) (undefined::Int)
\a -> (\b -> (enumFromTo::Int -> Int -> [Int]) (seq a (seq b (seq a (undefined::([] Bool) -> Int))) (id (seq a ([]::[] Bool)))) (head ((!!) (seq a (undefined::[] ([] Int))) (seq b (undefined::Int))))) (seq a (\b -> head (seq a (undefined::[] (([] ([] (Int -> Int))) -> Bool))) (seq a (undefined::[] ([] (Int -> Int))))) (case1 (\b -> seq a (undefined::([] Int) -> Bool)) True a))
(\a -> id (seq a (\b -> seq a (undefined::Bool -> ([] Int) -> [] Int)) (seq a a)) ((undefined::(([] (([] Int) -> [] ([] Bool))) -> Int) -> Bool) (seq a (\b -> seq b (seq a 1))))) (undefined::Bool)
(\a -> \b -> seq a (undefined::([] Bool) -> ([] Int) -> [] Int) (undefined::[] Bool)) ((\a -> (+1) (seq a 1)) (head (undefined::[] (Int -> Bool)))) (undefined::([] ([] Int)) -> [] Int)
(\a -> seq a (\b -> seq b ((undefined::Int -> ([] Int) -> [] Int) (seq a 1))) (\b -> seq b (seq b (undefined::([] Int) -> [] (Int -> Int))) (a (seq b 0)))) (\a -> seq a ([]::[] Int))
case1 (\a -> seq a ((undefined::Bool -> ([] Bool) -> ([] Int) -> [] Int) a)) tail ((\a -> seq a (undefined::Int -> [] Bool)) (head ([]::[] (Int -> Int))) ((!!) ([]::[] Int) (id 2)))
(\a -> seq a (\b -> seq a (seq b (\c -> seq c (seq c (undefined::Bool -> [] Int)) (seq a c))) (seq a (seq b (\c -> seq b True) (seq a (seq b b)))))) (head (tail (undefined::[] (Int -> ([] Int) -> ([] ([] Int)) -> [] Bool))) ((\a -> a) (id (undefined::Int))))
head ([]::[] (([] Int) -> [] Int))
head (undefined::[] (([] ([] (Int -> Bool))) -> Bool -> ([] Int) -> [] Int)) ([]::[] ([] (Int -> Bool))) ((undefined::(([] Int) -> ([] Int) -> ([] Int) -> [] (Int -> [] Int)) -> Bool) (id (\a -> (undefined::([] Int) -> ([] Int) -> [] (Int -> [] Int)))))
(:) ((\a -> (\b -> \c -> seq c b) (seq a (seq a (seq a 1))) (seq a (undefined::([] Bool) -> [] (Bool -> Bool)))) (head ((undefined::Int -> [] (Bool -> [] ([] Bool))) (id (undefined::Int))) (head (undefined::[] ((Bool -> [] (Int -> Int)) -> Bool)) (\a -> id (undefined::[] (Int -> Int))))))
(\a -> (undefined::(([] ([] Int)) -> [] Int) -> ([] Int) -> [] Int) (\b -> filter (\c -> head (undefined::[] Bool)) (a (undefined::[] (([] Int) -> Int -> [] Int)) 0 (undefined::[] Int) 2))) (\a -> seq a (seq a ((\b -> \c -> seq b (seq c (\d -> seq b (id (undefined::Int -> [] Int))))) (id (undefined::(([] Int) -> Int) -> [] (Int -> Int)) (undefined::([] Int) -> Int)))))
(\a -> head (seq a (seq a (seq a (seq a ([]::[] ((Int -> Int) -> ([] Int) -> [] Int)))))) (\b -> b)) ((\a -> \b -> not ((undefined::Int -> Bool) a)) ((undefined::Bool -> Int) (undefined::Bool)))
\a -> id (\b -> a) (seq a (seq a ((\b -> seq a (\c -> \d -> \e -> id) (seq b (seq b (seq a False)))) ((\b -> seq a (seq b tail)) 0))))
\a -> seq a (map ((!!) (seq a (undefined::[] ((([] ([] Int)) -> [] ([] (Int -> Int))) -> Int))) 0) ((\b -> seq b (seq a (seq a (undefined::[] (([] ([] Int)) -> [] ([] (Int -> Int))))))) (seq a (undefined::[] (Int -> Int)))))
id
tail
\a -> take (seq a (seq a (seq a (undefined::(([] Int) -> Int -> Bool) -> Int) (undefined::([] Int) -> Int -> Bool)))) (undefined::[] Int)
case1 (\a -> \b -> \c -> seq c (\d -> d)) (\a -> seq a (undefined::Bool -> ([] Int) -> [] Int) a) ((\a -> seq a ([]::[] Bool)) (head ([]::[] ([] ([] Bool))))) False
(undefined::([] Int) -> [] Int)
\a -> (\b -> seq b (undefined::Int -> [] Int) (seq a (\c -> seq b 2) (seq a (seq a (undefined::[] ([] (Int -> Int))))))) (head (map (id (undefined::Bool -> ([] ([] ([] ([] Bool)))) -> [] ([] ([] Bool)))) (seq a (\b -> seq a (undefined::[] Bool)) (undefined::Bool))))
(\a -> \b -> seq a ((undefined::(([] ([] ([] Bool))) -> Int -> Int -> [] Int) -> [] Int) (\c -> \d -> \e -> id b))) ((\a -> seq a (tail ([]::[] (([] (([] ([] Int)) -> [] ([] Bool))) -> [] Bool)))) ((undefined::Bool -> Int) (not (undefined::Bool))))
tail
\a -> seq a (seq a (\b -> (undefined::Bool -> [] Int)) ((\b -> seq b (seq a (seq a ([]::[] ([] (Bool -> Bool)))))) (\b -> head (seq a ([]::[] Bool)))) ((undefined::Bool -> (([] Int) -> Int -> Bool) -> Bool) (not (seq a (undefined::Bool))) (seq a (\b -> seq b (id (undefined::Int -> Bool))))))
(\a -> seq a (undefined::Bool -> ([] Int) -> [] Int)) ((\a -> seq a (seq a (undefined::Bool))) ([]::[] ([] Int))) ((\a -> (undefined::([] ([] Int)) -> Bool) (seq a (tail (undefined::[] ([] Int))))) (undefined::Int -> ([] Int) -> Int -> [] Int))
\a -> (\b -> seq b (\c -> seq b (seq c (head (seq b (seq a ([]::[] ([] Int)))))))) (seq a (seq a (seq a (undefined::(([] Int) -> Bool) -> Int))) (\b -> even (seq a (undefined::Int)))) (undefined::([] Int) -> ([] Int) -> [] Bool)
case1 ((\a -> seq a (\b -> \c -> (undefined::([] Int) -> [] Int))) ((\a -> seq a (undefined::Int)) id)) (\a -> ([]::[] Int)) (map (\a -> False) ((enumFromTo'::Int -> Int -> [Int]) (undefined::Int) 1))
\a -> a
\a -> (undefined::[] Int)
id (\a -> seq a a)
(\a -> seq a (seq a (\b -> seq b (\c -> seq a (\d -> c) (undefined::([] Bool) -> Int))) (seq a (seq a (not (undefined::Bool)))))) (map (\a -> seq a ((undefined::(([] Int) -> Int -> Bool) -> Int) ((\b -> \c -> \d -> b) (undefined::Bool)))))
\a -> (undefined::[] Int)
\a -> seq a a
(undefined::Int -> Int -> ([] Int) -> [] Int) (case1 (\a -> seq a (undefined::([] ([] Bool)) -> Int)) (undefined::Int) ([]::[] ([] Bool))) ((+1) (undefined::Int))
map (\a -> seq a (\b -> a) (seq a (\b -> seq a (head (seq b (undefined::[] ((([] Bool) -> Bool) -> Int -> Bool)))) (\c -> even (seq a (\d -> a) (seq c a))))))
\a -> seq a ((:) (seq a 2) ((:) (seq a (\b -> 2) ([]::[] Bool)) (seq a (seq a a))))
\a -> seq a ((undefined::((([] ([] Bool)) -> [] Int) -> Bool) -> [] Int) (id (\b -> \c -> (\d -> d (undefined::Bool)) ((||) False)) (\b -> seq a ((undefined::Bool -> Int) (seq b (seq a (undefined::Bool)))))))
filter ((\a -> ((==)::Int -> Int -> Bool) (case1 (seq a (undefined::Bool -> ([] Bool) -> Int -> Int)) (+1) (undefined::[] Bool) (seq a ((\b -> seq b b) (id (undefined::Int)))))) (\a -> id (\b -> \c -> head (seq a (seq b (seq a ([]::[] (Bool -> Bool -> Bool -> Bool))))) (((==)::Int -> Int -> Bool) b b))))
tail
take ((undefined::Bool -> Int) ((\a -> seq a (\b -> True)) (((==)::[Int] -> [Int] -> Bool) (undefined::[] Int) (undefined::[] Int)) (id (\a -> seq a (seq a (undefined::([] ([] Bool)) -> [] (Int -> Int))) (seq a (seq a (undefined::[] ([] Bool))))))))
case1 (\a -> seq a (\b -> seq b (\c -> \d -> d) ((\c -> seq b c) (seq b (undefined::Bool))))) ((\a -> seq a (\b -> tail) a) ((\a -> seq a 2) (not (undefined::Bool)))) (map (undefined::([] Int) -> [] ([] (Bool -> Bool))) (head ([]::[] ([] ([] Int)))))
(\a -> \b -> id (\c -> tail) a) ((undefined::Int -> Bool) ((+1) (undefined::Int))) (id (\a -> seq a (seq a (undefined::Bool -> (Int -> ([] Int) -> Bool) -> Bool) (seq a (seq a (seq a False))) (seq a (seq a (seq a (undefined::Int -> Int -> ([] Int) -> Bool) (id (undefined::Int))))))))
(!!) (undefined::[] ((([] ([] Bool)) -> [] ([] Bool)) -> ([] Int) -> [] Int)) ((\a -> seq a (undefined::Int)) ([]::[] (([] ([] Bool)) -> [] Bool))) (\a -> seq a (filter (\b -> seq a ((undefined::Int -> Bool) (seq b (seq a 2)))) (head (seq a ([]::[] (Bool -> [] ([] Bool)))) (odd (seq a (undefined::Int))))))
\a -> map (\b -> (\c -> case1 (\d -> (undefined::([] Bool) -> Int)) (seq b 2) (seq c (undefined::[] Bool))) (seq b (undefined::([] Int) -> [] ([] Bool)))) (seq a (seq a (\b -> seq a (seq a (seq a (undefined::[] ([] (([] Int) -> ([] Int) -> [] Bool))))))) ([]::[] Bool))
head ((:) ((undefined::Bool -> Int -> ([] Int) -> [] Int) False ((+1) 0)) ([]::[] (([] Int) -> [] Int)))
tail
\a -> seq a (\b -> a) (undefined::([] Int) -> [] (Int -> ([] (Int -> Int)) -> [] (Int -> Int)))
(undefined::(([] ([] ([] Bool))) -> [] ([] ([] Bool))) -> ([] Int) -> [] Int) (\a -> a)
\a -> ([]::[] Int)
id
(\a -> seq a (\b -> \c -> seq a c)) (map (\a -> id) ([]::[] ([] Int))) ((undefined::(([] (Int -> Bool)) -> Int -> Bool) -> Int) (\a -> seq a (\b -> odd) (seq a (seq a (seq a 2)))))
\a -> (undefined::(Int -> Int -> [] Int) -> [] Int) (\b -> (undefined::Int -> [] Int))
\a -> a
\a -> ([]::[] Int)
\a -> (undefined::[] Int)
\a -> (undefined::(([] Int) -> ([] Int) -> [] Int) -> [] Int) (seq a (seq a (\b -> (undefined::([] Int) -> ([] Int) -> [] Int))) ((\b -> seq b (seq a (seq a True))) (seq a (\b -> b))))
(:) ((\a -> head (seq a ([]::[] (([] (([] ([] (([] Int) -> Bool))) -> Int)) -> Int))) (seq a ((\b -> seq b ([]::[] (([] ([] (([] Int) -> Bool))) -> Int))) (undefined::Int)))) (undefined::Int))
(undefined::Int -> (([] Int) -> Int -> [] Int) -> ([] Int) -> [] Int) ((\a -> seq a (seq a (seq a (undefined::Int)))) ([]::[] (Int -> [] Int))) (head ([]::[] (([] Int) -> Int -> [] Int)))
(\a -> seq a (take (undefined::Int))) (map (\a -> seq a (seq a (\b -> seq b ([]::[] ([] Bool))) (seq a (seq a ([]::[] (Int -> Bool)))))) (head (undefined::[] (Int -> [] (([] Int) -> Bool))) 1))
id (\a -> (undefined::(([] Int) -> ([] (([] ([] Int)) -> [] ([] (Int -> Bool)))) -> Bool -> Bool) -> [] Int) (\b -> seq b (undefined::([] (([] ([] Int)) -> [] ([] (Int -> Bool)))) -> Bool -> Bool)))
case1 ((undefined::Bool -> Bool -> ([] Bool) -> ([] Int) -> [] Int) ((\a -> seq a True) (take (undefined::Int)))) (case1 (\a -> \b -> \c -> c) id (undefined::[] Int)) (head ((undefined::(Int -> Bool) -> [] ([] Bool)) (\a -> seq a (not (undefined::Bool)))))
\a -> (undefined::[] Int)
id
take ((+1) (undefined::Int))
case1 ((\a -> seq a (seq a (\b -> id (++)))) (id ([]::[] Bool))) id ((\a -> seq a (undefined::Int -> [] Int)) (even (undefined::Int)) (id (undefined::Int)))
head ((\a -> (\b -> seq b (seq b (undefined::[] (Int -> ([] Int) -> [] Int)))) (seq a (undefined::[] Int))) (case1 (\a -> (undefined::([] Int) -> Int)) (undefined::Int) (undefined::[] Int))) ((\a -> case1 (seq a (undefined::([] Int) -> ([] ([] Int)) -> Int)) 1 (seq a (undefined::[] ([] Int)))) (undefined::([] Int) -> [] (Bool -> Bool)))
(undefined::([] Int) -> [] Int)
\a -> id (\b -> a) (seq a (undefined::([] (([] Bool) -> [] Bool)) -> Bool -> Bool))
(\a -> seq a (\b -> b)) ((\a -> (!!) (seq a (seq a (undefined::[] Int))) (seq a (seq a (undefined::Int)))) ((\a -> \b -> \c -> seq a (seq c (undefined::Bool))) ([]::[] Int)))
\a -> map (undefined::(([] ([] ([] ([] ([] Bool))))) -> [] Int) -> Int) (seq a (\b -> seq a ([]::[] (([] ([] ([] ([] ([] Bool))))) -> [] Int))) (seq a 2))
(\a -> seq a (\b -> seq b (\c -> \d -> d) id)) ((\a -> seq a (seq a (seq a False))) (\a -> \b -> a b)) (\a -> \b -> seq a ((\c -> seq c (seq a (\d -> seq b 1) (id c))) ((!!) (undefined::[] Bool) (undefined::Int))))
filter (head (map ((\a -> seq a ((!!) (seq a ([]::[] (Bool -> Int -> Bool))) (seq a (undefined::Int)))) ((\a -> seq a (\b -> \c -> b)) ([]::[] Int))) ([]::[] Bool)))
case1 ((\a -> (!!) (seq a (\b -> (undefined::[] (([] Int) -> [] Int))) (seq a (undefined::Int)))) 0) (map (\a -> seq a ((!!) (seq a ([]::[] Int)) 1)) (map (\a -> seq a (undefined::Bool -> Int)) ([]::[] Bool)))
head (undefined::[] ((([] Int) -> ([] Int) -> [] Int) -> ([] Int) -> [] Int)) ((\a -> seq a (\b -> \c -> c)) (\a -> seq a ((undefined::Int -> [] (Bool -> Bool)) (seq a (seq a (undefined::Int))))))
tail
head (undefined::[] ((Int -> ([] Int) -> Bool -> Bool) -> ([] Int) -> [] Int)) (head (undefined::[] (Int -> ([] Int) -> Bool -> Bool)))
(\a -> seq a (\b -> b)) tail
(\a -> head (seq a (seq a (take 2 ([]::[] (Int -> ([] Int) -> [] Int))))) ((\b -> b) (seq a (seq a (seq a (undefined::Int)))))) (\a -> (undefined::Int -> [] (Int -> Bool)) 0)
\a -> seq a a
\a -> (!!) ((undefined::Int -> [] (([] ([] (Int -> Bool))) -> [] Int)) (seq a (undefined::Int))) ((!!) (undefined::[] Int) ((+1) (undefined::Int))) (seq a (head (tail (seq a (undefined::[] ((Int -> Int) -> [] ([] (Int -> Bool)))))) (head (seq a (undefined::[] (Bool -> Int -> Int))) (seq a (id False)))))
\a -> map ((\b -> \c -> seq c (head (undefined::[] (Bool -> Int)) b)) (seq a (head ([]::[] (([] ([] Bool)) -> Bool))) (seq a (head (undefined::[] ([] ([] Bool))))))) (seq a (seq a (seq a ((!!) ([]::[] ([] (([] Int) -> ([] ([] Int)) -> [] Bool))))) ((\b -> seq b (seq b 0)) (\b -> seq a (undefined::[] (Bool -> Bool))))))
(undefined::(([] ([] ([] ([] ([] (Bool -> Bool)))))) -> [] ([] ([] ([] (Int -> [] Int))))) -> ([] Int) -> [] Int) (\a -> (!!) ((\b -> seq b (undefined::[] ([] ([] ([] ([] (Int -> [] Int))))))) (seq a False)) 2)
\a -> (undefined::(([] (([] ([] ([] Int))) -> [] ([] ([] Int)))) -> ([] (([] ([] Bool)) -> [] Bool)) -> Bool -> Bool) -> [] Int) (\b -> \c -> \d -> ((==)::Int -> Int -> Bool) (seq a (seq c (\e -> (undefined::Int))) (head (seq a (undefined::[] ([] Int))))) (seq c (head (undefined::[] ((Bool -> Bool -> Bool) -> Int))) (undefined::Bool -> Bool -> Bool)))
(undefined::(([] ([] ([] ([] (Int -> Bool))))) -> [] ([] ([] (Bool -> Bool)))) -> ([] Int) -> [] Int) (\a -> seq a (seq a ((\b -> seq a ((\c -> seq c (seq b (undefined::[] ([] ([] (Bool -> Bool)))))) (id (undefined::Bool)))) (head ([]::[] (([] (Int -> Int -> Bool)) -> Int)) (seq a (seq a (seq a (undefined::[] (Int -> Int -> Bool)))))))))
(\a -> \b -> seq b (undefined::(([] ([] Bool)) -> [] Bool) -> [] Int) (seq a ((\c -> \d -> seq b (seq c (undefined::[] Bool))) (id (seq b (undefined::Int)))))) ((\a -> \b -> case1 (\c -> (undefined::([] Int) -> Bool)) a (seq a ([]::[] Int))) True)
(undefined::([] Int) -> [] Int)
(undefined::([] Int) -> [] Int)
(\a -> case1 (\b -> \c -> id c) (case1 (\b -> (undefined::([] Bool) -> [] Int)) (seq a (undefined::[] Int)) (undefined::[] Bool))) (\a -> (undefined::[] (Bool -> Bool)))
\a -> ([]::[] Int)
(\a -> \b -> seq a (id (undefined::Int -> ([] Int) -> [] Int)) 2) ((\a -> seq a (seq a (\b -> 1))) (undefined::[] ([] Bool))) (\a -> \b -> case1 ((undefined::Bool -> Bool -> ([] Bool) -> Bool) (seq b (undefined::Bool))) (((==)::Int -> Int -> Bool) (undefined::Int) b) (seq b (undefined::Int -> [] Bool) (seq a a)))
(undefined::Int -> ([] Int) -> [] Int) (undefined::Int)
(undefined::([] (([] (Bool -> Bool)) -> Bool -> Bool)) -> ([] Int) -> [] Int) ([]::[] (([] (Bool -> Bool)) -> Bool -> Bool))
\a -> (\b -> head (seq b (undefined::[] ((([] Int) -> ([] ([] Int)) -> [] Bool) -> [] Int))) (\c -> \d -> (undefined::(([] (Int -> [] Bool)) -> [] Bool) -> [] Bool) (\e -> seq e (seq d ([]::[] Bool))))) (seq a (\b -> id))
case1 ((undefined::Bool -> Int -> ([] Int) -> ([] Int) -> [] Int) ((\a -> seq a a) (head ([]::[] Bool)))) (\a -> (\b -> seq b (undefined::Int -> [] Int) (seq a 2)) (seq a ([]::[] ([] ([] (Int -> ([] Int) -> Int)))))) (map ((!!) ([]::[] (Bool -> Int)) (undefined::Int)) ([]::[] Bool))
\a -> a
\a -> a
take 0
(\a -> head (seq a (seq a ([]::[] (([] ([] (Int -> Int))) -> ([] Int) -> [] Int)))) (seq a (seq a (\b -> ([]::[] ([] (Int -> Int)))) (seq a (even 2))))) (head (tail (tail (head (undefined::[] ([] (([] ([] (([] ([] ([] Int))) -> [] ([] ([] Bool))))) -> [] Int)))))))
\a -> (++) a a
\a -> seq a (map ((undefined::(Int -> Bool -> Bool) -> Int -> Bool -> Int) (head (seq a ([]::[] (Int -> Bool -> Bool)))) ((\b -> b) ((+1) (seq a 1)))) ((\b -> (undefined::([] (Int -> [] Int)) -> [] Bool) (id (seq b ([]::[] (Int -> [] Int))))) (seq a (seq a (seq a ([]::[] (([] (([] Int) -> Int)) -> Int -> Bool)))))))
(\a -> seq a (\b -> tail)) (case1 (\a -> (undefined::([] Bool) -> Int)) (undefined::Int) (undefined::[] Bool)) (\a -> ([]::[] (Int -> [] Int)))
\a -> seq a ((undefined::(([] Int) -> [] (Bool -> Bool)) -> ([] ([] (Int -> Int))) -> [] Int) ((!!) ([]::[] (([] Int) -> [] (Bool -> Bool))) 0) (seq a ((!!) (undefined::[] (Int -> [] ([] (Int -> Int)))) (undefined::Int)) (seq a (seq a (seq a (seq a ((-) (undefined::Int) 2)))))))
\a -> seq a (seq a (seq a (seq a (\b -> a)))) (seq a (seq a (seq a (seq a (seq a (undefined::[] (([] (([] (Int -> Int)) -> Int -> Int)) -> Int -> Bool)))))))
(\a -> seq a ((!!) ([]::[] (Bool -> ([] Int) -> [] Int))) 0) ((||) True (id (undefined::Bool))) ((\a -> seq a (\b -> a)) False ((\a -> seq a (map (-))) (\a -> seq a (seq a (seq a False)))))
\a -> a
\a -> ([]::[] Int)
\a -> (undefined::(([] ([] (([] ([] ([] Bool))) -> [] ([] ([] Bool))))) -> [] (Int -> ([] ([] Int)) -> [] ([] Bool))) -> [] Int) (\b -> (!!) ([]::[] ([] (Int -> ([] ([] Int)) -> [] ([] Bool)))) (head a))
\a -> ([]::[] Int)
(undefined::Bool -> ([] (([] ([] Bool)) -> [] ([] Bool))) -> ([] Int) -> [] Int) ((\a -> a (undefined::[] (Int -> [] Int)) (undefined::Int)) (\a -> (undefined::Int -> Bool))) (head (undefined::[] ([] (([] ([] Bool)) -> [] ([] Bool)))))
\a -> a
(!!) (head (undefined::[] ([] (([] (([] Int) -> Bool)) -> ([] Int) -> [] Int)))) (id (\a -> 1) (\a -> \b -> b)) ((\a -> id (undefined::(Int -> Bool) -> [] (([] Int) -> Bool)) (seq a (seq a (seq a (undefined::Int -> Bool))))) (undefined::[] (([] Int) -> Bool)))
(\a -> \b -> seq a (seq b (seq b (seq b (\c -> b)))) (seq a ((undefined::([] Int) -> ([] Int) -> Bool -> Bool -> Bool) (seq a (seq b ([]::[] Int)))))) True
head ((\a -> seq a ((\b -> take (seq a (seq b 2)) (seq a (seq a (undefined::[] (([] Int) -> [] Int))))) (seq a ((\b -> seq a (seq b (undefined::([] Int) -> [] (Int -> [] Int)))) 1)))) ((\a -> seq a (((==)::[Int] -> [Int] -> Bool) (seq a ([]::[] Int)) (seq a (undefined::[] Int)))) (\a -> seq a (seq a (\b -> seq b ([]::[] (Bool -> Bool))) (seq a False)))))
\a -> a
\a -> seq a a
(undefined::(([] (Int -> [] (Int -> Int))) -> Int -> [] (Int -> Int)) -> ([] Int) -> [] Int) (\a -> (!!) ([]::[] (Bool -> Int -> [] (Int -> Int))) (seq a ((+1) 1)) (seq a (seq a (\b -> seq b (undefined::Bool))) (\b -> seq b b)))
case1 (\a -> \b -> \c -> (undefined::((Int -> Bool) -> Int) -> [] Int) (head (head (undefined::[] ([] ((Int -> Bool) -> Int)))))) (\a -> a) (undefined::[] (Int -> Int -> Int))
\a -> id ((enumFromTo::Int -> Int -> [Int]) 2) (seq a (seq a 2))
\a -> (:) (seq a ((\b -> seq a (\c -> seq c (undefined::Int)) (seq a (seq a (seq b (undefined::Bool))))) (\b -> seq b (seq a (undefined::[] (([] ([] ([] Int))) -> [] ([] Bool))))))) (map ((\b -> seq b (\c -> (undefined::Int))) (seq a (seq a (seq a (undefined::Bool))))) (map (\b -> seq b True) (seq a a)))
head ([]::[] (Int -> Bool -> ([] Int) -> [] Int)) (case1 (undefined::([] Int) -> ([] ([] Int)) -> Int) 0 ([]::[] ([] Int))) (case1 (\a -> (\b -> seq b (undefined::([] ([] (Int -> Int))) -> Bool)) (seq a (undefined::Bool))) ((\a -> a) (head (undefined::[] Bool))) ((\a -> seq a ([]::[] ([] (Int -> Int)))) (undefined::([] Bool) -> Int)))
case1 ((\a -> seq a (\b -> seq a (seq a (\c -> tail) a))) ((\a -> a) (undefined::Bool))) ((\a -> seq a (seq a (seq a (undefined::(Int -> Bool) -> [] Int))) (\b -> a)) ((\a -> a 2 (undefined::Int) (undefined::Int) (undefined::Bool)) (\a -> \b -> (!!) ([]::[] (Bool -> Bool)))))
(\a -> seq a ((\b -> \c -> \d -> seq b d) (seq a (seq a (seq a ([]::[] Bool)))))) (\a -> filter (undefined::(Int -> Int) -> Bool) (seq a (seq a (undefined::[] (Int -> Int))))) ((\a -> (!!) ([]::[] (([] ([] Bool)) -> Int)) a (seq a (seq a (seq a (undefined::[] ([] Bool)))))) (id ((\a -> a) (id 2))))
\a -> head ([]::[] ([] Int))
(\a -> seq a (seq a (\b -> (undefined::Int -> ([] Int) -> [] Int)))) (((==)::[Int] -> [Int] -> Bool) ([]::[] Int) ([]::[] Int)) ((!!) (head ([]::[] ([] Bool))) 2) (case1 (undefined::(([] Int) -> Int) -> ([] (([] Int) -> Int)) -> Int) ((\a -> seq a (undefined::Int)) (tail (undefined::[] ([] (Int -> Int))))) (undefined::[] (([] Int) -> Int)))
\a -> a
\a -> tail (seq a (enumFromTo'::Int -> Int -> [Int]) (case1 (undefined::([] Int) -> ([] ([] Int)) -> Int) (undefined::Int) (seq a (seq a (seq a (undefined::[] ([] Int)))))) (seq a (seq a ((\b -> \c -> seq a b) (seq a (seq a (seq a (undefined::Int)))) (seq a (\b -> (\c -> seq c (undefined::[] Bool)) (seq a (seq a (undefined::Bool)))))))))
\a -> id (id (\b -> (undefined::Int -> Bool -> [] Int)) (even (undefined::Int)) ((undefined::(Int -> Int -> Int) -> Int) (seq a (seq a (\b -> (undefined::Int -> Int)))))) (seq a (seq a (seq a (seq a (\b -> seq b (\c -> (undefined::Bool)) (undefined::Int))) ((!!) (undefined::[] (([] ([] ([] (Int -> Bool)))) -> Int)) (seq a (seq a (seq a (undefined::Int))))))))
\a -> ([]::[] Int)
(undefined::((Int -> Int -> Bool) -> ([] (Int -> Int -> Bool)) -> Int -> Int -> Bool) -> ([] Int) -> [] Int) (undefined::(Int -> Int -> Bool) -> ([] (Int -> Int -> Bool)) -> Int -> Int -> Bool)
tail
(undefined::(Int -> Int -> ([] ([] Int)) -> [] ([] Int)) -> ([] Int) -> [] Int) (\a -> seq a (\b -> \c -> (++) c (seq a (\d -> c) (seq c (seq c (undefined::[] Int))))))
(!!) ((\a -> seq a (undefined::Int -> [] (([] Int) -> [] Int)) 0) ((undefined::([] Int) -> [] ([] (Int -> Bool))) ([]::[] Int))) (undefined::Int)
(undefined::([] Int) -> [] Int)
(undefined::(([] Int) -> ([] Bool) -> Bool) -> ([] Int) -> [] Int) ((\a -> seq a (\b -> (undefined::(Int -> Int) -> ([] Bool) -> Bool) (\c -> seq b c))) ((\a -> seq a (seq a (seq a (undefined::Bool)))) ((-) (undefined::Int) 1)))
\a -> (undefined::(([] (([] Int) -> ([] Bool) -> [] Bool)) -> [] (([] Int) -> ([] Int) -> ([] Bool) -> [] Bool)) -> [] Int) (\b -> seq b (seq b (\c -> seq a (undefined::[] (([] Int) -> ([] Int) -> ([] Bool) -> [] Bool)))) (seq b (seq b (seq a (seq a (undefined::Int -> Bool)) (seq a (seq a 1))))))
\a -> a
(\a -> case1 ((!!) (seq a ([]::[] (([] Int) -> ([] Int) -> [] Int)))) (\b -> seq b (seq b (seq a b))) (seq a (seq a (seq a (seq a (undefined::[] Int)))))) (head ((undefined::Bool -> [] (([] (Int -> Int)) -> Int -> Int)) ((undefined::Int -> Bool) (undefined::Int))))
(undefined::([] Int) -> [] Int)
(!!) ([]::[] ((([] Int) -> [] (Int -> Int)) -> ([] Int) -> [] Int)) 0 (undefined::([] Int) -> [] (Int -> Int))
\a -> case1 (id (\b -> \c -> \d -> seq a ([]::[] Int))) (\b -> a) (undefined::[] Bool) ((\b -> id (\c -> b) (\c -> seq c (seq c (seq a ([]::[] (Int -> Bool)))))) (id (\b -> seq b True) (seq a (seq a (undefined::([] Int) -> Int -> Bool)))))
head (take 0 ((\a -> seq a ((undefined::Int -> [] (([] Int) -> [] Int)) (head ([]::[] Int)))) ((\a -> seq a (\b -> (undefined::[] ([] Bool)))) (undefined::Int))))
(\a -> \b -> \c -> (:) a (undefined::[] Int)) ((\a -> id (seq a (undefined::Int))) (undefined::([] Int) -> Bool)) ((\a -> seq a (\b -> \c -> c)) ([]::[] Bool) (map (head ([]::[] (([] ([] Int)) -> Bool))) (undefined::[] ([] ([] Int)))))
(undefined::(([] (([] (Int -> Bool)) -> Int -> Bool)) -> ([] Int) -> [] Int) -> ([] Int) -> [] Int) (\a -> (undefined::([] ([] ([] (([] ([] Bool)) -> [] Bool)))) -> ([] Int) -> [] Int) ((undefined::Bool -> [] ([] ([] (([] ([] Bool)) -> [] Bool)))) (undefined::Bool)))
\a -> seq a ((undefined::(([] (Int -> Int)) -> [] (Int -> Int)) -> [] Int) id)
(++) (map ((\a -> seq a (seq a (id (seq a (\b -> seq b 2))))) ((undefined::([] ([] ([] Bool))) -> Bool) (head (undefined::[] ([] ([] ([] Bool))))))) ((undefined::(([] ([] Int)) -> [] ([] (Int -> Int))) -> [] ([] Int)) (\a -> (undefined::([] Int) -> [] ([] (Int -> Int))) (seq a (seq a (seq a (undefined::[] Int)))))))
(\a -> \b -> map (\c -> 1) (seq a ([]::[] (([] ([] (Bool -> Bool))) -> Int -> Int -> Bool)))) (undefined::([] ([] (Bool -> Bool))) -> Int -> Int -> Bool)
(:) (id (\a -> \b -> head (seq a (seq a ([]::[] Int)))) (undefined::Int) (\a -> (\b -> (\c -> seq c (seq c ([]::[] (Int -> Bool)))) b) (seq a (seq a (seq a (seq a id)) (undefined::Bool)))))
\a -> seq a (\b -> \c -> (undefined::Int -> [] Int)) (undefined::[] ([] Bool)) (seq a (seq a (seq a (seq a (seq a not (seq a (undefined::Bool))))))) (seq a (\b -> \c -> c) (seq a (undefined::Bool)) ((undefined::Int -> Int) 0))
(\a -> seq a (\b -> \c -> (undefined::[] Int))) (undefined::Int) (case1 (undefined::Int -> ([] Int) -> ([] Int) -> [] (Bool -> Bool)) ((\a -> seq a (undefined::([] Int) -> [] (Bool -> Bool))) (undefined::Int)) (id (undefined::([] ([] Bool)) -> [] Int) (undefined::[] ([] Bool))))
case1 (undefined::([] ([] (Int -> Int))) -> ([] ([] ([] (Int -> Int)))) -> ([] Int) -> [] Int) (\a -> (\b -> \c -> seq b (undefined::[] Int)) (seq a 2) ((!!) (seq a a) (seq a (undefined::Int)))) (id ((\a -> seq a (id ([]::[] ([] ([] (Int -> Int)))))) ((\a -> a) (undefined::Bool))))
(\a -> seq a (filter ((\b -> (\c -> \d -> seq a c) (not b)) (odd ((\b -> seq b (undefined::Int)) (seq a (seq a False))))))) ((undefined::Int -> ([] Int) -> ([] Bool) -> [] Bool) ((\a -> seq a a) (head (undefined::[] Int))))
\a -> a
(undefined::([] (([] ([] Bool)) -> Int -> Int)) -> ([] Int) -> [] Int) (id (head ([]::[] (Bool -> [] (([] ([] Bool)) -> Int -> Int)))) (head (map (\a -> seq a (undefined::Bool)) ([]::[] ([] ([] (Bool -> Bool)))))))
case1 (\a -> (undefined::([] Int) -> Int -> ([] Int) -> [] Int)) (undefined::Int -> ([] Int) -> [] Int) ((++) (undefined::[] Int) (undefined::[] Int)) (head (undefined::[] ((([] ([] ([] Bool))) -> [] ([] Bool)) -> Int)) (map ((\a -> \b -> seq a (undefined::[] Bool)) ([]::[] Bool))))
(undefined::([] Int) -> [] Int)
tail
(\a -> case1 (\b -> seq a (seq b (seq a (undefined::([] Int) -> ([] Int) -> [] Int)))) (map (\b -> b)) (seq a (undefined::Bool -> [] Int) a)) ((\a -> a) ((\a -> a) ((||) True False)))
(\a -> seq a ((undefined::(([] ([] ([] Bool))) -> [] ([] Bool)) -> ([] Int) -> [] Int) (\b -> id (\c -> ([]::[] ([] Bool))) (head (seq a (undefined::[] ([] Bool))))))) ((undefined::(([] Int) -> [] (Bool -> Bool)) -> ([] ([] Bool)) -> [] ([] Bool)) ((\a -> \b -> seq b (seq a ([]::[] (Bool -> Bool)))) (head ([]::[] (Bool -> Bool)))))
\a -> a
id
\a -> map (head (seq a (seq a (undefined::Int -> [] ((([] ([] Int)) -> [] ([] Int)) -> Int))) (seq a (seq a (undefined::([] ([] Bool)) -> Int)) (seq a (seq a (seq a (undefined::[] ([] Bool)))))))) (undefined::[] (([] ([] Int)) -> [] ([] Int)))
\a -> id a
(\a -> \b -> id (tail ((undefined::Int -> Bool -> [] Int) ((+1) (undefined::Int)) (id head (seq a ([]::[] Bool)))))) ((++) ((++) ([]::[] ([] ([] Bool))) (id ([]::[] ([] ([] Bool))))) ((\a -> seq a (seq a ([]::[] ([] ([] Bool))))) ([]::[] Bool)))
(\a -> (!!) (seq a (seq a (seq a (seq a (seq a (undefined::[] (([] Int) -> [] Int))))))) ((!!) ([]::[] Int) (seq a (head (undefined::[] Int))))) ([]::[] (([] (([] Int) -> [] Bool)) -> ([] Int) -> Bool))
\a -> seq a a
\a -> case1 (\b -> seq a (\c -> head ([]::[] (([] (([] Int) -> Bool)) -> [] Int))) True) (map (seq a (\b -> head a)) (seq a (undefined::[] (Bool -> Bool)))) (map (undefined::(Int -> Int) -> ([] Int) -> Bool) (seq a (id (undefined::[] (Int -> Int)))))
(\a -> (undefined::(Bool -> Bool) -> ([] Int) -> [] Int) (seq a (\b -> seq b (\c -> c)) 0)) (\a -> seq a ((!!) ([]::[] (([] Int) -> [] Bool)) ((\b -> b) (seq a (seq a 1)))))
(:) (case1 (\a -> (undefined::([] Bool) -> Int -> Int)) (\a -> 2) ((\a -> seq a (undefined::[] Bool)) False) ((undefined::([] Int) -> (Int -> Int -> Int) -> Int) ([]::[] Int) (id (\a -> \b -> (+1)) True)))
map (\a -> (undefined::Int))
id (head (tail ([]::[] ((([] (Int -> [] Int)) -> Int -> Int -> [] Int) -> ([] Int) -> [] Int)))) ((\a -> seq a (seq a (seq a (\b -> seq a (undefined::Bool -> Int -> Int -> [] Int) False)))) 0)
tail
(!!) ([]::[] (([] Int) -> [] Int)) ((\a -> (+1) (a (a 2 (undefined::[] Int)) (seq a (undefined::[] Int)))) (undefined::Int -> ([] Int) -> Int))
tail
\a -> (\b -> (!!) ([]::[] ([] Int)) (seq b (seq b (undefined::Bool -> Int)) (seq a (seq b (seq a (undefined::Bool)))))) (seq a (seq a (case1 (seq a (undefined::Int -> ([] Int) -> Int -> Int)) (seq a (+1)) a (seq a (seq a (seq a (seq a 1)))))))
\a -> (\b -> seq a (seq a (\c -> \d -> ([]::[] Int)) (seq b (seq b (seq a (undefined::Bool)))))) ((\b -> seq b (seq a (seq b ([]::[] (([] Bool) -> [] Bool))))) a) ([]::[] ([] (Int -> Int)))
\a -> a
id (head ([]::[] (((Int -> Int -> Bool) -> [] ([] (Int -> Bool))) -> ([] Int) -> [] Int))) (head ((:) (\a -> id ((!!) ([]::[] ([] ([] (Int -> Bool)))) (undefined::Int))) (tail ([]::[] ((Int -> Int -> Bool) -> [] ([] (Int -> Bool)))))))
\a -> seq a (head (seq a (seq a (seq a (\b -> seq b (undefined::[] ((([] ([] Int)) -> [] ([] Int)) -> [] Int))) (seq a (\b -> 1) (seq a (seq a ([]::[] Bool))))))) (seq a (seq a (\b -> b))))
\a -> (\b -> seq a ((\c -> seq c (\d -> seq b a)) (seq a (undefined::Int))) (!!)) (seq a (\b -> seq a (undefined::([] Int) -> ([] Int) -> Int -> Int -> [] Int)))
\a -> ([]::[] Int)
(\a -> \b -> seq a (id (seq a (seq b (head (seq a (undefined::[] (Bool -> [] Int)))))) a)) ((undefined::(([] ([] ([] Int))) -> [] ([] ([] (Int -> Int)))) -> Bool) (\a -> seq a ((\b -> seq b (seq a ([]::[] ([] ([] (Int -> Int)))))) (seq a a))))
\a -> (undefined::Bool -> Int -> Int -> [] Int) (seq a (seq a (seq a (undefined::Bool)))) ((\b -> seq b (seq b (seq b (undefined::Int)))) ([]::[] ([] (Int -> Int)))) ((!!) a (seq a (\b -> seq b 1) True))
\a -> case1 (\b -> seq a (seq a (seq b (seq b (undefined::Bool -> ([] Bool) -> [] Int)))) (seq b (\c -> c) b)) ((undefined::Int -> Bool -> [] Int) (id 0) (seq a (seq a (seq a (seq a (undefined::Bool)))))) ((\b -> seq b (undefined::Int -> [] Bool)) (seq a (seq a True)) 0)
case1 (\a -> head ((\b -> seq b (seq a ([]::[] (([] Int) -> ([] Int) -> [] Int)))) (seq a (seq a (seq a True))))) ((!!) (undefined::[] (([] Int) -> [] Int)) ((\a -> seq a (undefined::Int)) False)) (map (undefined::(Bool -> Bool) -> Int) ([]::[] (Bool -> Bool)))
\a -> a
case1 (undefined::Int -> ([] Int) -> ([] Int) -> [] Int) ((\a -> seq a (undefined::Bool -> ([] Int) -> [] Int) (id True)) (undefined::[] ([] ([] Bool)))) ((\a -> seq a (undefined::(Bool -> Bool) -> [] Int)) (undefined::Bool) (head (undefined::[] ((Int -> Bool) -> Bool -> Bool)) (\a -> False)))
(undefined::([] Int) -> [] Int)
\a -> a
(\a -> case1 (\b -> seq a (\c -> (++) (undefined::[] Int))) (undefined::([] Int) -> [] Int) ((\b -> seq b (undefined::[] Bool)) (seq a (undefined::Int)))) (undefined::([] ([] ([] Int))) -> [] ([] ([] Bool)))
(undefined::(Int -> Int -> ([] ([] Int)) -> [] ([] ([] Int))) -> ([] Int) -> [] Int) (\a -> seq a (seq a (\b -> seq b ((\c -> \d -> filter (seq c (undefined::([] ([] Int)) -> Bool)) (seq a ([]::[] ([] ([] Int))))) ((\c -> c) (seq b (seq a (undefined::Bool))))))))
(\a -> (!!) (seq a (undefined::[] (Int -> ([] Int) -> [] Int))) 1) (\a -> seq a (seq a (\b -> seq b (undefined::Bool -> Bool))) (seq a (seq a (seq a (undefined::[] Bool))))) ((undefined::(([] Int) -> Int -> Int) -> Int) (\a -> \b -> seq b ((undefined::([] (Bool -> Bool)) -> Int) (head (undefined::[] ([] (Bool -> Bool)))))))
\a -> a
\a -> a
case1 (\a -> \b -> seq b (\c -> (undefined::Bool -> ([] Int) -> [] Int)) True (head (undefined::[] (Bool -> Bool)) False)) ((\a -> seq a take) (undefined::Bool) ((\a -> seq a (undefined::Int)) (tail ([]::[] Bool)))) (take ((\a -> seq a 2) (undefined::Int)) ((\a -> seq a ([]::[] Bool)) (undefined::Int)))
\a -> map (seq a (\b -> (+) ((+1) ((+1) (undefined::Int))) (head a))) (seq a (undefined::[] (([] ([] ([] ([] ([] Int))))) -> [] ([] ([] ([] ([] Int)))))))
(undefined::([] Int) -> [] Int)
(\a -> seq a (seq a (seq a (\b -> (\c -> seq c id) (seq a 2))))) ((\a -> seq a (seq a (seq a id))) ((:) 0 ([]::[] Int))) ((\a -> seq a (undefined::([] Int) -> [] ([] Int))) (id (\a -> seq a False) ([]::[] ([] Bool))))
(undefined::Bool -> Bool -> ([] Int) -> [] Int) (((==)::Int -> Int -> Bool) (undefined::Int) (head ([]::[] Int))) False
id (id ((!!) ([]::[] (([] Int) -> [] Int)))) ((\a -> id id a) (undefined::Int))
case1 (undefined::(([] Bool) -> [] Bool) -> ([] (([] Bool) -> [] Bool)) -> ([] Int) -> [] Int) (\a -> map (undefined::([] (([] ([] Int)) -> [] ([] Bool))) -> Int) (seq a (seq a (undefined::[] ([] (([] ([] Int)) -> [] ([] Bool))))))) (id (\a -> seq a (seq a ([]::[] (([] Bool) -> [] Bool)))) ((!!) ([]::[] (Int -> Int)) 2))
(\a -> \b -> (\c -> \d -> seq c ([]::[] Int)) (seq b not) (case1 (\c -> (undefined::([] Int) -> ([] Int) -> Bool)) (seq b (undefined::([] Int) -> Bool)) (seq a (undefined::[] Int)))) (id (\a -> \b -> b))
\a -> seq a (seq a (id (\b -> seq b (seq b ([]::[] Int))) (\b -> head (seq b (\c -> seq c (seq c (undefined::[] (([] ([] ([] ([] Int)))) -> [] ([] ([] Int)))))) (even ((+1) ((+1) (undefined::Int))))))))
\a -> a
(undefined::([] Int) -> [] Int)
\a -> ([]::[] Int)
(!!) (tail ((\a -> seq a ([]::[] (Int -> ([] Int) -> [] Int))) (undefined::Bool))) (undefined::Int) ((-) (head (undefined::[] (Bool -> Int)) (not (undefined::Bool))) ((+1) (head ([]::[] (Bool -> Int)) (undefined::Bool))))
(\a -> \b -> seq a ((!!) (seq a (seq a ([]::[] (Int -> [] Int)))) (id 2) ((\c -> c (undefined::Int) 2) (\c -> seq a id)))) (\a -> seq a (\b -> seq a (seq b ([]::[] (([] Int) -> [] ([] (Bool -> Bool)))))) (seq a (undefined::Int)))
(undefined::([] Int) -> [] Int)
tail
id
(\a -> filter (\b -> seq a (\c -> seq a (undefined::(Bool -> Bool) -> Bool)) (undefined::[] (Bool -> Bool)) (id (\c -> (!!) (undefined::[] Bool) b)))) (undefined::([] Int) -> [] (Int -> [] Int))
case1 ((\a -> (undefined::([] Bool) -> Int -> ([] Int) -> [] Int) (seq a (seq a (seq a ([]::[] Bool))))) (id ((\a -> seq a True) (!!)))) (undefined::[] Int)
\a -> a
id
\a -> filter (seq a (\b -> (undefined::Int -> Int -> Bool) (undefined::Int)) ((undefined::Bool -> ([] ([] Int)) -> [] ([] ([] Int))) (even (seq a 1)))) (map (seq a (\b -> (undefined::([] (Int -> Int)) -> Int)) (seq a (seq a (seq a True)))) (seq a (seq a (\b -> ([]::[] ([] (Int -> Int))))) (even (seq a 0))))
tail
\a -> a
\a -> a
\a -> (++) (seq a (head (seq a ([]::[] ((([] Int) -> ([] Bool) -> [] Bool) -> [] Int))) ((!!) ([]::[] (([] Int) -> ([] Bool) -> [] Bool)) (seq a (seq a (seq a 0)))))) ((\b -> seq b (seq b (\c -> (undefined::[] Int)))) (seq a (\b -> seq b (seq a True))) ((\b -> \c -> seq b (seq c (undefined::[] Int))) (seq a (seq a (seq a False)))))
(\a -> (!!) (seq a (undefined::[] (Bool -> ([] Int) -> [] Int))) (seq a 1)) (undefined::([] Int) -> [] Bool) ((!!) (undefined::[] ((Int -> Bool -> Bool) -> Bool)) 0 (undefined::Int -> Bool -> Bool))
tail
tail
(\a -> seq a (\b -> ([]::[] Int))) (\a -> seq a (\b -> id) a)
\a -> (!!) ((undefined::Int -> [] (([] ([] (Bool -> Bool))) -> [] Int)) (undefined::Int)) (seq a (seq a (\b -> (undefined::Int))) (seq a (+1))) (undefined::[] ([] (Bool -> Bool)))
id (\a -> seq a (take ((!!) (seq a (seq a (undefined::[] Int))) ((+1) (undefined::Int))))) ((\a -> id (\b -> seq a (id (undefined::[] ([] (([] (Int -> Bool)) -> Int -> Bool)))))) (case1 (\a -> (undefined::([] Bool) -> [] Int)) (undefined::[] Int) (undefined::[] Bool)))
\a -> a
\a -> ([]::[] Int)
\a -> a
(\a -> \b -> tail (id (\c -> b) (seq b (seq a (\c -> (\d -> seq d ([]::[] ([] (Int -> Int)))) a))))) (((==)::Bool -> Bool -> Bool) (undefined::Bool) True)
\a -> a
(undefined::([] Int) -> [] Int)
head ((undefined::([] (Int -> [] Int)) -> [] (Bool -> ([] Int) -> [] Int)) ((\a -> seq a (seq a (undefined::[] (Int -> [] Int)))) (tail ([]::[] Bool)))) ((undefined::(([] Int) -> Bool -> Bool -> Bool) -> Bool) (\a -> \b -> \c -> b))
(\a -> seq a ((!!) (seq a ([]::[] (Int -> ([] Int) -> [] Int))) (id (undefined::Int)))) ((\a -> seq a (seq a (seq a (undefined::[] ([] ([] ([] Int))))))) (undefined::[] ([] (Bool -> Bool)))) ((\a -> seq a (undefined::Int)) ((++) ([]::[] (([] (([] ([] Int)) -> [] Int)) -> Bool)) (undefined::[] (([] (([] ([] Int)) -> [] Int)) -> Bool))))
case1 (\a -> seq a (head (seq a ([]::[] (([] (([] Bool) -> Bool)) -> ([] Int) -> [] Int))))) (take ((undefined::Int -> ([] ([] (Int -> Int))) -> Int) 1 ([]::[] ([] (Int -> Int))))) ((\a -> seq a ([]::[] (([] Bool) -> Bool))) ((\a -> seq a ([]::[] ([] Bool))) ((enumFromTo::Int -> Int -> [Int]) 2)))
id
(\a -> \b -> seq a b) ((\a -> seq a ((undefined::Int -> Bool) (seq a (seq a (seq a 1))))) (case1 (\a -> seq a head) (undefined::Bool) ([]::[] Bool)))
filter ((!!) (filter ((\a -> \b -> seq a True) (id (undefined::Int))) ((\a -> seq a (seq a ([]::[] (Int -> Bool)))) (\a -> not (undefined::Bool)))) ((undefined::(([] (([] Int) -> [] Int)) -> [] ([] Bool)) -> Int) (id (map (undefined::(([] Int) -> [] Int) -> [] Bool)))))
id (\a -> \b -> case1 (undefined::([] ([] Int)) -> ([] ([] ([] Int))) -> [] Int) b (seq b (seq b (seq b ([]::[] ([] ([] Int))))))) (head ([]::[] ((([] ([] ([] (Int -> [] Int)))) -> Bool -> Bool) -> [] (Int -> [] Int))))
(undefined::Bool -> ((([] Int) -> [] ([] Bool)) -> Bool) -> ([] Int) -> [] Int) (undefined::Bool) (\a -> seq a (seq a ((\b -> \c -> seq b b) (id (seq a (undefined::Bool))) (seq a (id (enumFromTo'::Int -> Int -> [Int]) (seq a 0))))))
(\a -> id (undefined::(([] ([] Int)) -> [] Bool) -> ([] Int) -> [] Int) (\b -> case1 (\c -> (undefined::([] Int) -> [] Bool)) (seq a ([]::[] Bool)) (undefined::[] Int))) (\a -> (\b -> (\c -> seq c (id (undefined::[] (([] ([] Bool)) -> [] ([] Bool))))) (seq b (seq a (seq b True)))) (seq a (undefined::([] Int) -> ([] ([] Int)) -> [] ([] Bool)) (seq a (seq a (seq a ([]::[] Int))))))
(:) (undefined::Int)
id
\a -> a
\a -> seq a (seq a a)
(!!) ((\a -> a) ((\a -> seq a (seq a (seq a (undefined::[] (([] Int) -> [] Int))))) False)) ((\a -> seq a (\b -> seq b (undefined::Int))) True (\a -> seq a (seq a (seq a (undefined::Bool -> ([] Int) -> Int)) (not (undefined::Bool)))))
(\a -> seq a (undefined::([] ([] ([] Bool))) -> ([] Int) -> [] Int)) (map (head ([]::[] (([] Int) -> Int -> [] Int))) (tail (undefined::[] ([] Int)))) ((undefined::Bool -> (Int -> Int) -> [] ([] ([] Bool))) (undefined::Bool) ((-) ((\a -> seq a (seq a 1)) (\a -> seq a (seq a (undefined::[] Int))))))
(\a -> seq a (\b -> tail)) (case1 (undefined::Bool -> ([] Bool) -> Bool) False (undefined::[] Bool)) (undefined::([] Int) -> Int -> Int -> Int)
\a -> seq a (seq a (id ((\b -> (\c -> \d -> seq c a) (seq b (seq b ([]::[] ([] ([] Bool)))))) (seq a (\b -> \c -> c) (seq a (seq a (undefined::Bool))))))) (seq a (seq a (\b -> (\c -> seq c (seq b (undefined::[] Bool))) (seq a (seq a (undefined::[] ([] ([] Bool)))))) (seq a (seq a (\b -> seq b 0) ((&&) (seq a True))))))
\a -> seq a (seq a ((\b -> seq a (\c -> seq b (seq b (\d -> a) (id True))) b) ((\b -> (+) (seq b b) (seq b (head ([]::[] Int)))) (undefined::Int))))
case1 (\a -> seq a (seq a (seq a (\b -> \c -> \d -> d)) a)) (\a -> a) ((\a -> seq a (undefined::(Int -> Int) -> [] Bool)) (\a -> seq a True) ((!!) (undefined::[] Int)))
\a -> a
(\a -> seq a (undefined::([] Bool) -> Int -> ([] Int) -> [] Int) (seq a (seq a ([]::[] Bool)))) (((==)::[Int] -> [Int] -> Bool) ([]::[] Int) ((:) (undefined::Int) (undefined::[] Int))) ((undefined::([] ([] Int)) -> Int -> Int) (take (undefined::Int) (undefined::[] ([] Int))) 2)
(!!) (undefined::[] ((([] ([] Int)) -> [] ([] Bool)) -> ([] Int) -> [] Int)) ((undefined::(([] Int) -> ([] ([] Bool)) -> [] Int) -> Int) (\a -> \b -> (undefined::[] Int))) ((\a -> seq a (seq a (undefined::([] ([] Int)) -> [] ([] Bool)))) (\a -> (!!) (undefined::[] (Int -> ([] Int) -> Bool)) 0 (undefined::Int)))
\a -> ([]::[] Int)
id
(\a -> seq a (seq a (\b -> \c -> c)) (map (\b -> seq b (seq a (seq b (undefined::Bool -> [] Bool)) (not (undefined::Bool)))))) (\a -> id (\b -> map (seq b (undefined::(([] Int) -> Bool) -> [] ([] Int))) (seq a (undefined::[] (([] Int) -> Bool)))) (\b -> case1 (\c -> (undefined::([] Int) -> [] (Int -> Bool))) (seq a b) (seq b (undefined::[] Int))))
(\a -> \b -> seq b (seq b (\c -> \d -> b)) (undefined::Bool) (seq a (seq b (undefined::Bool -> Int)) (seq b (head (undefined::[] Bool))))) ((undefined::(([] Int) -> Bool -> Bool) -> Int) ((!!) (undefined::[] (([] Int) -> Bool -> Bool)) 2))
id ((\a -> \b -> seq a tail) False) ((undefined::([] (([] Int) -> [] Int)) -> Int -> [] Int) ((\a -> seq a (seq a (seq a (undefined::[] (([] Int) -> [] Int))))) ([]::[] Int)))
\a -> seq a ((\b -> seq a (seq a (head (head (seq b ([]::[] ([] (Bool -> [] Int)))))))) (id (undefined::Bool -> Int))) (((==)::Bool -> Bool -> Bool) ((\b -> seq b (undefined::Bool)) (undefined::[] (Bool -> Bool))) (case1 (undefined::Int -> ([] Int) -> Bool) (undefined::Bool) (seq a a)))
\a -> a
\a -> map (\b -> seq a (seq b (seq a (seq a (seq a (\c -> (undefined::Int))) (seq b (seq a (seq a (undefined::Bool -> Bool)) (seq b (seq a True)))))))) (undefined::[] (([] Int) -> (([] Int) -> Bool) -> ([] (([] Int) -> Bool)) -> ([] Int) -> Bool))
(\a -> (:) (seq a (seq a (\b -> 1) (seq a (seq a ([]::[] ([] (Bool -> Bool)))))))) (head (id (id ([]::[] (([] ([] (([] Int) -> [] (Bool -> Bool)))) -> [] (([] Int) -> Int -> [] Int))))))
\a -> filter (\b -> seq b (seq b (seq b (\c -> (undefined::Bool -> Bool))) (\c -> (undefined::Int -> Bool)) ((!!) (undefined::[] Bool) b))) a
(\a -> \b -> map (\c -> id (seq a (seq b (c 0 b)))) (tail ((!!) (undefined::[] ([] (Int -> ([] Int) -> Int))) (seq a (seq a 2))))) (undefined::[] (([] (([] Int) -> ([] Int) -> Bool)) -> Bool -> Bool))
\a -> seq a (case1 (\b -> \c -> \d -> c) (\b -> seq b (seq b (undefined::[] Int))) ((++) ([]::[] Int) a)) (\b -> (undefined::Int))
\a -> (undefined::(([] (([] ([] ([] Int))) -> [] ([] ([] Bool)))) -> [] (([] ([] ([] Int))) -> [] ([] ([] Bool)))) -> [] Int) (\b -> head (seq a (seq b (seq b (\c -> seq b ([]::[] ([] (([] ([] ([] Int))) -> [] ([] ([] Bool)))))) (((==)::Int -> Int -> Bool) (seq a (undefined::Int)) (undefined::Int))))))
case1 (\a -> \b -> (!!) ((:) (undefined::([] Int) -> [] Int) (undefined::[] (([] Int) -> [] Int))) (head (seq b (undefined::[] Int)))) (\a -> ([]::[] Int)) ((undefined::Bool -> Bool -> [] (Bool -> Bool -> Bool)) (undefined::Bool) ((\a -> a) (not True)))
(\a -> seq a tail) (undefined::([] Int) -> ([] (([] ([] Bool)) -> [] Bool)) -> Bool -> Bool)
\a -> seq a (seq a (\b -> seq a (seq b a))) (seq a (seq a (seq a (\b -> seq a (undefined::([] (Int -> Bool)) -> [] (Int -> Bool)))) ((\b -> seq a (seq b (undefined::[] ([] Bool)))) ((+1) (seq a (undefined::Int))))))
id
(\a -> (undefined::Bool -> ([] Int) -> [] Int) ((||) (seq a (seq a (undefined::Bool))) (seq a (seq a False)))) ((\a -> seq a ((\b -> seq b (seq a 2)) (not (undefined::Bool)))) ([]::[] ([] Bool)))
\a -> a
(undefined::(([] Int) -> ([] (Int -> Int)) -> Int -> Int -> Int) -> ([] Int) -> [] Int) ((undefined::Int -> ([] Int) -> ([] (Int -> Int)) -> Int -> Int -> Int) ((!!) ([]::[] Int) 0))
\a -> a
\a -> (\b -> seq b (seq b (\c -> seq c (seq c (undefined::(([] Int) -> Bool) -> [] Int))) b ((\c -> \d -> c) (seq a b)))) (undefined::Bool)
case1 (undefined::Int -> ([] Int) -> ([] Int) -> [] Int) ((\a -> seq a (\b -> seq b (seq b b))) ((\a -> seq a (undefined::([] Int) -> [] (Bool -> Bool))) (undefined::Int))) (id (\a -> seq a (undefined::[] Int)) (undefined::([] Int) -> [] (Bool -> Bool)))
\a -> a
tail
tail
(\a -> seq a (\b -> seq b (\c -> c)) ((\b -> \c -> seq b (undefined::[] (Bool -> Bool))) (\b -> seq a (undefined::Int)))) (\a -> seq a (undefined::(([] (([] ([] ([] Int))) -> [] ([] ([] Bool)))) -> Int) -> [] Int) (\b -> a))
(\a -> take (seq a (\b -> id (seq a (seq a (undefined::Int)))) (seq a (id (\b -> seq b (head (undefined::[] ([] (Int -> [] (Int -> Int)))))))))) ((undefined::(([] Int) -> [] (Int -> Bool)) -> Bool) ((\a -> seq a (\b -> seq b ([]::[] (Int -> Bool)))) ([]::[] Bool)))
\a -> (undefined::[] Int)
(\a -> (\b -> (undefined::([] ([] Bool)) -> ([] Int) -> [] Int) (take b (undefined::[] ([] Bool)))) (seq a (seq a ((\b -> seq b 0) a)))) ((\a -> \b -> seq a b) ((enumFromTo'::Int -> Int -> [Int]) 1 (undefined::Int)) ((\a -> seq a (seq a (seq a False))) (\a -> a)))
(\a -> seq a (undefined::([] (([] ([] ([] Int))) -> Bool -> Bool)) -> ([] Int) -> [] Int) (seq a ((\b -> seq b ([]::[] (([] ([] ([] Int))) -> Bool -> Bool))) (undefined::Bool)))) ((undefined::Int -> (([] ([] Int)) -> [] Int) -> Int) (undefined::Int) (undefined::([] ([] Int)) -> [] Int))
\a -> ([]::[] Int)
head (take ((!!) ([]::[] Int) 1) (undefined::[] ((([] ([] Int)) -> [] ([] Bool)) -> ([] Int) -> [] Int))) ((\a -> \b -> seq a (\c -> seq c ([]::[] ([] Bool)))) ((+1) (undefined::Int)) ((\a -> seq a (seq a (undefined::Bool))) (\a -> a)))
\a -> (\b -> seq b (\c -> seq a (undefined::Int -> [] Int))) (head a) (seq a (\b -> \c -> seq c 2) id) (seq a (\b -> b) (undefined::Int))
(\a -> (\b -> \c -> seq b c) (seq a (\b -> seq b (seq a False)) (head (seq a (undefined::[] ([] ([] Int))))))) (undefined::Int)
\a -> a
\a -> (\b -> case1 (\c -> seq b (head (undefined::[] (([] Bool) -> [] Int)))) a (seq a (undefined::Int -> [] Bool) (seq a 2))) (\b -> id (seq a (undefined::Int -> Int -> [] (([] Int) -> Bool)) (seq b (seq a 1))) ((\c -> c 2 (undefined::Int) (undefined::Int)) (\c -> \d -> \e -> 0)))
(\a -> seq a ((\b -> seq a (seq b (undefined::Bool -> ([] Int) -> [] Int)) (seq a (b ([]::[] (Int -> Bool)) a))) (seq a (seq a (seq a ((undefined::Int -> ([] (Int -> Bool)) -> Int -> Bool) a)))))) (case1 (\a -> \b -> (+1) a) (id id 0) ((\a -> seq a ([]::[] Int)) (undefined::Int)))
(\a -> seq a (undefined::([] Int) -> [] Int)) (\a -> seq a (undefined::Int -> ([] Int) -> ([] Int) -> Bool))
\a -> seq a (seq a (\b -> (undefined::Bool -> [] Int))) (seq a (\b -> ([]::[] (([] ([] Bool)) -> [] ([] Bool)))) (seq a (seq a (seq a 0)))) (id (\b -> seq a (seq b (undefined::Bool))) ([]::[] (([] (([] (Bool -> Bool)) -> Bool -> Bool)) -> Int)))
filter ((\a -> (undefined::Int -> Int -> Int -> Bool) (seq a (seq a (seq a 2))) 0) (case1 (undefined::Int -> ([] Int) -> Int -> Int -> [] Int) (head ([]::[] (Int -> Int -> [] Int)))))
(\a -> (undefined::Int -> ([] Int) -> [] Int) (seq a a)) ((undefined::Int -> ([] (Int -> [] Int)) -> Int) 0 ((\a -> seq a (seq a (seq a ([]::[] (Int -> [] Int))))) 2))
filter (\a -> (undefined::Bool))
\a -> seq a (seq a (map (\b -> seq a ((undefined::(([] Bool) -> [] Bool) -> Int) (\c -> seq a c))) (tail (seq a (undefined::[] (([] (([] (Int -> Bool)) -> Int -> Bool)) -> ([] (Int -> Bool)) -> Int -> Bool))))))
\a -> a
case1 (\a -> \b -> \c -> seq a (seq c (\d -> (undefined::[] Int))) (seq b (\d -> seq c (seq a (undefined::Int -> Int))))) (id (\a -> seq a (\b -> seq a b)) ((\a -> seq a (undefined::[] (Int -> Int))) (id False))) ((\a -> seq a ((!!) (undefined::[] ([] (Int -> Bool -> Bool))) 1)) ((\a -> seq a ([]::[] ([] Int))) False))
\a -> map (\b -> head a) a
(++) ((\a -> map (\b -> seq a (undefined::Bool -> Int) (seq b a)) (head (seq a (seq a ([]::[] ([] (([] (Int -> Bool)) -> [] ([] Bool)))))))) ((\a -> seq a (\b -> b ([]::[] Int) (undefined::Int)) (\b -> seq b (seq a odd))) (undefined::(Int -> [] Bool) -> [] ([] ([] (Int -> Int -> Int))))))
(undefined::(([] ([] Bool)) -> [] ([] Bool)) -> ([] Int) -> [] Int) (\a -> a)
(\a -> \b -> seq a ((\c -> seq b (head (undefined::[] (Int -> [] Int))) (id (seq c 1))) (\c -> (\d -> seq c (seq d (undefined::[] (([] Int) -> Bool)))) (seq a (seq a (undefined::Bool)))))) (undefined::([] Int) -> Bool -> Bool -> Bool)
(\a -> \b -> seq b ((enumFromTo::Int -> Int -> [Int]) (undefined::Int)) (seq b (id (seq b (undefined::Bool -> Int)) (seq b a)))) ((!!) ((\a -> a) (id (undefined::[] Bool))) ((undefined::([] (([] Int) -> Int)) -> Int) (id (undefined::[] (([] Int) -> Int)))))
\a -> (!!) (map (\b -> \c -> seq b a) (seq a (seq a (undefined::[] ([] Int))))) (seq a (head ([]::[] (([] Int) -> Int))) a) (head (seq a ([]::[] ((([] Int) -> Bool -> Bool -> Bool) -> Bool))) ((\b -> seq b (\c -> \d -> seq c not)) (undefined::Int)))
head ([]::[] (Int -> ([] Int) -> [] Int)) ((\a -> (\b -> seq b (undefined::Int)) (tail (seq a (undefined::[] (Int -> Int))))) (\a -> (undefined::([] Int) -> Bool)))
(undefined::(([] (([] ([] Int)) -> [] ([] (Int -> Int)))) -> ([] Int) -> Bool) -> ([] Int) -> [] Int) (id (id (\a -> case1 (id (\b -> ((==)::[Int] -> [Int] -> Bool))) (\b -> seq a (seq b (undefined::Bool))) (seq a (seq a (seq a (undefined::[] Int)))))))
\a -> ([]::[] Int)
id (head ([]::[] ((([] (([] Int) -> Int -> Int -> Int)) -> Int -> Bool) -> ([] Int) -> [] Int))) (undefined::([] (([] Int) -> Int -> Int -> Int)) -> Int -> Bool)
case1 (\a -> \b -> seq b ((\c -> filter (\d -> seq c (undefined::Bool))) (seq a (undefined::Bool -> ([] Int) -> Int -> Bool) (seq a True)))) (\a -> case1 (seq a (seq a take)) a a) ((\a -> (++) (seq a ([]::[] Int)) (seq a (undefined::[] Int))) (\a -> 2))
(\a -> seq a (\b -> \c -> seq b id)) (head (undefined::[] Bool)) 2 ((\a -> seq a (\b -> seq a True)) ((+) 0 (undefined::Int)) ((undefined::Int -> ([] ([] Int)) -> [] ([] Int)) (undefined::Int)))
(\a -> \b -> seq a ((!!) (take (seq b a) (seq a (undefined::[] ([] Int)))) (seq a a))) (undefined::Int)
\a -> a
\a -> a
\a -> (\b -> seq a (seq a (seq b (undefined::([] Bool) -> Int -> [] Int))) (seq a (tail (undefined::[] Bool)))) (seq a (seq a (seq a (seq a (undefined::Bool -> Int -> Int)) (seq a (seq a (undefined::Bool)))))) (id (\b -> id ((+1) (undefined::Int))) (seq a (\b -> (undefined::([] ([] ([] Bool))) -> [] ([] Bool))) (seq a (seq a (seq a (undefined::Int))))))
\a -> case1 (head (id (undefined::[] ((([] Int) -> Bool) -> ([] (([] Int) -> Bool)) -> [] Int)))) (seq a (undefined::Int -> Bool -> [] Int) 2 ((\b -> seq a b) (seq a (seq a True)))) (undefined::[] (([] Int) -> Bool))
(undefined::(([] Int) -> ([] (([] ([] Int)) -> [] ([] Bool))) -> Bool -> Bool) -> ([] Int) -> [] Int) (undefined::([] Int) -> ([] (([] ([] Int)) -> [] ([] Bool))) -> Bool -> Bool)
\a -> seq a (seq a (seq a ((\b -> id (\c -> a) (seq a (seq b (undefined::([] Int) -> [] (Int -> Bool))))) (seq a (\b -> seq b (\c -> seq b ((++) ([]::[] (Int -> Int)) (undefined::[] (Int -> Int))))) (map (\b -> seq a not) (id (undefined::[] ([] Bool))))))))
\a -> a
(undefined::(([] Int) -> Bool -> Bool) -> Bool -> ([] Int) -> [] Int) (\a -> \b -> seq b (seq b (seq a odd)) (id (seq a (undefined::Int)))) (not ((\a -> (\b -> b) (seq a True)) ((\a -> \b -> seq a (\c -> a)) (head (undefined::[] Int)))))
\a -> (\b -> map (\c -> b) ([]::[] (Int -> [] Bool))) (undefined::Int)
tail
id (\a -> seq a ((++) (undefined::[] Int))) ((undefined::(([] Bool) -> Bool) -> ([] (Int -> Bool)) -> [] (Int -> Bool)) (head ([]::[] ((Bool -> Bool) -> ([] Bool) -> Bool)) (undefined::Bool -> Bool)))
\a -> case1 (seq a ((!!) (id (seq a (undefined::[] (Bool -> ([] Bool) -> [] Int)))) 2)) (id (seq a a)) (seq a ([]::[] Bool))
(\a -> seq a ((\b -> seq b (\c -> \d -> d)) (undefined::Int))) ((undefined::(Bool -> Bool) -> [] ([] Bool)) (\a -> seq a (seq a (seq a a)))) (\a -> ((==)::[Int] -> [Int] -> Bool) (undefined::[] Int) ((:) (seq a (seq a (undefined::Int))) (head ([]::[] ([] Int)))))
\a -> seq a ((undefined::Int -> [] Int) (seq a ((!!) (seq a ((\b -> b) (seq a a))) (undefined::Int))))
head ([]::[] ((([] Int) -> [] (Int -> [] Int)) -> ([] Int) -> [] Int)) (\a -> case1 (seq a (undefined::Bool -> ([] Bool) -> [] (Int -> [] Int))) (seq a (undefined::Bool -> [] (Int -> [] Int)) (seq a (undefined::Bool))) ((\b -> seq b (undefined::[] Bool)) (undefined::Bool)))
\a -> map ((undefined::Int -> (([] (Int -> Int)) -> Int -> Bool) -> Int) (seq a (\b -> seq b (seq b 1)) (seq a (seq a (undefined::Bool))))) (seq a (id (seq a (\b -> seq b (seq a (undefined::[] (([] (Int -> Int)) -> Int -> Bool))))) (undefined::Bool)))
(undefined::(([] Int) -> [] Bool) -> ([] Int) -> [] Int) (\a -> map ((\b -> \c -> b) (seq a (seq a (seq a (undefined::Bool))))) (seq a ((\b -> seq a (seq b ([]::[] ((([] Int) -> Int) -> [] Bool)))) 0)))
filter (\a -> seq a True)
(\a -> seq a (seq a (\b -> \c -> (undefined::([] Int) -> [] Int))) (seq a (head ([]::[] Int))) (seq a (seq a (undefined::(([] ([] Bool)) -> [] Bool) -> Bool)) (\b -> seq b (head b)))) (\a -> seq a (seq a id))
(\a -> \b -> (\c -> seq b (seq c tail)) (seq a ([]::[] Bool))) ((\a -> seq a (seq a (seq a (undefined::Int)))) ((:) 1 (undefined::[] Int))) ((\a -> seq a ((!!) (undefined::[] (([] ([] Int)) -> [] Int))) (seq a (seq a (seq a 2)))) (\a -> True))
\a -> a
(\a -> \b -> seq a (\c -> (undefined::[] Int))) (\a -> seq a ((\b -> seq b a) (seq a (seq a (seq a ([]::[] Bool)))))) (\a -> seq a ((!!) (seq a (seq a (\b -> a)) (odd (seq a 2))) (undefined::Int)))
(\a -> \b -> (undefined::([] ([] ([] (([] Int) -> ([] Int) -> Bool)))) -> [] Int) (seq a (seq b (seq b ([]::[] ([] ([] (([] Int) -> ([] Int) -> Bool)))))))) (((==)::Int -> Int -> Bool) ((\a -> seq a (seq a 0)) (odd (undefined::Int))) ((\a -> a) (undefined::Int)))
(!!) (id ((\a -> seq a (seq a (undefined::Int -> [] (([] Int) -> [] Int)))) (undefined::Bool) ((undefined::(([] Int) -> [] Int) -> Int) (\a -> a)))) ((\a -> (\b -> seq b (seq a (undefined::Int))) (seq a (seq a (seq a True)))) ((\a -> seq a (undefined::[] (Int -> [] Int))) (id (\a -> \b -> False))))
\a -> seq a (undefined::Int -> (([] Int) -> [] (([] Int) -> Bool)) -> [] Int) (seq a ((+) (seq a (seq a (undefined::Int))) (seq a (seq a 1)))) (seq a (seq a (head (seq a (map (undefined::(Bool -> Bool) -> ([] Int) -> [] (([] Int) -> Bool)) (seq a (seq a (undefined::Int -> [] (Bool -> Bool))) 2))))))
id
id
\a -> seq a (\b -> (undefined::Int -> [] Int)) (map (seq a (\b -> \c -> (undefined::[] Bool))) a) (seq a (seq a (seq a (undefined::([] (([] ([] ([] Int))) -> [] ([] ([] Int)))) -> Int))) ((++) ([]::[] (([] ([] ([] Int))) -> [] ([] ([] Int)))) ([]::[] (([] ([] ([] Int))) -> [] ([] ([] Int))))))
(++) (case1 (\a -> seq a (seq a (undefined::([] (([] Int) -> [] ([] Bool))) -> [] Int))) ((undefined::([] (Int -> [] Int)) -> [] Int) ((undefined::Bool -> [] (Int -> [] Int)) (head (undefined::[] Bool)))) ((\a -> (\b -> seq b ([]::[] (([] Int) -> [] ([] Bool)))) a) (head (head (undefined::[] ([] Int))))))
\a -> seq a (seq a ((!!) (seq a ([]::[] (Bool -> [] Int))) ((\b -> seq b 2) (id (undefined::[] (([] Int) -> Bool)))) (seq a (seq a (\b -> (\c -> c 0) (\c -> seq c False))) ((==)::[Int] -> [Int] -> Bool))))
id (\a -> (\b -> id (seq b (\c -> seq a (head ([]::[] ([] Int)))))) ((\b -> seq b (seq a ([]::[] (([] Int) -> Bool)))) (seq a (seq a (\b -> even))))) (\a -> seq a ([]::[] (Int -> Bool)))
\a -> id (\b -> case1 (seq b (\c -> \d -> d)) a (tail (undefined::[] Int))) (seq a (undefined::([] Int) -> ([] (([] (Bool -> Bool)) -> Bool -> Bool)) -> Int -> [] (Int -> [] Int)))
tail
case1 ((\a -> seq a (\b -> \c -> seq b tail) (id (undefined::Int))) (\a -> seq a (id (undefined::(Int -> Bool) -> ([] Int) -> Bool) (\b -> seq b (seq b True))))) ((undefined::Int -> [] Int) (head (undefined::[] Int)))
(\a -> \b -> (!!) (seq b (map (seq b (undefined::Bool -> [] Int)) (seq a (undefined::[] Bool)))) (head (seq a (seq a (seq a b))))) (\a -> (\b -> seq a (\c -> seq a (seq b 0)) False) (seq a (\b -> head (seq a ([]::[] (Bool -> Bool))) b)))
\a -> a
(undefined::([] Int) -> [] Int)
(\a -> (undefined::Int -> ([] Int) -> [] Int) ((\b -> seq b (seq b (seq b 1))) (a ([]::[] Int) (seq a (undefined::Int))))) (\a -> seq a (undefined::Int -> [] Int))
\a -> a
\a -> a
id
(\a -> (\b -> seq a (\c -> \d -> seq b (undefined::[] Int))) (seq a (undefined::[] ([] Bool)))) (\a -> a) ((\a -> seq a (seq a (\b -> seq a True)) (seq a (seq a (seq a 1)))) (undefined::Int -> Bool -> Bool))
\a -> case1 (\b -> head (seq b (seq a (undefined::[] (([] Int) -> Int -> [] Int))))) ((undefined::Int -> Int -> [] Int) (seq a (seq a (undefined::Int)))) (seq a a) (case1 (\b -> \c -> seq a b) (seq a (\b -> 0) (id (undefined::Bool))) (tail a))
\a -> seq a (undefined::Int -> [] Int) (seq a (head (seq a a)))
case1 (head ((:) (\a -> \b -> \c -> b) (undefined::[] (Int -> ([] Int) -> ([] Int) -> [] Int)))) ((undefined::(([] (Int -> [] Bool)) -> Int) -> ([] Int) -> [] Int) ((\a -> seq a (undefined::([] (Int -> [] Bool)) -> Int)) (id 0))) ((\a -> seq a (undefined::Bool -> [] Int) (seq a (undefined::Bool))) (\a -> (\b -> \c -> seq b ([]::[] ([] Int))) (tail (undefined::[] ([] Bool)))))
case1 (\a -> \b -> seq a (seq b (seq a (\c -> \d -> d))) (id (\c -> (undefined::Bool)))) (case1 (\a -> seq a (++)) (\a -> seq a a) ([]::[] Int)) ((undefined::Bool -> Int -> [] (([] ([] Int)) -> Int)) (id (undefined::Bool)) ((\a -> a) 0))
id
\a -> a
id (undefined::(([] ([] Bool)) -> [] ([] (Bool -> Bool))) -> ([] Int) -> [] Int) ((\a -> head (seq a (seq a (seq a (undefined::[] (([] ([] Bool)) -> [] ([] (Bool -> Bool)))))))) (\a -> (undefined::[] Bool)))
\a -> a
(undefined::([] Int) -> [] Int)
(undefined::((([] Int) -> Bool -> Bool -> Bool) -> ([] Int) -> ([] Int) -> [] Int) -> ([] Int) -> [] Int) (\a -> \b -> (:) ((\c -> seq c (\d -> seq a 0) (seq b (undefined::Bool))) (\c -> seq a (\d -> seq b (undefined::[] (Int -> Bool))) ([]::[] Int))))
(:) (undefined::Int)
id
case1 (\a -> case1 (\b -> case1 (\c -> id)) (\b -> seq b (undefined::[] Int))) ((\a -> map (\b -> seq a (seq a b))) ((\a -> seq a True) (id ([]::[] (Bool -> Bool))))) (map (\a -> 0) (undefined::[] ([] ([] (Bool -> Bool)))))
\a -> case1 (seq a (\b -> \c -> tail) ((\b -> b 0) odd)) ((\b -> seq b (undefined::(Int -> [] Bool) -> [] Int)) (seq a (seq a 1)) (\b -> (\c -> seq a c) (seq a ([]::[] Bool)))) (seq a a)
\a -> (++) a a
\a -> seq a (seq a (\b -> (enumFromTo::Int -> Int -> [Int]) (b (seq b a) (b a 1))) (\b -> seq b ((!!) (seq a (seq b (undefined::Int -> [] Int)) (seq a (seq a 1))))) (seq a (seq a (seq a (\b -> \c -> c)) (seq a (seq a (seq a ([]::[] ([] (Int -> Bool)))))) (seq a (seq a (\b -> (undefined::Int))) (\b -> seq b (seq a (seq b (undefined::Bool))))))))
\a -> map (\b -> seq a (seq a (undefined::Bool -> Int)) (even ((+1) (seq b (seq b (seq b 1)))))) (id (map ((\b -> \c -> seq b (undefined::Int -> [] Int)) (seq a (seq a (undefined::Int)))) (seq a (seq a (seq a (seq a (seq a (undefined::[] Bool))))))))
\a -> head ([]::[] ((([] (([] Int) -> [] (Int -> Int))) -> ([] ([] Int)) -> [] Bool) -> [] Int)) (\b -> \c -> seq c ((undefined::(([] (([] (Int -> Int)) -> [] (Int -> Int))) -> Bool) -> [] Bool) (id (\d -> id (undefined::(Bool -> Bool) -> Bool) (\e -> (undefined::Bool))))))
\a -> seq a (seq a (\b -> \c -> a) (seq a (\b -> id 2) a)) ((undefined::([] Bool) -> [] (([] ([] Bool)) -> [] ([] Bool))) (seq a (seq a (seq a (undefined::Bool -> [] Bool))) (seq a False)))
\a -> a
case1 (\a -> (undefined::([] Bool) -> ([] Int) -> [] Int)) (id (id (\a -> tail)) (\a -> (\b -> b a) ((!!) ([]::[] Bool)))) (undefined::[] Bool)
\a -> filter (case1 (\b -> seq b (seq a (seq a (undefined::([] Int) -> Int -> Bool)))) ((undefined::Int -> Int -> Bool) (seq a (undefined::Int))) (seq a a)) (seq a (\b -> seq a (\c -> a) (seq a (undefined::[] ([] ([] Bool))))) (\b -> map (id (undefined::([] ([] ([] Bool))) -> [] Bool)) (seq b (seq b ([]::[] ([] ([] ([] Bool))))))))
\a -> a
(\a -> seq a (\b -> seq b (\c -> case1 take (undefined::[] Int) b) (\c -> \d -> (!!) d c))) (undefined::([] Int) -> Bool -> Bool -> Bool)
tail
\a -> seq a ((\b -> \c -> case1 (undefined::([] Bool) -> ([] ([] Bool)) -> [] Int) (seq b a) ([]::[] ([] Bool))) True (seq a ([]::[] (Int -> [] Int))))
\a -> (enumFromTo::Int -> Int -> [Int]) (seq a ((undefined::(Int -> Int) -> Int) (seq a (\b -> \c -> seq b c) (\b -> (undefined::Bool))))) (seq a ((undefined::Int -> (Int -> Int -> Bool) -> Int) (seq a (seq a (seq a 0)))) (seq a ((==)::Int -> Int -> Bool)))
(undefined::Int -> ([] Int) -> [] Int) ((\a -> \b -> seq a (seq b (undefined::Int))) (((==)::[Int] -> [Int] -> Bool) (undefined::[] Int) (undefined::[] Int)) (((==)::[Int] -> [Int] -> Bool) (undefined::[] Int) (undefined::[] Int)))
take ((\a -> case1 (seq a (undefined::Int -> ([] Int) -> Bool -> Int)) (seq a (undefined::Bool -> Int)) ([]::[] Int)) ((\a -> \b -> seq a (seq a ([]::[] ([] Bool)))) (\a -> seq a (undefined::Int))) (((==)::Int -> Int -> Bool) (head (undefined::[] (Int -> Int)) 1) ((undefined::Bool -> Int) False)))
(:) 0
\a -> seq a (\b -> take (seq b (undefined::Int)) (case1 (seq b (undefined::Bool -> ([] Bool) -> [] Int)) (seq b a) (seq a ([]::[] Bool)))) (head (id (undefined::[] ((([] (Int -> Bool)) -> Int) -> ([] ([] ([] (Int -> Bool)))) -> [] ([] Bool)))))
\a -> (undefined::Bool -> [] Int) (not (seq a (undefined::Bool)))
\a -> seq a ((\b -> \c -> seq b (seq b (seq b (undefined::([] ([] Bool)) -> [] Int))) (head ([]::[] ([] ([] Bool))))) True) ((!!) (map (undefined::Int -> Bool -> Bool -> Bool) (seq a (seq a a))) (head a))
\a -> a
head ([]::[] (Int -> (Int -> Int -> Bool) -> ([] Int) -> [] Int)) ((\a -> seq a (seq a (seq a (undefined::Int)))) (\a -> seq a (undefined::[] (Int -> [] Int)))) ((undefined::Bool -> Int -> Int -> Bool) (undefined::Bool))
(\a -> seq a (seq a (\b -> (undefined::Bool -> ([] Int) -> [] Int))) (even (seq a (undefined::Int))) (seq a False)) (\a -> \b -> seq a (seq a (undefined::(Int -> Bool) -> [] ([] ([] Bool)))) (seq a (undefined::(Bool -> Bool) -> Int -> Bool) (\c -> c)))
\a -> a
(undefined::(([] (Int -> Bool)) -> [] (Int -> Bool)) -> ([] Int) -> [] Int) (\a -> a)
case1 take ((\a -> (\b -> seq b (seq a (undefined::[] Int))) (seq a (seq a (undefined::Bool)))) (undefined::[] (([] (([] ([] Bool)) -> [] Bool)) -> Bool -> Bool)))
\a -> seq a (seq a (undefined::((([] ([] Int)) -> [] ([] (Int -> Bool))) -> ([] ([] ([] Bool))) -> [] (([] Int) -> Bool)) -> [] Int)) (seq a (seq a (seq a (seq a (seq a (undefined::(([] ([] Int)) -> [] ([] (Int -> Bool))) -> ([] ([] ([] Bool))) -> [] (([] Int) -> Bool)))))))
\a -> a
\a -> (\b -> b (case1 (seq a take) a (seq b a)) (seq b ((undefined::([] (Int -> Bool)) -> Int) (seq b ([]::[] (Int -> Bool)))))) (seq a (\b -> (!!) (seq b ((\c -> seq b (seq c ([]::[] (Int -> [] Int)))) (seq b a))) ((\c -> c) (seq a (undefined::Int)))))
(undefined::([] (([] ([] (Int -> Int -> Bool))) -> [] ([] (Int -> Int -> Bool)))) -> ([] Int) -> [] Int) (tail ([]::[] (([] ([] (Int -> Int -> Bool))) -> [] ([] (Int -> Int -> Bool)))))
id ((\a -> seq a (undefined::Int -> Int -> ([] Int) -> [] Int) (seq a a)) ((undefined::([] ([] Bool)) -> Int) ([]::[] ([] Bool))) ((\a -> seq a (seq a (seq a (undefined::Int -> Int)) (seq a (seq a (undefined::Int))))) (\a -> seq a (seq a ((\b -> seq b (undefined::[] (Bool -> Bool))) (seq a (undefined::Bool)))))))
(undefined::([] Int) -> [] Int)
\a -> (!!) (seq a ((!!) (seq a (\b -> seq a ([]::[] ([] ([] Int)))) ((!!) (undefined::[] ([] Bool)))) (case1 (undefined::Bool -> ([] Bool) -> Int) (undefined::Int) ([]::[] Bool)))) ((\b -> seq b (seq a (seq a (undefined::Bool -> Int)))) (\b -> (undefined::[] Bool)) (seq a (\b -> seq a (seq a (undefined::Bool))) (seq a (seq a (\b -> b)))))
(undefined::((Int -> Int -> ([] Int) -> Bool) -> Int -> ([] Int) -> Bool) -> ([] Int) -> [] Int) (\a -> \b -> seq b (\c -> a b (seq a b) c))
\a -> a
\a -> (undefined::[] Int)
\a -> a
(undefined::(([] Int) -> [] (Int -> Int)) -> Bool -> ([] Int) -> [] Int) (\a -> seq a (seq a (\b -> seq b (undefined::[] (Int -> Int)))) (\b -> b)) ((!!) (undefined::[] (Int -> Bool)) (undefined::Int) ((\a -> seq a ((+1) 0)) (undefined::Int -> [] Int)))
(\a -> seq a (seq a (seq a (\b -> \c -> \d -> d) (seq a (seq a (seq a (undefined::Int))))) (undefined::Int))) (take ((\a -> seq a (seq a (undefined::Int))) (undefined::[] ([] ([] Int)))) (map (\a -> tail) ([]::[] ([] Bool))))
(!!) ([]::[] ((Int -> ([] Int) -> Bool) -> ([] Int) -> [] Int)) 2 ((\a -> \b -> case1 (\c -> (undefined::([] Bool) -> ([] Int) -> Bool)) (undefined::([] Int) -> Bool) (seq a ([]::[] Bool))) (\a -> map (seq a (\b -> True)) (tail ([]::[] Bool))))
\a -> ([]::[] Int)
id (undefined::(([] Int) -> ([] ([] ([] (Int -> Bool)))) -> [] ([] ([] (Int -> Bool)))) -> ([] Int) -> [] Int) (\a -> \b -> b)
\a -> seq a ((undefined::(([] Int) -> [] ([] Int)) -> [] Int) (undefined::([] Int) -> [] ([] Int)))
tail
\a -> case1 (id take) a (seq a (id (undefined::Bool -> [] Int) (seq a (seq a (seq a (seq a False))))))
\a -> seq a (id (\b -> a)) (seq a (id ((\b -> seq b (seq a (+1))) (seq a ((\b -> seq a (seq b ([]::[] Bool))) (head ([]::[] Bool)))))))
(!!) (filter ((\a -> seq a (\b -> seq a True)) (id 1)) ((!!) (undefined::[] ([] (([] Int) -> [] Int))) 0)) ((\a -> (\b -> seq b (seq a (undefined::Int))) (seq a (head (undefined::[] ([] ([] Bool)))))) (\a -> seq a (map (\b -> seq a (undefined::[] ([] Bool))) (seq a ([]::[] (([] ([] Int)) -> Int))))))
(undefined::Bool -> ([] Int) -> [] Int) ((undefined::([] (([] Int) -> [] Int)) -> Bool -> Bool) (tail ([]::[] (([] Int) -> [] Int))) ((\a -> a) True))
(\a -> seq a ((!!) (seq a (undefined::(Int -> Int) -> [] (([] Int) -> [] Int)) (id (seq a (+1)))) (seq a (seq a (seq a (undefined::Bool -> Int)) False)))) ((undefined::Bool -> Bool -> ([] ([] Bool)) -> [] ([] Bool)) (undefined::Bool) (undefined::Bool))
filter (id (\a -> seq a (head ([]::[] ((Int -> ([] Int) -> Bool) -> Int -> Bool))) (seq a (seq a (\b -> \c -> (undefined::([] Int) -> Bool)) (head ([]::[] ([] Bool)))))) (head ([]::[] ([] (Int -> Bool)))))
(undefined::(([] ([] (([] Int) -> ([] Int) -> [] Int))) -> [] (Int -> Bool)) -> ([] Int) -> [] Int) (\a -> map (undefined::(([] Int) -> [] (Int -> Int)) -> Int -> Bool) ((\b -> seq b ([]::[] (([] Int) -> [] (Int -> Int)))) (seq a ([]::[] Int))))
\a -> map ((undefined::Bool -> (([] (Int -> Bool)) -> Int -> Bool) -> Int) (id (\b -> seq b (undefined::Bool)) (seq a (undefined::[] ([] Bool))))) (seq a ((\b -> seq b (seq a (undefined::[] (([] (Int -> Bool)) -> Int -> Bool)))) (seq a (case1 (undefined::Int -> ([] Int) -> Int) (undefined::Int) a))))
head (id ([]::[] ((([] (([] ([] Int)) -> [] Int)) -> ([] ([] Int)) -> [] Int) -> ([] Int) -> [] Int))) (\a -> seq a (seq a (head a)))
(\a -> seq a ((:) (a (head (undefined::[] (Int -> Int)) (a (undefined::Int)))))) (\a -> seq a a)
(undefined::([] Int) -> [] Int)
(undefined::(([] Int) -> ([] ([] Bool)) -> ([] Int) -> [] ([] Bool)) -> ([] Int) -> [] Int) ((!!) (undefined::[] (([] Int) -> ([] ([] Bool)) -> ([] Int) -> [] ([] Bool))) ((undefined::Bool -> Int) False))
(\a -> \b -> seq b ((undefined::Int -> [] Int) (seq b (\c -> seq c c) a))) ((\a -> \b -> seq a b) (\a -> a) ((\a -> seq a (seq a (seq a (undefined::Int)))) (\a -> odd a)))
\a -> seq a (case1 (\b -> (undefined::([] ([] ([] ([] Bool)))) -> [] Int)) a (seq a (\b -> (undefined::Int -> [] ([] ([] ([] Bool))))) (undefined::Bool) (seq a (seq a 2))))
id (undefined::(([] Int) -> Int -> Int -> [] Int) -> ([] Int) -> [] Int) (head (map (undefined::Bool -> ([] Int) -> Int -> Int -> [] Int) (tail ((\a -> seq a ([]::[] Bool)) (undefined::Bool)))))
(\a -> \b -> (++) ((undefined::(Int -> Bool -> Bool) -> [] Int) (\c -> seq a (\d -> d))) b) ((undefined::(Int -> Int -> Bool) -> Bool) ((undefined::Bool -> Int -> Int -> Bool) (id False)))
(++) (map ((\a -> \b -> \c -> seq a (undefined::Int)) (id (undefined::[] Bool)) False) ((undefined::Int -> [] ([] (Bool -> Bool))) ((\a -> seq a 2) (head (undefined::[] ([] Int))))))
\a -> (!!) ([]::[] ((([] ([] Int)) -> [] ([] ([] Int))) -> [] Int)) ((\b -> seq b (seq b 1)) (undefined::[] Bool)) (\b -> seq b (\c -> ([]::[] ([] ([] Int)))) (\c -> 2))
\a -> a
\a -> a
(\a -> \b -> (\c -> seq c (seq b (\d -> ([]::[] Int))) (undefined::Int)) (seq a (seq a (\c -> seq c (undefined::([] Int) -> [] ([] Bool)))) b)) (\a -> (undefined::(([] Int) -> [] ([] Int)) -> [] ([] (Bool -> Bool))) ((\b -> seq b (seq b (\c -> ([]::[] ([] Int))))) (seq a (seq a (seq a even)))))
(undefined::([] Int) -> [] Int)
id
\a -> seq a (seq a (id (seq a (seq a (head (id (seq a (undefined::[] ((Int -> ([] ([] ([] Bool))) -> [] ([] ([] Bool))) -> [] Int))))))) (\b -> seq a (\c -> seq b (\d -> (undefined::[] ([] ([] Bool)))) (seq c (id even) b)))))
(undefined::(([] (Int -> Bool)) -> Int -> Bool) -> ([] Int) -> [] Int) ((\a -> \b -> seq a (\c -> seq c even) (odd (seq b (undefined::Int)))) ((\a -> seq a (undefined::([] Int) -> [] (Int -> Int))) 0))
(\a -> (undefined::([] (([] Int) -> [] Int)) -> ([] Int) -> [] Int) (map (seq a (seq a (undefined::Bool -> ([] Int) -> [] Int))) (seq a ([]::[] Bool)))) (id (\a -> (undefined::([] (([] Int) -> Bool)) -> [] (Bool -> Bool)) (seq a (\b -> seq b (undefined::[] (([] Int) -> Bool))) (seq a (seq a (seq a (undefined::Int)))))))
(\a -> seq a (seq a (\b -> (undefined::(([] Int) -> Int -> Bool) -> [] Int) (\c -> seq c (seq a (\d -> even) (seq b (seq a (undefined::Bool)))))))) ((undefined::Bool -> [] (([] (Int -> ([] Int) -> Bool)) -> [] Bool)) ((!!) (tail ([]::[] Bool)) (head (undefined::[] Int))))
(\a -> seq a ((undefined::Int -> Bool -> ([] Int) -> [] Int) (seq a (seq a (seq a 1))) a)) ((\a -> (!!) (seq a (seq a ([]::[] Bool))) 0) True)
id
(\a -> \b -> filter (seq a (seq b (\c -> seq a (undefined::Bool)))) (seq b b)) (case1 (\a -> (undefined::([] ([] Int)) -> Int)) 0 (case1 (\a -> \b -> ([]::[] ([] Int))) (undefined::[] ([] Int)) ([]::[] Int)))
\a -> a
\a -> map (\b -> seq b ((!!) (seq b (undefined::[] ((([] ([] Int)) -> [] Int) -> Int))) (head a) (seq b (\c -> a)))) (map (seq a (undefined::Int -> [] (([] ([] ([] Bool))) -> [] ([] ([] Bool))))) a)
head ([]::[] ((([] (([] Int) -> Int)) -> ([] Int) -> [] ([] Int)) -> ([] Int) -> [] Int)) (\a -> seq a (\b -> \c -> (undefined::([] Int) -> [] ([] Int))) (seq a (head ([]::[] Int))) False)
(\a -> case1 (seq a (\b -> seq b (undefined::Int -> ([] Int) -> [] Int)) (seq a (head (undefined::[] Bool)))) (seq a ((\b -> seq b (seq a ([]::[] Int))) (seq a True)))) (undefined::Int)
\a -> (\b -> seq b (seq b (seq b (id (undefined::([] ([] Bool)) -> Bool -> [] Int) ([]::[] ([] Bool)))))) (undefined::Int) ((\b -> seq a (seq b (seq b (seq a (\c -> c) (even (undefined::Int)))))) (seq a (\b -> seq b (\c -> ([]::[] ([] ([] Int))))) ((+) (undefined::Int) (undefined::Int))))
\a -> (\b -> seq b (map (\c -> seq b (seq c 0)) (seq a (seq a (tail ([]::[] (([] ([] Int)) -> [] (([] Int) -> Bool)))))))) (seq a (\b -> \c -> (undefined::[] (Bool -> Bool))))
(\a -> seq a (seq a (\b -> seq a (\c -> c)))) ((\a -> seq a (id 2)) (id (undefined::[] (Bool -> Bool)))) ((\a -> (undefined::(Int -> Int) -> ([] Int) -> Bool -> Bool) (seq a (\b -> (undefined::Int)))) (head (id (undefined::[] (([] (([] Bool) -> Bool)) -> Bool -> Bool)))))
(!!) (undefined::[] (Int -> Bool -> ([] Int) -> [] Int)) 2 ((+) (head (undefined::[] Int)) (undefined::Int)) (case1 (\a -> \b -> True) (((==)::Int -> Int -> Bool) 2 (undefined::Int)) ([]::[] Int))
filter (\a -> case1 (seq a ((undefined::([] (Bool -> Bool)) -> Int -> ([] Int) -> Bool) ((\b -> seq b (undefined::[] (Bool -> Bool))) a))) (seq a (undefined::(([] Int) -> ([] Int) -> Bool -> Bool) -> Bool) (head (undefined::[] (([] Int) -> ([] Int) -> Bool -> Bool)))) (undefined::[] Int))
(undefined::(([] ([] (([] Int) -> ([] Int) -> Bool))) -> [] ([] (([] Int) -> ([] Int) -> Bool))) -> ([] Int) -> [] Int) id
(:) ((undefined::(([] ([] Int)) -> [] (([] Int) -> Bool)) -> Int) ((undefined::Int -> ([] ([] Int)) -> [] (([] Int) -> Bool)) (head ((undefined::Bool -> [] Int) (undefined::Bool)))))
tail
\a -> id (seq a (seq a (seq a (\b -> seq a a)))) ((undefined::(([] Int) -> [] (Int -> [] Int)) -> ([] Bool) -> [] (Bool -> Bool)) (\b -> (undefined::(Int -> Int) -> [] (Int -> [] Int)) (seq b (\c -> seq b c))))
\a -> (enumFromTo'::Int -> Int -> [Int]) (seq a (\b -> \c -> c) (seq a (seq a (seq a 0))) ((+1) ((undefined::(Int -> [] Int) -> Int) (seq a (undefined::Int -> [] Int))))) (seq a ((+1) (case1 (\b -> \c -> seq a (seq b 2)) (seq a (undefined::Int)) (seq a (seq a (seq a (undefined::[] ([] Bool))))))))
case1 (undefined::Int -> ([] Int) -> Int -> ([] Int) -> [] Int) ((!!) (head (undefined::[] ([] (([] Int) -> [] Int))))) ((\a -> seq a ([]::[] Int)) (undefined::Bool)) 2
filter ((\a -> seq a (\b -> seq b (seq b (\c -> seq a (undefined::Bool)) ((!!) (undefined::[] ((Int -> Int) -> Bool -> Bool)) b)))) (head ([]::[] (Bool -> ([] ([] ([] Int))) -> [] ([] ([] Bool)))) True))
\a -> seq a a
\a -> a
(\a -> \b -> seq a (map (\c -> seq a (seq b (seq b (seq c 1)))) (map (undefined::([] Int) -> ([] ([] Bool)) -> [] Bool) (seq b ([]::[] ([] Int)))))) (\a -> a)
id (\a -> \b -> (undefined::[] Int)) ([]::[] (([] (([] Int) -> ([] Bool) -> [] Bool)) -> Int -> [] Int))
\a -> seq a (seq a ((:) (seq a (seq a (case1 (seq a (\b -> \c -> seq c (undefined::Int))) (seq a (seq a (seq a (undefined::Int)))) (id (seq a ([]::[] Bool)))))) (seq a (seq a (seq a ((!!) (seq a (seq a ([]::[] ([] Int)))))) (seq a (undefined::Int))))))
id (\a -> seq a ((!!) ([]::[] (([] Int) -> [] Int)) (seq a (\b -> seq b (undefined::Int)) (seq a (seq a (undefined::[] Int)))))) (\a -> \b -> seq b (seq b (seq b (seq a (\c -> seq a (undefined::Int -> [] Int) b)) (id (seq a (\c -> seq b (\d -> 1)))))))
\a -> seq a (\b -> seq a a) (seq a id)
\a -> a
\a -> seq a ((undefined::(([] Int) -> [] ([] Int)) -> ([] ([] ([] Bool))) -> [] Int) (\b -> tail ((undefined::([] ([] Int)) -> [] ([] Int)) (seq a (seq a (undefined::[] ([] Int))))))) (seq a ((undefined::Bool -> [] ([] ([] Bool))) (seq a ((\b -> seq a (seq b (undefined::Bool))) (\b -> id a)))))
\a -> seq a (map (\b -> (!!) (undefined::[] ((([] Int) -> ([] Int) -> Bool) -> Int)) (id (undefined::Int)) (\c -> seq b (seq c (case1 (\d -> (undefined::([] Int) -> Bool)) (seq c False))))) (seq a (id (seq a (seq a (seq a (map (\b -> \c -> tail (undefined::[] ([] (Int -> Int)))) (seq a ([]::[] Int)))))))))
(undefined::([] Int) -> [] Int)
(\a -> \b -> id ((\c -> map (\d -> seq c (undefined::Int)) (seq b (undefined::[] Bool))) (seq b ((\c -> seq c (seq c (undefined::(Int -> Int) -> [] ([] Bool)))) (seq a (seq a (undefined::Int))))))) (\a -> seq a ((undefined::([] ([] Bool)) -> Int -> [] Int) (undefined::[] ([] Bool)) (seq a (undefined::Int))))
(\a -> seq a (\b -> \c -> seq c id)) True (case1 (undefined::Bool -> ([] Bool) -> Int) (undefined::Int) (undefined::[] Bool)) ((\a -> a (head (undefined::[] ([] (([] Int) -> [] (Int -> Bool))))) (seq a (a (undefined::[] (([] Int) -> [] (Int -> Bool))) (undefined::Bool)))) (undefined::([] (([] Int) -> [] (Int -> Bool))) -> Bool -> Bool))
head (id ([]::[] ((([] ([] ([] (Int -> Int)))) -> ([] Int) -> [] Bool) -> ([] Int) -> [] Int))) (undefined::([] ([] ([] (Int -> Int)))) -> ([] Int) -> [] Bool)
\a -> seq a ((\b -> filter (\c -> b a ([]::[] (([] Int) -> ([] Int) -> [] Int))) (undefined::[] Int)) (seq a (\b -> (\c -> \d -> seq c (seq d (undefined::(Int -> Int) -> Bool)) (\e -> id c)) (seq b (\c -> seq c 0) (\c -> seq a (seq a ([]::[] Bool)))))))
\a -> id (seq a (undefined::(([] Int) -> ([] (([] Int) -> Int -> Bool)) -> [] ([] Int)) -> [] Int)) (\b -> (undefined::([] (([] Int) -> Int -> Bool)) -> [] ([] Int)))
id (\a -> id) (\a -> seq a ((\b -> seq a (seq b (seq a (undefined::Bool -> [] (([] Int) -> Bool))) (seq b True))) (seq a (head (seq a ([]::[] (Int -> Int))) (id (seq a 2))))))
(undefined::([] Int) -> [] Int)
(undefined::([] ([] Int)) -> ([] Int) -> [] Int) ((\a -> seq a ([]::[] ([] Int))) (case1 (\a -> seq a (\b -> a)) (head (undefined::[] ([] Int)))))
tail
(\a -> \b -> (\c -> (undefined::([] ([] ([] ([] Bool)))) -> [] Int) (seq a (seq c (undefined::[] ([] ([] ([] Bool))))))) (undefined::[] (([] Int) -> Bool))) (head (take ((\a -> a) (undefined::Int)) (undefined::[] ((([] Int) -> Bool -> Bool) -> ([] Int) -> [] ([] Bool)))))
\a -> seq a (seq a (undefined::(([] ([] (Bool -> Bool))) -> ([] (([] ([] Bool)) -> [] ([] (Bool -> Bool)))) -> Bool -> Bool) -> [] Int)) (\b -> (undefined::Int -> ([] (([] ([] Bool)) -> [] ([] (Bool -> Bool)))) -> Bool -> Bool) (case1 (seq b (undefined::Bool -> ([] Bool) -> Int)) (seq a (undefined::Int)) (seq a (undefined::[] Bool))))
\a -> ([]::[] Int)
(\a -> seq a ((\b -> seq b (\c -> tail) (undefined::Int)) (seq a (head ([]::[] (Int -> ([] Int) -> Int -> Bool)) (seq a (a (seq a ([]::[] Int)))))))) (id ((\a -> \b -> \c -> seq a (undefined::Int)) True ((\a -> seq a (seq a (undefined::Bool))) (head (undefined::[] ([] Int))))))
(undefined::([] Int) -> [] Int)
id (\a -> seq a (\b -> seq b b)) (\a -> seq a (seq a (seq a (map (seq a (\b -> seq b (\c -> tail ([]::[] Int)))) (seq a (undefined::Bool -> [] (([] ([] Bool)) -> [] Bool)) (seq a (seq a False)))))))
(undefined::([] Int) -> [] Int)
\a -> a
(\a -> seq a (seq a (\b -> (undefined::Bool -> ([] Int) -> [] Int)))) False (not (((==)::Int -> Int -> Bool) (undefined::Int) (head ([]::[] Int)))) (head (undefined::[] (Int -> Bool)) ((undefined::([] ([] ([] (Bool -> Bool)))) -> Int) ([]::[] ([] ([] (Bool -> Bool))))))
case1 (\a -> (undefined::([] Int) -> Int -> ([] Int) -> [] Int)) ((!!) (undefined::[] (Int -> ([] Int) -> [] Int)) (undefined::Int)) ((++) ([]::[] Int) (undefined::[] Int)) (head ((:) (\a -> seq a (undefined::Int)) ([]::[] ((Int -> ([] Int) -> Bool) -> Int))) (undefined::Int -> ([] Int) -> Bool))
(undefined::(([] Int) -> ([] ([] (Int -> Bool))) -> [] ([] (Int -> Bool))) -> ([] Int) -> [] Int) (undefined::([] Int) -> ([] ([] (Int -> Bool))) -> [] ([] (Int -> Bool)))
case1 ((!!) ((undefined::Int -> [] (([] Int) -> ([] Int) -> [] Int)) ((\a -> seq a (undefined::Int)) (\a -> ([]::[] Bool))))) (\a -> ([]::[] Int)) ((\a -> seq a (\b -> (undefined::[] Int)) (seq a (seq a False))) ((\a -> seq a (undefined::Int)) (odd (undefined::Int))))
\a -> seq a (case1 (undefined::Bool -> ([] Bool) -> (Int -> Int) -> [] Int) (\b -> a) (seq a (undefined::Int -> [] Bool) (undefined::Int)) (undefined::Int -> Int))
\a -> case1 (seq a (undefined::Bool -> ([] Bool) -> ([] ([] Bool)) -> [] Int) (seq a True)) (id (\b -> seq a (seq b a)) False) ((!!) (seq a (seq a (seq a (undefined::[] ([] ([] Bool)))))) (seq a (seq a 1)))
\a -> (++) (case1 (\b -> seq a id) a (seq a (undefined::Bool -> [] Int) (undefined::Bool))) (seq a (seq a (\b -> (undefined::[] Int)) 2))
\a -> a
\a -> seq a a
\a -> seq a (seq a (seq a (id (\b -> \c -> (:) (undefined::Int) ([]::[] Int))) (seq a (seq a (\b -> (undefined::Bool)) (\b -> seq a (seq b (undefined::Int))))) ((undefined::([] Int) -> Int -> [] ([] ([] (Bool -> Bool)))) (undefined::[] Int) 1)))
(\a -> (undefined::(([] Int) -> ([] Int) -> [] ([] Int)) -> ([] Int) -> [] Int) (seq a (\b -> id (seq a (seq a (\c -> seq a (seq c (undefined::[] ([] Int))))))))) (\a -> seq a (seq a ((\b -> \c -> \d -> (undefined::Int -> ([] Int) -> Int) (seq d (seq b 0))) ((\b -> seq b (seq a (undefined::Int))) a))))
id (head ((!!) ((:) (undefined::[] (Bool -> ([] Int) -> [] Int)) (undefined::[] ([] (Bool -> ([] Int) -> [] Int)))) ((\a -> seq a (undefined::Int)) (head (undefined::[] Bool))))) ((\a -> \b -> seq a (seq a True)) 1 (case1 (\a -> \b -> 0) (undefined::Int) (undefined::[] Int)))
(\a -> \b -> case1 (\c -> take (undefined::Int)) (seq b (undefined::Int -> [] Int) (seq b a)) b) ((\a -> seq a (seq a (\b -> seq b (undefined::Int))) (seq a (\b -> a (undefined::[] Int) b 2))) (\a -> seq a (undefined::(Int -> Bool) -> Int -> Int -> Int) (\b -> seq b (seq b (undefined::Bool)))))
(\a -> seq a ((\b -> \c -> take b c) ((undefined::(Int -> Int) -> Int) ((+) (seq a (undefined::Int)))))) (id (undefined::(([] Int) -> [] (Int -> Bool)) -> ([] ([] Bool)) -> [] ([] Bool)))
head ((\a -> seq a ((\b -> head ([]::[] (Bool -> [] (([] Int) -> [] Int))) (seq b (undefined::Bool))) even)) (case1 ((undefined::Bool -> Bool -> ([] Bool) -> Bool) (undefined::Bool)) (undefined::Bool) (undefined::[] Bool)))
(\a -> seq a (seq a ((++) (a ((undefined::([] ([] (Int -> Bool))) -> [] ([] Int)) (id (undefined::Int -> [] ([] (Int -> Bool))) (seq a (seq a (undefined::Int))))))))) (id (\a -> seq a (\b -> (undefined::([] ([] Int)) -> [] Int)) (seq a (seq a (undefined::Int)))) ((undefined::(Int -> [] Int) -> [] ([] (Bool -> Bool))) (\a -> ([]::[] Int))))
\a -> a
id (undefined::(([] ([] (([] Int) -> [] Int))) -> [] (([] Int) -> [] Int)) -> ([] Int) -> [] Int) (undefined::([] ([] (([] Int) -> [] Int))) -> [] (([] Int) -> [] Int))
(!!) ([]::[] ((([] Int) -> Bool) -> ([] Int) -> [] Int)) ((\a -> a) (head (undefined::[] Int))) (case1 (undefined::Bool -> ([] Bool) -> ([] Int) -> Bool) (\a -> (\b -> seq b False) (seq a 2)) ((!!) (undefined::[] ([] Bool)) 2))
(++) (case1 (\a -> seq a (seq a (\b -> b))) (filter (\a -> seq a (seq a (seq a False))) ([]::[] Int)) ((\a -> seq a (head (seq a ([]::[] ([] Int))))) ((\a -> seq a 2) (undefined::Int -> Bool -> Bool))))
\a -> a
(\a -> \b -> id (\c -> id) (seq a (seq a (seq b (undefined::Int))))) ((&&) (undefined::Bool) (odd (undefined::Int))) ((\a -> (\b -> seq b ([]::[] (Int -> Int))) a) (head ([]::[] (Bool -> Int)) True))
(\a -> seq a (\b -> seq b (seq b (undefined::[] Int)))) ((undefined::([] Bool) -> ([] Int) -> Int -> Int -> Int) (id (\a -> seq a (undefined::[] Bool)) (\a -> (undefined::Int -> [] Int))))
(undefined::([] Int) -> [] Int)
(\a -> seq a (\b -> seq a (take (id (seq a 0)))) (take (seq a (undefined::Bool -> Int) (a (seq a ([]::[] Int)))))) ((undefined::(([] ([] Int)) -> [] Bool) -> ([] Int) -> Bool) (\a -> seq a (seq a (\b -> ([]::[] Bool)) (seq a (seq a True)))))
head (tail (undefined::[] ((([] Int) -> Bool -> Bool -> Bool) -> ([] Int) -> [] Int))) (\a -> case1 (id (\b -> \c -> seq c (undefined::Bool -> Bool -> Bool))) (undefined::Bool -> Bool -> Bool) ((\b -> seq b a) False))
case1 ((\a -> \b -> seq a (head (undefined::[] (([] Int) -> ([] Int) -> [] Int)))) ((\a -> seq a ([]::[] Int)) 0)) (\a -> ([]::[] Int)) ([]::[] Int)
map (\a -> (!!) (seq a ([]::[] ((([] ([] ([] Bool))) -> [] ([] ([] Bool))) -> Int))) (seq a a) (\b -> map (seq a (\c -> (undefined::Int -> [] ([] Bool))) a) (seq a (seq b (seq b (seq a (seq b (seq b ([]::[] Int)))))))))
\a -> seq a (seq a (\b -> map (\c -> c (seq b (undefined::Int -> [] ([] (Int -> Int))) (undefined::Int))) (undefined::[] (([] ([] (Int -> Int))) -> Int)))) (seq a (seq a (\b -> \c -> (undefined::Int -> Int -> ([] Bool) -> [] (Bool -> Bool)) c (seq a (seq b (seq c c))))))
(\a -> seq a ((\b -> seq b (\c -> seq c tail) (\c -> 0)) (id (\b -> seq b (seq a (seq a (undefined::[] ([] (Bool -> Bool))))))))) (\a -> seq a a)
case1 (head ([]::[] ((Bool -> Bool) -> ([] (Bool -> Bool)) -> ([] Int) -> [] Int))) ((\a -> seq a (head (undefined::[] (([] Int) -> [] Int)))) head) ((\a -> seq a (undefined::Bool -> [] (Bool -> Bool))) (id (undefined::Bool)) False)
\a -> seq a (\b -> id a) (seq a (seq a (\b -> head a)) (seq a (seq a (seq a (\b -> (:) (\c -> c) (seq b (undefined::[] (Bool -> Bool))))))))
(undefined::([] Int) -> [] Int)
(!!) (head (tail ((\a -> seq a (seq a (undefined::[] ([] (([] Int) -> [] Int))))) ((\a -> seq a (seq a True)) (undefined::[] Int))))) ((undefined::(Int -> [] Int) -> Int) (\a -> ([]::[] Int)))
(\a -> case1 (seq a (seq a (undefined::Bool -> ([] Bool) -> ([] Int) -> [] Int))) (seq a (\b -> b)) (seq a (seq a (undefined::[] Bool)))) (undefined::[] (([] (([] ([] Int)) -> [] ([] Int))) -> Int -> Bool))
(\a -> seq a (seq a ((undefined::Bool -> ([] Int) -> [] Int) (undefined::Bool)))) ((\a -> seq a ((\b -> seq b (\c -> b)) (\b -> seq a (seq b (undefined::Bool))))) (map (undefined::Int -> ([] Int) -> Bool) ([]::[] Int)))
(:) ((undefined::Bool -> (Bool -> Int) -> Int) (undefined::Bool) (case1 (\a -> seq a (\b -> \c -> seq c 0)) (\a -> seq a 1) ((\a -> seq a (undefined::[] (Bool -> Bool))) True)))
(undefined::(([] (([] Int) -> [] Int)) -> ([] ([] Int)) -> [] Bool) -> ([] Int) -> [] Int) ((\a -> seq a (\b -> (\c -> seq c (\d -> ([]::[] Bool))) (seq a (seq b ([]::[] ([] Bool)))))) (case1 (\a -> seq a (undefined::([] Bool) -> Bool)) True (undefined::[] Bool)))
head ([]::[] ((Int -> ([] ([] ([] (Int -> Bool)))) -> [] ([] ([] (Int -> Bool)))) -> ([] Int) -> [] Int)) (\a -> id)
id (\a -> tail) (undefined::([] (([] ([] Int)) -> [] ([] Int))) -> Int)
(\a -> \b -> seq b (seq a (seq b take)) (seq a (seq b (seq b 0)))) (id ((\a -> seq a (seq a ([]::[] Int))) (undefined::Bool))) (id (undefined::(Bool -> ([] Int) -> Bool) -> ([] Bool) -> Bool) (\a -> (\b -> \c -> seq b a) (seq a (seq a (undefined::[] ([] (Int -> [] Int)))))))
(\a -> seq a (\b -> \c -> seq b ((undefined::Int -> [] Int) (seq b (seq c 0))))) ((\a -> a) ((!!) ([]::[] Bool) 2)) (case1 (\a -> (undefined::([] Int) -> ([] Int) -> Bool -> Bool)) ((\a -> seq a (undefined::([] Int) -> Bool -> Bool)) (undefined::Bool)) (take (undefined::Int) (undefined::[] Int)))
(undefined::([] Int) -> [] Int)
\a -> seq a a
(\a -> seq a tail) (id (\a -> seq a ([]::[] (([] (([] Int) -> Int -> Int)) -> Int -> Int))) ((\a -> seq a (seq a (seq a 2))) (\a -> seq a (seq a (\b -> b)))))
case1 (\a -> \b -> (undefined::([] Int) -> [] Int)) (\a -> case1 (head ([]::[] (Bool -> ([] Bool) -> [] Int))) (undefined::[] Int) (undefined::[] Bool)) (map (undefined::(Bool -> Bool -> Bool) -> Int) (filter (undefined::(Bool -> Bool -> Bool) -> Bool) (undefined::[] (Bool -> Bool -> Bool))))
(\a -> case1 (\b -> \c -> tail) (undefined::([] Int) -> [] Int) (seq a (seq a (head (undefined::[] ([] Int)))))) ((!!) (undefined::[] (([] ([] (([] Bool) -> Bool))) -> [] (([] Bool) -> Bool))) (undefined::Int))
\a -> seq a ([]::[] Int)
\a -> a
\a -> a
id (\a -> a)
(:) ((undefined::([] ([] Int)) -> Bool -> Int) (map (\a -> seq a (undefined::[] Int)) (id ([]::[] (([] Int) -> [] Bool)))) ((\a -> seq a (seq a (seq a (seq a (undefined::Int -> Bool) (undefined::Int))))) (map ((!!) (undefined::[] ([] ([] (([] Int) -> [] Int))))) (undefined::[] Int))))
case1 (undefined::Bool -> ([] Bool) -> ([] Int) -> [] Int) ((\a -> seq a (seq a (seq a tail))) (((==)::Int -> Int -> Bool) (undefined::Int))) (take ((\a -> seq a 1) (undefined::([] ([] Int)) -> Bool)) ((\a -> seq a ([]::[] Bool)) (undefined::Int)))
\a -> a
\a -> a
\a -> (undefined::[] Int)
\a -> a
(undefined::([] Int) -> Bool -> ([] Int) -> [] Int) ((\a -> seq a (seq a (seq a (undefined::[] Int)))) ([]::[] ([] Int))) (case1 ((undefined::([] Bool) -> Bool -> ([] Bool) -> Bool) ([]::[] Bool)) ((!!) (undefined::[] Bool) (id 2)) ([]::[] Bool))
(\a -> seq a (\b -> seq b (\c -> seq a (undefined::([] Int) -> [] Int) (seq c b)) ((\c -> seq c (seq a (undefined::[] (([] Bool) -> [] Bool)))) (seq a (seq b (seq b ([]::[] Bool))))))) (undefined::([] ([] ([] ([] Bool)))) -> Int -> [] Int)
(\a -> (\b -> seq a (\c -> \d -> seq d ([]::[] Int)) b) (head (seq a (seq a (\b -> (undefined::[] Int)) ((+1) 1))))) (head ((:) (case1 (\a -> (undefined::([] Int) -> [] (Int -> Bool))) (undefined::[] (Int -> Bool))) ((\a -> seq a (seq a (undefined::[] (([] Int) -> [] (Int -> Bool))))) True)))
(undefined::Bool -> (([] (Int -> Int)) -> Int -> Int) -> ([] Int) -> [] Int) ((\a -> seq a (seq a (seq a (undefined::Bool)))) ([]::[] (Bool -> Bool))) (\a -> (\b -> \c -> seq b (\d -> seq b d)) (((==)::[Int] -> [Int] -> Bool) (undefined::[] Int) ([]::[] Int)) (undefined::[] (Int -> [] Int)))
(\a -> seq a ((\b -> \c -> \d -> b) (seq a (undefined::[] Int))) (seq a ((undefined::(Int -> Bool) -> Bool) (seq a odd)))) (\a -> seq a (map (head (seq a ([]::[] ((([] Int) -> [] Int) -> [] (Int -> Bool))))) (map (:) (tail (undefined::[] Int)))))
(\a -> seq a (seq a (\b -> \c -> id)) (seq a (seq a (seq a (undefined::Int))))) (undefined::([] Int) -> Int -> Bool) (undefined::Int)
\a -> a
(undefined::(([] ([] Bool)) -> [] ([] Bool)) -> Int -> ([] Int) -> [] Int) (\a -> head ([]::[] ([] ([] Bool)))) 0
head ([]::[] (([] Bool) -> Int -> ([] Int) -> [] Int)) (map (\a -> id a) ([]::[] Bool)) ((undefined::(([] (Bool -> Bool)) -> Bool -> Bool) -> Int) ((\a -> \b -> seq b (\c -> seq a c)) ((++) (undefined::[] Bool) (undefined::[] Bool))))
\a -> seq a (seq a (seq a (seq a (\b -> seq a (undefined::Bool -> Bool -> [] Int)) (seq a (seq a (seq a (undefined::[] ([] Bool)))))) (seq a (\b -> seq b True) (id (seq a ([]::[] ([] (Bool -> Bool -> Bool)))))) (undefined::Bool)))
take 0
id
case1 (\a -> id (undefined::([] Int) -> Int -> ([] Int) -> [] Int)) (\a -> seq a (seq a (\b -> seq b b))) ((undefined::Int -> [] Int) 2) ((\a -> a) (\a -> a) ((\a -> a 0) (\a -> 1)))
(:) 1
\a -> (undefined::Int -> Int -> [] Int) (seq a (\b -> b) (seq a (id 2))) (seq a (seq a (seq a (\b -> seq a id) (even (undefined::Int)) 2)))
(\a -> seq a ((\b -> seq b (seq a (seq b (seq b (undefined::Bool -> ([] Int) -> [] Int)) (seq a True)))) (case1 (\b -> (undefined::([] Int) -> Int)) (seq a 0) (seq a (undefined::[] Int))))) (\a -> \b -> filter (seq a (seq b (head (id ([]::[] (([] (Int -> [] Int)) -> Bool)))))) (seq a (undefined::[] ([] (Int -> [] Int)))))
\a -> a
\a -> seq a a
(\a -> seq a (seq a (undefined::([] Int) -> ([] Int) -> [] Int)) ((undefined::((Int -> Int) -> [] ([] ([] Bool))) -> [] Int) (\b -> seq a ([]::[] ([] ([] Bool)))))) ((\a -> seq a (\b -> True) (head (seq a (undefined::[] Int)))) ((!!) (id (undefined::[] Bool)) (undefined::Int)))
\a -> id (seq a (\b -> seq b (\c -> a)) (seq a (head (seq a ([]::[] Bool))))) (seq a (\b -> (!!) (take (seq a (seq a (undefined::Int))) (seq b (undefined::[] Bool))) (seq b ((\c -> seq a (seq c c)) (id (undefined::Int))))))
(!!) ((\a -> seq a (\b -> seq a (undefined::[] (([] Int) -> [] Int))) (seq a (seq a (undefined::Int)))) (\a -> ([]::[] ([] ([] Int))))) ((\a -> \b -> seq a (seq a 0)) (id (\a -> a)) ((\a -> take (seq a 0)) (undefined::Bool)))
id ((++) (undefined::[] Int))
(\a -> (\b -> seq b (seq a (\c -> id))) (seq a ((+1) (undefined::Int))) (\b -> seq b (seq b b))) (\a -> seq a ((\b -> map (\c -> \d -> seq b (undefined::Bool)) (id ([]::[] Int))) ((:) (seq a (undefined::[] ([] Bool))) (seq a (seq a ([]::[] ([] ([] Bool))))))))
(undefined::Bool -> ([] Int) -> [] Int) (id (undefined::(Int -> Int -> ([] (Bool -> Bool)) -> Bool -> Bool) -> Bool) (undefined::Int -> Int -> ([] (Bool -> Bool)) -> Bool -> Bool))
\a -> seq a (seq a (\b -> seq a (seq a (seq a (\c -> a))))) (undefined::([] Int) -> Int) (\b -> \c -> False)
(\a -> \b -> seq b (map (undefined::([] (([] (Int -> Int)) -> [] Bool)) -> Int) (seq a (seq a (seq b (undefined::[] ([] (([] (Int -> Int)) -> [] Bool)))))))) (\a -> seq a (seq a (seq a (undefined::Bool -> (([] Int) -> Int) -> Int))) (not False) (\b -> (\c -> seq c (id a)) (seq a (\c -> seq b (seq c True)))))
id (\a -> id) ((\a -> head ((++) (undefined::[] Int) (seq a ([]::[] Int)))) ((undefined::([] ([] (Int -> Int))) -> Bool) ([]::[] ([] (Int -> Int)))))
(\a -> (\b -> seq a (\c -> seq b tail)) 1) False (undefined::[] ([] Bool))
tail
(\a -> seq a (seq a (\b -> (undefined::([] Int) -> [] Int))) ([]::[] (([] Int) -> Bool))) (map ((\a -> seq a (\b -> seq a (undefined::[] Bool))) True) (undefined::[] ([] ([] (Int -> Int)))))
\a -> seq a (seq a (undefined::Int -> [] Int)) (case1 (seq a (\b -> head)) (head a) a)
id (\a -> seq a (id (undefined::Bool -> Bool -> ([] Int) -> [] Int) (id (seq a False)) ((\b -> b) False))) (head (undefined::[] (([] Int) -> (([] ([] Int)) -> [] Int) -> ([] ([] Int)) -> [] Int)))
\a -> a
id
\a -> a
(\a -> \b -> (undefined::Bool -> (([] ([] Int)) -> [] Int) -> [] Int) (seq a (seq b (seq a (undefined::Bool)))) (\c -> take (seq c 1) b)) (undefined::([] ([] (([] ([] ([] Bool))) -> [] ([] ([] Bool))))) -> [] (Int -> Bool))
\a -> seq a (seq a (seq a ((undefined::Int -> [] Int) (undefined::Int))))
\a -> a
(\a -> seq a ((\b -> seq b (seq b (seq a (undefined::([] Bool) -> ([] Int) -> [] Int)) (seq b (b (undefined::[] ([] Int)))))) (seq a ((\b -> \c -> seq b (undefined::[] Bool)) True)))) ((\a -> seq a (\b -> id ([]::[] ([] (Bool -> Bool)))) (id (seq a a))) ((\a -> seq a (seq a (seq a (undefined::Int)))) ([]::[] Int)))
(\a -> (!!) (map (seq a (undefined::([] Int) -> ([] Int) -> [] Int)) (seq a ([]::[] ([] Int))))) ((\a -> seq a ([]::[] ([] (Int -> Bool)))) (\a -> a)) ((\a -> (undefined::(Int -> Bool) -> Int) (seq a odd)) (undefined::([] Int) -> [] Int))
\a -> seq a ((undefined::Bool -> (([] Int) -> ([] ([] ([] Int))) -> [] ([] Int)) -> [] Int) False (case1 ((!!) ([]::[] (([] Int) -> ([] ([] ([] Int))) -> [] ([] Int)))) (\b -> case1 (\c -> (undefined::([] Bool) -> [] ([] Int))) (seq a (undefined::[] ([] Int))) ([]::[] Bool))))
map (head (undefined::[] ((([] ([] (Int -> Int))) -> (([] Int) -> ([] Int) -> [] Int) -> Bool) -> Int -> Int)) (\a -> \b -> seq b (not ((\c -> seq c False) (\c -> id)))))
filter ((\a -> (\b -> seq b (seq a (seq b (undefined::(([] Bool) -> Bool) -> Int -> Bool)) (undefined::([] Bool) -> Bool))) ((undefined::Bool -> Int -> [] ([] Int)) False)) (\a -> ([]::[] (Int -> Int))))
(undefined::([] Int) -> [] Int)
\a -> a
\a -> a
(undefined::([] Int) -> [] Int)
case1 (undefined::(([] Bool) -> [] Bool) -> ([] (([] Bool) -> [] Bool)) -> ([] Int) -> [] Int) (\a -> (undefined::[] Int)) (map (\a -> seq a (\b -> seq b b)) (undefined::[] Bool))
id ((undefined::Int -> (([] Int) -> [] Int) -> ([] Int) -> [] Int) (head ([]::[] (Bool -> Int)) (odd 0))) (\a -> a)
\a -> map (undefined::(([] Int) -> ([] Int) -> Bool) -> Int) ((\b -> seq a (seq b (id (seq a ([]::[] (([] Int) -> ([] Int) -> Bool)))))) (undefined::[] ([] (Int -> Int))))
(undefined::(([] ([] Int)) -> [] ([] (([] ([] ([] Bool))) -> [] ([] ([] Bool))))) -> ([] Int) -> [] Int) (undefined::([] ([] Int)) -> [] ([] (([] ([] ([] Bool))) -> [] ([] ([] Bool)))))
(!!) (id ([]::[] ((([] ([] Int)) -> [] Int) -> ([] Int) -> [] Int))) (head ([]::[] Int)) ((\a -> seq a (seq a (\b -> filter (\c -> False) (seq a (undefined::[] Int))))) (\a -> not))
\a -> seq a (\b -> seq b a) (seq a (\b -> b) (((==)::[Int] -> [Int] -> Bool) (seq a a) ([]::[] Int)))
\a -> id a
(\a -> seq a (\b -> (\c -> seq c (seq b (seq a (seq a b)))) head)) (id (case1 (undefined::Int -> ([] Int) -> Int -> Bool) (\a -> True) (undefined::[] Int) ((undefined::([] ([] Bool)) -> Int) (tail ([]::[] ([] Bool))))))
(\a -> (\b -> seq a (seq b (undefined::Bool -> ([] Int) -> [] Int)) (undefined::Bool)) (case1 (\b -> seq b head) (seq a (undefined::Bool)) (seq a ([]::[] Bool)))) (undefined::([] Int) -> Int -> [] Int)
(undefined::Int -> (([] Bool) -> [] Bool) -> ([] Int) -> [] Int) (undefined::Int) ((\a -> \b -> seq a (\c -> c)) ((!!) (undefined::[] Int) 1) ((\a -> a) (odd (undefined::Int))))
case1 (\a -> take a) ((++) ([]::[] Int) (head ([]::[] (Bool -> [] Int)) False))
\a -> seq a ((undefined::(([] (([] Int) -> Bool)) -> Bool -> Bool) -> Int -> [] Int) (seq a (undefined::([] (([] Int) -> Bool)) -> Bool -> Bool)) (seq a (case1 (undefined::(Int -> Int) -> ([] (Int -> Int)) -> Int) (seq a (id (seq a 0))) (seq a (seq a ([]::[] (Int -> Int)))))))
(\a -> \b -> \c -> (undefined::(Int -> Int) -> [] Int) (seq a (\d -> b))) (id (\a -> seq a (undefined::[] (([] Bool) -> [] Bool))) False) ((\a -> \b -> seq a (seq b b)) (\a -> seq a a) ((\a -> a) (id (undefined::Int))))
(undefined::(Int -> Int -> [] Int) -> ([] Int) -> [] Int) ((\a -> head ([]::[] (Bool -> Int -> Int -> [] Int)) (seq a (seq a False))) ((\a -> seq a (tail (undefined::[] ([] (Int -> Bool))))) (undefined::(Int -> Int) -> Int)))
\a -> (\b -> seq b a) (seq a (undefined::[] (([] (([] Int) -> ([] Bool) -> [] Bool)) -> Bool)))
\a -> a
(undefined::([] Int) -> [] Int)
(\a -> \b -> seq b (seq b ((undefined::(Bool -> Bool) -> ([] Int) -> [] Int) (seq b (seq a not))))) ((\a -> a) ((+1) (undefined::Int))) (undefined::([] Int) -> [] (Int -> Bool))
\a -> a
\a -> a
\a -> map (seq a (\b -> seq b (seq b (\c -> (undefined::Int)))) (seq a ((undefined::Bool -> [] ([] ([] Bool))) (not (undefined::Bool))))) (seq a (undefined::(Int -> [] Int) -> [] (([] Bool) -> [] (Bool -> Bool))) (\b -> seq a (seq a (\c -> seq a a) (undefined::[] ([] ([] Bool))))))
id (\a -> (undefined::([] Int) -> [] Int)) tail
(undefined::(([] (([] (Int -> Int)) -> Bool)) -> ([] Int) -> [] (Int -> Bool)) -> ([] Int) -> [] Int) (\a -> seq a (head (id ([]::[] (([] Bool) -> ([] Int) -> [] (Int -> Bool))))) (map (undefined::([] (Bool -> Bool)) -> Bool) (seq a (seq a ([]::[] ([] (Bool -> Bool)))))))
id
take (case1 (undefined::Int -> ([] Int) -> Int) ((undefined::Bool -> Int) ((\a -> seq a True) (head (undefined::[] Int)))) (map (head (undefined::[] (Bool -> Int))) (tail (undefined::[] Bool))))
case1 ((!!) (undefined::[] (Bool -> ([] Bool) -> ([] Int) -> [] Int)) ((\a -> seq a (undefined::Int)) (undefined::[] Bool))) (\a -> a) (map (\a -> False) ((!!) (undefined::[] ([] (Bool -> Bool))) 1))
head (head (undefined::[] ([] (([] (([] ([] Bool)) -> [] ([] Bool))) -> ([] Int) -> [] Int)))) ((!!) (take 1 ([]::[] ([] (([] ([] Bool)) -> [] ([] Bool))))) 2)
(undefined::Bool -> ([] Int) -> [] Int) (((==)::Bool -> Bool -> Bool) ((\a -> seq a False) ((+1) 1)) (case1 (undefined::Int -> ([] Int) -> Bool) True ([]::[] Int)))
\a -> (!!) ((\b -> seq b (seq b ([]::[] (Int -> [] Int)))) ([]::[] (([] Int) -> Int))) ((\b -> seq b 2) (\b -> seq b (seq b ([]::[] Bool)))) (head (tail (undefined::[] ((([] ([] Int)) -> [] (([] Int) -> Bool)) -> Int))) ((\b -> seq b (seq b (undefined::([] ([] Int)) -> [] (([] Int) -> Bool)))) (seq a 2)))
(undefined::([] ([] ([] Bool))) -> ([] (Int -> Int)) -> ([] Int) -> [] Int) ((++) ([]::[] ([] ([] Bool))) (id ([]::[] ([] ([] Bool))))) (undefined::[] (Int -> Int))
\a -> seq a ((\b -> seq b (seq a ((\c -> seq c (\d -> (undefined::[] Int))) (b a (undefined::[] (Bool -> Bool)) (undefined::Bool))))) (\b -> head (seq b (seq a (tail ([]::[] (([] (Bool -> Bool)) -> Bool -> Bool)))))) False)
id (\a -> seq a (\b -> \c -> (undefined::([] Int) -> [] Int)) (undefined::Int)) ((\a -> seq a (seq a (\b -> (undefined::[] ([] Int))))) id) ((\a -> id (\b -> seq a (undefined::Bool)) (seq a (id ([]::[] ([] (([] Int) -> [] Int)))))) (\a -> seq a (seq a (seq a (seq a (undefined::[] ([] (([] ([] Bool)) -> [] ([] (Bool -> Bool))))))))))
\a -> (++) ([]::[] Int) a
\a -> seq a (seq a (\b -> a)) ((!!) a (case1 (\b -> (undefined::([] ([] Int)) -> Int)) (undefined::Int) (seq a ([]::[] ([] Int)))))
(undefined::([] (([] ([] Bool)) -> [] ([] Bool))) -> ([] Int) -> [] Int) ((\a -> seq a ((\b -> seq b (seq b (undefined::[] (([] ([] Bool)) -> [] ([] Bool))))) (seq a (seq a (seq a (undefined::[] Bool)))))) (case1 (id ((undefined::([] Int) -> Int -> ([] Int) -> Int) ([]::[] Int)))))
\a -> a
(undefined::([] Int) -> [] Int)
case1 (undefined::(Int -> Int -> Bool) -> ([] (Int -> Int -> Bool)) -> ([] Int) -> [] Int) (map (id (\a -> seq a (+1)) (\a -> \b -> seq a (undefined::[] Int)))) ((\a -> seq a (undefined::Bool -> [] (Int -> Int -> Bool)) (seq a (seq a False))) ((\a -> seq a (undefined::Int -> [] Bool)) (undefined::[] (([] Int) -> Bool))))
\a -> tail (seq a (map ((\b -> \c -> seq c (undefined::([] ([] Int)) -> Int) (seq c (seq b ([]::[] ([] Int))))) (seq a (seq a (seq a (seq a (seq a (undefined::Int))))))) (seq a (\b -> (undefined::[] (([] ([] Int)) -> [] ([] (Int -> Int))))) (id 0))))
(\a -> (:) ((\b -> \c -> seq b (undefined::Int)) ([]::[] ([] ([] ([] Bool)))) (case1 (\b -> (undefined::([] Bool) -> Int)) (seq a 2) (undefined::[] Bool)))) ((\a -> \b -> (\c -> seq a (\d -> seq c (undefined::Bool))) (seq a ([]::[] Bool))) ((\a -> seq a (id 0)) (id True)))
head (undefined::[] (([] Int) -> [] Int))
\a -> a
\a -> a
head ((\a -> seq a (id ((undefined::Bool -> [] (([] Int) -> [] Int)) (seq a (\b -> seq a True) (seq a (seq a 1)))))) (case1 ((\a -> seq a (undefined::Bool -> ([] Bool) -> Bool)) (undefined::[] Bool)) ((\a -> seq a False) 0) ((\a -> seq a ([]::[] Bool)) 1)))
(\a -> (\b -> \c -> seq b (seq a (undefined::([] Int) -> [] Int))) (seq a (seq a (seq a (undefined::[] ([] Bool)))))) ((\a -> seq a (seq a ((==)::[Int] -> [Int] -> Bool))) (id (\a -> True))) ((!!) ((\a -> seq a (undefined::[] Int)) (head ([]::[] Bool))) (id (undefined::([] (([] Bool) -> [] Bool)) -> Int) (undefined::[] (([] Bool) -> [] Bool))))
(\a -> (\b -> head (seq b (undefined::[] (Bool -> ([] Int) -> [] Int))) (seq b (a (undefined::[] (([] Int) -> [] ([] Bool))) (undefined::[] ([] ([] (Int -> Bool))))))) (\b -> seq b (undefined::[] ([] ([] Bool))))) (\a -> id (\b -> seq a (undefined::Int -> (([] ([] Bool)) -> [] Bool) -> Bool) (seq a 2) (seq a (\c -> seq c (\d -> ([]::[] Bool)) id))))
head ([]::[] (([] Int) -> [] Int))
(undefined::([] Int) -> [] Int)
(:) ((undefined::(Int -> ([] ([] ([] Int))) -> Int -> ([] Int) -> ([] Int) -> Bool) -> Int) (undefined::Int -> ([] ([] ([] Int))) -> Int -> ([] Int) -> ([] Int) -> Bool))
id (\a -> \b -> (enumFromTo'::Int -> Int -> [Int]) (seq a (\c -> (undefined::Int)) (seq a (seq b ([]::[] Bool)))) (seq a (id (seq b (seq b 2))))) (map (\a -> \b -> b))
(:) ((undefined::Bool -> Int) (((==)::[Int] -> [Int] -> Bool) ((\a -> seq a (seq a (undefined::[] Int))) 0) ((\a -> seq a (undefined::[] Int)) True)))
\a -> a
case1 ((\a -> seq a (seq a (\b -> \c -> seq c id))) ((!!) ([]::[] Bool) 1)) (head ([]::[] (([] Int) -> [] Int))) (id (id (undefined::(([] Bool) -> Bool) -> [] Int)) head)
\a -> id (seq a (seq a (\b -> a))) (\b -> seq a (seq b (seq a (seq b (tail (undefined::[] (([] ([] ([] (Bool -> Bool)))) -> [] ([] ([] (Bool -> Bool))))))))))
(\a -> seq a (\b -> (!!) (seq b ([]::[] ((Int -> [] Bool) -> [] Int))) (seq b (undefined::Int)) (\c -> case1 (\d -> (undefined::([] ([] Bool)) -> [] Bool)) (undefined::[] Bool) (seq b (undefined::[] ([] Bool)))))) (\a -> case1 (\b -> seq a (\c -> \d -> \e -> d)) (\b -> seq b (seq b (\c -> seq c b))) (undefined::[] Bool))
\a -> seq a (seq a (\b -> map (\c -> seq c (\d -> d) (b (\d -> (undefined::Bool)))) (undefined::[] ([] ([] ([] (([] Int) -> ([] Int) -> [] Bool))))))) (\b -> (undefined::Int))
map ((\a -> seq a (\b -> 2)) (undefined::([] Int) -> [] (Int -> [] Int)))
\a -> (undefined::(Int -> Int -> ([] ([] Bool)) -> [] ([] Bool)) -> [] Int) (seq a (seq a (\b -> seq b (\c -> (!!) (seq c (seq b ([]::[] (([] ([] Bool)) -> [] ([] Bool)))))))) ((||) (not True) (seq a (seq a (undefined::Bool)))))
\a -> (enumFromTo'::Int -> Int -> [Int]) 2 (seq a (seq a (\b -> seq b (undefined::(Int -> Bool) -> Int))) (seq a (seq a (seq a False))) (seq a (seq a ((\b -> \c -> b c (undefined::Int)) (seq a ((==)::Int -> Int -> Bool))))))
\a -> seq a ((\b -> take (seq a ((-) (seq b (undefined::Int)) (seq a (undefined::Int)))) ([]::[] Int)) (seq a (seq a (undefined::([] ([] (Int -> Int -> Int))) -> [] (([] (Int -> [] Int)) -> [] (Int -> [] Int))))))
\a -> id (\b -> \c -> (undefined::Int -> [] Int) 2) (seq a (seq a (\b -> seq b (undefined::Bool))) tail) (head (seq a (\b -> (undefined::[] (([] ([] Int)) -> [] ([] (Int -> Int))))) (\b -> seq a (undefined::Bool -> Int) (seq a (id False)))))
\a -> seq a (\b -> seq b (seq b (seq a ((\c -> seq c (\d -> (undefined::[] Int))) b ((!!) (seq b ([]::[] (Int -> Int))) b))))) (case1 (seq a (\b -> (undefined::Bool -> ([] Bool) -> Int)) (seq a (undefined::Int))) ((undefined::Bool -> Int) (seq a (seq a False))) ((:) (seq a True) ([]::[] Bool)))
(\a -> seq a ((\b -> seq b (\c -> case1 (:) c c)) ((\b -> seq b (seq a (seq b 1))) (undefined::[] (Int -> Int -> Bool))))) (undefined::(([] Int) -> [] (Int -> [] Int)) -> ([] ([] Bool)) -> [] ([] Bool))
(!!) ((\a -> seq a (seq a (undefined::[] (Int -> ([] Int) -> [] Int)))) (id 0)) (case1 (\a -> (undefined::([] Bool) -> Int)) 0 ([]::[] Bool)) ((\a -> a) ((\a -> seq a (seq a (seq a 0))) (undefined::Bool)))
case1 (\a -> head (take (head ([]::[] Int)) (seq a ([]::[] (([] Bool) -> ([] Int) -> [] Int))))) ((\a -> (\b -> \c -> seq b c) (seq a (undefined::[] Bool))) (id (undefined::Int))) (undefined::[] Bool)
filter (\a -> seq a (seq a (seq a (seq a (seq a ((\b -> seq a (seq b (undefined::Bool))) (seq a ((\b -> \c -> head (seq b c)) (seq a (undefined::Bool -> Int) (seq a (seq a True)))))))))))
\a -> a
\a -> tail ((undefined::(([] (([] Int) -> [] (Bool -> Bool))) -> Bool) -> [] Int) (id (seq a (undefined::Int -> ([] (([] Int) -> [] (Bool -> Bool))) -> Bool)) (seq a (seq a (\b -> (undefined::Int))) (seq a (\b -> a)))))
head ((\a -> map ((undefined::Int -> ([] Bool) -> ([] Int) -> [] Int) (seq a (seq a a))) (seq a (\b -> seq b (undefined::[] ([] Bool))) (undefined::Int))) (case1 (\a -> \b -> head (seq a (undefined::[] Int))) (id (head ([]::[] Int))) ((:) (undefined::Bool) (undefined::[] Bool))))
(\a -> seq a (\b -> \c -> c)) ((\a -> seq a (seq a (seq a 2))) ((!!) (undefined::[] (Int -> [] Int)))) ((\a -> seq a 0) 0)
\a -> (undefined::[] Int)
id
case1 (\a -> case1 (\b -> seq a (\c -> (undefined::([] Int) -> [] Int))) (seq a (undefined::([] Int) -> [] Int))) (\a -> (undefined::[] Int)) ((!!) ((\a -> seq a (undefined::[] ([] Int))) (undefined::Bool)) ((+1) (undefined::Int)))
(\a -> \b -> seq a (id (seq b (\c -> c)))) (\a -> seq a (seq a (\b -> a))) ((\a -> even (seq a ((undefined::([] ([] Bool)) -> Int) (seq a (undefined::[] ([] Bool)))))) ((undefined::Bool -> ([] ([] ([] Int))) -> [] ([] ([] Bool))) (head (undefined::[] Bool))))
(\a -> seq a (seq a (\b -> \c -> map (\d -> (undefined::Int)) c) ([]::[] (([] (([] Int) -> Int)) -> Int)))) (\a -> id (seq a (head (tail (seq a ([]::[] (Bool -> [] (Int -> Bool))))))) (not (seq a (\b -> seq a b) (seq a (seq a False)))))
(undefined::([] Int) -> [] Int)
\a -> (\b -> head (tail (seq b (undefined::[] ((([] Bool) -> [] (Int -> Bool)) -> [] Int)))) (\c -> ([]::[] (Int -> Bool)))) ((\b -> seq a (case1 (\c -> (undefined::([] Bool) -> Bool)) (seq a b) (seq a (undefined::[] Bool)))) (head (map (\b -> seq b True) (undefined::[] Int))))
\a -> (\b -> \c -> seq b (\d -> c ([]::[] ([] ([] (Int -> Int)))) (undefined::Int)) (id (undefined::Int))) (seq a (seq a (case1 (undefined::([] Bool) -> ([] ([] Bool)) -> Bool) False ([]::[] ([] Bool))))) ((\b -> head (seq b (undefined::[] (([] ([] ([] (Int -> Int)))) -> Int -> [] Int)))) (head (seq a (undefined::[] (Bool -> Int))) False))
\a -> (undefined::[] Int)
\a -> a
(\a -> \b -> take (seq b (\c -> b) (seq a (seq b (undefined::[] Bool))))) ((\a -> seq a (\b -> seq a b)) (map (\a -> seq a True))) (id (\a -> seq a (seq a (seq a (id 1)))) ((\a -> a) True))
(\a -> seq a (\b -> filter (\c -> (undefined::Bool)) b)) (\a -> seq a (seq a (map (\b -> \c -> \d -> seq c (\e -> seq b (undefined::Bool))) (seq a (seq a (\b -> (undefined::[] (Bool -> Bool)))) (seq a (seq a (seq a True)))))))
\a -> a
\a -> (undefined::Int -> [] Int) ((+1) (case1 (\b -> seq a (\c -> seq c (undefined::Int))) (seq a 2) (seq a (id ([]::[] Bool)))))
(\a -> (\b -> \c -> seq b c) (map (seq a (undefined::([] Bool) -> ([] Int) -> [] Int)) ((:) (undefined::[] Bool) (undefined::[] ([] Bool))))) (\a -> map (\b -> \c -> seq c (seq b (seq b (seq b (undefined::Bool))))) (undefined::[] (Int -> [] (Int -> [] Int))))
(undefined::Bool -> ([] Int) -> [] Int) ((\a -> seq a (seq a (\b -> True))) (tail (undefined::[] Int)) (\a -> (!!) ([]::[] (Bool -> Int -> Bool)) (undefined::Int) (seq a (seq a True))))
(\a -> seq a (\b -> b)) ((\a -> seq a (\b -> seq a (\c -> seq c ([]::[] Bool)) (\c -> seq b (seq b (undefined::Int))))) (\a -> (\b -> \c -> seq b (seq a (undefined::Bool))) (\b -> (undefined::[] Bool))))
(:) ((+) ((\a -> seq a (seq a ((+) 1 0))) (undefined::(Int -> Bool) -> (Bool -> Bool) -> Bool -> Bool)) ((\a -> head (seq a (undefined::[] (Bool -> Int))) (undefined::Bool)) (\a -> (\b -> seq b (seq b (undefined::([] Int) -> [] (Int -> Bool)))) (seq a (undefined::[] Int)))))
\a -> a
(\a -> id (\b -> \c -> id) 2 (id ((undefined::Bool -> Int) (seq a (seq a (undefined::Bool)))))) (id (head (undefined::[] ([] (([] (([] Int) -> [] ([] Bool))) -> (Int -> Bool) -> Int -> Bool)))))
(\a -> seq a (seq a (seq a (case1 (\b -> id (undefined::([] Bool) -> ([] Int) -> [] Int)) (\b -> id b) ([]::[] Bool))))) ((undefined::([] Int) -> Bool -> [] (Int -> Int)) ([]::[] Int) (even (undefined::Int)))
\a -> a
(\a -> \b -> (\c -> seq c (seq c (undefined::Bool -> [] Int)) (not (seq c a))) ((!!) (seq b (undefined::[] (([] ([] Int)) -> [] Bool))) 1)) ((\a -> (!!) (seq a ([]::[] Bool)) (seq a (seq a 1))) ((\a -> \b -> id a) (head (undefined::[] Bool))))
id
\a -> (\b -> seq b (undefined::Bool -> [] Int)) (seq a (\b -> seq b ((\c -> seq c (seq a ([]::[] ([] (Int -> Int))))) a))) (seq a (\b -> True) (\b -> case1 (seq a (undefined::Int -> ([] Int) -> [] Bool)) (seq b (undefined::[] Bool))))
(\a -> seq a (\b -> \c -> c)) ((\a -> \b -> seq a (seq b (undefined::Bool))) (undefined::Int)) head
map (\a -> (undefined::(Int -> ([] Int) -> Int) -> Int) (case1 (seq a (undefined::Int -> ([] Int) -> Int))))
\a -> a
\a -> ([]::[] Int)
(undefined::(([] (([] (Int -> Bool)) -> [] (Int -> Bool))) -> Int -> [] ([] Bool)) -> ([] Int) -> [] Int) (\a -> \b -> (undefined::[] ([] Bool)))
\a -> (\b -> seq a (seq b (undefined::Int -> Bool -> [] Int))) ([]::[] Bool) ((undefined::(Int -> Int) -> Int) ((!!) a)) (seq a ((undefined::Bool -> (([] Int) -> Int -> Int) -> Bool) (undefined::Bool) (\b -> seq b (seq b (\c -> id)) (id (seq a (undefined::Int))))))
\a -> a
case1 (undefined::Bool -> ([] Bool) -> Bool -> ([] Int) -> [] Int) (undefined::Bool -> ([] Int) -> [] Int) (take (undefined::Int) ([]::[] Bool)) (not ((\a -> not (seq a (undefined::Bool))) (\a -> seq a (seq a (seq a True)))))
(\a -> map (\b -> id (seq b (undefined::Bool -> Bool -> Int)) (seq b (seq a (seq b (undefined::Bool)))) False)) (\a -> seq a (\b -> seq a (undefined::([] (([] Int) -> ([] Int) -> [] Bool)) -> Bool)))
\a -> a
(undefined::([] Int) -> [] Int)
(\a -> seq a (undefined::(([] (([] Int) -> [] Int)) -> Int) -> ([] Int) -> [] Int)) ((\a -> seq a (head (undefined::[] Bool))) (map (\a -> even))) ((\a -> seq a ((\b -> seq b (undefined::([] (([] Int) -> [] Int)) -> Int)) a)) ((undefined::(([] (Int -> Int)) -> Int -> Int) -> Int) (\a -> (undefined::Int -> Int))))
(:) ((\a -> seq a 1) (id (\a -> \b -> seq a (seq a ([]::[] (([] ([] ([] Int))) -> [] ([] ([] Bool))))))))
take (id 0)
\a -> ([]::[] Int)
\a -> head (seq a ((\b -> seq b ([]::[] (Bool -> Int -> [] Int))) False)) (case1 (\b -> seq b (undefined::([] Bool) -> Bool)) (seq a (undefined::Bool)) (seq a (undefined::[] Bool))) ((\b -> seq a (seq b (\c -> 2)) (seq a (\c -> seq c (seq b (undefined::Bool))))) (\b -> \c -> (undefined::[] Bool)))
case1 (undefined::(([] Int) -> Int) -> ([] (([] Int) -> Int)) -> ([] Int) -> [] Int) ((\a -> \b -> seq a (undefined::Int -> [] Int) (seq a (undefined::Int))) ((undefined::Bool -> [] (Int -> [] Int)) (head ([]::[] Bool)))) ((\a -> seq a (\b -> ([]::[] (([] Int) -> Int))) (seq a (seq a (undefined::Bool)))) ((undefined::Bool -> [] ([] Int)) False))
case1 ((undefined::Bool -> Bool -> ([] Bool) -> ([] Int) -> [] Int) ((\a -> seq a False) (head ([]::[] Int)))) ((\a -> seq a (\b -> ([]::[] Int))) ((\a -> \b -> seq a False) (head ([]::[] Int)))) ((undefined::Int -> [] Bool) (undefined::Int))
\a -> a
take (id ((\a -> seq a (seq a (a (seq a (undefined::[] (([] ([] Int)) -> [] ([] Int))))))) (\a -> (!!) (seq a (seq a ([]::[] Int))) 2)))
(undefined::Bool -> ([] Int) -> [] Int) ((\a -> seq a (seq a (\b -> (undefined::Bool)))) 2 ((\a -> seq a (seq a (\b -> ([]::[] (Bool -> Bool))))) (\a -> head (seq a ([]::[] Bool)))))
\a -> a
(\a -> (undefined::Int -> ([] Int) -> [] Int) (seq a ((-) ((+1) 0) (seq a (seq a 1))))) ((undefined::(([] Int) -> [] (Int -> Bool)) -> Bool) (undefined::([] Int) -> [] (Int -> Bool)))
\a -> a
\a -> a
head (undefined::[] ((([] Int) -> ([] (([] Int) -> Bool -> Bool)) -> Int -> Bool) -> ([] Int) -> [] Int)) (\a -> (undefined::([] (([] Int) -> Bool -> Bool)) -> Int -> Bool))
(\a -> seq a (\b -> (!!) (seq a (seq a (undefined::[] ((([] Int) -> Int) -> [] Int)))) (seq a (seq b 2)) (a (head (undefined::[] (Bool -> Int)) (seq a (seq a (undefined::Bool))))))) (\a -> (\b -> seq b (seq a (\c -> a))) ((!!) ([]::[] (([] ([] ([] Bool))) -> [] ([] ([] Bool)))) a))
id ((undefined::Bool -> (([] Int) -> ([] Int) -> Bool) -> ([] Int) -> [] Int) (not ((undefined::Bool -> Bool) False))) (\a -> seq a ((\b -> \c -> seq b (seq c (undefined::(([] ([] Int)) -> [] ([] Bool)) -> Bool)) (undefined::([] ([] Int)) -> [] ([] Bool))) ((\b -> seq a (seq b (seq a False))) (take (undefined::Int) ([]::[] Int)))))
(++) (case1 (\a -> (undefined::([] (([] Int) -> Bool)) -> [] Int)) ((:) 2 (undefined::[] Int)) (case1 (undefined::Int -> ([] Int) -> [] (([] Int) -> Bool)) ([]::[] (([] Int) -> Bool)) (tail (undefined::[] Int))))
\a -> seq a (seq a (\b -> seq b a) (seq a (\b -> (:) (\c -> head ([]::[] Bool)) ((!!) (seq a (undefined::[] ([] (Int -> Bool)))) (seq b (undefined::Int))))))
\a -> a
\a -> a
(\a -> \b -> (undefined::([] (Bool -> Bool)) -> [] Int) (case1 (undefined::Int -> ([] Int) -> [] (Bool -> Bool)) (seq a (undefined::[] (Bool -> Bool))) (seq b ([]::[] Int)))) (\a -> seq a (seq a ([]::[] ([] (([] ([] Bool)) -> [] Bool)))))
(undefined::([] (([] (([] Bool) -> Bool)) -> Int -> [] Int)) -> ([] Int) -> [] Int) ([]::[] (([] (([] Bool) -> Bool)) -> Int -> [] Int))
(\a -> seq a (\b -> seq b (seq b (\c -> \d -> (undefined::[] Int)) (seq b False))) (seq a ((!!) ([]::[] (([] (Bool -> Bool)) -> [] (Bool -> Bool))) 2))) ((undefined::Int -> Bool) ((undefined::Bool -> Int) False))
(!!) ([]::[] (([] Int) -> [] Int)) 0
\a -> (\b -> seq b (\c -> \d -> a) (seq b (seq a (seq a ([]::[] ([] Bool))))) (case1 (seq b (undefined::Int -> ([] Int) -> Int)) (b 1 (undefined::Int) (undefined::[] (Int -> Int)) (undefined::Int)) ([]::[] Int))) ((undefined::(Bool -> Bool) -> Int -> Int -> ([] (Int -> Int)) -> Int -> Int) (case1 (seq a (undefined::Int -> ([] Int) -> Bool -> Bool)) (seq a (undefined::Bool -> Bool)) a))
\a -> a
map (\a -> head (seq a (seq a (filter ((!!) (head (tail (seq a (\b -> ([]::[] ([] Bool))) ([]::[] ([] (Bool -> Bool))))))) (seq a (seq a (\b -> (\c -> seq c ([]::[] Int)) b) a))))))
(\a -> seq a ((\b -> seq b (\c -> seq b c)) (seq a (\b -> tail (seq b b))))) (head (map (undefined::Bool -> (Int -> Bool) -> Bool) (undefined::[] Bool)) (\a -> (\b -> seq b (undefined::Bool)) ((!!) (undefined::[] Int) a)))
(!!) ((undefined::(([] Int) -> [] (Int -> Int)) -> [] (([] Int) -> [] Int)) (id (\a -> (undefined::([] Int) -> [] (Int -> Int))) (not (undefined::Bool)))) 1
\a -> a
(\a -> take (case1 (\b -> \c -> (undefined::Int)) (seq a (undefined::Int)) (undefined::[] ([] Bool)))) (undefined::[] (([] (Int -> [] Bool)) -> [] (Int -> Bool -> Bool)))
(!!) ((\a -> seq a (id (undefined::Bool -> [] (([] Int) -> [] Int))) (id (seq a False))) ((\a -> seq a (seq a 2)) ([]::[] ([] Int)))) 0
\a -> map (\b -> id (undefined::(([] (([] Int) -> ([] Int) -> Bool)) -> Bool) -> Int) (\c -> seq c ((&&) (seq c (undefined::Bool)) (undefined::Bool)))) (map (seq a (id (seq a (\b -> (undefined::Int))))) ([]::[] (([] Int) -> ([] Bool) -> [] Bool)))
\a -> case1 (seq a (seq a (seq a (seq a ((!!) ((:) (undefined::([] Int) -> [] Int) (undefined::[] (([] Int) -> [] Int)))))))) (seq a (undefined::(Int -> Int -> [] Int) -> [] Int) (\b -> seq a (seq b (\c -> seq b ([]::[] Int))))) a
\a -> map (\b -> head a) (take (seq a (\b -> 1) (\b -> seq b (seq b ([]::[] (Int -> Bool))))) (seq a (seq a (id ([]::[] (([] Int) -> ([] ([] Int)) -> [] Int))))))
tail
\a -> seq a ([]::[] Int)
(undefined::(([] (Int -> Bool)) -> [] (Int -> Bool)) -> ([] Int) -> [] Int) ((\a -> \b -> (\c -> seq c (seq a b)) ([]::[] (Int -> Int))) ((\a -> seq a (seq a (seq a (undefined::[] (Bool -> Bool))))) (head ([]::[] Int))))
(undefined::(([] Int) -> Int -> [] Int) -> Int -> ([] Int) -> [] Int) (undefined::([] Int) -> Int -> [] Int) ((\a -> seq a (seq a ((+1) (head (undefined::[] Int))))) ((\a -> seq a (seq a (undefined::[] ([] (Int -> Int))))) (undefined::Bool)))
id
\a -> (\b -> seq a (map (head (seq a (seq b (seq b ([]::[] ((Int -> ([] Int) -> Bool) -> Int)))))) (seq a (undefined::[] (Int -> ([] Int) -> Bool))))) (head (tail ((\b -> seq b (seq b (undefined::(([] ([] Bool)) -> Bool) -> [] Int))) (seq a (seq a False)) (seq a ((!!) (seq a (undefined::[] (([] ([] Bool)) -> Bool))) (undefined::Int))))))
\a -> a
head (id (id ([]::[] (Bool -> Int -> ([] Int) -> [] Int)))) ((\a -> a) (id False)) (id (\a -> head (head ([]::[] ([] Int)))) ((undefined::Bool -> ([] ([] Int)) -> [] ([] ([] Int))) ((!!) (undefined::[] Bool) 1)))
(!!) ((\a -> seq a (seq a (undefined::[] (Bool -> ([] Int) -> [] Int)))) (undefined::Bool)) ((!!) (undefined::[] Int) ((+1) 2)) (case1 (\a -> (\b -> \c -> b) (seq a True)) ((\a -> seq a True) (head ([]::[] Int))) (id ([]::[] ([] Int))))
(undefined::(Int -> [] (([] ([] Int)) -> [] ([] Bool))) -> ([] Int) -> [] Int) (\a -> (\b -> seq a (\c -> seq b ([]::[] (([] ([] Int)) -> [] ([] Bool)))) (even (seq a 2))) (seq a (\b -> id (undefined::([] Int) -> [] Bool)) (\b -> seq a (seq b (seq a (undefined::[] Int))))))
\a -> id (seq a (\b -> (undefined::(([] ([] Int)) -> [] Bool) -> [] Int)) (seq a (seq a (seq a ((undefined::Int -> Int) (undefined::Int))))) (\b -> seq a (seq a (\c -> id (tail ([]::[] Bool))) (\c -> case1 (undefined::Bool -> ([] Bool) -> [] (Int -> Int)) (seq b ([]::[] (Int -> Int))) (seq c (undefined::[] Bool))))))
\a -> (!!) (seq a (id (seq a (undefined::[] ((([] Int) -> Int -> [] Int) -> [] Int))))) (seq a ((\b -> seq b b) (seq a (seq a (undefined::Int))))) (seq a (seq a (\b -> \c -> a)))
(\a -> (\b -> (undefined::([] (([] Int) -> Bool)) -> ([] Int) -> [] Int) (seq b (seq b (seq a ([]::[] (([] Int) -> Bool)))))) ((\b -> seq b ((+1) (undefined::Int))) (seq a True))) ((\a -> seq a (map (\b -> \c -> seq b True))) ((\a -> seq a (undefined::Bool)) ([]::[] (Bool -> Bool))))
id
(\a -> case1 (undefined::Bool -> ([] Bool) -> ([] Int) -> [] Int) (seq a (seq a (take (undefined::Int)))) (id (seq a (seq a ([]::[] Bool))))) (\a -> (\b -> seq a (seq a (id (undefined::Int -> [] Int)) ((+1) (seq b (undefined::Int))))) (seq a (((==)::[Int] -> [Int] -> Bool) (seq a (seq a (undefined::[] Int))) (undefined::[] Int))))
\a -> a
\a -> ([]::[] Int)
\a -> a
(undefined::Int -> (([] Int) -> ([] Int) -> [] Int) -> ([] Int) -> [] Int) (head (undefined::[] ((Bool -> Bool -> Bool) -> Int)) (\a -> seq a (undefined::Bool -> Bool))) (\a -> \b -> seq b (seq a ((undefined::(Int -> [] Bool) -> Int -> [] Int) (head (seq a (undefined::[] (Int -> [] Bool)))) (seq a (id (undefined::Bool -> Int)) (id (undefined::Bool))))))
(\a -> (\b -> seq b (\c -> seq b tail)) (seq a (seq a (undefined::Bool)))) (\a -> (\b -> seq b (seq a (seq a ([]::[] ([] Bool))))) (seq a (not True))) ((!!) ((\a -> case1 (seq a (undefined::Bool -> ([] Bool) -> [] Int)) (undefined::[] Int) ([]::[] Bool)) (undefined::[] (([] (([] Bool) -> [] (Bool -> Bool))) -> [] Bool))))
case1 ((\a -> \b -> \c -> (:) a) (head ([]::[] Int)) ((\a -> seq a (seq a (seq a False))) ((!!) (undefined::[] ([] ([] Int))) 0))) (case1 ((\a -> seq a (undefined::Int -> ([] Int) -> [] Int)) (undefined::Bool)) (filter (undefined::Int -> Bool) (undefined::[] Int)) ([]::[] Int))
(\a -> \b -> seq b ((\c -> seq a (seq c (seq a (undefined::(([] Bool) -> Bool) -> [] Int))) (seq a (\d -> seq b False))) (map (\c -> \d -> d) b))) ((undefined::(([] Int) -> Bool) -> (Int -> [] Bool) -> Int -> ([] Int) -> Int) ((\a -> ((==)::[Int] -> [Int] -> Bool) (seq a ([]::[] Int))) ([]::[] ([] ([] ([] Bool))))))
(++) (map ((undefined::(Int -> ([] Int) -> Int) -> (Int -> ([] Int) -> Bool) -> Int) (id (id (undefined::Bool -> Int -> ([] Int) -> Int) (even (undefined::Int))))) (undefined::[] (Int -> ([] Int) -> Bool)))
(\a -> seq a (seq a (seq a (\b -> seq b (\c -> seq a c)))) (\b -> (undefined::(Int -> Int) -> [] ([] Int)) (\c -> (undefined::Int)))) ((\a -> (!!) (undefined::[] (([] ([] Bool)) -> [] ([] (Bool -> Bool)))) (seq a (seq a (undefined::Int)))) True)
tail
tail
(\a -> (undefined::Int -> Bool -> ([] Int) -> [] Int) (seq a (id 0))) ((\a -> \b -> seq b (seq a ([]::[] Bool))) (((==)::[Int] -> [Int] -> Bool) (undefined::[] Int) (undefined::[] Int))) False
(\a -> seq a (\b -> id)) ((undefined::Int -> Bool) ((!!) ([]::[] Int) (undefined::Int))) (\a -> seq a (\b -> (undefined::[] Int)) (seq a (map (seq a (seq a (undefined::Bool -> ([] Int) -> [] Int))) (a ([]::[] Int)))))
\a -> (++) (seq a (seq a (seq a (\b -> (++) a (undefined::[] Int))) (seq a (\b -> seq a (seq a (undefined::([] Bool) -> [] (Int -> Bool))) (undefined::[] Bool))))) (head ((\b -> seq b (undefined::Int -> [] ([] Int)) (id 0)) (undefined::([] Int) -> [] Bool)))
(\a -> seq a (seq a (\b -> map (\c -> c)) head)) (id (\a -> (\b -> seq b True) (head (undefined::[] ([] Bool)))) ((\a -> seq a (seq a (\b -> b))) (undefined::Int)))
\a -> (\b -> (\c -> seq c (\d -> seq a a) id) (seq b (\c -> seq c False) (undefined::Int -> ([] Int) -> Int -> Int))) ((\b -> \c -> (:) (seq a (seq a (seq b (undefined::Bool))))) (undefined::[] (Bool -> Bool)))
\a -> a
tail
filter (\a -> seq a (seq a (\b -> head (seq b (seq a (seq b (seq a ([]::[] Bool)))))) (\b -> (\c -> (\d -> seq d (\e -> \f -> c)) (head ([]::[] ([] Int)))) (case1 (\c -> head) (seq b (undefined::Bool)) (seq a ([]::[] Bool))))))
id
id (\a -> seq a (seq a (\b -> seq b (seq a tail)))) (not ((&&) (undefined::Bool) True)) ((\a -> id (seq a (\b -> seq b (undefined::([] Int) -> [] Bool)) (seq a (seq a ([]::[] Int))))) (head (undefined::[] (([] Int) -> Int -> [] Bool)) ((!!) (undefined::[] ([] Int)) (undefined::Int))))
(\a -> \b -> id (seq a (undefined::Int -> ([] Int) -> [] Int)) (seq b (undefined::Int))) ((undefined::(Bool -> Bool) -> Int) (\a -> a)) (\a -> \b -> seq a (seq a (seq a (seq a (undefined::([] Int) -> (Int -> Int) -> Bool))) b) (seq a (case1 (\c -> (undefined::([] Bool) -> Int -> Int)) (\c -> a) (seq a (undefined::[] Bool)))))
\a -> seq a (\b -> seq b (seq a ((:) (seq b (seq a (undefined::([] (([] Bool) -> Bool)) -> Int)) (seq b (seq a ([]::[] (([] Bool) -> Bool))))) (seq b a)))) (\b -> id (seq a (seq b (undefined::(([] (Int -> Int)) -> Int -> Int) -> Bool))) (\c -> (undefined::Int -> Int)))
(\a -> seq a (undefined::([] Int) -> [] Int)) (\a -> (undefined::[] (([] Int) -> Int)))
(\a -> case1 (\b -> seq b (seq a (\c -> \d -> d))) ((undefined::Int -> ([] Int) -> [] Int) (seq a 2)) (seq a (seq a (seq a (seq a (undefined::[] Bool)))))) (\a -> seq a (seq a (undefined::(([] Bool) -> [] (Bool -> Bool)) -> Bool)) ((\b -> seq b (seq b (seq a (undefined::([] Bool) -> [] (Bool -> Bool))))) False))
\a -> seq a ([]::[] Int)
(:) ((+1) ((undefined::(([] Int) -> [] ([] Int)) -> Int) (\a -> seq a (head ([]::[] ([] ([] Int)))))))
\a -> seq a ([]::[] Int)
\a -> a
take ((\a -> head (seq a (undefined::[] (((([] Int) -> [] (Int -> Int)) -> Int) -> Int))) (\b -> 0)) (case1 (\a -> seq a (undefined::([] ([] Bool)) -> [] ([] (Bool -> Bool)))) (head ([]::[] (Int -> [] ([] (Bool -> Bool)))) 0)))
(undefined::Bool -> ([] ([] (Int -> Bool))) -> ([] Int) -> [] Int) (case1 (\a -> (undefined::([] Int) -> Bool)) (undefined::Bool) (undefined::[] Int)) (map (undefined::(([] ([] Bool)) -> [] ([] Bool)) -> [] (Int -> Bool)) (undefined::[] (([] ([] Bool)) -> [] ([] Bool))))
case1 (\a -> seq a (\b -> \c -> (++) ([]::[] Int)) ((\b -> seq b 2) False)) (\a -> (\b -> \c -> seq b a) (undefined::Bool) (\b -> seq b (seq b (head a)))) ((\a -> seq a (\b -> (undefined::[] Bool)) (head (undefined::[] Int))) (id (head ([]::[] (([] ([] Bool)) -> [] ([] Bool))))))
(undefined::([] (([] Int) -> [] Int)) -> ([] Int) -> [] Int) (map ((\a -> seq a (seq a (undefined::Int -> ([] Int) -> [] Int))) (id (undefined::Bool))) ((\a -> seq a (seq a a)) (undefined::[] Int)))
id (head ((:) (undefined::([] Int) -> [] Int) (case1 (\a -> \b -> head ([]::[] ([] (([] Int) -> [] Int)))) (undefined::[] (([] Int) -> [] Int)) ([]::[] Bool))))
\a -> a
(undefined::([] Int) -> [] Int)
map (id (head ([]::[] (([] (([] Int) -> Int -> [] Int)) -> Int -> Int))) (undefined::[] (([] Int) -> Int -> [] Int)))
(\a -> seq a (seq a (head (undefined::[] (Int -> ([] Int) -> [] Int)) (seq a (seq a (undefined::Bool -> Int)) (seq a (undefined::Bool)))))) (\a -> a)
(undefined::([] Int) -> [] Int)
\a -> a
tail
take (id (\a -> (\b -> \c -> b) (undefined::Int) (\b -> b)) (head (undefined::[] (([] ([] ([] (Int -> Int)))) -> ([] (([] Int) -> Int -> Int -> Bool)) -> Int -> Bool))))
\a -> a
\a -> map (\b -> (-) ((!!) (seq a a) (undefined::Int)) ((undefined::(Int -> Bool) -> Int) (undefined::Int -> Bool))) ((\b -> seq b ([]::[] Int)) (\b -> \c -> seq a (undefined::Bool -> [] Bool) (seq b (seq a (seq b False)))))
id ((undefined::(([] Int) -> ([] (Int -> ([] Int) -> Int)) -> Int) -> ([] Int) -> [] Int) (\a -> \b -> seq a (seq a (seq b ((!!) (seq b (undefined::[] (Bool -> Int))) 2 True)))))
(\a -> \b -> map ((undefined::([] (Int -> [] Int)) -> Int -> Int) (seq a (seq b (undefined::[] (Int -> [] Int))))) (case1 (:) (seq a b) (seq a b))) (\a -> (:) (head (head ([]::[] (Int -> [] (([] Int) -> Int))) (seq a (seq a 0)))) (seq a ((\b -> seq b (seq b ([]::[] (([] Int) -> Int)))) (\b -> seq b (undefined::[] Int)))))
\a -> map (head ([]::[] ((([] (Bool -> Bool)) -> Bool -> Bool) -> Int))) (seq a (undefined::[] (([] (Bool -> Bool)) -> Bool -> Bool)))
\a -> a
(\a -> seq a (\b -> (undefined::Bool -> ([] Int) -> [] Int)) (seq a (a (undefined::Int -> [] ([] Bool))))) ((undefined::([] ([] Bool)) -> (Int -> [] ([] Bool)) -> Bool) ([]::[] ([] Bool))) ((\a -> ((==)::[Int] -> [Int] -> Bool) (seq a (undefined::[] Int)) (seq a (seq a (undefined::[] Int)))) (\a -> id (seq a (undefined::(([] Int) -> Bool) -> Int -> Int)) (head (undefined::[] (([] Int) -> Bool)))))
map (\a -> seq a (\b -> \c -> a) ((\b -> seq a (seq b (seq b (undefined::Bool)))) (undefined::[] ([] (Bool -> Bool)))) (\b -> seq a ((\c -> seq b (seq c (\d -> ([]::[] (([] Int) -> Bool)))) even) a)))
case1 (\a -> (undefined::Bool -> ([] Bool) -> ([] Int) -> [] Int) a) id ((undefined::Int -> (Int -> Int -> Int) -> [] Bool) (id 1) (\a -> (+1)))
\a -> a
(\a -> seq a (seq a (id (\b -> seq a id)))) ((\a -> a) (undefined::Bool)) ([]::[] ([] ([] Bool)))
\a -> seq a (\b -> seq b (id (\c -> ([]::[] Int)) ((\c -> seq c (seq c (undefined::[] (Int -> Int)))) ([]::[] (Bool -> Bool))))) (\b -> ([]::[] (([] Int) -> [] (Int -> [] Int))))
\a -> case1 (seq a (id (undefined::([] (Bool -> Bool)) -> ([] ([] (Bool -> Bool))) -> [] Int))) (undefined::[] Int) (seq a (seq a (seq a (\b -> seq b (seq b (undefined::[] ([] (Bool -> Bool))))) (seq a (seq a (undefined::Bool))))))
take (id (head ([]::[] ((([] Int) -> ([] (([] Int) -> Int -> Bool)) -> ([] Int) -> Int -> Bool) -> Int))) (\a -> \b -> seq b (head (seq a ((undefined::Bool -> [] (([] Int) -> Int -> Bool)) (seq a (\c -> (undefined::Bool)) ([]::[] (Int -> Bool))))))))
(!!) (undefined::[] (([] Int) -> [] Int)) ((+1) ((\a -> seq a (seq a (seq a id)) (seq a (seq a (undefined::Int)))) (\a -> seq a (seq a (seq a (\b -> (undefined::Bool)) (seq a (seq a 2)))))))
\a -> seq a (id (seq a (id (undefined::Int -> Int -> Bool -> [] Int) (id (undefined::Int)) (undefined::Int)))) True
case1 take ((\a -> case1 (\b -> (undefined::([] Bool) -> [] Int)) (seq a (undefined::[] Int)) (seq a (undefined::[] Bool))) True)
(!!) ((undefined::(Int -> Bool -> Bool) -> [] (([] Int) -> [] Int)) (\a -> \b -> b)) ((\a -> case1 (seq a (undefined::([] Int) -> ([] ([] Int)) -> Int)) (seq a (undefined::Int)) (seq a (undefined::[] ([] Int)))) (undefined::(Bool -> ([] Int) -> Int -> Int -> Int) -> [] Int))
\a -> ([]::[] Int)
id (id ((undefined::Int -> ([] ([] (Int -> Bool))) -> ([] Int) -> [] Int) (case1 (undefined::([] Bool) -> ([] ([] Bool)) -> Int) (undefined::Int) ([]::[] ([] Bool))))) ((undefined::(Int -> Int -> [] Int) -> [] ([] (Int -> Bool))) ((!!) (tail (undefined::[] (Int -> Int -> [] Int))) 1))
(\a -> seq a (\b -> id (seq b (undefined::(([] Int) -> Int -> [] Int) -> [] Int)) (seq b (\c -> \d -> \e -> d) (odd (seq a 0))))) (\a -> (\b -> seq a (seq b (undefined::Int -> [] (Int -> Int -> [] Int))) (seq a (seq b (seq a 1)))) ((undefined::Bool -> ([] (Int -> Bool)) -> Int -> Bool) (((==)::[Int] -> [Int] -> Bool) (undefined::[] Int) ([]::[] Int))))
head (id (\a -> (\b -> seq a (\c -> seq b (undefined::[] (([] Int) -> [] Int)))) (seq a (undefined::Int)) (seq a (seq a (seq a (seq a (seq a (seq a 1))))))) (\a -> (undefined::[] (Bool -> Bool))))
filter (\a -> seq a (((==)::Int -> Int -> Bool) a ((!!) ([]::[] Int) (seq a (\b -> seq a a) (head ([]::[] Bool))))))
id
(undefined::Bool -> Int -> Int -> ([] Int) -> [] Int) (((==)::Int -> Int -> Bool) (undefined::Int) 1) ((\a -> seq a (id (undefined::Int))) (((==)::Int -> Int -> Bool) 0 2)) ((\a -> seq a (\b -> (+1) b) (seq a (seq a (seq a 0)))) (even (undefined::Int)))
(\a -> seq a id) ((\a -> \b -> (\c -> seq c (\d -> seq a ([]::[] (Bool -> Bool)))) (undefined::[] Int)) ((undefined::Bool -> Bool) (id False)))
(\a -> case1 (seq a ((undefined::Bool -> Int -> ([] Int) -> [] Int) (not (undefined::Bool)))) (seq a (map (\b -> 1) (undefined::[] (Int -> Int -> Int))))) ((\a -> (undefined::Int -> ([] Int) -> Int -> Int -> Int) (seq a ((+1) 0))) (case1 (\a -> \b -> (undefined::([] Int) -> Bool)) (undefined::([] Int) -> Bool) ([]::[] Bool)))
(undefined::(Int -> [] Int) -> ([] Int) -> [] Int) (\a -> seq a (undefined::Int -> (([] Int) -> [] Int) -> [] Int) a ((undefined::Bool -> ([] Int) -> [] Int) (seq a (head (undefined::[] Bool)))))
(:) ((undefined::(([] Int) -> ([] (([] Bool) -> Bool)) -> [] (([] Bool) -> Bool)) -> Int) (\a -> tail))
(undefined::(([] ([] (([] Int) -> Int))) -> [] (Bool -> Bool)) -> ([] Int) -> [] Int) (undefined::([] ([] (([] Int) -> Int))) -> [] (Bool -> Bool))
\a -> (\b -> (:) (case1 (\c -> (undefined::([] Bool) -> Int)) (seq a (undefined::Int)) (seq a (undefined::[] Bool))) (seq b (seq a (\c -> a)) (seq b a))) (seq a (seq a (seq a (seq a (\b -> seq b (map (\c -> seq c (undefined::Int -> [] Int))))) 1)))
\a -> seq a (seq a ((undefined::([] (([] ([] ([] (Int -> Bool)))) -> Int -> ([] Int) -> ([] Int) -> Bool)) -> [] Int) (seq a (seq a ([]::[] (([] ([] ([] (Int -> Bool)))) -> Int -> ([] Int) -> ([] Int) -> Bool))))))
\a -> seq a (\b -> seq b (seq b (\c -> seq c (seq a (undefined::Int -> [] Int)) (seq a (seq c (undefined::Int))))) (\c -> seq c (\d -> seq d (undefined::Int -> Bool)) (seq b (\d -> (undefined::[] Int))))) (head (undefined::[] (([] (([] ([] ([] Bool))) -> [] ([] ([] Bool)))) -> Int -> ([] Int) -> [] Int)))
case1 (\a -> \b -> \c -> c) (head ([]::[] (([] ([] Bool)) -> ([] Int) -> [] Int)) ((\a -> seq a (undefined::[] ([] Bool))) even)) ((\a -> seq a (\b -> ([]::[] Bool)) (seq a (seq a True))) (id (\a -> (undefined::[] Bool))))
(undefined::([] Int) -> [] Int)
\a -> seq a (seq a ((\b -> \c -> id (\d -> a) b) ((+) (seq a 0) (seq a (seq a (undefined::Int))))) (\b -> b))
take (id (\a -> seq a (seq a (seq a (\b -> (undefined::Bool -> Int)) a) (seq a (seq a (undefined::(([] Int) -> Int) -> Bool)) (\b -> head b)))) ((undefined::(([] Int) -> Int -> Int -> Int) -> Bool) (\a -> (undefined::Int -> Int -> Int -> Int) ((+1) (seq a (undefined::Int))))))
(\a -> \b -> seq a (seq a (\c -> seq a (\d -> (undefined::[] Int)) (undefined::Int))) (undefined::[] (([] ([] (Int -> [] Int))) -> Bool))) ([]::[] (([] Bool) -> [] Bool))
\a -> case1 (\b -> (undefined::([] Bool) -> [] Int)) (head (undefined::[] (([] Int) -> [] Int)) (seq a a)) (seq a (\b -> head (undefined::[] ([] Bool))) (seq a (\b -> 1) a))
\a -> a
\a -> a
\a -> take (seq a (seq a (\b -> seq a (+1)) (seq a (seq a (seq a 2)))) (id ((undefined::Bool -> Int) (seq a (seq a (undefined::Bool)))))) ((++) (seq a (seq a a)) a)
\a -> a
(undefined::([] Int) -> [] Int)
\a -> map (head ((undefined::Bool -> Int -> [] (Bool -> Int)) (seq a (seq a (seq a True))) ((undefined::(([] Int) -> [] (Bool -> Bool)) -> Int) (undefined::([] Int) -> [] (Bool -> Bool))))) (seq a (seq a (id (\b -> id ([]::[] Bool))) (\b -> seq a (undefined::Bool -> [] ([] Int)) (seq b (odd (undefined::Int))))))
\a -> a
case1 (\a -> tail) ((\a -> seq a (tail (seq a tail (seq a (undefined::[] Int))))) (case1 (\a -> (undefined::([] ([] Bool)) -> Bool)) (undefined::Bool) ([]::[] ([] Bool))))
filter ((\a -> seq a (seq a (seq a (undefined::([] (([] Bool) -> Bool)) -> Int -> Bool)) ([]::[] (([] Bool) -> Bool)))) (head (map ((\a -> seq a (seq a (undefined::Bool -> Bool -> Bool))) (id (undefined::[] ([] ([] Bool))))) ((undefined::(([] Bool) -> Bool) -> [] Bool) head))))
case1 ((\a -> seq a (\b -> \c -> seq c id)) (head (undefined::[] Bool))) (\a -> seq a (\b -> seq b a) (\b -> \c -> c)) ((\a -> \b -> seq a (undefined::[] Int)) (undefined::Int) (id (undefined::Bool -> Int) (undefined::Bool)))
(undefined::(([] (([] Int) -> [] (([] Int) -> Bool))) -> Bool) -> ([] Int) -> [] Int) (\a -> ((==)::[Int] -> [Int] -> Bool) ([]::[] Int) (seq a (take (seq a 2) (seq a (undefined::[] Int)))))
take (undefined::Int)
(\a -> seq a (\b -> \c -> \d -> d) 0) (\a -> seq a ((\b -> seq a (seq b (undefined::[] ([] Bool)))) (undefined::Int))) ((undefined::(([] (Bool -> Bool)) -> Bool -> Bool) -> Int) (\a -> seq a (\b -> \c -> c) (seq a (seq a (seq a 0)))))
\a -> (\b -> (!!) (seq b (undefined::[] ((Int -> Bool -> Bool) -> [] Int))) (seq a (seq a (undefined::Int)))) (undefined::([] Int) -> [] ([] Int)) (undefined::Int -> Bool -> Bool)
take ((\a -> case1 (seq a (undefined::Int -> ([] Int) -> Bool -> Int)) (undefined::Bool -> Int) (seq a ([]::[] Int)) (case1 (\b -> (undefined::([] ([] Int)) -> Bool)) True (seq a (undefined::[] ([] Int))))) (map (undefined::(([] Int) -> [] (Int -> [] Int)) -> ([] Int) -> Bool)))
(\a -> seq a (seq a (\b -> \c -> (undefined::([] Int) -> [] Int))) (undefined::Bool)) ((\a -> \b -> seq a (seq b 2)) (((==)::Int -> Int -> Bool) 1 1)) ((\a -> seq a (\b -> id False) (\b -> \c -> seq c (seq c ([]::[] Int)))) ((undefined::([] ([] (([] Bool) -> [] Bool))) -> [] ([] Int)) (undefined::[] ([] (([] Bool) -> [] Bool)))))
head (undefined::[] ((Int -> [] Bool) -> Int -> ([] Int) -> [] Int)) (\a -> seq a (seq a (seq a (seq a id)) (tail (seq a (undefined::[] Bool))))) ((\a -> \b -> a) ((-) (undefined::Int) 0) (case1 (\a -> seq a (seq a (undefined::([] Int) -> [] (Int -> Int)))) (undefined::[] (Int -> Int))))
(undefined::([] Int) -> [] Int)
(:) ((\a -> seq a (seq a (seq a (\b -> seq b (seq a (id (seq a (undefined::Int))))) (seq a (\b -> (undefined::Bool)) (seq a (seq a (seq a 2))))))) (\a -> (undefined::Int -> Int -> ([] ([] Int)) -> [] ([] Bool)) (seq a (\b -> 1) (\b -> b))))
(undefined::([] Int) -> [] Int)
(!!) ((\a -> seq a (\b -> seq a ([]::[] (([] Int) -> [] Int)))) ((!!) ([]::[] Bool) 2) 1) ((!!) ((\a -> seq a (seq a ([]::[] Int))) (undefined::Int)) (id (undefined::(Int -> Int -> Int) -> Int) (\a -> seq a (seq a (+1)))))
\a -> seq a (\b -> a) (\b -> head (seq a (map (\c -> \d -> \e -> seq b e) (seq a (seq b (seq b (tail ([]::[] ([] ([] ([] (([] Int) -> Int))))))))))))
case1 (\a -> \b -> seq a (seq b id)) (\a -> a) ([]::[] (([] Int) -> Bool))
\a -> seq a (map (seq a ((!!) ([]::[] ((([] ([] (Int -> Bool))) -> [] ([] Bool)) -> Int))) (seq a (head (undefined::[] ((([] Int) -> Int) -> Int))) (\b -> seq a (seq a (undefined::Int))))) (seq a (seq a (seq a (seq a (seq a (map (\b -> \c -> seq a (seq b (undefined::[] ([] Bool)))) ((enumFromTo::Int -> Int -> [Int]) (undefined::Int) (undefined::Int)))))))))
\a -> (undefined::(([] ([] ([] Bool))) -> [] ([] ([] Bool))) -> [] Int) id
id (head (tail (undefined::[] ((([] Int) -> Int -> Int -> Bool) -> ([] Int) -> [] Int)))) ((\a -> \b -> seq b (\c -> \d -> seq b odd) a) ((!!) (head ([]::[] ([] Bool))) (head ([]::[] Int))))
\a -> head (filter (seq a (seq a (seq a (undefined::Bool -> Bool -> ([] Int) -> Bool))) (not (seq a (undefined::Bool))) (seq a (case1 (undefined::Bool -> ([] Bool) -> Bool) (undefined::Bool) (undefined::[] Bool)))) (seq a ([]::[] ([] Int))))
\a -> case1 (undefined::(([] ([] Int)) -> [] Int) -> ([] (([] ([] Int)) -> [] Int)) -> [] Int) (id (undefined::Bool -> ([] ([] Int)) -> [] Int) False (seq a ((!!) ([]::[] ([] ([] Int))) (undefined::Int)))) (filter (undefined::(([] ([] Int)) -> [] Int) -> Bool) (seq a (seq a (undefined::[] (([] ([] Int)) -> [] Int)))))
\a -> seq a (id (undefined::Int -> [] Int) (seq a ((\b -> seq b (undefined::(([] ([] Int)) -> [] ([] Int)) -> Int) (seq b (seq b (\c -> c)))) (undefined::([] Int) -> ([] Int) -> [] ([] Int)))))
(\a -> (undefined::Int -> ([] Int) -> [] Int) (seq a ((\b -> seq b (seq b (undefined::Int))) (seq a (seq a ([]::[] (([] Int) -> Bool))))))) (\a -> (undefined::Bool))
\a -> a
(:) ((+) ((+1) (undefined::Int)) (id ((undefined::(([] Int) -> [] (Int -> Int)) -> Int) (\a -> ([]::[] (Int -> Int))))))
(\a -> seq a (\b -> (undefined::([] Bool) -> Int -> [] Int) ([]::[] Bool) ((\c -> seq a (seq c 0)) (seq b (seq a (seq b (undefined::[] (Bool -> Bool)))))))) ((\a -> seq a (\b -> b) (even (undefined::Int))) (\a -> head (undefined::[] (([] ([] Bool)) -> [] (Int -> Bool))) (seq a (tail ([]::[] ([] Bool))))))
(\a -> seq a ((++) ((\b -> seq a (undefined::Int -> [] Int) (seq b (seq b 0))) (a (seq a (seq a ([]::[] Int))) (undefined::[] (([] ([] ([] Int))) -> [] ([] ([] Int)))))))) (\a -> (undefined::([] (([] ([] ([] Int))) -> [] ([] ([] Int)))) -> Bool))
take ((\a -> id (seq a (seq a (seq a (seq a (seq a (case1 (undefined::([] Int) -> ([] ([] Int)) -> Int) (seq a (undefined::Int)) (seq a (undefined::[] ([] Int)))))))))) head)
\a -> a
\a -> ([]::[] Int)
id ((\a -> seq a (seq a (undefined::(([] Int) -> [] (Bool -> Bool)) -> ([] Int) -> [] Int)) (seq a (undefined::([] Int) -> [] (Bool -> Bool)))) ((undefined::Bool -> Int -> ([] (Int -> Int)) -> [] (Int -> Int)) ((\a -> id (seq a (undefined::Bool))) (undefined::[] ([] (([] Int) -> Bool))))))
\a -> seq a ((enumFromTo::Int -> Int -> [Int]) ((undefined::(([] Int) -> [] (Bool -> Bool)) -> Int) (seq a (seq a (undefined::Bool -> ([] Int) -> [] (Bool -> Bool))) (undefined::Bool))) (seq a (\b -> b) (seq a (seq a (\b -> seq b 1)) (seq a (head (undefined::[] ([] ([] Bool))))))))
\a -> (\b -> seq b (seq a (\c -> seq a (\d -> (undefined::[] Int)) (not (undefined::Bool)))) (undefined::([] Int) -> Int -> Int)) (\b -> (!!) (undefined::[] (Bool -> [] (Int -> [] Int))) (seq b (seq a (undefined::Int))) (seq b ((!!) (seq b (undefined::[] Bool)) (head a))))
\a -> (!!) (seq a (seq a (seq a (seq a (seq a (\b -> ([]::[] ([] Int))))) (\b -> \c -> seq a (undefined::Int))))) 1
\a -> seq a ((\b -> seq a (\c -> a) (seq b ((undefined::([] Int) -> [] ([] (([] Int) -> Int -> Int))) (seq a a)))) (seq a (undefined::([] ([] (([] ([] Bool)) -> [] ([] (Bool -> Bool))))) -> [] (Int -> [] Int))))
(\a -> (undefined::Bool -> ([] Int) -> [] Int) (seq a (undefined::Bool))) ((undefined::Int -> [] (([] (([] Bool) -> [] (Bool -> Bool))) -> Bool -> Bool)) ((undefined::Bool -> Int) False))
\a -> a
(undefined::Int -> (([] Int) -> [] (Int -> Bool)) -> ([] Int) -> [] Int) ((\a -> seq a (seq a (seq a 2))) (\a -> seq a (undefined::Bool))) ((!!) ((\a -> seq a (seq a ([]::[] (([] Int) -> [] (Int -> Bool))))) (undefined::Bool)) ((-) (id 1) (undefined::Int)))
\a -> seq a (take 0 (undefined::[] Int))
case1 (\a -> seq a (seq a (undefined::Int -> ([] Bool) -> ([] Int) -> [] Int)) (seq a (seq a (seq a (seq a 0))))) (case1 (undefined::Bool -> ([] Bool) -> ([] Int) -> [] Int) (undefined::([] Int) -> [] Int) (head (undefined::[] ([] Bool)))) (map (\a -> seq a (seq a (seq a True))) ((++) ([]::[] ([] ([] Int))) (undefined::[] ([] ([] Int)))))
case1 (\a -> (undefined::([] (([] Int) -> Bool)) -> ([] Int) -> [] Int)) (\a -> seq a (seq a a)) (case1 (\a -> \b -> seq b ([]::[] (([] Int) -> Bool))) (head (undefined::[] ([] (([] Int) -> Bool)))) ([]::[] Bool))
(undefined::([] Int) -> [] Int)
(undefined::([] Int) -> [] Int)
(\a -> \b -> (enumFromTo'::Int -> Int -> [Int]) a ((\c -> seq c a) 1)) (head ([]::[] ((([] Int) -> Bool -> Bool) -> Int)) ((!!) ([]::[] (([] Int) -> Bool -> Bool)) ((!!) ([]::[] Int) (undefined::Int))))
(\a -> head ((\b -> seq b (seq a (undefined::[] (Int -> ([] Int) -> [] Int)))) (seq a (seq a (undefined::Int))))) ((\a -> a (a (undefined::Bool))) (\a -> a)) 1
\a -> seq a a
(!!) ([]::[] (([] (Int -> [] Int)) -> ([] Int) -> [] Int)) (head (undefined::[] Int)) (undefined::[] (Int -> [] Int))
(undefined::(([] (Int -> [] Bool)) -> Int -> Int -> Int) -> ([] Int) -> [] Int) ((\a -> seq a (\b -> \c -> \d -> (undefined::(Int -> Int) -> Int) (\e -> c))) (\a -> a))
\a -> id (seq a (map (\b -> (undefined::Bool -> (([] Int) -> Int -> [] Int) -> Int) (seq a (seq b (seq a (undefined::Bool)))) (undefined::([] Int) -> Int -> [] Int)) (seq a (seq a (\b -> a)) ((\b -> seq b (seq a (undefined::([] ([] Int)) -> [] ([] ([] Int))))) (even (seq a (undefined::Int)))))))
filter (undefined::Int -> Bool)
map (\a -> a)
id
(undefined::((Int -> ([] Int) -> Int) -> Bool) -> ([] Int) -> [] Int) (\a -> seq a (undefined::(([] ([] (Int -> Bool))) -> [] (Int -> Bool)) -> Bool) (seq a (map ((\b -> seq b head) (head ([]::[] Int))))))
tail
(\a -> seq a (\b -> (undefined::(([] Int) -> ([] Int) -> [] ([] Int)) -> [] Int) (seq b (\c -> \d -> seq c (\e -> ([]::[] ([] Int))) (even 2))))) (head (tail (head ([]::[] ([] (Int -> ([] ([] Bool)) -> [] Bool))))) (id (case1 (undefined::Bool -> ([] Bool) -> Int) (undefined::Int) (undefined::[] Bool))))
(!!) ((\a -> seq a (\b -> seq a (undefined::[] (([] Int) -> [] Int))) (seq a (undefined::Int))) ((\a -> id a) True)) (undefined::Int)
(undefined::(([] Int) -> Int -> Int -> Int) -> ([] Int) -> [] Int) (\a -> (\b -> seq b (seq a (\c -> (\d -> \e -> d) 0))) (\b -> head (seq b (\c -> seq a ([]::[] ([] (Int -> Int)))) b)))
(\a -> \b -> seq a b) tail
\a -> (undefined::Bool -> [] Int) (seq a (\b -> case1 (\c -> head) (seq a (undefined::Bool)) (undefined::[] Bool)) ([]::[] (([] (([] Int) -> [] Int)) -> [] Bool)))
\a -> (undefined::[] Int)
(undefined::(Int -> Int) -> (Int -> Int -> Bool) -> ([] Int) -> [] Int) (\a -> a) (\a -> \b -> seq b (seq b (case1 (head (seq b ([]::[] (Bool -> ([] Bool) -> Bool)))) False (seq b (seq a (undefined::[] Bool))))))
tail
(undefined::(([] (Int -> Int -> Bool)) -> ([] (([] Int) -> [] (Bool -> Bool))) -> Int) -> ([] Int) -> [] Int) (undefined::([] (Int -> Int -> Bool)) -> ([] (([] Int) -> [] (Bool -> Bool))) -> Int)
\a -> a
\a -> a
\a -> a
\a -> a
id
\a -> a
head ([]::[] ((([] (Int -> Bool)) -> Int -> Bool) -> ([] Int) -> [] Int)) head
(!!) ((:) (id tail) (id (\a -> ([]::[] (([] Int) -> [] Int))) ([]::[] Bool))) ((undefined::(([] Int) -> [] ([] Int)) -> Int) (\a -> seq a (seq a (seq a (seq a (undefined::(Int -> Int) -> [] ([] Int)) (\b -> b))))))
(\a -> seq a (seq a (\b -> \c -> (undefined::Bool -> [] Int) (not (undefined::Bool)))) (map (\b -> seq a (undefined::[] Bool)) (seq a (seq a (seq a ([]::[] Bool)))))) (\a -> seq a ((undefined::([] (Int -> ([] Int) -> Int -> Int -> Bool)) -> [] ([] Bool)) (seq a (undefined::[] (Int -> ([] Int) -> Int -> Int -> Bool)))))
\a -> map (undefined::Bool -> Int) ((\b -> seq b (undefined::[] Bool)) (seq a (seq a (id (head (seq a (undefined::[] (Int -> Int -> Int))))))))
case1 (\a -> \b -> take a) (\a -> (!!) (seq a (seq a (seq a (undefined::[] ([] Int))))) (seq a (id (undefined::Int)))) ((\a -> seq a (undefined::Bool -> [] Int)) (head (undefined::[] Bool)) (((==)::Int -> Int -> Bool) 2 (id 0)))
(undefined::([] Int) -> [] Int)
(\a -> (\b -> seq b (seq a (seq a (\c -> id)) (id (seq b (undefined::Bool))))) (take (seq a (seq a (undefined::Int))) (undefined::[] (([] Int) -> [] Int)))) (\a -> seq a ((++) ((\b -> id b) (seq a (seq a (seq a (undefined::[] ([] Bool)))))) (map (seq a (undefined::Int -> [] Bool)) (seq a (undefined::[] Int)))))
head (id (id (tail (id (undefined::[] ((([] Int) -> Int -> Int -> Int) -> ([] Int) -> [] Int)))))) ((\a -> \b -> id (seq a (\c -> (+)) (seq a (seq b (undefined::Bool))))) (undefined::([] Int) -> [] (Int -> Bool)))
id (id (\a -> \b -> filter ((undefined::(Bool -> Bool -> Bool) -> Int -> Bool) (head (undefined::[] (Bool -> Bool -> Bool)))) (seq a (undefined::Int -> [] Int) (undefined::Int)))) ((\a -> \b -> seq b (seq a (seq a (undefined::Bool -> ([] Bool) -> Bool)) (not False))) ((\a -> seq a (id (undefined::[] (Int -> Bool)))) (undefined::[] (([] Bool) -> [] Bool))))
id (\a -> tail) (map (\a -> map (\b -> not) (seq a ([]::[] Bool))) ((enumFromTo'::Int -> Int -> [Int]) 1 (undefined::Int)))
\a -> a
head (tail (id ([]::[] (([] (([] (([] Bool) -> [] Bool)) -> Int -> Int)) -> ([] Int) -> [] Int)))) (filter (undefined::(([] (([] Bool) -> [] Bool)) -> Int -> Int) -> Bool) (undefined::[] (([] (([] Bool) -> [] Bool)) -> Int -> Int)))
(undefined::(([] (Int -> Int)) -> Int -> Int) -> ([] Int) -> [] Int) ((\a -> \b -> seq a ((-) (seq b (seq b 1)))) ((undefined::(Bool -> Bool) -> Bool) (\a -> (undefined::Bool))))
case1 (\a -> seq a (undefined::([] Bool) -> ([] Int) -> [] Int)) (id (\a -> (++) (undefined::[] Int)) (\a -> a)) ((\a -> head (undefined::[] (([] (Int -> Int)) -> [] Bool)) (seq a (seq a (undefined::[] (Int -> Int))))) (undefined::Int -> [] ([] (Int -> Bool -> Bool))))
\a -> seq a (seq a (\b -> \c -> (\d -> seq d a) (seq c (seq a (undefined::Bool))))) (seq a (undefined::Int)) (head ((undefined::(([] ([] Bool)) -> [] Bool) -> [] (([] Int) -> [] (Int -> Bool))) (seq a (\b -> seq b (undefined::([] ([] Bool)) -> [] Bool)) a)))
\a -> map (seq a (\b -> \c -> (undefined::Bool -> Int)) (undefined::([] Int) -> Bool) ((\b -> seq a (seq b (seq a (undefined::Int)))) (seq a ([]::[] ([] ([] (Int -> Int))))))) ((undefined::(([] Int) -> [] (Int -> [] Int)) -> [] Bool) ((!!) (undefined::[] (([] Int) -> [] (Int -> [] Int))) (seq a (seq a 1))))
\a -> map (\b -> seq b 2) (seq a ((\b -> (undefined::(([] Bool) -> [] Bool) -> [] ([] (Bool -> Bool))) (\c -> seq c (seq b c))) ((\b -> seq b (seq b 0)) (seq a (seq a (seq a (undefined::[] ([] ([] Int)))))))))
take ((\a -> seq a (seq a (\b -> \c -> (undefined::Int))) (seq a (seq a (undefined::Bool))) (id (\b -> b))) (map ((\a -> seq a (\b -> \c -> c) (seq a (seq a (undefined::Bool)))) ((undefined::Bool -> Int -> ([] Int) -> Int) (undefined::Bool)))))
(\a -> \b -> seq a ((undefined::Int -> (([] ([] Int)) -> [] Bool) -> [] Int) (seq b (undefined::Int)) (seq b (\c -> (undefined::Int -> [] Bool) (seq a (seq a (undefined::Int))))))) (((==)::Bool -> Bool -> Bool) True ((\a -> seq a (undefined::Bool)) (head ([]::[] ([] ([] ([] Int)))))))
head (id ([]::[] (((([] ([] Int)) -> [] Int) -> ([] ([] Int)) -> [] Int) -> ([] Int) -> [] Int))) (\a -> seq a (seq a (seq a ((\b -> \c -> seq b a) (seq a (seq a 1))))) (seq a True))
\a -> ([]::[] Int)
\a -> head (seq a (seq a (seq a (seq a (seq a (seq a (seq a ([]::[] ((Int -> Int -> ([] (Int -> Int)) -> Int -> Int) -> [] Int))))))))) (id (seq a ((\b -> seq b (\c -> seq b (seq a (undefined::Int -> ([] (Int -> Int)) -> Int -> Int)))) ((undefined::(Int -> ([] Int) -> Int) -> Int) (seq a (undefined::Int -> ([] Int) -> Int))))))
case1 (\a -> seq a (\b -> \c -> case1 (\d -> seq d (undefined::([] Bool) -> [] Int)) (undefined::[] Int) (seq c ([]::[] Bool)))) ((\a -> seq a (\b -> ([]::[] Int))) ((undefined::([] ([] Bool)) -> Int) ([]::[] ([] Bool)))) (undefined::[] ([] (Int -> Int)))
\a -> map (\b -> (undefined::Int)) (seq a ((:) (seq a ((\b -> seq b True) (seq a (seq a ([]::[] Bool))))) (id (undefined::Int -> [] Bool) (seq a 0))))
\a -> case1 (seq a (seq a (seq a (\b -> seq a (undefined::Bool -> ([] Bool) -> [] Int))) (undefined::Bool))) ((\b -> (undefined::([] Int) -> [] Int) (seq b a)) (seq a (seq a (\b -> (:) 0)))) (map (seq a (undefined::([] Bool) -> Bool)) ([]::[] ([] Bool)))
\a -> id ((\b -> take 2 (seq a (seq a (seq b (undefined::Int -> [] Int)) (seq a (seq a (undefined::Int)))))) (\b -> \c -> \d -> d))
(\a -> seq a (\b -> tail) (filter (\b -> True) (undefined::[] ([] (([] ([] Int)) -> [] ([] Bool)))))) ((\a -> seq a (\b -> seq a (\c -> seq b (undefined::[] (Bool -> Bool))) (b 0 ([]::[] Int)))) ((\a -> seq a (undefined::Bool)) (id (undefined::[] Bool))))
\a -> seq a (\b -> seq a (seq b (undefined::[] Int))) ((\b -> seq b (seq a (\c -> b) (seq a (seq a (undefined::[] Bool))))) (seq a (head (head ([]::[] (([] ([] Int)) -> [] Int)) (seq a (seq a ([]::[] ([] Int))))))))
(undefined::(([] Int) -> ([] (([] Int) -> [] Bool)) -> Bool) -> ([] Int) -> [] Int) (\a -> seq a ((\b -> seq a ((undefined::Int -> ([] (([] Int) -> [] Bool)) -> Bool) ((+1) b))) ((!!) (head (undefined::[] ([] Int))) (seq a (seq a 0)))))
(\a -> seq a (\b -> \c -> \d -> d) (seq a (seq a (seq a False)))) ((undefined::(([] Int) -> Int -> Int) -> Int) (\a -> \b -> b)) ((undefined::([] ([] Bool)) -> (([] Int) -> [] Int) -> Bool) (undefined::[] ([] Bool)) ((\a -> \b -> seq a b) 0))
(undefined::([] Int) -> [] Int)
case1 ((undefined::Int -> Int -> ([] Int) -> ([] Int) -> [] Int) ((\a -> seq a (undefined::Int)) False)) (id (case1 (\a -> tail)) ((\a -> seq a (undefined::[] Int)) (tail (undefined::[] (Int -> [] Int))))) ((undefined::(Bool -> Bool) -> [] Int) (head (id ([]::[] (Bool -> Bool)))))
\a -> map (seq a (\b -> seq b (seq b (\c -> seq b (seq c (id (undefined::Int))))) (\c -> seq a (seq a (undefined::Int -> [] ([] (Int -> Int)))) (seq b 1)))) ((undefined::Bool -> [] (([] ([] Bool)) -> [] ([] Bool))) (seq a (seq a (\b -> seq a (undefined::Bool))) (seq a (head ([]::[] (Int -> Int))))))
(!!) (undefined::[] ((Int -> Int -> Int -> Int) -> ([] Int) -> [] Int)) ((+1) (undefined::Int)) (\a -> id ((\b -> seq b (\c -> (undefined::Bool -> Int -> Int) (seq c False))) (\b -> id (\c -> (undefined::Bool)) (undefined::[] Int))))
(:) ((!!) ([]::[] Int) (case1 (undefined::Int -> ([] Int) -> Int) 0 ([]::[] Int)))
(\a -> \b -> (enumFromTo'::Int -> Int -> [Int]) ((\c -> c) (seq b (seq a (undefined::Int)))) ((\c -> c) (seq a (seq a (seq b (undefined::Int)))))) (\a -> \b -> seq b (\c -> head ((undefined::Int -> [] (Int -> Bool)) (seq b (undefined::Int)))) (head (tail (undefined::[] (([] (([] Int) -> [] Int)) -> Int -> Bool)))))
(\a -> id (\b -> case1 (undefined::Int -> ([] Int) -> [] Int) (id ([]::[] Int))) (seq a (\b -> tail (seq a b)))) (head ((\a -> seq a (id (undefined::Bool -> [] Bool) (undefined::Bool))) (\a -> (\b -> seq b (seq b (undefined::[] ([] ([] (Int -> [] Int)))))) (head (seq a ([]::[] Int))))))
\a -> seq a a
\a -> (undefined::[] Int)
\a -> (\b -> \c -> seq c (seq c (seq b (undefined::Bool -> [] Int) c))) (id ((\b -> \c -> seq b True) (id (undefined::Int)))) (seq a ((!!) (case1 (seq a (undefined::Int -> ([] Int) -> [] Bool)) ([]::[] Bool) a) (seq a (id (undefined::Bool -> Int)) (seq a (id True)))))
\a -> a
(undefined::Int -> (Int -> Int -> Bool) -> ([] Int) -> [] Int) ((undefined::([] (Int -> Int -> Int)) -> Int) (undefined::[] (Int -> Int -> Int))) ((==)::Int -> Int -> Bool)
\a -> (\b -> seq b (\c -> \d -> seq d a) (seq b 2)) (undefined::([] Int) -> Bool -> Bool) (seq a (seq a (seq a (id (id (undefined::(([] (Int -> Bool)) -> Int -> Bool) -> Bool) ((\b -> \c -> \d -> b) (not False)))))))
map (undefined::Int -> Int)
\a -> seq a ((undefined::(([] Int) -> ([] Int) -> [] Bool) -> [] Int) (head (seq a ([]::[] (Int -> ([] Int) -> ([] Int) -> [] Bool))) (id ((\b -> b) (seq a (undefined::Int))))))
\a -> seq a (undefined::(([] Int) -> Int -> Int -> Bool) -> [] Int) (\b -> (undefined::(Bool -> [] Int) -> Int -> Int -> Bool) (head (seq b (map (undefined::([] Bool) -> Bool -> [] Int) (undefined::[] ([] Bool))))))
\a -> take (seq a 1) (seq a ((enumFromTo::Int -> Int -> [Int]) ((\b -> seq a (seq b (undefined::Int))) (seq a (undefined::([] ([] (Bool -> Bool))) -> [] Int))) (case1 (undefined::Bool -> ([] Bool) -> Int) (undefined::Int) ([]::[] Bool))))
\a -> (undefined::(Int -> Int) -> (([] (Bool -> Bool)) -> Bool) -> [] Int) (seq a (seq a (\b -> (undefined::Int -> Int))) (seq a (seq a (seq a ([]::[] (Bool -> Bool)))))) ((\b -> (\c -> \d -> seq b (seq c (undefined::Bool))) ((!!) (undefined::[] ([] ([] Bool))) (undefined::Int))) (seq a (seq a (id id (seq a (seq a 0))))))
(\a -> seq a (\b -> head ([]::[] ((Int -> [] ([] Int)) -> [] Int)) ((\c -> seq c (\d -> ([]::[] ([] Int)))) (id (seq b (undefined::[] (Int -> Int))))))) (\a -> seq a (\b -> a))
\a -> (undefined::[] Int)
(undefined::([] Int) -> [] Int)
(\a -> (!!) ((!!) (seq a ([]::[] ([] (([] Int) -> [] Int)))) (seq a (seq a (undefined::Int)))) ((!!) (undefined::[] Int) 0)) ((undefined::Int -> (([] ([] Bool)) -> [] Bool) -> [] Bool) ((-) (undefined::Int) 2) (map (\a -> seq a (seq a (seq a (seq a (seq a False)))))))
\a -> (undefined::([] ([] ([] Bool))) -> ([] (Int -> Int)) -> [] Int) (head ((undefined::Int -> [] ([] ([] ([] Bool)))) (undefined::Int))) ((\b -> (undefined::Bool -> [] (Int -> Int)) (seq a (seq b (undefined::Bool)))) (seq a 2))
\a -> a
(undefined::([] Int) -> [] Int)
id (\a -> (\b -> seq b (\c -> (undefined::([] Int) -> [] Int))) ([]::[] Int)) (((==)::Int -> Int -> Bool) 0 0) (id ((\a -> \b -> a) 0 (id (\a -> odd) (head ([]::[] ([] Int))))))
(\a -> \b -> case1 (seq a (undefined::Bool -> ([] Bool) -> [] Int)) (seq b (undefined::([] Bool) -> [] Int) (seq b ([]::[] Bool))) (seq a (seq a (undefined::[] Bool)))) (\a -> (\b -> \c -> (undefined::Bool -> Int -> Bool) (seq b (seq a (seq a False)))) (id (\b -> seq b (undefined::Int)) (\b -> seq b b)))
\a -> ([]::[] Int)
(\a -> \b -> seq a (\c -> \d -> (undefined::[] Int)) (seq a (seq b (seq a (undefined::Bool))))) ((\a -> seq a (\b -> seq a ([]::[] (Int -> Bool)))) (\a -> (undefined::Bool))) (id (\a -> a (seq a (undefined::[] Int)) (seq a (undefined::Int))) ((\a -> seq a (seq a (seq a (undefined::([] Int) -> Int -> Int)))) (undefined::Bool)))
(undefined::Bool -> ([] Int) -> [] Int) False
\a -> seq a (\b -> (undefined::(([] Int) -> [] Int) -> [] Int) (\c -> c)) (\b -> head (seq a (seq a (id (seq a (seq b (undefined::[] ([] (([] Int) -> Bool)))))))))
\a -> id ((undefined::([] Int) -> (([] ([] ([] Int))) -> [] ([] ([] Int))) -> [] Int) a) (id ((\b -> seq b (\c -> (undefined::[] ([] ([] Int))))) (map (\b -> seq b id) (undefined::[] ([] Int)))))
\a -> a
tail
head (tail (id (tail ([]::[] ((([] Int) -> Int -> Int -> [] Int) -> ([] Int) -> [] Int))))) (\a -> (\b -> seq a (head (seq b (seq a (id (undefined::[] (Int -> Int -> [] Int))))))) (\b -> a))
\a -> (undefined::([] (([] Bool) -> [] Bool)) -> [] Int) (map (seq a (\b -> seq a (seq a take) (seq b 1))) ((:) (\b -> (undefined::[] (Int -> [] Int))) (undefined::[] (([] Int) -> [] (Int -> [] Int)))))
(undefined::(([] (([] Int) -> Int -> Int -> [] Int)) -> ([] Bool) -> [] Bool) -> ([] Int) -> [] Int) (\a -> \b -> (undefined::[] Bool))
\a -> (undefined::(([] ([] Int)) -> [] ([] Bool)) -> (Int -> Int -> Bool) -> [] Int) ((\b -> seq b (\c -> seq a (undefined::[] ([] Bool)))) (head (seq a (undefined::[] (Bool -> Bool))))) (\b -> \c -> id (\d -> seq b (seq d id (seq c (undefined::Bool)))) (seq a (head (seq c (undefined::[] (([] ([] ([] Int))) -> [] (Int -> [] Int)))))))
(\a -> seq a (seq a (seq a (\b -> (\c -> seq c id) (undefined::Int -> Bool))) ((!!) ([]::[] ((Int -> Bool) -> Int)) 2 (seq a (seq a odd))))) ((\a -> \b -> (\c -> c) (seq a (seq b (seq a (undefined::Int))))) (\a -> seq a ((undefined::([] Bool) -> [] ([] (Bool -> Bool))) (seq a (undefined::[] Bool)))))
\a -> a
(!!) (map (\a -> (undefined::Int -> ([] Int) -> [] Int)) (undefined::[] Bool)) (head (undefined::[] (([] Bool) -> Int)) (undefined::[] Bool)) ((!!) (tail ([]::[] (([] (Int -> [] Int)) -> Int))) 2 (id ((\a -> seq a (undefined::[] (Int -> [] Int))) (undefined::Int))))
(\a -> \b -> (\c -> seq a (seq b (head (undefined::[] (Bool -> [] Int)) (seq b (seq c False))))) (\c -> seq a (filter (seq a not) (undefined::[] Bool)))) ((\a -> seq a (\b -> seq a ([]::[] Bool)) (seq a (seq a (seq a 1)))) (\a -> \b -> seq a (seq b (seq a (undefined::([] Int) -> Bool))) a))
\a -> (\b -> seq a (\c -> \d -> a) (seq b (seq b (seq b ([]::[] ([] (Bool -> Bool))))))) ((!!) ([]::[] (Int -> Int -> [] Int)) (seq a (seq a (undefined::Int)))) ((\b -> head (seq b (seq b ([]::[] Bool)))) (seq a (\b -> id (\c -> \d -> c))))
(\a -> seq a (\b -> head (seq a ([]::[] (Int -> ([] Int) -> [] Int))) 2) (seq a (undefined::([] Int) -> [] ([] (Bool -> Bool))) (seq a (seq a ([]::[] Int))))) (\a -> (\b -> seq a (seq b (\c -> seq b (\d -> c)))) (undefined::Bool))
tail
\a -> a
case1 (\a -> \b -> b) ((\a -> map (\b -> seq a b) (seq a (seq a (undefined::[] Int)))) (case1 (\a -> (undefined::([] Int) -> Bool)) (undefined::Bool) ([]::[] Int)))
id
\a -> a
id (\a -> seq a (undefined::(Int -> [] Int) -> ([] Int) -> [] Int)) ((\a -> seq a True) ((+1) 0)) (\a -> (\b -> seq b ((undefined::([] (Int -> Bool -> Bool)) -> [] Int) (seq b (seq b (seq a (undefined::[] (Int -> Bool -> Bool))))))) (\b -> b))
(\a -> seq a (seq a (seq a (\b -> seq b (\c -> (undefined::([] Int) -> [] Int)) (seq b (seq b 1))))) (\b -> (\c -> head (seq c (undefined::[] ([] ([] Bool))))) (seq a (seq a (seq a ([]::[] ([] ([] (Int -> Int))))))))) (\a -> seq a (seq a (seq a (seq a (\b -> seq b (undefined::Int -> [] ([] (Int -> Bool)))) (seq a (seq a (undefined::Int)))) ((\b -> seq b (seq b (undefined::Int))) (even (seq a (undefined::Int)))))))
(!!) ((\a -> map (\b -> tail) (seq a (seq a ([]::[] ([] Int))))) 0) 1
\a -> (undefined::(([] ([] ([] ([] Bool)))) -> Bool -> Bool) -> [] Int) (seq a (undefined::([] ([] ([] ([] Bool)))) -> Bool -> Bool))
take ((!!) (id (\a -> (undefined::(Bool -> Bool) -> [] Int)) (tail ([]::[] Bool)) not) ((\a -> case1 (seq a (undefined::Bool -> ([] Bool) -> Int)) (seq a (undefined::Int)) (undefined::[] Bool)) (\a -> seq a (seq a (undefined::(Int -> Int) -> ([] Int) -> Bool) (\b -> b)))))
(\a -> (++) (seq a (seq a ((undefined::Int -> (Int -> Bool -> Bool) -> [] Int) a (\b -> seq a (\c -> seq a not) (seq a ([]::[] ([] Int)))))))) (undefined::Int)
(\a -> take (seq a (seq a (\b -> id)) (seq a (id ([]::[] (Int -> Int)))) (seq a (seq a (id (head (seq a ([]::[] Int)))))))) (\a -> seq a (undefined::Int -> Int -> [] Int) (seq a (\b -> seq b (undefined::Int)) (\b -> (enumFromTo::Int -> Int -> [Int]) (seq b 0))))
\a -> a
(undefined::([] Int) -> [] Int)
(undefined::(([] ([] (([] Bool) -> [] (Bool -> Bool)))) -> [] (([] Bool) -> [] (Bool -> Bool))) -> ([] Int) -> [] Int) (head (undefined::[] (([] ([] (([] Bool) -> [] (Bool -> Bool)))) -> [] (([] Bool) -> [] (Bool -> Bool)))))
(\a -> seq a ((\b -> \c -> seq b c) 1)) (\a -> seq a (seq a (\b -> take 2 (seq b (undefined::[] (Int -> [] Int))))) (seq a (\b -> \c -> \d -> seq c (\e -> seq b (undefined::Bool)) (seq a c))))
(!!) ((!!) ((++) ([]::[] ([] (([] Int) -> [] Int))) (tail (undefined::[] ([] (([] Int) -> [] Int))))) ((undefined::(([] Int) -> Bool) -> Int) (\a -> seq a (undefined::Bool)))) (undefined::Int)
(\a -> \b -> seq b (id (\c -> (undefined::Int -> [] Int)) (id (seq a (undefined::[] Bool)))) (seq a (seq a (\c -> 1)) ([]::[] ([] ([] ([] (Int -> Bool))))))) (\a -> seq a (\b -> \c -> \d -> d) (id 2) (seq a (id (undefined::(Int -> [] (Bool -> Bool)) -> Bool)) (seq a (\b -> seq b ([]::[] (Bool -> Bool))))))
(\a -> (\b -> seq b (seq a (\c -> (undefined::([] Int) -> [] Int)))) (not (undefined::Bool)) 0) 0
\a -> seq a (seq a a)
\a -> filter (\b -> seq a (undefined::(Int -> Int -> [] Int) -> Bool -> Bool) (\c -> \d -> a) False) ((undefined::Int -> [] Int) ((\b -> seq a (seq b (seq a 1))) (id (undefined::[] ([] ([] ([] (([] Int) -> [] Int))))))))
id (\a -> seq a (seq a (undefined::Bool -> Int -> ([] Int) -> [] Int)) (not (seq a (undefined::Bool))) (seq a ((undefined::(Int -> Bool) -> Int) (\b -> not False)))) (\a -> seq a (\b -> id (\c -> ([]::[] ([] (Int -> Int)))) (id (seq a (undefined::Int)))) (head (head (seq a (undefined::[] ([] (([] (Int -> Int)) -> ([] Int) -> Int)))))))
\a -> seq a ((\b -> seq b (head ([]::[] (Bool -> Int -> [] Int)) (seq b (seq b (undefined::Bool))))) tail) (seq a (seq a (seq a (undefined::(([] Int) -> Int) -> Bool -> Int)) (case1 (undefined::Int -> ([] Int) -> Int) (undefined::Int)) ((\b -> b (b (seq b True))) (\b -> (undefined::Bool)))))
(\a -> seq a ((\b -> \c -> b (seq c (seq b (seq c (seq b (seq b 2)))))) ((!!) ([]::[] (Int -> [] Int)) ((+1) (undefined::Int))))) (\a -> seq a (\b -> map (\c -> seq a (seq c (undefined::[] ([] Bool)))) (tail (undefined::[] (([] Int) -> Int -> Int -> Bool)))))
(\a -> \b -> \c -> (undefined::Bool -> [] Int) (seq c (seq a False))) ((\a -> seq a (tail ([]::[] ([] (Bool -> Bool))))) False) ((undefined::Bool -> ([] ([] (Int -> Int -> Bool))) -> Int) ((!!) (undefined::[] Bool) 2) ((\a -> seq a (seq a ([]::[] ([] (Int -> Int -> Bool))))) False))
id (\a -> \b -> head (seq a (undefined::[] ((Int -> Int -> [] Int) -> [] Int))) (\c -> (\d -> seq b (\e -> d)) b)) (head (head (tail (undefined::[] ([] (([] Int) -> ([] ([] ([] (Int -> [] Int)))) -> [] ([] (Int -> [] Int))))))))
\a -> seq a (head (undefined::[] ((([] Bool) -> [] (Bool -> Bool)) -> Bool -> [] Int)) (seq a (seq a (undefined::([] Bool) -> [] (Bool -> Bool)))) ((undefined::(Int -> [] Int) -> ([] (Bool -> Bool)) -> Bool) (undefined::Int -> [] Int) ((undefined::([] (Int -> Bool)) -> [] (Bool -> Bool)) (take (undefined::Int) (undefined::[] (Int -> Bool))))))
\a -> id (\b -> \c -> (undefined::Bool -> [] Int)) (undefined::Bool) a (seq a (seq a (seq a ((undefined::(Int -> Bool -> Bool) -> Bool) (\b -> id)))))
id (id (\a -> (\b -> (\c -> seq c tail) (seq b (seq a (undefined::[] Int)))) ((undefined::(([] Int) -> Bool) -> Bool) (\b -> seq a (seq a False))))) (id (undefined::Bool -> ([] (([] Bool) -> [] Bool)) -> ([] Bool) -> [] Bool) ((undefined::([] (([] Int) -> [] Bool)) -> Bool) (undefined::[] (([] Int) -> [] Bool))))
head (map (head ([]::[] ((([] (Int -> ([] Int) -> Int)) -> Int -> Bool) -> ([] Int) -> [] Int))) (undefined::[] (([] (Int -> ([] Int) -> Int)) -> Int -> Bool)))
\a -> a
\a -> map (undefined::(([] Int) -> Int -> Int -> [] Int) -> Int) (undefined::[] (([] Int) -> Int -> Int -> [] Int))
(\a -> seq a (\b -> \c -> \d -> seq c d) ((||) (undefined::Bool) (undefined::Bool))) ((\a -> seq a (seq a (\b -> ([]::[] Int)))) ((+1) (undefined::Int))) (undefined::Bool)
(undefined::([] Int) -> [] Int)
tail
(\a -> (\b -> \c -> (undefined::Bool -> [] Int) (seq b (head ([]::[] Bool)))) (seq a (\b -> id (seq a (undefined::([] ([] (Int -> Bool))) -> [] Bool)) (seq b (seq a (seq a (undefined::[] ([] (Int -> Bool))))))))) ((\a -> case1 (\b -> (undefined::([] Bool) -> Int)) a (seq a ([]::[] Bool))) ((undefined::Bool -> Int) (not (undefined::Bool))))
(\a -> (:) a) ((\a -> seq a (seq a (+1)) (seq a (seq a (seq a (undefined::Int))))) (undefined::[] ([] Int)))
case1 (undefined::Int -> ([] Int) -> ([] Int) -> [] Int) (\a -> a) ((undefined::(([] Int) -> [] (Int -> Int)) -> [] Int) (\a -> (undefined::[] (Int -> Int))))
take ((\a -> seq a (seq a (\b -> seq b 0)) (\b -> seq a (seq b b))) ((!!) (undefined::[] ((Int -> Int) -> Bool)) (undefined::Int) ((!!) (undefined::[] Int))))
\a -> a
head (id ((\a -> seq a (undefined::[] (Int -> ([] Int) -> [] Int))) ((\a -> \b -> \c -> a) False))) (undefined::Int)
id (\a -> \b -> seq b (seq b (seq a (\c -> seq c (seq a b)))) (\c -> a)) (id (\a -> seq a even) ((+1) 0) ((\a -> id (seq a 0)) (\a -> seq a (undefined::Bool))))
(\a -> seq a ((\b -> \c -> seq b (seq a (seq c (undefined::Bool -> [] Int)) (seq c True))) (seq a (\b -> (!!) (seq b (undefined::[] ([] ([] ([] Bool))))) (undefined::Int))))) ((undefined::(([] Int) -> [] Int) -> Bool -> Int) (\a -> (undefined::[] Int)) ((\a -> seq a (seq a a)) False))
\a -> id ((undefined::Bool -> Int -> Int -> [] Int) (seq a (seq a True))) (seq a (seq a (\b -> seq a 2)) ([]::[] (([] Int) -> Bool))) (seq a (seq a ((undefined::([] (Int -> Bool)) -> Int) (seq a ((\b -> seq b ([]::[] (Int -> Bool))) (seq a (seq a True)))))))
\a -> (\b -> filter ((\c -> b (seq c ([]::[] (Int -> Bool)))) True) (seq a (case1 take (undefined::[] Int) (undefined::[] Int)))) (\b -> \c -> (undefined::Bool -> (([] Int) -> Bool -> Bool) -> Bool) (seq a (seq c (seq a True))) (seq a (\d -> \e -> d) (\d -> d)))
\a -> seq a a
id (\a -> \b -> \c -> (undefined::Bool -> [] Int) (a (undefined::[] Int) 1)) ((undefined::Int -> ([] Int) -> Int -> Bool) 1) ((\a -> seq a (seq a True)) (take (undefined::Int) ([]::[] ([] (([] Int) -> Int -> Int -> Bool)))))
\a -> seq a (\b -> head ([]::[] (([] (([] Bool) -> ([] Int) -> Bool)) -> [] Int))) ((undefined::Bool -> Int) (undefined::Bool)) (head (seq a (undefined::[] ([] (([] Bool) -> ([] Int) -> Bool)))))
\a -> (undefined::((([] (Int -> Int)) -> ([] (([] ([] ([] Bool))) -> [] ([] ([] Bool)))) -> [] (Int -> Int)) -> Int) -> [] Int) (undefined::(([] (Int -> Int)) -> ([] (([] ([] ([] Bool))) -> [] ([] ([] Bool)))) -> [] (Int -> Int)) -> Int)
tail
\a -> a
case1 (\a -> seq a (undefined::([] (Int -> Int -> Bool)) -> ([] Int) -> [] Int)) ((++) (case1 take (undefined::[] Int) ([]::[] Int))) ((:) (\a -> seq a (\b -> not False)) ((!!) (undefined::[] ([] (Int -> Int -> Bool))) (undefined::Int)))
case1 ((\a -> seq a (\b -> \c -> (:) (undefined::Int))) 0) (\a -> seq a (seq a (seq a a))) ([]::[] Bool)
(\a -> (undefined::(([] Bool) -> [] Bool) -> ([] Int) -> [] Int) (\b -> seq b (seq a (seq a (undefined::Bool -> [] Bool))) (seq b (seq a (seq a (undefined::Bool)))))) (\a -> a)
id
\a -> seq a (\b -> a) (\b -> (undefined::(([] Int) -> Int -> Bool) -> ([] ([] ([] Bool))) -> ([] Int) -> Int -> Bool))
(\a -> (undefined::Int -> Bool -> ([] Int) -> [] Int) (seq a (head ([]::[] Int))) ((&&) (seq a (a 2)) (a (seq a (undefined::Int))))) (\a -> seq a (not (seq a (\b -> seq a not) (seq a (undefined::Int -> Int)) (seq a (seq a ((undefined::(Int -> Bool) -> Bool) (seq a (\b -> False))))))))
\a -> a
head (id ([]::[] (((([] Int) -> [] Int) -> Int) -> ([] Int) -> [] Int))) (\a -> 1)
\a -> map (seq a (\b -> 2)) (seq a ((:) ((\b -> seq b (seq b (undefined::([] Int) -> [] ([] Int)))) (seq a (undefined::Int))) (filter (undefined::(([] Int) -> [] ([] Int)) -> Bool) (seq a ([]::[] (([] Int) -> [] ([] Int)))))))
(\a -> seq a (seq a (seq a (\b -> (undefined::([] Int) -> [] Int)) (seq a (\b -> \c -> ([]::[] (Bool -> Bool))) (seq a (seq a (seq a ([]::[] Bool)))))))) ((undefined::(([] Int) -> Int -> Int) -> Int) (\a -> \b -> head (seq b ([]::[] (([] (Bool -> Bool)) -> Int))) (undefined::[] (Bool -> Bool))))
\a -> (undefined::(([] Int) -> Int -> Bool) -> Bool -> [] Int) ((\b -> seq b (seq a (seq a (undefined::([] Int) -> Int -> Bool)))) ((+1) (seq a 0))) (seq a (seq a ((\b -> seq b (undefined::(Int -> Int -> [] Int) -> Bool)) (undefined::[] Int)) ((\b -> \c -> \d -> seq c (seq b ([]::[] Int))) ((++) ([]::[] ([] Bool)) ([]::[] ([] Bool))))))
(:) ((-) ((\a -> a) ((\a -> a) ((+1) 2))) ((undefined::(Bool -> Int -> [] (([] ([] Int)) -> [] ([] ([] Int)))) -> Int) (\a -> \b -> seq a ((++) ([]::[] (([] ([] Int)) -> [] ([] ([] Int)))) ([]::[] (([] ([] Int)) -> [] ([] ([] Int))))))))
(undefined::([] Int) -> [] Int)
tail
(\a -> seq a (\b -> \c -> seq b id) ((&&) (undefined::Bool) (undefined::Bool)) (seq a (((==)::Int -> Int -> Bool) 0) (seq a (seq a (seq a 0))))) ([]::[] (([] ([] Bool)) -> [] ([] Bool)))
(undefined::([] Int) -> [] Int)
(\a -> (\b -> (\c -> \d -> seq c d) (seq b (seq a (a (undefined::Int) (undefined::Int))))) (seq a (seq a (even (seq a (undefined::Bool -> Int) (undefined::Bool)))))) (\a -> (!!) (seq a (seq a (undefined::[] (Bool -> Int -> Bool)))) a (seq a (undefined::Bool)))
(++) ((enumFromTo::Int -> Int -> [Int]) (undefined::Int) ((undefined::([] Bool) -> Int) (case1 (\a -> (undefined::([] ([] Int)) -> [] Bool)) (undefined::[] Bool) (undefined::[] ([] Int)))))
(undefined::([] (Int -> [] Int)) -> ([] Int) -> [] Int) ((\a -> seq a (undefined::Int -> [] (Int -> [] Int)) ((-) (undefined::Int) (undefined::Int))) ((\a -> seq a (\b -> seq b (+1))) (undefined::Bool)))
(\a -> seq a (take (head ([]::[] ((Int -> Int -> [] Int) -> Int)) (seq a (seq a (seq a (undefined::Int -> Int -> [] Int))))))) ((\a -> (undefined::([] (Int -> Bool)) -> ([] Int) -> Int -> Bool) (filter (undefined::(Int -> Bool) -> Bool) a)) (map (\a -> \b -> seq a True) ([]::[] ([] Bool))))
(\a -> \b -> seq b (undefined::([] (Int -> Int)) -> ([] Int) -> [] Int) (seq a ([]::[] (Int -> Int)))) ((\a -> seq a False) (head (undefined::[] (([] Int) -> [] (Int -> [] Int))))) ((\a -> (undefined::Int -> Int -> Int -> [] ([] Bool)) (seq a (seq a 0))) (\a -> seq a (seq a (seq a (seq a (undefined::([] ([] ([] Int))) -> [] ([] Bool))) ([]::[] ([] ([] Int)))))))
(!!) (map (\a -> seq a (seq a (seq a (undefined::Int -> ([] Int) -> [] Int)) (seq a (seq a 1)))) ((undefined::([] Bool) -> [] (([] Int) -> [] Bool)) (undefined::[] Bool))) (undefined::Int)
case1 (\a -> seq a (seq a (seq a (\b -> seq b (undefined::([] Bool) -> ([] Int) -> [] Int)) a))) ((\a -> seq a (\b -> b)) (map (undefined::(Bool -> Bool) -> Int -> Bool) ([]::[] (Bool -> Bool)))) ((\a -> seq a (undefined::(Int -> Bool) -> [] Bool)) ([]::[] ([] Int)) (undefined::Int -> Bool))
\a -> seq a a
(\a -> seq a (head (seq a (head ([]::[] ([] (([] Int) -> [] Int))))))) (tail ((\a -> (\b -> seq a (seq b (undefined::[] Bool))) (undefined::Bool)) (undefined::([] (Int -> Int)) -> Int -> Int)))
take ((\a -> seq a (a (seq a (seq a (seq a (seq a ([]::[] Int))))) (undefined::[] (([] Int) -> Int -> [] Int)) (a ([]::[] Int) ([]::[] (([] Int) -> Int -> [] Int)) 0))) (undefined::([] Int) -> ([] (([] Int) -> Int -> [] Int)) -> Int -> Int))
(\a -> seq a (\b -> (\c -> seq c (seq c tail)) (seq b (seq b b)))) (tail ((++) (undefined::[] ([] (Int -> Int))) (undefined::[] ([] (Int -> Int))))) ((\a -> \b -> seq a (seq b ([]::[] (Int -> Bool)))) ((++) ([]::[] Int) (undefined::[] Int)) (((==)::Bool -> Bool -> Bool) (id (undefined::Bool)) (even 0)))
id
\a -> case1 (seq a (undefined::(Int -> Int -> [] Int) -> ([] (Int -> Int -> [] Int)) -> [] Int)) a ([]::[] (Int -> Int -> [] Int))
\a -> seq a (map (+1) (head (seq a ((:) (undefined::Bool -> [] Int) ([]::[] (Bool -> [] Int)))) (case1 (seq a (undefined::Int -> ([] Int) -> Bool)) (seq a False) a)))
tail
id (\a -> (undefined::Bool -> ([] Int) -> [] Int) (seq a (id (undefined::Bool -> Bool) (seq a (seq a (undefined::Bool)))))) (id (id (undefined::([] (([] Int) -> ([] Int) -> [] Int)) -> Int -> Int -> [] Int)))
id
tail
case1 (\a -> seq a (\b -> \c -> seq c (seq b c))) (undefined::([] Int) -> [] Int) ((\a -> seq a (undefined::Int -> [] ([] ([] ([] Bool))))) (not False) (id 0))
\a -> a
(undefined::([] Int) -> [] Int)
\a -> a
\a -> seq a ((enumFromTo::Int -> Int -> [Int]) (undefined::Int) (seq a (id (seq a (seq a (\b -> seq a b) (head (seq a (seq a a))))))))
\a -> seq a (\b -> \c -> ([]::[] Int)) (seq a (\b -> \c -> seq b (undefined::[] Bool)) (seq a (seq a (seq a (undefined::Int))))) (id (seq a (-)) (undefined::Int) (seq a (seq a (seq a (seq a (undefined::([] (Bool -> Bool)) -> Int)) (seq a (undefined::[] (Bool -> Bool)))))))
\a -> head (seq a (undefined::[] ((([] (([] ([] Bool)) -> [] Bool)) -> ([] Int) -> [] Int) -> [] Int))) (\b -> (undefined::(([] ([] Int)) -> [] Bool) -> ([] Int) -> [] Int) (\c -> case1 (\d -> (undefined::([] Int) -> [] Bool)) (seq b ([]::[] Bool)) (seq a a)))
\a -> (\b -> map (seq b (undefined::(([] (([] Int) -> ([] Int) -> [] Bool)) -> Int) -> Int)) (seq a (seq a ([]::[] (([] (([] Int) -> ([] Int) -> [] Bool)) -> Int))))) ([]::[] (([] (Bool -> Bool)) -> (Int -> Bool -> Bool) -> Int -> Bool -> Bool))
id
head (map ((\a -> (undefined::Bool -> Bool -> ([] Int) -> [] Int) (seq a (head (undefined::[] Bool)))) ((\a -> seq a (seq a True)) ([]::[] ([] ([] Int))))) ((undefined::(([] Int) -> [] (Int -> Int)) -> [] Bool) (\a -> seq a ((:) (undefined::Int -> Int) (seq a ([]::[] (Int -> Int)))))))
(\a -> (\b -> take (seq b (undefined::Bool -> Int) True)) ((undefined::([] (([] Int) -> [] Int)) -> [] Bool) (seq a (head ([]::[] ([] (([] Int) -> [] Int))))))) (head ([]::[] (([] (Int -> [] Int)) -> ([] ([] (Int -> [] Int))) -> [] (Int -> [] Int))))
(\a -> seq a (\b -> \c -> seq b (\d -> (undefined::[] Int)) (seq c (seq b (undefined::[] ([] ([] Int))))))) ((+1) (id (undefined::Bool -> Int) (id True))) (undefined::([] Int) -> ([] Bool) -> [] Bool)
take ((\a -> seq a ((!!) (seq a (\b -> (undefined::[] Int)) (\b -> seq b (undefined::Int))) ((undefined::([] ([] (Int -> Int))) -> Int) (seq a (seq a (seq a (undefined::[] ([] (Int -> Int))))))))) ((\a -> \b -> seq b (seq b (seq a (undefined::([] Int) -> [] (Int -> Bool)))) ([]::[] Int)) (id ((!!) (undefined::[] Int) (undefined::Int)))))
\a -> a
(\a -> \b -> seq a (seq a (undefined::([] (Int -> Bool)) -> Int -> [] Int) (seq a (seq b ([]::[] (Int -> Bool)))) (seq a (\c -> seq a 1) (id (seq b ([]::[] (Int -> Int))))))) ([]::[] (([] Bool) -> [] Bool))
\a -> (undefined::(([] Int) -> Int -> Int) -> ([] ([] ([] Bool))) -> [] Int) (seq a (seq a (\b -> \c -> (+1))) (seq a (undefined::Int))) (seq a (seq a (head ([]::[] ((Int -> [] Bool) -> [] ([] ([] Bool))))) ((!!) (head (undefined::[] ([] (Int -> [] Bool)))) (seq a (seq a (undefined::Int))))))
id ((\a -> seq a (undefined::Bool -> Bool -> ([] Int) -> [] Int)) 2 ((\a -> seq a (seq a (seq a True))) (head ([]::[] (Int -> ([] Int) -> Int)))) (undefined::Bool))
\a -> (undefined::[] Int)
\a -> (\b -> seq b a) ((\b -> b) (seq a (id (undefined::([] (([] Bool) -> [] Bool)) -> Bool)) (seq a (seq a (seq a (undefined::[] (([] Bool) -> [] Bool)))))))
\a -> a
\a -> (:) (undefined::Int) (undefined::[] Int)
(undefined::([] Int) -> [] Int)
(\a -> \b -> seq b (seq a take)) ((!!) ([]::[] Int) 1) ((\a -> seq a (seq a (undefined::Int))) (undefined::[] (([] Int) -> Bool))) (case1 (undefined::([] ([] ([] Bool))) -> ([] ([] ([] ([] Bool)))) -> Int) ((\a -> seq a 2) ((+1) (undefined::Int))) (id (undefined::[] ([] ([] ([] Bool))))))
\a -> a
id (\a -> id) ((\a -> (\b -> seq b (seq a (\c -> (undefined::[] (Int -> Bool))))) (seq a (seq a (undefined::Int)))) (map (\a -> \b -> b) (tail (undefined::[] ([] ([] Bool))))))
\a -> seq a a
id
\a -> seq a a
\a -> (\b -> seq b (\c -> ([]::[] Int))) (seq a ((\b -> seq b (seq b False)) False)) (\b -> seq b ((\c -> seq c (undefined::Int -> ([] ([] Int)) -> [] Int)) (seq a (seq b (seq b b))) (seq b ((+1) (head (head (undefined::[] ([] Int))))))))
\a -> filter (\b -> odd b) ((undefined::(([] Bool) -> Int -> [] Int) -> [] Int) (\b -> \c -> a))
\a -> seq a (seq a (seq a (seq a ((\b -> seq a (\c -> seq b (undefined::Bool -> [] Int)) (seq b (seq a True)) (head ((undefined::Bool -> [] Bool) (undefined::Bool)))) ((undefined::(Int -> Int -> Int -> Int) -> [] (([] Bool) -> [] Bool)) (\b -> head (seq b (undefined::[] (Int -> Int -> Int -> Int))) (seq b b)))))))
case1 (\a -> seq a (\b -> (undefined::Bool -> ([] Int) -> [] Int))) ((\a -> \b -> seq a (undefined::([] Int) -> [] Int)) (undefined::Int)) ((++) (undefined::[] Int) (undefined::[] Int)) (id ((\a -> seq a (\b -> seq b (undefined::Bool))) ((+1) 2) (\a -> a)))
tail
\a -> seq a (\b -> seq a (seq a ((undefined::Int -> ([] ([] ([] Bool))) -> [] Int) (id 0))) (seq a (\c -> id ([]::[] ([] ([] Bool)))) a)) (\b -> \c -> seq a (\d -> (undefined::Int -> Bool)) (seq b (\d -> (undefined::(Bool -> Bool) -> [] ([] Int)) (\e -> seq d e))))
\a -> a
(\a -> \b -> seq a (seq a (seq b (undefined::Bool -> Int -> [] Int))) (head (seq a (undefined::[] Bool))) ((-) 2 (seq a (seq a (undefined::Int))))) (\a -> seq a ((!!) ((\b -> seq b (seq b (undefined::[] (Int -> [] Int)))) (seq a (id (undefined::[] (Int -> Int))))) (seq a (seq a (seq a (undefined::([] Int) -> Int)) a))))
\a -> a
\a -> map (seq a (\b -> seq b (seq a (\c -> seq a (seq b (seq c (seq c c))))) (seq a 0))) ((!!) (seq a (seq a ([]::[] ((Int -> [] Bool) -> [] Bool)))) (seq a (seq a 0)) (undefined::Int -> [] Bool))
(\a -> seq a (seq a (\b -> seq b b))) ((\a -> \b -> seq a (undefined::Int -> ([] Int) -> [] ([] Int)) a) (undefined::Int))
\a -> (!!) (seq a (\b -> (undefined::Bool -> [] ([] Int)) (not (undefined::Bool))) (case1 (\b -> (undefined::([] ([] Int)) -> Bool)) (seq a (undefined::Bool)) ([]::[] ([] Int)))) (case1 (\b -> (undefined::([] Bool) -> Int)) ((undefined::Bool -> Int) (seq a (undefined::Bool))) (seq a (undefined::Bool -> [] Bool) (seq a (undefined::Bool))))
\a -> (enumFromTo'::Int -> Int -> [Int]) ((\b -> b) 2) ((+1) (case1 (seq a (\b -> id (undefined::([] Int) -> Int))) (seq a (seq a 0)) a))
take (head ((!!) ([]::[] ([] (Int -> Int))) ((+1) (undefined::Int))) ((!!) (undefined::[] Int) (undefined::Int)))
\a -> seq a (map (seq a (\b -> case1 (seq b (undefined::([] Int) -> ([] ([] Int)) -> Int)) (seq b (seq a (seq a (undefined::Int)))) (head (seq b ([]::[] ([] ([] Int))))))) ((undefined::([] ([] (Bool -> Bool))) -> [] (([] Int) -> Int -> Int -> Bool)) ((\b -> seq a (seq b ([]::[] ([] (Bool -> Bool))))) (head ([]::[] Int)))))
(undefined::(([] ([] ([] Int))) -> [] ([] Bool)) -> ([] Int) -> [] Int) (\a -> seq a ([]::[] ([] Bool)))
tail
head ((undefined::(([] Int) -> [] Bool) -> [] (([] Int) -> [] Int)) (\a -> id (seq a (\b -> \c -> b) (seq a (seq a (undefined::[] Bool)))) (\b -> id (seq a (id b)))))
tail
filter (undefined::Int -> Bool)
(undefined::([] Int) -> [] Int)
\a -> (\b -> map (seq a (\c -> seq c (undefined::([] (Int -> Bool)) -> Int) (seq a ([]::[] (Int -> Bool))))) ((!!) (undefined::[] ([] (([] Int) -> ([] Int) -> Bool))) (seq a (seq a (seq b (undefined::Int)))))) ((undefined::Bool -> [] (([] (([] Int) -> ([] Int) -> Bool)) -> Int -> [] Int)) (not (((==)::Int -> Int -> Bool) (seq a 2) 2)))
id (\a -> a)
(++) ((\a -> seq a (seq a (\b -> (++) (seq a (undefined::[] Int)) ([]::[] Int)))) ((\a -> head (seq a (undefined::[] (Int -> ([] Int) -> Int)))) (take 2 ([]::[] ([] Bool)))) (undefined::[] ([] Bool)))
(\a -> \b -> \c -> (\d -> seq c d) (seq a c)) (\a -> (\b -> seq b (\c -> seq c (undefined::Int))) (seq a (seq a ([]::[] ([] Int))))) ((\a -> seq a (head (seq a ([]::[] (Int -> ([] Int) -> Int))) (seq a 2))) ((\a -> seq a (undefined::Int)) (undefined::Bool -> Bool)))
\a -> seq a a
\a -> (undefined::[] Int)
\a -> seq a (undefined::[] Int)
filter (\a -> seq a ((\b -> seq a (seq a (seq b (\c -> True)) (undefined::([] ([] Int)) -> [] Bool))) (seq a (((==)::Bool -> Bool -> Bool) (id id (seq a (undefined::Bool)))) (seq a (\b -> seq b (seq b (undefined::Bool))) (seq a (seq a (undefined::[] ([] (([] ([] Int)) -> [] Int)))))))))
head ([]::[] ((([] (([] Int) -> [] ([] Int))) -> ([] Int) -> [] ([] Int)) -> ([] Int) -> [] Int)) (undefined::([] (([] Int) -> [] ([] Int))) -> ([] Int) -> [] ([] Int))
(\a -> (undefined::([] ([] (Bool -> Bool))) -> ([] Int) -> [] Int) (seq a ((undefined::Int -> [] ([] (Bool -> Bool))) (head (undefined::[] Int))))) ((undefined::(([] ([] ([] Bool))) -> [] ([] ([] Bool))) -> ([] ([] Bool)) -> [] Bool) ((\a -> seq a (\b -> seq a b)) (undefined::Int)))
(undefined::Bool -> Int -> ([] Int) -> [] Int) ((\a -> seq a (seq a (seq a (undefined::Bool)))) 0) ((\a -> a) ((\a -> seq a (seq a (undefined::Int))) odd))
(undefined::Bool -> (([] (Int -> Int)) -> Int -> Int) -> ([] Int) -> [] Int) ((\a -> a) (undefined::Bool)) (head ((\a -> (undefined::Bool -> [] (([] (Int -> Int)) -> Int -> Int)) (seq a (seq a (seq a False)))) ((\a -> seq a (\b -> seq a ([]::[] Int))) 1)))
tail
\a -> seq a (\b -> seq b ((enumFromTo::Int -> Int -> [Int]) (seq a (seq a (seq b (undefined::Bool -> Int) (seq b False)))) (seq b (seq a (undefined::(Bool -> Bool) -> Int)) (\c -> c)))) (filter (\b -> seq a (undefined::Bool)) (id (seq a (\b -> (undefined::[] (([] (Int -> Int)) -> Int))) (seq a (seq a True)))))
\a -> a
case1 (head ([]::[] (Bool -> ([] Bool) -> ([] Int) -> [] Int))) ((undefined::Int -> Int -> ([] Int) -> [] Int) (undefined::Int) (head (head (undefined::[] ([] Int))))) ((\a -> seq a (seq a (seq a ([]::[] Bool)))) ((\a -> \b -> seq a (undefined::Int -> Int -> Bool)) False))
head ((undefined::Bool -> ([] ([] Int)) -> [] (([] Int) -> [] Int)) ((\a -> id (seq a True)) (filter (undefined::(Int -> Bool) -> Bool) ([]::[] (Int -> Bool)))) ((\a -> (undefined::(([] Int) -> [] (Int -> Bool)) -> [] ([] Int)) (\b -> seq a (seq b (undefined::[] (Int -> Bool))))) ((undefined::Bool -> ([] ([] Bool)) -> [] Bool) (head ([]::[] Bool)))))
id
\a -> a
tail
\a -> head (undefined::[] ([] Int))
id (\a -> a)
case1 (\a -> \b -> seq b (\c -> \d -> d) (undefined::Int)) (\a -> seq a a) (case1 (\a -> \b -> (undefined::[] (Int -> Bool))) (undefined::[] (Int -> Bool)) ([]::[] Int))
\a -> a
(undefined::(Int -> ([] Int) -> Int) -> Int -> ([] Int) -> [] Int) ((\a -> seq a (undefined::Int -> ([] Int) -> Int)) (id (undefined::[] Int))) (case1 ((\a -> \b -> seq a head) (not (undefined::Bool))) 0 ((\a -> seq a ([]::[] Int)) (not False)))
\a -> seq a (seq a (\b -> map (seq b ((\c -> seq c (undefined::Bool -> Int)) (undefined::Int))) (seq b (seq b (seq a (undefined::Bool -> [] Bool) (seq a (undefined::Bool)))))) (\b -> (undefined::[] (([] Bool) -> [] Bool))))
\a -> a
(\a -> \b -> seq a (seq a (seq a (\c -> (undefined::([] Int) -> [] Int)) b))) ((undefined::(([] Int) -> [] Bool) -> Int -> [] ([] Int)) ((!!) ([]::[] (([] Int) -> [] Bool)) (undefined::Int))) (not (head (tail ([]::[] (([] ([] ([] ([] ([] (Int -> Bool)))))) -> Bool))) ((:) (undefined::[] ([] ([] ([] (Int -> Bool))))) ([]::[] ([] ([] ([] ([] (Int -> Bool)))))))))
id (map ((\a -> (undefined::Bool -> (Bool -> Bool -> Bool) -> Int -> Int) a (id ((undefined::Int -> Bool -> Bool -> Bool) (seq a (seq a 0))))) ((\a -> not (seq a (seq a (undefined::Bool)))) (\a -> seq a take (seq a (seq a (seq a 1)))))))
(\a -> seq a ((!!) ([]::[] (Int -> ([] Int) -> [] Int))) (seq a 2)) ((\a -> seq a (head (undefined::[] ([] ([] (Int -> Bool)))))) (filter (undefined::(Int -> Int) -> Bool) (undefined::[] (Int -> Int)))) ((-) ((\a -> seq a (seq a 1)) ([]::[] Int)) ((+1) ((\a -> a) (undefined::Int))))
\a -> a
case1 (\a -> (undefined::Int -> ([] Bool) -> ([] Int) -> [] Int) ((\b -> b) (seq a (seq a 1)))) (\a -> id a) ((undefined::(([] Int) -> [] (Int -> Int)) -> [] Bool) (\a -> (undefined::[] (Int -> Int))))
\a -> seq a ((enumFromTo'::Int -> Int -> [Int]) (seq a ((!!) (seq a a) (case1 (undefined::Bool -> ([] Bool) -> Int) 1 ([]::[] Bool)))) ((\b -> b) ((undefined::Int -> Int) (seq a 0))))
\a -> ([]::[] Int)
(undefined::([] Int) -> [] Int)
(++) ((\a -> seq a ((\b -> \c -> seq b (undefined::[] Int)) (\b -> a (undefined::([] Int) -> Int -> [] Int) ([]::[] (Int -> Int))) (seq a ((undefined::(Int -> Int) -> Int) (\b -> b))))) (\a -> \b -> (\c -> \d -> id (seq c d)) (undefined::[] (([] Int) -> Bool))))
\a -> seq a (head (head ([]::[] ([] ((([] (([] Int) -> [] (([] Int) -> Bool))) -> [] (([] Int) -> Bool)) -> [] Int)))) (seq a (\b -> ([]::[] (([] Int) -> Bool)))))
\a -> a
head (case1 (\a -> head (undefined::[] (([] Int) -> [] (([] Int) -> [] Int)))) ((\a -> seq a (undefined::Int -> [] (([] Int) -> [] Int)) (seq a 2)) (id (id ([]::[] ([] Bool))))) ((\a -> seq a (undefined::(Int -> [] ([] Bool)) -> [] Int) (\b -> seq a (undefined::[] ([] Bool)))) ((undefined::Bool -> Int) (undefined::Bool))))
(\a -> seq a (\b -> seq a (seq a (seq a (undefined::Bool -> ([] Int) -> [] Int)) (not (undefined::Bool))))) (case1 (undefined::Int -> ([] Int) -> Bool) True (undefined::[] Int)) ([]::[] ([] (Int -> Bool)))
(\a -> \b -> tail (case1 (\c -> (undefined::([] ([] Bool)) -> [] Int)) (seq b b) (seq a (undefined::[] ([] Bool))))) ((\a -> seq a (\b -> (undefined::[] (([] Int) -> Bool))) (\b -> seq b (seq a (undefined::Bool)))) ((\a -> seq a 2) ((++) (undefined::[] ([] Bool)) ([]::[] ([] Bool)))))
(\a -> seq a (\b -> case1 (\c -> tail) (seq a (undefined::[] Int))) ((!!) ([]::[] (([] Int) -> ([] Int) -> [] ([] Int))) (undefined::Int))) (undefined::([] ([] Int)) -> [] (([] Int) -> Bool))
tail
(\a -> seq a (seq a (seq a (\b -> (:))) (not False)) (seq a (seq a (\b -> seq b 2) (seq a (seq a (seq a ([]::[] Bool))))))) (\a -> (undefined::Bool -> (([] Int) -> Int) -> [] ([] ([] Bool))) (seq a (seq a (seq a True))) (\b -> (+1) (head (seq a b))))
(\a -> seq a (seq a (seq a (seq a (\b -> (:) (head (undefined::[] Int))) ((undefined::(Bool -> Bool) -> Int -> Int -> [] Int) (\b -> seq b b)))))) (id (undefined::Int -> Bool -> [] ([] (Int -> Int))) (undefined::Int) ((&&) (undefined::Bool) (head ([]::[] Bool))))
\a -> seq a (undefined::[] Int)
\a -> seq a (seq a (seq a (\b -> a))) (seq a ((+) ((\b -> b) (seq a 1)) (head (seq a ([]::[] Int)))))
id (undefined::(([] Int) -> [] (Int -> [] Int)) -> ([] Int) -> [] Int) ((\a -> \b -> (\c -> seq b (seq c ([]::[] (Int -> [] Int)))) a) (undefined::Int))
\a -> a
(:) ((undefined::(([] ([] (([] Int) -> Int -> Int -> [] Int))) -> [] (Int -> Bool)) -> Int) (undefined::([] ([] (([] Int) -> Int -> Int -> [] Int))) -> [] (Int -> Bool)))
(\a -> seq a (seq a ((undefined::Bool -> Bool -> ([] Int) -> [] Int) (seq a (odd 0))) ((!!) (seq a (seq a (undefined::[] Bool))) (seq a (seq a 0))))) (\a -> seq a ((undefined::([] (Int -> Bool)) -> [] ([] Bool)) (seq a (seq a (map (\b -> (undefined::Int -> Bool)) (undefined::[] Bool))))))
\a -> seq a (id (head (seq a ([]::[] ((Int -> [] Bool) -> Int -> [] Int)))) (\b -> map (\c -> seq b (undefined::Bool)) (id (undefined::[] ([] ([] ([] Bool))))))) (seq a (undefined::(([] Int) -> Int -> Int) -> Int) (seq a (\b -> \c -> seq c (+1)) (seq a (seq a (seq a (undefined::Bool))))))
\a -> a
(\a -> (++) (id (\b -> (undefined::Int -> [] Int) (id 1)) (map (seq a (\b -> id) (undefined::Int))))) (\a -> (!!) (undefined::[] (Bool -> Bool -> Bool)) 1)
\a -> (undefined::[] Int)
(!!) ((\a -> seq a (seq a (undefined::[] (Bool -> ([] Int) -> [] Int)))) (head (undefined::[] Bool))) ((\a -> seq a (seq a 0)) (head (undefined::[] Bool))) False
id
(\a -> seq a (seq a (\b -> (undefined::Int -> (Int -> ([] Int) -> Bool) -> [] Int) ((+1) (seq b (undefined::Int))) (\c -> \d -> seq c a)))) (((==)::Int -> Int -> Bool) ((\a -> seq a a) (id (undefined::Int))) ((undefined::Bool -> Int) (undefined::Bool)))
map (\a -> a)
(undefined::Int -> ((([] Int) -> Int -> Int) -> Int) -> ([] Int) -> [] Int) ((+1) ((undefined::Bool -> Int) (not (undefined::Bool)))) (\a -> a (seq a (\b -> seq a ([]::[] Int)) True) ((\b -> b) 1))
(++) ((\a -> seq a (map (\b -> seq b (undefined::(Int -> Bool) -> Int) (seq b (\c -> a))) (seq a (seq a (undefined::Bool -> [] (Int -> Int -> Bool))) a))) ((\a -> (undefined::(Int -> Bool) -> Bool) (\b -> seq a a)) (id (\a -> seq a False) (\a -> (undefined::Int)))))
(undefined::(([] Int) -> Int -> Int) -> Int -> ([] Int) -> [] Int) (undefined::([] Int) -> Int -> Int) ((\a -> seq a (\b -> seq b (seq b 2)) (seq a (undefined::Bool))) ((\a -> \b -> \c -> seq b (seq a b)) (undefined::[] ([] (Int -> Int)))))
\a -> seq a (seq a (undefined::([] ([] (Int -> Int))) -> (Bool -> Bool) -> [] Int) (seq a (seq a (\b -> seq a (undefined::[] ([] (Int -> Int))))) (seq a 1))) (id (undefined::Bool -> Bool))
\a -> seq a a
\a -> a
(!!) ((undefined::([] Bool) -> [] (Bool -> ([] Int) -> [] Int)) (undefined::[] Bool)) 1 ((||) ((\a -> a) True) ((\a -> seq a (seq a (undefined::Bool))) ((+1) 1)))
filter even
(undefined::(([] (([] ([] (Int -> [] Bool))) -> [] ([] (Int -> [] Bool)))) -> Bool) -> ([] Int) -> [] Int) (head (head (head ([]::[] ([] ([] (([] (([] ([] (Int -> [] Bool))) -> [] ([] (Int -> [] Bool)))) -> Bool)))))))
id
(!!) ((\a -> (\b -> seq a (seq b ([]::[] (([] Int) -> [] Int)))) (seq a (undefined::Bool))) ((\a -> seq a 1) (not False))) ((undefined::([] ([] (Bool -> Bool))) -> Int) (undefined::[] ([] (Bool -> Bool))))
\a -> a
tail
(undefined::Int -> (([] Int) -> Int -> [] Int) -> ([] Int) -> [] Int) ((\a -> seq a (seq a (undefined::Int))) (even (undefined::Int))) ((undefined::(Int -> Int -> Bool) -> ([] Int) -> Int -> [] Int) ((\a -> seq a (\b -> seq a odd)) (take 1 (undefined::[] Int))))
(\a -> seq a (\b -> seq b (seq a b))) (\a -> ([]::[] ([] ([] (([] Bool) -> [] Bool)))))
(\a -> (undefined::(([] Int) -> ([] Int) -> [] Bool) -> ([] Int) -> [] Int) (\b -> (!!) (seq a (seq a (undefined::[] (([] Int) -> [] Bool)))) (seq a (seq a (undefined::Int))))) (\a -> a)
\a -> a
\a -> a
(undefined::(([] (([] Int) -> [] (Int -> [] Int))) -> Bool) -> ([] Int) -> [] Int) (undefined::([] (([] Int) -> [] (Int -> [] Int))) -> Bool)
id
(undefined::Int -> ([] Int) -> [] Int) 0
\a -> (undefined::(([] ([] ([] ([] (Int -> Int))))) -> [] (([] Int) -> Bool)) -> [] Int) (\b -> (\c -> head (seq c (seq b (\d -> (undefined::[] ([] (([] Int) -> Bool)))) c))) ((\c -> seq a (seq b (seq c 2))) ((!!) ([]::[] Bool) 0)))
(\a -> \b -> seq a ((enumFromTo::Int -> Int -> [Int]) (seq a (seq a 2)) (seq b (seq a (undefined::([] (([] Bool) -> Bool)) -> Int) (seq a (seq a (undefined::[] (([] Bool) -> Bool)))))))) False
case1 (undefined::Int -> ([] Int) -> ([] Int) -> [] Int) ((undefined::Int -> ([] Int) -> ([] Int) -> [] Int) 1 ((!!) ([]::[] ([] Int)) 0)) (map (\a -> seq a (seq a 1)) ([]::[] ([] ([] (([] ([] Bool)) -> [] ([] Bool))))))
id (head ((\a -> seq a ((\b -> seq b ([]::[] (Int -> ([] Int) -> [] Int))) a)) ((\a -> seq a True) (head (undefined::[] Bool)))) ((undefined::(Bool -> [] ([] ([] Bool))) -> Int) (\a -> map (\b -> seq b (undefined::[] ([] Bool))) (seq a (seq a (undefined::[] ([] (Int -> Bool))))))))
\a -> a
take ((undefined::Bool -> (([] ([] ([] Int))) -> [] ([] Int)) -> Int) ((!!) ([]::[] (Bool -> Bool)) (undefined::Int) (((==)::Bool -> Bool -> Bool) True (undefined::Bool))) (\a -> ([]::[] ([] Int))))
(!!) (undefined::[] (Int -> Int -> ([] Int) -> [] Int)) 0 ((\a -> seq a (seq a (seq a 2))) (undefined::Int -> Int -> [] Int)) ((\a -> seq a (seq a (head (seq a ([]::[] Int))))) ((\a -> seq a (\b -> seq b ([]::[] Bool))) 2))
(undefined::Int -> (([] Int) -> Int -> Bool) -> ([] Int) -> [] Int) (undefined::Int) (\a -> id (seq a (\b -> seq b (\c -> (\d -> d) (undefined::Bool))) (\b -> seq a ((\c -> c) (seq b (seq b (undefined::Int)))))))
map ((undefined::(([] ([] (Int -> [] Int))) -> [] ([] ([] (([] ([] Bool)) -> [] ([] Bool))))) -> Int -> Int) (\a -> (undefined::[] ([] ([] (([] ([] Bool)) -> [] ([] Bool)))))))
(undefined::(([] ([] Int)) -> [] ([] ([] Int))) -> Int -> ([] Int) -> [] Int) (\a -> (:) (seq a ([]::[] ([] Int))) (seq a (seq a (undefined::[] ([] ([] Int)))))) (head (id (undefined::[] (((Int -> [] Bool) -> [] (Bool -> Bool)) -> Int))) (\a -> map (\b -> seq b id) (id ([]::[] ([] (Int -> Bool))))))
\a -> (\b -> (!!) (seq a (seq a (seq b (undefined::(Int -> [] Int) -> [] ([] Int)))) (seq b (seq a (\c -> a)))) (seq b (\c -> seq b (undefined::Int)) (seq a (seq b (seq a (undefined::[] Bool)))))) (head (seq a (undefined::[] ((Int -> Int -> Int) -> Int -> [] Bool))) (\b -> seq b (\c -> head ([]::[] (Int -> Int))) (seq a (\c -> seq a (seq b (undefined::[] (Int -> Int)))))))
\a -> a
\a -> map (\b -> head (undefined::[] ((([] Int) -> ([] Bool) -> [] Bool) -> Int)) (seq a (\c -> seq a (undefined::([] Int) -> ([] Bool) -> [] Bool)) b)) (seq a (seq a (\b -> seq a (undefined::[] Bool))) (\b -> seq b (seq b (\c -> a) (seq b (seq a ([]::[] Bool))))))
id ((\a -> \b -> (!!) ([]::[] ((Int -> Int -> Int) -> [] Int)) (seq b (seq b 0)) (id (seq a (\c -> (+)) (seq a (seq a ([]::[] ([] Int))))))) (undefined::([] (([] Int) -> Int -> Int -> Bool)) -> Int -> Int -> Int))
\a -> case1 (seq a (seq a (\b -> seq a (\c -> seq a (\d -> seq d a) (undefined::[] Int))))) a ((\b -> seq b ([]::[] Bool)) (\b -> seq a (seq b (not (undefined::Bool)))))
case1 (undefined::Bool -> ([] Bool) -> ([] Int) -> [] Int) ((undefined::Bool -> ([] Int) -> [] Int) (odd (head ([]::[] Int)))) ((undefined::(([] Int) -> ([] ([] Int)) -> [] Bool) -> [] Bool) (head ([]::[] (([] Int) -> ([] ([] Int)) -> [] Bool))))
\a -> seq a (seq a (\b -> (undefined::Bool -> [] Int))) (seq a (seq a (\b -> seq a (undefined::[] (([] Int) -> Bool)))) (seq a (id odd))) (seq a False)
\a -> (:) (case1 (seq a (undefined::Int -> ([] Int) -> Int)) (seq a 1) a) a
\a -> id (seq a (undefined::([] (([] ([] (Int -> Int))) -> ([] ([] Int)) -> [] Bool)) -> [] Int)) (seq a (\b -> seq a ([]::[] (([] ([] (Int -> Int))) -> ([] ([] Int)) -> [] Bool))) 0)
tail
(\a -> seq a (seq a ((\b -> seq b (seq b take)) False))) (\a -> (undefined::Bool)) ((\a -> \b -> seq b (seq a 0)) True ((\a -> map (seq a (undefined::Bool -> Bool -> Bool))) 2))
(\a -> (\b -> (++) (seq b (id (undefined::Bool -> [] Int) a))) a) (not False)
\a -> filter (seq a odd) (id a)
tail
(undefined::([] Int) -> [] Int)
\a -> seq a a
(undefined::([] (([] ([] (Int -> Int))) -> Int -> Bool)) -> ([] Int) -> [] Int) ((:) ((\a -> seq a (\b -> seq a (undefined::Int -> Bool))) (undefined::Bool)) (tail ([]::[] (([] ([] (Int -> Int))) -> Int -> Bool))))
(\a -> seq a (seq a (seq a (seq a (\b -> \c -> c))))) (\a -> seq a (seq a (seq a (undefined::([] ([] Int)) -> Int))) (seq a (seq a (seq a (undefined::[] ([] Int)))))) (\a -> \b -> seq a (id ((\c -> \d -> seq c c) (seq b (undefined::Bool)))) (seq a (id (seq a (undefined::Bool -> ([] Bool) -> Bool)) True)))
(\a -> (undefined::Bool -> ([] Int) -> [] Int) a) (undefined::Bool)
\a -> seq a a
id (\a -> (undefined::([] Int) -> [] Int)) (\a -> seq a (seq a ((\b -> \c -> filter (seq b (undefined::([] Int) -> Bool)) (seq c (undefined::[] ([] Int)))) (id ((\b -> seq b (undefined::[] (([] ([] Bool)) -> [] ([] Bool)))) (seq a (seq a 0)))))))
(undefined::(([] Int) -> [] Int) -> ([] Int) -> [] Int) ((\a -> seq a (\b -> \c -> seq a c)) (head ([]::[] Int)) ((\a -> seq a 2) ((:) id (undefined::[] (([] Bool) -> [] Bool)))))
(\a -> seq a (\b -> \c -> seq b c)) (id (\a -> (undefined::Int)) (head (undefined::[] (Bool -> Bool -> Bool)))) ((\a -> seq a ((undefined::([] Int) -> ([] (Int -> Int)) -> Int -> Int) (seq a ([]::[] Int)))) ((\a -> seq a (undefined::Bool)) ([]::[] (([] Int) -> Bool))))
(\a -> seq a (seq a (seq a (\b -> seq a ((++) (head (seq a (seq b ([]::[] ([] Int))))) ([]::[] Int)))))) ((\a -> (!!) ([]::[] (([] Int) -> [] (([] Int) -> Bool))) (seq a (seq a (undefined::Int)))) ((\a -> seq a (seq a (\b -> a))) even))
(undefined::([] Int) -> [] Int)
(undefined::(Int -> Int -> [] Int) -> Int -> ([] Int) -> [] Int) (undefined::Int -> Int -> [] Int) 2
map (\a -> seq a (seq a (seq a a)))
(\a -> seq a (undefined::(Int -> Bool -> Bool) -> ([] Int) -> [] Int) (seq a (\b -> \c -> seq c (undefined::Bool -> Bool)) ([]::[] ([] Int)))) (undefined::([] ([] ([] (Int -> [] Int)))) -> [] (Int -> Int -> Int))
head (undefined::[] ((([] ([] ([] Int))) -> [] ([] Bool)) -> ([] Int) -> [] Int)) ((undefined::([] ([] (Bool -> Bool))) -> ([] ([] ([] Int))) -> [] ([] Bool)) (map (\a -> (undefined::[] (Bool -> Bool))) ([]::[] ([] Int))))
(\a -> seq a (\b -> \c -> (undefined::([] ([] ([] Bool))) -> [] Int) (seq b ([]::[] ([] ([] Bool))))) (undefined::([] Int) -> ([] ([] Int)) -> [] Bool)) (undefined::([] (([] ([] Int)) -> [] Int)) -> [] (Int -> Int))
(\a -> (!!) (seq a (seq a ([]::[] (Bool -> ([] Int) -> [] Int)))) (seq a (seq a (undefined::Int))) (((==)::[Int] -> [Int] -> Bool) (undefined::[] Int) (seq a (undefined::[] Int)))) (\a -> (:) ((:) (\b -> b) (seq a (seq a ([]::[] (Bool -> Bool))))) ((undefined::([] (Int -> [] Bool)) -> [] ([] (Bool -> Bool))) (seq a (seq a (seq a (undefined::[] (Int -> [] Bool)))))))
\a -> case1 (seq a ((\b -> id (\c -> seq b id)) (seq a (undefined::Bool)))) (id (\b -> (undefined::[] Int)) (\b -> seq a (seq a (seq b (seq b (undefined::Int -> Int -> Bool)))))) a
case1 ((\a -> seq a (\b -> \c -> seq b (seq a tail))) ((!!) (undefined::[] Bool) (id (undefined::Int)))) ((\a -> (\b -> seq b tail) (seq a (seq a 2))) ((undefined::(Int -> Int) -> Bool) id)) ((!!) ((\a -> seq a ([]::[] ([] Int))) 1) ((undefined::Bool -> Int) (undefined::Bool)))
(undefined::Bool -> Int -> ([] Int) -> [] Int) (id (\a -> seq a True) ((!!) ([]::[] (Bool -> Bool)) 2)) ((undefined::([] (([] Bool) -> [] Bool)) -> Int) (head (map (undefined::Bool -> [] (([] Bool) -> [] Bool)) (undefined::[] Bool))))
\a -> a
(\a -> head (seq a (tail ([]::[] (([] ([] Bool)) -> ([] Int) -> [] Int))))) ((\a -> a (undefined::Int)) (\a -> seq a (seq a (seq a False)))) (map (case1 (\a -> (undefined::([] Bool) -> Int -> [] Bool)) (\a -> (undefined::[] Bool)) (undefined::[] Bool)) (undefined::[] Int))
tail
(\a -> (!!) (seq a (undefined::[] (([] Bool) -> ([] Int) -> [] Int))) (id 1)) (undefined::[] (Bool -> Bool)) ((:) (odd ((undefined::Bool -> Int) (odd 2))) ((!!) (undefined::[] ([] Bool)) (id (undefined::Int))))
tail
map (head (tail ([]::[] ((([] ([] ([] (([] Bool) -> [] Bool)))) -> [] (Int -> [] Int)) -> Int -> Int))) (\a -> seq a (undefined::(([] Int) -> [] (Bool -> Bool)) -> [] (Int -> [] Int)) (seq a (seq a (seq a (\b -> filter (undefined::(Bool -> Bool) -> Bool) (undefined::[] (Bool -> Bool))))))))
take ((+1) (undefined::Int))
(\a -> seq a (\b -> b)) ((\a -> seq a ((\b -> b) (seq a 0))) (case1 (\a -> \b -> (undefined::Int -> Bool)) (\a -> seq a True) ([]::[] Int)))
\a -> a
\a -> (undefined::((([] ([] ([] ([] ([] Bool))))) -> [] ([] ([] (Int -> Bool)))) -> ([] Int) -> ([] Bool) -> [] Bool) -> [] Int) (seq a (\b -> (undefined::(([] Int) -> Int -> Int) -> ([] Int) -> ([] Bool) -> [] Bool) (case1 (\c -> (!!)) (seq b (\c -> c)))))
\a -> seq a (\b -> seq a (seq b (undefined::(([] Int) -> ([] Int) -> Bool) -> [] Int))) (case1 (seq a (undefined::Bool -> ([] Bool) -> Bool)) (seq a True) (seq a (undefined::[] Bool))) (seq a (\b -> (undefined::([] Int) -> Bool)))
(undefined::Bool -> ([] Int) -> [] Int) (((==)::[Int] -> [Int] -> Bool) (id (\a -> (undefined::[] Int)) (id False)) (map id (tail (undefined::[] Int))))
\a -> seq a (seq a (seq a (seq a (\b -> a)))) (seq a (seq a (head (seq a (seq a (undefined::[] (Int -> ([] Int) -> [] (Int -> [] Int))))) (seq a (id (undefined::(([] Int) -> Bool -> Bool) -> Int)) (\b -> \c -> seq b (seq a c))))))
\a -> seq a (seq a (id (undefined::(Int -> Bool -> Bool) -> Bool -> [] Int) ((\b -> seq b (\c -> \d -> d)) (even (seq a (undefined::Int))))) (seq a (\b -> seq a (id odd) (head ([]::[] Int))) (\b -> (undefined::Int -> [] ([] ([] Bool))) 2)))
head ([]::[] (([] Int) -> [] Int))
tail
(undefined::Bool -> Bool -> ([] Int) -> [] Int) (odd 0) ((\a -> (\b -> seq b (seq b (seq b True))) (\b -> seq a (seq b (seq b ([]::[] Bool))))) (map (\a -> seq a (seq a (undefined::[] (([] ([] Int)) -> [] (([] Int) -> Bool)))))))
\a -> (undefined::(([] Int) -> ([] (([] ([] Int)) -> [] ([] Int))) -> Int -> ([] ([] Int)) -> [] ([] Int)) -> [] Int) (seq a (\b -> \c -> seq b (seq a (seq c (\d -> case1 (undefined::([] Int) -> ([] ([] Int)) -> [] ([] Int)) (id (undefined::Int -> [] ([] Int)) (seq c (seq b (undefined::Int)))))))))
case1 (\a -> (undefined::([] Bool) -> Int -> ([] Int) -> [] Int)) (\a -> \b -> seq a ([]::[] Int)) ((\a -> seq a (undefined::[] Bool)) (undefined::Int)) ((undefined::([] (([] (([] ([] Int)) -> [] ([] ([] Int)))) -> Int -> Bool)) -> Int) (id (undefined::[] (([] (([] ([] Int)) -> [] ([] ([] Int)))) -> Int -> Bool))))
\a -> a
\a -> (\b -> seq b (seq b (seq a (map (head ([]::[] ((([] Bool) -> [] Bool) -> Int))))))) 1 ([]::[] (([] Bool) -> [] Bool))
(!!) ((\a -> map (\b -> seq a id) (seq a (seq a ([]::[] (Int -> Bool))))) (id ((+1) (id 1)))) ((\a -> (+) (undefined::Int) (seq a 1)) ((\a -> head (seq a ([]::[] Bool))) (undefined::[] ([] (Int -> Bool)))))
(undefined::([] (([] (([] Int) -> [] (Int -> Int))) -> [] Bool)) -> ([] Int) -> [] Int) ((\a -> seq a ([]::[] (([] (([] Int) -> [] (Int -> Int))) -> [] Bool))) ((\a -> seq a (undefined::Int)) False))
(undefined::(([] ([] Int)) -> [] ([] Bool)) -> ([] Int) -> [] Int) (id ((undefined::Bool -> ([] ([] Int)) -> [] ([] Bool)) (head ([]::[] (Int -> Bool)) 0)))
head ([]::[] ((([] Bool) -> Bool) -> Int -> ([] Int) -> [] Int)) head ((+) (head ((\a -> seq a (undefined::[] Int)) (undefined::[] (([] Bool) -> Bool)))) ((\a -> seq a (undefined::Int)) False))
(++) (tail (id (\a -> (undefined::([] ([] (Int -> Bool))) -> Int -> [] Int) (undefined::[] ([] (Int -> Bool))) ((+1) (seq a ((+1) (seq a 2))))) (undefined::([] Int) -> ([] (([] Int) -> ([] Int) -> [] Bool)) -> Int)))
\a -> (\b -> seq b (\c -> \d -> a)) (\b -> seq a False) (seq a ((undefined::([] (Int -> Int)) -> Bool) (seq a (seq a (seq a ([]::[] (Int -> Int))))))) (seq a (seq a (\b -> seq a (undefined::(Int -> Int -> Bool) -> Bool))) (seq a (seq a (seq a False))) ((\b -> \c -> seq b (\d -> seq c (undefined::Bool))) (seq a (seq a (seq a ([]::[] ([] Bool)))))))
\a -> (!!) (seq a (undefined::(Int -> [] Bool) -> [] ([] Int)) (\b -> (\c -> seq c (seq b ([]::[] Bool))) (id (seq a True)))) ((undefined::Int -> (Bool -> Bool -> Bool) -> Int) ((!!) a (undefined::Int)) (\b -> seq a (seq b (seq b (\c -> id) (seq a (seq b ([]::[] Int)))))))
filter (\a -> (undefined::Bool))
id
\a -> a
case1 (\a -> filter (\b -> case1 (case1 (undefined::Bool -> ([] Bool) -> Bool)) (seq a (id (undefined::Bool))) (undefined::[] Bool))) ((!!) ((\a -> seq a (seq a (undefined::[] ([] Int)))) (\a -> \b -> seq b (undefined::Bool))) ((\a -> a) ((+1) 0)))
id
\a -> seq a (\b -> \c -> seq c (undefined::([] ([] Bool)) -> [] Int)) (seq a (seq a (seq a True))) ((\b -> b) (undefined::Int)) ((:) (seq a (undefined::Int -> [] Bool) (undefined::Int)) ((\b -> seq b (seq a ([]::[] ([] Bool)))) (undefined::Int)))
(\a -> seq a ((!!) (seq a ([]::[] (Int -> ([] Int) -> [] Int))) (seq a (seq a a)))) ((\a -> seq a (undefined::Int)) (\a -> \b -> seq a ([]::[] Int))) (case1 (undefined::Int -> ([] Int) -> Int) (undefined::Int) ((\a -> seq a ([]::[] Int)) (\a -> a)))
case1 (\a -> seq a (seq a (undefined::Bool -> ([] Int) -> ([] Int) -> [] Int)) (seq a (head (seq a (undefined::[] Bool))))) ((undefined::(Int -> [] Int) -> ([] Int) -> [] Int) ((!!) (tail ([]::[] ([] Int))))) ((undefined::(([] Bool) -> [] Bool) -> Bool -> [] Int) (\a -> seq a a) (odd (head ([]::[] Int))))
\a -> seq a (undefined::[] Int)
case1 ((!!) ([]::[] (Bool -> ([] Bool) -> ([] Int) -> [] Int)) ((!!) (undefined::[] Int) (undefined::Int))) ((undefined::Bool -> Int -> ([] Int) -> [] Int) (undefined::Bool) ((\a -> seq a (undefined::Int)) (undefined::[] ([] ([] Bool))))) ([]::[] Bool)
\a -> a
id ((undefined::(Int -> ([] Int) -> ([] (([] Int) -> [] (([] Int) -> Bool))) -> Bool) -> ([] Int) -> [] Int) (undefined::Int -> ([] Int) -> ([] (([] Int) -> [] (([] Int) -> Bool))) -> Bool))
id
tail
(undefined::([] Int) -> [] Int)
(undefined::(([] Int) -> (Int -> Int) -> ([] Int) -> Int -> Int) -> ([] Int) -> [] Int) (\a -> (undefined::(Int -> Int) -> ([] Int) -> Int -> Int))
(\a -> seq a ((!!) (seq a ([]::[] (Bool -> ([] Int) -> [] Int))) (seq a (seq a (undefined::Int))) (head (seq a (seq a (seq a (seq a (seq a ([]::[] Bool))))))))) (id (\a -> (\b -> seq b (seq a (undefined::Bool))) True) ((undefined::Bool -> ([] ([] ([] Bool))) -> [] ([] ([] Bool))) (((==)::[Int] -> [Int] -> Bool) (undefined::[] Int) (undefined::[] Int))))
(\a -> seq a (\b -> map (\c -> seq a (seq b (seq a (head b)))) ([]::[] (([] (([] Int) -> ([] ([] Int)) -> [] Bool)) -> Bool)))) ((\a -> seq a (seq a (seq a (undefined::[] (([] ([] Int)) -> [] (([] Int) -> [] ([] Bool))))))) ((undefined::Int -> Bool) ((-) (undefined::Int) (undefined::Int))))
filter (\a -> head (undefined::[] (([] ([] Bool)) -> (([] Int) -> Int -> Bool) -> Bool)) (seq a (tail (take (seq a a) (seq a (undefined::[] ([] Bool)))))) (seq a (seq a (seq a (\b -> \c -> \d -> (||) True True)) ((\b -> seq b (seq b ([]::[] ([] (Int -> Bool))))) (seq a (seq a (seq a ([]::[] (Int -> Int)))))))))
(\a -> seq a (\b -> \c -> seq c (seq a (undefined::Int -> [] Int)) (seq c (seq a (undefined::Int)))) (\b -> b)) (\a -> seq a (seq a (\b -> seq b (\c -> \d -> True) (undefined::[] Int))) (seq a (\b -> ([]::[] ([] Int)))))
map ((\a -> seq a (\b -> seq a (seq a (\c -> c))) (seq a (\b -> seq b (seq b ([]::[] (Int -> [] Int)))) (\b -> a))) ((\a -> seq a (head ([]::[] (([] ([] Bool)) -> Bool))) (seq a (seq a (undefined::[] ([] Bool))))) True))
(undefined::(Int -> Int -> [] (Bool -> Bool)) -> ([] Int) -> [] Int) (undefined::Int -> Int -> [] (Bool -> Bool))
(undefined::([] Int) -> [] Int)
\a -> (\b -> map (\c -> seq b (\d -> seq a 1) (\d -> seq d (seq a ([]::[] Bool)))) ((undefined::Int -> [] ((Int -> ([] Int) -> Int) -> Bool)) (seq a (seq b (seq b 1))))) (head ([]::[] (([] Int) -> ([] (([] ([] ([] Int))) -> [] ([] ([] Bool)))) -> [] (([] ([] Bool)) -> [] ([] Bool)))))
(undefined::((([] Int) -> ([] Int) -> Bool) -> ([] Bool) -> [] (Bool -> Bool)) -> ([] Int) -> [] Int) (\a -> seq a (seq a (head (seq a ((:) ((undefined::([] Int) -> ([] Bool) -> [] (Bool -> Bool)) (seq a (seq a ([]::[] Int)))) (seq a (id (seq a (undefined::[] (([] Bool) -> [] (Bool -> Bool)))))))))))
head ([]::[] (([] Int) -> [] Int))
take 0
\a -> (\b -> map (seq a (seq a (seq a (undefined::Bool -> (Bool -> [] Bool) -> Int)) (seq b (seq a (undefined::Bool))))) (seq a (\c -> seq b ([]::[] (Bool -> [] Bool))) (seq b (b a)))) (seq a (\b -> seq a (seq b (\c -> \d -> seq b (undefined::Int)) (seq b (seq a (seq b True)))) (\c -> \d -> seq b d)))
(\a -> head (seq a ([]::[] (([] (([] Bool) -> [] Bool)) -> ([] Int) -> [] Int))) ((\b -> seq b (seq b (seq a ([]::[] (([] Bool) -> [] Bool))))) (seq a (head ([]::[] Bool))))) ((undefined::Bool -> [] ((Int -> ([] Int) -> Bool) -> Int -> ([] Int) -> Bool)) ((!!) ([]::[] Bool) (head ([]::[] Int))))
id
(undefined::([] Int) -> [] Int)
(!!) (tail (undefined::[] ((Int -> [] Int) -> ([] Int) -> [] Int))) (undefined::Int) ((!!) (head (undefined::[] (([] Int) -> [] (Int -> [] Int))) (undefined::[] Int)) (head ([]::[] ((Bool -> Bool) -> Int)) (\a -> a)))
\a -> seq a a
\a -> a
tail
(undefined::([] Int) -> [] Int)
head ([]::[] ((Int -> [] Int) -> ([] Int) -> [] Int)) (\a -> seq a (id (seq a (seq a (\b -> seq b (seq a ([]::[] Int)))))) (\b -> id (\c -> \d -> d) 2))
\a -> head ((undefined::([] (([] Bool) -> [] Bool)) -> [] (Bool -> [] Int)) (tail (seq a (\b -> ([]::[] (([] Bool) -> [] Bool))) (seq a (seq a 1))))) (seq a (((==)::Int -> Int -> Bool) ((undefined::Bool -> Int) (seq a False)) (seq a (seq a (seq a (+1))) (seq a (id 0)))))
\a -> ([]::[] Int)
case1 (\a -> seq a (undefined::([] (([] Int) -> Int)) -> ([] Int) -> [] Int)) (\a -> take (seq a (seq a (seq a (undefined::Int)))) (seq a a)) ((\a -> id (undefined::([] Int) -> [] (([] Int) -> Int)) (seq a (seq a ([]::[] Int)))) ((undefined::Int -> Int -> [] Bool) 0))
\a -> a
\a -> seq a (seq a (seq a (seq a (\b -> seq b (seq b (\c -> a))))) (((==)::[Int] -> [Int] -> Bool) (head (undefined::[] ([] Int))) (seq a a))) (seq a (undefined::(([] Int) -> ([] Int) -> [] Int) -> Int -> ([] Int) -> Bool) (seq a ((undefined::([] Bool) -> ([] Int) -> ([] Int) -> [] Int) (seq a (id ([]::[] Bool))))))
(\a -> seq a (\b -> ([]::[] Int))) (\a -> \b -> (+1))
\a -> a
id
(undefined::([] Int) -> [] Int)
(\a -> seq a ((undefined::(([] Int) -> [] (([] Int) -> Int)) -> ([] Int) -> [] Int) (undefined::([] Int) -> [] (([] Int) -> Int)))) (undefined::([] (([] (Int -> Int)) -> Int -> Int)) -> ([] Int) -> [] ([] Int))
\a -> seq a (seq a (\b -> \c -> seq a (\d -> seq b a) (head (undefined::[] ([] (Int -> Int))))) (seq a (seq a (\b -> (undefined::Bool))) (\b -> (undefined::Bool -> Bool)))) ((\b -> seq b (\c -> id False) (seq a (seq a 0))) ([]::[] ([] (Bool -> Bool))))
\a -> seq a (\b -> seq b (head (undefined::[] (Int -> (Int -> Int) -> [] Int)) (seq b (head ([]::[] Int))) (\c -> case1 (undefined::Bool -> ([] Bool) -> Int) (seq b c) ([]::[] Bool)))) ((!!) (undefined::[] (([] (([] ([] Int)) -> [] ([] Int))) -> Bool -> Bool -> Bool)) (seq a (head (undefined::[] (([] ([] Bool)) -> Int)) (seq a (undefined::[] ([] Bool))))))
(++) ((\a -> seq a ([]::[] Int)) ((undefined::([] ([] (Int -> Int))) -> Bool) ((\a -> id (seq a ([]::[] ([] (Int -> Int))))) ((!!) (undefined::[] Bool) 2))))
id (undefined::Int -> (([] ([] Int)) -> [] Bool) -> ([] Int) -> [] Int) ((undefined::(Bool -> [] (Int -> Int)) -> Int) (\a -> seq a (head (undefined::[] ([] (Int -> Int)))))) ((\a -> seq a (seq a (\b -> (undefined::[] Bool)))) ((\a -> seq a (seq a (seq a (undefined::[] ([] (Bool -> Bool)))))) (take 2 ([]::[] ([] (Int -> Int))))))
\a -> (undefined::(([] Int) -> ([] (Int -> ([] Int) -> Int)) -> Int -> Int) -> [] Int) ((\b -> seq b (\c -> \d -> \e -> e)) (seq a ((\b -> b) True)))
\a -> seq a (seq a (map (seq a (undefined::(([] Bool) -> [] Bool) -> Int)) ((undefined::([] (([] Int) -> [] Int)) -> [] (([] Bool) -> [] Bool)) (seq a ((\b -> seq a (seq b ([]::[] (([] Int) -> [] Int)))) (seq a (seq a (undefined::Int))))))))
map (\a -> a)
map ((\a -> seq a (undefined::(([] (Bool -> Bool)) -> [] (Bool -> Bool)) -> Int -> Int)) ((+1) (id ((!!) (undefined::[] Int) 0))) (\a -> (undefined::[] (Bool -> Bool))))
(\a -> seq a id) ((undefined::((Int -> Bool) -> Bool) -> ([] (Int -> Bool)) -> [] (Int -> Bool)) (\a -> not (seq a (seq a (seq a (seq a False))))))
id (\a -> \b -> (undefined::([] Int) -> [] Int)) (id (\a -> seq a (\b -> seq a (undefined::([] Int) -> Bool)) (seq a (seq a ([]::[] (Int -> Int)))))) ((undefined::(([] Bool) -> [] (Bool -> Bool)) -> Int) ((undefined::([] Bool) -> ([] Bool) -> [] (Bool -> Bool)) (head ([]::[] ([] Bool)))))
\a -> head (undefined::[] ([] Int))
(\a -> (\b -> seq a (\c -> id tail) ((!!) (seq b ([]::[] ([] Bool))))) (seq a (seq a (\b -> seq a b)))) ((\a -> seq a (seq a (case1 (undefined::Int -> ([] Int) -> Int) (undefined::Int) ([]::[] Int)))) ((\a -> head (seq a ([]::[] ([] (([] Int) -> Bool))))) (\a -> seq a (undefined::Int))))
(undefined::([] Int) -> [] Int)
\a -> map ((undefined::([] ([] Int)) -> (([] (Bool -> Bool)) -> [] (Bool -> Bool)) -> Int) (seq a (seq a (seq a (\b -> ([]::[] ([] Int)))) (seq a (\b -> 0))))) ([]::[] (([] (Bool -> Bool)) -> [] (Bool -> Bool)))
\a -> map (id (seq a (seq a (undefined::(Bool -> Bool) -> Int)))) (seq a (seq a (\b -> (\c -> seq c ([]::[] (Bool -> Bool))) (seq b 0))) (\b -> seq b (\c -> (undefined::([] Int) -> [] Bool)) (seq b (seq b (\c -> (undefined::[] Bool))))))
\a -> a
(undefined::([] Int) -> [] Int)
\a -> seq a (undefined::(([] ([] Int)) -> [] Bool) -> [] Int) ((!!) (seq a ((\b -> seq a (seq b (undefined::[] (([] ([] Int)) -> [] Bool)))) 1)) ((undefined::(Int -> ([] Int) -> Bool) -> Int) (\b -> \c -> seq a (seq b (undefined::Bool)))))
\a -> seq a a
(!!) (map (\a -> seq a (undefined::Bool -> ([] Int) -> [] Int)) (tail ([]::[] Int))) (id (\a -> (undefined::Int)) (undefined::[] ([] Bool))) ((\a -> head (seq a ([]::[] (Bool -> Bool)))) (head (undefined::[] ([] ([] Bool)))) ((undefined::(([] Bool) -> [] Bool) -> Bool) (undefined::([] Bool) -> [] Bool)))
(\a -> seq a (id (\b -> head (undefined::[] (Bool -> ([] Int) -> [] Int)) (seq a (seq b (undefined::Bool)))) ((\b -> seq a (seq b b)) 1))) (\a -> \b -> case1 (head (seq b (undefined::[] (Int -> ([] Int) -> [] ([] Int))))) ([]::[] ([] Int)) b)
head ((\a -> \b -> seq b (seq a ((undefined::Int -> [] (([] Int) -> [] Int)) (seq b b)))) ((\a -> not (seq a True)) ((:) ([]::[] (Int -> Bool -> Bool)) ([]::[] ([] (Int -> Bool -> Bool))))) (id (\a -> seq a (seq a (undefined::([] ([] Bool)) -> Int)) (tail (undefined::[] ([] Bool)))) ((\a -> seq a (id (undefined::[] ([] ([] Bool))))) (head ([]::[] ([] ([] (Bool -> Bool))))))))
map (\a -> case1 (\b -> \c -> (undefined::Int -> (Int -> Bool) -> Int) a (undefined::Int -> Bool)) a (seq a (seq a (map (seq a (\b -> ([]::[] ([] Int)))) ([]::[] ([] Bool))))))
\a -> seq a (seq a a)
(!!) (id (undefined::[] ((([] Bool) -> Bool) -> ([] Int) -> [] Int))) (undefined::Int) ((\a -> (!!) (undefined::[] (([] Bool) -> Bool)) (seq a (seq a 0))) (head (take 1 (undefined::[] Bool))))
(\a -> seq a (undefined::(([] Int) -> [] ([] Int)) -> ([] Int) -> [] Int)) ((undefined::(Bool -> [] (Int -> [] Int)) -> Int) (\a -> (undefined::[] (Int -> [] Int)))) (undefined::([] Int) -> [] ([] Int))
id
(\a -> \b -> seq b (\c -> \d -> seq c b) (seq a (seq a (seq b False))) (seq b (id (undefined::Bool -> Int -> Bool)) (seq a (seq b (seq a (undefined::Bool)))))) (id ((\a -> seq a ((undefined::Int -> [] (Bool -> Bool)) a)) ((\a -> seq a (seq a 0)) (head (undefined::[] Int)))))
take (case1 (undefined::Int -> ([] Int) -> Int) ((\a -> seq a (undefined::Int)) False) ((\a -> seq a (undefined::[] Int)) (undefined::([] ([] ([] Int))) -> Bool)))
\a -> a
\a -> ([]::[] Int)
case1 (\a -> seq a ((undefined::(Int -> Int) -> ([] Int) -> ([] Int) -> [] Int) (seq a (\b -> seq a (seq a b))))) (case1 (\a -> \b -> seq a id) (\a -> a) ([]::[] Int)) (map (undefined::([] ([] ([] Bool))) -> Int) ((:) (undefined::[] ([] ([] Bool))) (undefined::[] ([] ([] ([] Bool))))))
head (tail (id ([]::[] ((([] ([] ([] (Int -> Bool)))) -> ([] Int) -> [] Bool) -> ([] Int) -> [] Int)))) (\a -> \b -> map (undefined::(([] ([] Int)) -> [] ([] ([] Int))) -> Bool) ([]::[] (([] ([] Int)) -> [] ([] ([] Int)))))
take (head (map (\a -> (undefined::Int)) (map (\a -> seq a (undefined::[] (Int -> Int))) (undefined::[] Int))))
\a -> seq a (seq a (\b -> a) (seq a (\b -> map ((undefined::Int -> (([] Int) -> [] Bool) -> ([] Int) -> [] Bool) (head ([]::[] (Bool -> Int)) (undefined::Bool))))))
\a -> (\b -> \c -> map (seq a (\d -> (undefined::Int))) (seq b ([]::[] Int))) (seq a (seq a (seq a (undefined::(Int -> Bool) -> Bool))) ((!!) (undefined::[] Bool))) (\b -> seq b (id (seq a (seq a (\c -> seq a (undefined::Bool -> Int -> Int -> Int)) (seq b (undefined::Bool))) (seq a (head (head (seq a ([]::[] ([] Bool)))))))))
\a -> seq a (seq a a)
\a -> a
(:) (undefined::Int)
\a -> (enumFromTo'::Int -> Int -> [Int]) ((undefined::Bool -> Int) (seq a (\b -> seq a (seq b False)) (seq a (seq a (seq a ([]::[] ([] Bool))))))) ((+1) ((undefined::Int -> Int) (head (seq a a))))
\a -> id a
map ((!!) ((undefined::([] (([] Int) -> Bool)) -> [] (Int -> Int)) ([]::[] (([] Int) -> Bool))) ((\a -> seq a 0) (undefined::[] ([] ([] (([] (Int -> Bool)) -> Int -> Bool))))))
\a -> seq a (\b -> seq a (\c -> (undefined::(Int -> Bool) -> [] Int) (\d -> b a (undefined::[] Int))) ((\c -> seq c (seq a 2)) (seq b (id ([]::[] ([] ([] ([] (Int -> Bool))))))))) (head (id (seq a (seq a (\b -> (undefined::[] (([] Int) -> ([] Int) -> Bool))))) (seq a False)))
(\a -> seq a (\b -> (\c -> seq c (\d -> d)) (head ([]::[] ([] Bool))))) (\a -> seq a (seq a (\b -> (\c -> seq a c) (seq b True)))) (undefined::Int)
\a -> (\b -> head ((++) (seq b (\c -> seq b (undefined::[] ([] Int))) (id 1)) (undefined::[] ([] Int)))) (head (seq a (seq a (seq a ((\b -> seq b (undefined::[] (([] ([] Int)) -> [] ([] Int)))) (seq a (undefined::(([] Int) -> Int -> Int) -> Bool) (\b -> id id)))))))
map (\a -> id a)
(undefined::([] (([] (Int -> Int -> [] Int)) -> Bool -> Bool)) -> ([] Int) -> [] Int) ((undefined::Bool -> [] (([] (Int -> Int -> [] Int)) -> Bool -> Bool)) ((!!) (tail ([]::[] Bool)) (id 2)))
(undefined::(([] (Bool -> Bool)) -> [] (Bool -> Bool)) -> ([] Int) -> [] Int) ((undefined::([] (([] Int) -> Bool)) -> ([] (Bool -> Bool)) -> [] (Bool -> Bool)) ((\a -> seq a (undefined::[] (([] Int) -> Bool))) True))
(undefined::([] Int) -> [] Int)
head ((\a -> seq a (seq a (undefined::(Int -> Bool -> Bool) -> [] (([] Int) -> [] Int)) (\b -> \c -> True))) (\a -> \b -> id (\c -> False) (filter (\c -> b) (seq a (seq b (undefined::[] (Int -> Int)))))))
\a -> a
case1 ((undefined::Int -> Int -> Int -> ([] Int) -> [] Int) (undefined::Int) ((\a -> seq a (seq a (undefined::Int))) (undefined::([] Int) -> ([] Int) -> [] Int))) (map (\a -> seq a (head (tail (seq a (undefined::[] Int))))) ((\a -> seq a (seq a ([]::[] ([] (([] Int) -> [] Int))))) (head (undefined::[] ([] Bool)))))
(undefined::(Int -> Int -> ([] Int) -> ([] Int) -> [] Int) -> ([] Int) -> [] Int) (\a -> seq a (\b -> (undefined::Bool -> ([] Int) -> ([] Int) -> [] Int) ((\c -> seq c (seq b (undefined::Bool))) (seq a (seq b (seq b ([]::[] Int)))))))
(undefined::([] Int) -> [] Int)
id ((undefined::Bool -> (Bool -> ([] Int) -> Bool) -> ([] Int) -> [] Int) (((==)::[Int] -> [Int] -> Bool) (tail ([]::[] Int)) (head (undefined::[] ([] Int))))) (undefined::Bool -> ([] Int) -> Bool)
\a -> a
\a -> case1 (seq a (seq a (seq a (seq a (\b -> \c -> \d -> a) (even (seq a (undefined::Int))))))) (undefined::[] Int) ((\b -> (undefined::Bool -> [] Int) (seq b False)) (seq a ((!!) (undefined::[] (([] ([] Bool)) -> [] ([] Bool))))))
\a -> seq a (map (\b -> (!!) (id (undefined::Int -> [] Int) (undefined::Int)) (seq a (\c -> seq b 0) (seq a (seq a True))))) (seq a (seq a ((undefined::(([] (Int -> Bool)) -> Int -> Bool) -> [] (Int -> [] Bool)) (\b -> \c -> seq c (((==)::Int -> Int -> Bool) (undefined::Int) (seq c (undefined::Int)))))))
(\a -> (\b -> seq b (seq b (\c -> id))) (id (seq a (undefined::Bool)))) ((\a -> \b -> \c -> seq a b) (\a -> (undefined::Bool))) (\a -> a)
id (undefined::(([] (Int -> Int)) -> [] (([] (Int -> Int)) -> Int -> Int)) -> ([] Int) -> [] Int) ((\a -> seq a (\b -> seq b (seq b ([]::[] (([] (Int -> Int)) -> Int -> Int))))) 1)
(\a -> seq a (seq a (\b -> (undefined::(([] Int) -> [] Bool) -> [] Int) ((\c -> seq c (undefined::([] Int) -> [] Bool)) (seq b (id ([]::[] ([] (Bool -> Bool))))))))) ((\a -> (\b -> seq b (seq b (\c -> c))) (seq a (not True))) (\a -> head (undefined::[] ((Int -> Int) -> ([] Int) -> Bool)) (id (undefined::Int -> Int))))
tail
case1 (undefined::Int -> ([] Int) -> Int -> ([] Int) -> [] Int) ((!!) (undefined::[] (Int -> ([] Int) -> [] Int)) (undefined::Int)) ([]::[] Int) (case1 (\a -> seq a (\b -> (undefined::Int))) ((\a -> seq a 0) (head (undefined::[] Int))) (undefined::[] Bool))
take 1
\a -> id (seq a (\b -> (undefined::Bool -> ([] ([] ([] Bool))) -> [] Int) (seq b (undefined::Bool)) (seq b (\c -> ([]::[] ([] ([] Bool)))) (id (\c -> (undefined::Int -> Bool)))))) (seq a ((undefined::([] ([] (Int -> Int))) -> Bool -> Int) ((!!) (undefined::[] ([] ([] (Int -> Int)))) 2) ((undefined::([] Int) -> Bool) a)))
(\a -> (!!) (undefined::[] (([] Int) -> [] Int)) (id (\b -> 2) (seq a (head ([]::[] Bool))))) ((!!) (undefined::[] (Int -> Int -> ([] Int) -> ([] ([] Int)) -> [] Bool)) ((\a -> a) (head ([]::[] Int))))
\a -> a
(\a -> (\b -> seq a (seq a (seq b (\c -> \d -> d) (seq a (undefined::[] ([] Bool)))))) ((undefined::(([] ([] Int)) -> [] Int) -> Bool) (\b -> tail (seq b (undefined::[] Int))))) (id (\a -> seq a ((\b -> seq b (\c -> seq b ([]::[] ([] Bool))) (not (undefined::Bool))) ((\b -> seq b (undefined::Int)) (seq a (undefined::Bool))))))
(undefined::([] ([] Bool)) -> ([] Int) -> [] Int) ([]::[] ([] Bool))
\a -> a
\a -> (!!) (seq a (seq a ([]::[] ((([] (Bool -> Bool)) -> [] (Bool -> Bool)) -> [] Int)))) ((+1) (undefined::Int)) (undefined::([] (Bool -> Bool)) -> [] (Bool -> Bool))
case1 (undefined::Int -> ([] Int) -> [] Int) ((\a -> seq a ((undefined::([] Bool) -> [] Int) (seq a ([]::[] Bool)))) (undefined::([] ([] ([] Int))) -> [] ([] ([] Int))))
(\a -> (:) (case1 (\b -> seq b (\c -> b)) ((!!) ([]::[] Int) (undefined::Int)) (seq a (seq a (seq a ([]::[] Int)))))) ((\a -> (\b -> seq b (seq b (\c -> (undefined::([] ([] Int)) -> [] Bool)))) (seq a (seq a (seq a 1)))) ((&&) False (head ([]::[] Bool))))
(\a -> seq a (seq a (\b -> (undefined::Bool -> ([] Int) -> [] Int)))) (undefined::Int) (case1 (undefined::Int -> ([] Int) -> Bool) (undefined::Bool) ([]::[] Int)) ((\a -> seq a (\b -> a (undefined::Int))) (undefined::Int -> Bool) ((undefined::([] ([] (Int -> Bool))) -> [] ([] (Int -> Int))) (id ([]::[] ([] (Int -> Bool))))))
\a -> seq a (\b -> seq b (\c -> a) ((\c -> seq b (seq c (\d -> (+1)))) (seq b (head (undefined::[] Int))))) (seq a (seq a (\b -> seq b (seq b (undefined::[] (([] ([] (Int -> Int))) -> [] ([] (Int -> Int)))))) (seq a (seq a (seq a (undefined::([] Bool) -> Int))) (seq a (tail (undefined::[] Bool))))))
\a -> (undefined::Int -> [] Int) ((+1) 2)
\a -> seq a (id (\b -> (enumFromTo'::Int -> Int -> [Int])) (seq a (seq a (seq a (undefined::[] Bool))))) ((\b -> seq b (seq b (seq a (undefined::Int)))) (seq a (seq a True))) (id (head (seq a a)))
head (undefined::[] (Bool -> (Int -> Bool) -> ([] Int) -> [] Int)) ((\a -> seq a (seq a (seq a True))) (\a -> a)) even
head (undefined::[] (Bool -> ([] Int) -> [] Int)) (case1 (undefined::Int -> ([] Int) -> Bool) ((\a -> seq a (undefined::Bool)) (undefined::Int)) ([]::[] Int))
(undefined::Bool -> ((([] Int) -> Int -> Bool) -> Bool) -> ([] Int) -> [] Int) ((\a -> head (seq a (undefined::[] Bool))) (undefined::([] (Int -> Int)) -> Int -> Int)) ((\a -> (undefined::Bool -> (([] Int) -> Int -> Bool) -> Bool) (a (undefined::[] Int) ([]::[] Int))) (\a -> (undefined::Bool -> ([] Int) -> Bool) (seq a (seq a (seq a (undefined::Bool))))))
(undefined::Bool -> ([] Int) -> [] Int) ((\a -> seq a (case1 (undefined::Bool -> ([] Bool) -> Bool) (seq a False) (seq a ([]::[] Bool)))) (\a -> tail (seq a ([]::[] (Int -> ([] (Int -> Bool)) -> Int -> Bool)))))
(undefined::Bool -> ([] ([] (Int -> Int))) -> ([] Int) -> [] Int) (undefined::Bool) (case1 (\a -> \b -> seq a (tail (undefined::[] ([] (Int -> Int))))) (id (undefined::Bool -> [] ([] (Int -> Int))) (head (undefined::[] Bool))) (filter (\a -> a) (undefined::[] Bool)))
\a -> seq a ((undefined::((([] Int) -> [] ([] Bool)) -> ([] Int) -> [] (Bool -> Bool)) -> [] Int) (\b -> \c -> seq a (seq a (\d -> seq b (id (tail (undefined::[] (Bool -> Bool)))))) (\d -> id (\e -> (undefined::[] ([] Bool))) (seq b (seq c (seq c (undefined::Int -> [] ([] Int))))))))
id (undefined::(([] ([] Int)) -> Int) -> Bool -> ([] Int) -> [] Int) (\a -> seq a ((undefined::Int -> Int) ((+1) (seq a 0)))) ((undefined::Bool -> Bool) ((\a -> seq a (seq a (seq a (undefined::Bool)))) (\a -> seq a (\b -> seq a (undefined::[] Bool)))))
case1 ((undefined::([] (Int -> Bool)) -> Int -> ([] Int) -> [] Int) ((\a -> head (seq a (undefined::[] ([] (Int -> Bool))))) ([]::[] ([] Int)))) ((enumFromTo::Int -> Int -> [Int]) ((\a -> seq a (seq a 1)) (\a -> head (undefined::[] ([] Bool)))) (case1 (undefined::Bool -> ([] Bool) -> Int) (undefined::Int) (undefined::[] Bool)))
(:) (case1 (\a -> seq a (seq a (\b -> (+1) ((+1) (seq a 1))))) ((\a -> seq a (undefined::([] ([] ([] Bool))) -> Int) (seq a ([]::[] ([] ([] Bool))))) (\a -> (-) 2)) ((\a -> seq a (head (seq a (undefined::[] ([] (Int -> ([] Int) -> Bool)))))) (\a -> seq a id a)))
(undefined::([] Int) -> [] Int)
\a -> a
(\a -> seq a (seq a (\b -> \c -> seq a (\d -> (undefined::[] Int)) 0))) ((enumFromTo'::Int -> Int -> [Int]) ((\a -> seq a (seq a (undefined::Int))) (tail ([]::[] ([] Int))))) (\a -> seq a (seq a (seq a (\b -> (undefined::Bool)))))
(\a -> seq a (seq a (\b -> \c -> id (undefined::Bool -> [] Int) (head ([]::[] Bool)))) (undefined::[] (Int -> [] Int))) (map ((undefined::Int -> (([] Int) -> Int) -> [] Int) (id (undefined::Int))) (map (\a -> \b -> seq a (undefined::Int)) ([]::[] ([] Int))))
\a -> (\b -> seq a (seq b (tail a))) (id (seq a (\b -> seq b (map (\c -> seq b (undefined::[] (Int -> Bool)))))) (id (head ([]::[] (Bool -> Bool)) (seq a (seq a True)))))
\a -> (++) (seq a a) ([]::[] Int)
\a -> (\b -> seq b (\c -> a) (map (seq a (seq a (undefined::Bool -> Int -> [] Int))) (undefined::[] Bool))) (seq a (\b -> seq a (seq b (undefined::Int -> [] (([] Int) -> [] Int)))) (seq a (seq a (seq a (undefined::Int)))) (seq a 2))
case1 (undefined::(([] Int) -> [] Int) -> ([] (([] Int) -> [] Int)) -> ([] Int) -> [] Int) (head ((\a -> seq a (id (undefined::[] (([] Int) -> [] Int)))) (\a -> False))) ((\a -> (undefined::Int -> [] (([] Int) -> [] Int)) (seq a (undefined::Int))) (\a -> (undefined::[] (Int -> Bool))))
(\a -> \b -> map (head (seq a (\c -> (undefined::[] (Int -> Int))) (seq a (seq a id)))) b) ((!!) ([]::[] (Int -> Int -> [] Int)) (id (undefined::Int)))
case1 ((undefined::([] Bool) -> Int -> ([] Int) -> ([] Int) -> [] Int) (undefined::[] Bool)) (undefined::([] Int) -> [] Int) (head (tail ([]::[] (Int -> [] Int))) (head (undefined::[] Int)))
\a -> seq a (seq a ((!!) (undefined::[] (((([] Int) -> ([] Bool) -> [] Bool) -> Bool) -> [] Int)) (seq a (case1 (undefined::([] Int) -> ([] ([] Int)) -> Int) (undefined::Int) (undefined::[] ([] Int)))) (seq a ((!!) ([]::[] ((([] Int) -> ([] Bool) -> [] Bool) -> Bool))) ((+) 1 (seq a (head ([]::[] Int)))))))
\a -> a
(++) ((\a -> seq a (head (undefined::[] (Int -> Int -> [] Int)) (undefined::Int))) ((\a -> \b -> seq a b) (undefined::([] ([] Int)) -> [] Int)) ((undefined::Bool -> (([] Int) -> Int -> Bool) -> Int) (undefined::Bool) ((\a -> seq a (\b -> \c -> seq b False)) ((+1) 0))))
(\a -> head ((undefined::Bool -> [] (([] Int) -> [] Int)) (seq a (\b -> seq b True) (seq a (\b -> seq b (undefined::[] Bool)))))) (undefined::[] (([] ([] (Bool -> Bool))) -> [] ([] (Bool -> Bool))))
(\a -> \b -> (undefined::Bool -> [] Int) (seq a (seq a (\c -> (undefined::Bool))) (seq b True))) ((undefined::([] ([] (([] Int) -> Bool -> Bool))) -> [] (Int -> Bool)) (take (head ([]::[] Int)) ([]::[] ([] (([] Int) -> Bool -> Bool)))))
\a -> (undefined::(([] ([] Int)) -> [] ([] (Int -> Bool))) -> [] Int) (seq a (case1 (\b -> \c -> seq b (seq a (\d -> (undefined::[] ([] (Int -> Bool)))) (undefined::Bool))) ((undefined::Bool -> [] ([] (Int -> Bool))) (not (seq a True)))))
case1 (\a -> seq a (\b -> id)) (\a -> seq a (seq a (seq a (seq a (undefined::(Int -> Bool -> Bool) -> [] Int)))) (\b -> \c -> c)) ((\a -> seq a (\b -> (undefined::[] ([] (Bool -> Bool)))) (undefined::Int)) (\a -> (\b -> seq b ([]::[] ([] Int))) (\b -> True)))
case1 (\a -> \b -> \c -> seq c (seq a (map (seq a (undefined::Bool -> Int)) (seq b b)))) (\a -> a) ((undefined::Int -> (Int -> Bool -> Bool) -> [] Bool) (undefined::Int) ((\a -> seq a (undefined::Int -> Bool -> Bool)) (undefined::Int)))
(\a -> id (\b -> id) (seq a (\b -> map (\c -> seq b 1) ([]::[] Bool)))) (\a -> seq a (map (undefined::(([] Int) -> ([] Int) -> [] Int) -> Int -> Int) (seq a (seq a (undefined::[] (([] Int) -> ([] Int) -> [] Int))))))
\a -> a
\a -> seq a (\b -> \c -> (undefined::Bool -> [] Int) b) (case1 (\b -> (undefined::([] ([] Bool)) -> Bool)) (seq a (undefined::Bool)) (seq a (undefined::[] ([] Bool)))) (head (id (seq a (\b -> seq a ([]::[] (([] Int) -> ([] Int) -> [] ([] Int))))) (seq a (seq a ((\b -> seq b True) (seq a (seq a (undefined::[] Int))))))))
\a -> a
case1 (\a -> seq a (\b -> \c -> case1 (undefined::Bool -> ([] Bool) -> [] Int) (seq c c) b)) id ([]::[] Bool)
\a -> a
take (case1 (\a -> \b -> (\c -> seq c (undefined::Int)) (seq a (seq a (id (undefined::[] ([] (([] Int) -> Bool -> Bool))))))) ((\a -> (+1) (seq a (undefined::Int))) (head (undefined::[] ((Int -> Int) -> Int -> Bool)) (\a -> seq a a))) ((\a -> seq a (tail (seq a ([]::[] (([] Int) -> [] ([] Bool)))))) (undefined::Int -> [] Int)))
(\a -> seq a (\b -> take (seq b (undefined::Bool -> Int) (id (undefined::Bool)))) (seq a (undefined::([] Int) -> Int -> Bool))) (\a -> (!!) (id (seq a ([]::[] ([] (([] Int) -> ([] ([] Int)) -> [] Bool))))) (seq a (seq a (undefined::([] ([] (Bool -> Bool))) -> Int)) (seq a (seq a ([]::[] ([] (Bool -> Bool)))))))
take 2
\a -> case1 (:) (seq a (seq a (\b -> (undefined::[] Int))) ((\b -> seq b (undefined::Bool)) (seq a (seq a 2)))) ((\b -> seq a (undefined::Bool -> [] Int) (seq b (undefined::Bool))) (seq a (seq a (seq a ([]::[] ([] ([] (([] Int) -> Int -> Int))))))))
tail
\a -> a
\a -> seq a (seq a (seq a ((undefined::Bool -> (Int -> Int) -> Int -> [] Int) (not (seq a False))) (seq a ((-) (seq a (\b -> (undefined::Int)) True)))) (undefined::Int))
\a -> (!!) (seq a ([]::[] ((([] (Bool -> Bool)) -> [] (Bool -> Bool)) -> [] Int))) (head ([]::[] (Bool -> Int)) (seq a (seq a (undefined::Bool)))) tail
\a -> a
\a -> a
\a -> case1 (\b -> \c -> seq a (seq a (undefined::[] Int))) (seq a (\b -> (undefined::Bool -> [] Int)) head (seq a (\b -> (undefined::Bool)) (undefined::[] ([] Int)))) (seq a (seq a (\b -> seq b (seq a ([]::[] Bool)))) (undefined::Bool))
\a -> (++) (id (undefined::(([] Int) -> [] Bool) -> [] Int) (undefined::([] Int) -> [] Bool)) (seq a (undefined::([] Bool) -> ([] Int) -> [] Int) (seq a (seq a (seq a (undefined::[] Bool)))) (map (undefined::Int -> Int) a))
id
\a -> a
\a -> a
\a -> (\b -> tail (seq b a)) ((undefined::(Int -> Bool) -> ([] ([] Int)) -> [] ([] (Int -> Int))) (seq a (seq a (\b -> \c -> True)) (seq a (seq a (seq a 0)))))
\a -> seq a (\b -> map (case1 (undefined::Bool -> ([] Bool) -> Int -> Int) (undefined::Int -> Int) ([]::[] Bool)) ([]::[] Int)) (\b -> (undefined::Bool))
\a -> seq a ((undefined::Bool -> (([] Int) -> ([] Int) -> [] ([] Int)) -> [] Int) (undefined::Bool) (id (undefined::([] Int) -> ([] Int) -> [] ([] Int))))
(\a -> \b -> seq a (seq b (\c -> case1 (:) b b) ((\c -> seq c (seq a False)) (head (seq a (undefined::[] ([] Bool))))))) (\a -> seq a (seq a (seq a (\b -> (undefined::Int -> Int -> [] Int))) (seq a (\b -> (undefined::Int -> Bool)) (undefined::([] Int) -> Bool -> Bool))))
\a -> seq a a
(\a -> \b -> (!!) (seq a ((undefined::Int -> [] ([] Int)) (seq a (undefined::Int)))) ((\c -> seq c (seq a (undefined::Int))) (seq a (undefined::[] ([] (Int -> Int)))))) (\a -> seq a (undefined::([] (([] (Int -> Bool)) -> Int -> Bool)) -> Int -> Int -> Int) a)
id (\a -> a)
id ((\a -> case1 ((!!) (seq a (undefined::[] (([] Int) -> ([] Int) -> [] Int)))) tail ((undefined::Bool -> [] Int) (undefined::Bool))) ((\a -> seq a (\b -> seq a ((undefined::Int -> [] (Bool -> Bool)) (seq a (seq b (undefined::Int)))))) ((\a -> seq a (seq a (seq a ([]::[] Int)))) False)))
(undefined::(([] ([] Int)) -> [] ([] ([] Int))) -> ([] Int) -> [] Int) (case1 (\a -> \b -> (\c -> seq c ([]::[] ([] ([] Int)))) (seq b 2)) (head ([]::[] (Int -> [] ([] ([] Int)))) 1))
\a -> take (seq a (\b -> (\c -> c a) (seq a (seq a head))) ((\b -> seq b (\c -> seq a ([]::[] Bool))) (seq a (\b -> seq a (undefined::Bool))))) (seq a (seq a (seq a (undefined::Int -> Int -> [] Int))) (seq a (seq a (seq a 2))) (head a))
\a -> case1 (head (seq a (seq a ([]::[] (([] Int) -> ([] ([] Int)) -> [] Int))))) ((\b -> seq b a) (seq a (seq a (seq a False)))) (seq a ((undefined::(([] Bool) -> Bool) -> [] ([] Int)) ((\b -> seq a (\c -> seq b b)) (((==)::Bool -> Bool -> Bool) True True))))
id (undefined::Bool -> (([] ([] Int)) -> [] Int) -> ([] Int) -> [] Int) (((==)::Int -> Int -> Bool) (undefined::Int) ((+1) (undefined::Int))) (map (id (id (undefined::(([] Bool) -> [] Bool) -> ([] Int) -> Int)) (take 1)))
(undefined::((([] ([] (Bool -> Bool))) -> Bool -> Bool -> Bool) -> Bool) -> ([] Int) -> [] Int) (head (take 1 ([]::[] ((([] ([] (Bool -> Bool))) -> Bool -> Bool -> Bool) -> Bool))))
\a -> a
(undefined::([] Int) -> [] Int)
(undefined::([] (([] (([] Int) -> [] (Int -> [] Int))) -> Int -> [] Int)) -> ([] Int) -> [] Int) ([]::[] (([] (([] Int) -> [] (Int -> [] Int))) -> Int -> [] Int))
(\a -> (\b -> seq b (\c -> seq c (\d -> d)) (head (seq a ([]::[] ([] ([] Int)))))) (\b -> seq b (seq a (\c -> seq c c)) b)) (\a -> seq a (head (seq a (seq a (seq a (undefined::[] (Bool -> [] ([] ([] ([] Bool))))))))) ((undefined::([] ([] Int)) -> Bool) ([]::[] ([] Int))))
\a -> tail (seq a ((\b -> seq b a) ((undefined::(Bool -> Bool) -> ([] (Int -> Int)) -> [] (Int -> Int)) (seq a (undefined::Bool -> Bool)))))
(:) (id (undefined::((([] (Int -> Int)) -> Int -> Int) -> Int -> (([] Int) -> Bool) -> ([] Int) -> Bool) -> Int) (undefined::(([] (Int -> Int)) -> Int -> Int) -> Int -> (([] Int) -> Bool) -> ([] Int) -> Bool))
(++) ((\a -> seq a (id (\b -> (undefined::Int -> [] Int)) (\b -> b)) (seq a (id (\b -> b) (id 1)))) ((\a -> seq a (seq a (seq a (seq a (\b -> seq b (seq a (undefined::[] ([] (Bool -> Bool))))))))) (id (id (undefined::(Int -> Int -> Bool) -> Int) (\a -> seq a (seq a (undefined::Int -> Bool)))))))
(\a -> seq a (\b -> filter (head (undefined::[] ((Int -> Bool) -> Int -> Bool)) (undefined::Int -> Bool))) (\b -> seq b (id ((==)::[Int] -> [Int] -> Bool) (seq b (seq a b))))) (\a -> map (\b -> seq b (seq b (undefined::([] Int) -> Int -> Bool)) (head (undefined::[] ([] Int)))) (id (seq a (take 2 ([]::[] (([] Int) -> [] (Int -> Bool)))))))
(\a -> (!!) ([]::[] (Int -> ([] Int) -> [] Int)) (head (undefined::[] Int)) ((!!) (seq a (seq a ([]::[] Int))) 1)) (\a -> \b -> head (undefined::[] ((Int -> [] Bool) -> Bool -> Bool)) ((!!) (seq a ([]::[] ([] Bool)))) (seq b (seq a ((\c -> seq c (seq c False)) (\c -> ([]::[] Bool))))))
\a -> (undefined::[] Int)
(undefined::Bool -> ([] Int) -> [] Int) (id (\a -> seq a even) 1 ((undefined::([] ([] Int)) -> Int) (undefined::[] ([] Int))))
(undefined::([] Int) -> [] Int)
(undefined::([] (Int -> Int -> ([] Int) -> Bool)) -> ([] Int) -> [] Int) (head ((!!) (undefined::[] ([] ([] (Int -> Int -> ([] Int) -> Bool)))) ((+) 2 2)))
(\a -> seq a (\b -> seq b (id (undefined::Int -> ([] Int) -> [] Int) (head ([]::[] Int))))) (id (\a -> \b -> (undefined::([] Bool) -> Bool)) ((!!) ([]::[] Int) (undefined::Int))) (id (id (head ([]::[] ((([] Int) -> [] Int) -> Bool -> Bool))) (\a -> seq a (seq a (\b -> a) (seq a (seq a (undefined::Bool)))))))
(\a -> seq a (seq a (head (seq a ([]::[] (([] ([] (Bool -> Bool))) -> ([] Int) -> [] Int))) ((\b -> seq b (seq b ([]::[] ([] (Bool -> Bool))))) (seq a (seq a (undefined::Bool))))))) ((undefined::([] (Bool -> Bool)) -> Int) (map (\a -> (&&) (undefined::Bool)) (undefined::[] Int)))
id
id
(undefined::([] Bool) -> Bool -> ([] Int) -> [] Int) (id (\a -> seq a ([]::[] Bool)) ((!!) (undefined::[] (([] ([] Int)) -> [] Int)) 2)) ((undefined::([] (([] ([] Bool)) -> Int -> [] ([] (Int -> Bool)))) -> Bool) (id (id (undefined::[] (([] ([] Bool)) -> Int -> [] ([] (Int -> Bool)))))))
(\a -> (!!) (seq a (map (:) (undefined::[] Int))) (seq a (seq a (\b -> (undefined::Int))) (seq a (seq a (seq a ([]::[] (Int -> Bool -> Bool))))))) (\a -> (undefined::Bool))
\a -> (undefined::[] Int)
\a -> seq a (seq a ((undefined::([] ([] ([] Bool))) -> (([] Bool) -> [] (Bool -> Bool)) -> [] Int) ((\b -> seq b (id (undefined::[] ([] ([] Bool))))) (case1 (undefined::Int -> ([] Int) -> Int) (undefined::Int)))) ((\b -> seq b (seq b ((undefined::([] Int) -> ([] Bool) -> [] (Bool -> Bool)) a))) ((+1) (seq a (seq a (seq a (seq a (head a))))))))
(undefined::(([] Int) -> ([] (([] Int) -> Int -> Int)) -> Int -> Int) -> ([] Int) -> [] Int) (head (id (undefined::[] (([] Int) -> ([] (([] Int) -> Int -> Int)) -> Int -> Int))))
case1 (\a -> \b -> (undefined::([] Int) -> [] Int)) (undefined::([] Int) -> [] Int) ((\a -> seq a (seq a ([]::[] Bool))) ((\a -> seq a 1) (not (undefined::Bool))))
\a -> a
(\a -> case1 ((!!) (seq a (seq a (undefined::[] (Int -> ([] Int) -> [] Int)))) (a 0 ([]::[] Int))) (seq a ((undefined::(Int -> ([] Int) -> Bool) -> [] Int) (undefined::Int -> ([] Int) -> Bool)))) ((undefined::([] ([] Int)) -> Int -> ([] Int) -> Int) (map (\a -> ([]::[] Int)) ([]::[] ([] ([] Bool)))))
head (undefined::[] (Bool -> (Int -> [] Int) -> ([] Int) -> [] Int)) ((\a -> a (seq a (seq a True))) ((!!) (undefined::[] (Bool -> Bool)) 1)) (\a -> seq a ([]::[] Int))
\a -> seq a (head (seq a (seq a ([]::[] ((([] (Int -> Bool)) -> [] (Int -> Bool)) -> [] Int))))) ((!!) (seq a (seq a (undefined::[] (([] (Int -> Bool)) -> [] (Int -> Bool))))) (seq a (undefined::Int)))
(\a -> seq a (seq a (\b -> \c -> (:) b (seq a c)) (undefined::Int))) (\a -> (undefined::Int -> ([] ([] ([] Int))) -> [] ([] ([] Bool))))
\a -> a
(\a -> \b -> head (seq a (undefined::[] (Bool -> ([] Int) -> [] Int))) (a 1 (undefined::Int))) (\a -> (!!) (seq a (undefined::(([] Int) -> Int -> Int) -> [] Bool) (\b -> \c -> seq a c))) ((\a -> seq a (seq a ((+) (seq a 0) a))) ((!!) (undefined::[] ((Int -> Int -> Int) -> Int)) (undefined::Int) (\a -> \b -> seq a a)))
\a -> seq a ((\b -> seq b (seq a a)) (\b -> seq b ((\c -> (\d -> seq c d) (seq a (seq c (seq c (undefined::[] (Int -> Bool)))))) (seq b ((undefined::Int -> [] (([] ([] Int)) -> [] Int)) (seq b (seq b (undefined::Int))))))))
(\a -> (\b -> (\c -> seq c (seq b (\d -> d))) (undefined::Int)) (id (\b -> seq b (undefined::Int)) (seq a (seq a (seq a (undefined::[] ([] Int))))))) (undefined::([] Int) -> Int -> Int -> [] Int)
\a -> a
(\a -> head ([]::[] ((([] Int) -> Int -> [] Int) -> ([] Int) -> [] Int)) ((\b -> seq b (\c -> \d -> seq b (undefined::[] Int))) (seq a (head ([]::[] ([] Int)))))) ((!!) (case1 (\a -> (undefined::([] ([] Int)) -> [] Int)) ([]::[] Int) (undefined::[] ([] Int))) ((+1) 1))
(undefined::([] Int) -> [] Int)
id
take ((\a -> seq a ((+1) (seq a (seq a (\b -> seq b 0) (seq a (seq a head)))))) (\a -> \b -> seq b (\c -> seq b (undefined::(([] Int) -> Int -> Bool) -> Bool)) 2 (undefined::([] Int) -> Int -> Bool)))
(\a -> (undefined::(([] ([] ([] Bool))) -> [] ([] Bool)) -> ([] Int) -> [] Int) ((\b -> seq b (\c -> seq a ([]::[] ([] Bool)))) (seq a (seq a True)))) (head ([]::[] ((Bool -> Bool) -> ([] (Bool -> Bool)) -> [] (Bool -> Bool))))
take 0
\a -> seq a (\b -> case1 (id (seq a (\c -> id))) (seq b a) a) (\b -> \c -> id (seq c (\d -> ([]::[] ([] ([] Bool))))))
map id
case1 (undefined::Bool -> ([] Bool) -> Int -> ([] Int) -> [] Int) (\a -> seq a (:) (seq a a)) ([]::[] Bool) ((!!) (case1 (\a -> (undefined::([] Bool) -> [] Int)) (undefined::[] Int) (undefined::[] Bool)) ((\a -> seq a (seq a 2)) ((!!) ([]::[] (Int -> Int)))))
head ((!!) (tail (map (undefined::(Bool -> Bool) -> [] (([] Int) -> [] Int)) ((\a -> seq a (undefined::[] (Bool -> Bool))) True))) ((\a -> \b -> a) (id 0) ((\a -> seq a tail) (undefined::Bool))))
\a -> a
(\a -> id (\b -> seq a (\c -> seq b (undefined::(([] Int) -> Int) -> [] Int)) (seq a (seq b (seq a ([]::[] Bool)))) (seq b (seq b (\c -> \d -> (undefined::Int)) (\c -> c))))) ((\a -> \b -> seq b (\c -> a)) ((undefined::(([] Int) -> Int) -> Bool) (undefined::([] Int) -> Int)))
(undefined::(Int -> (Int -> Int -> [] Int) -> Int -> Int -> [] Int) -> ([] Int) -> [] Int) (id (\a -> seq a (seq a (seq a (seq a (undefined::(Int -> Int -> [] Int) -> Int -> Int -> [] Int))))))
(undefined::Bool -> ([] Int) -> [] Int) False
\a -> filter (undefined::Int -> Bool) ((\b -> id (seq a (\c -> a) b)) (not (head (seq a (tail (undefined::[] Bool))))))
\a -> seq a (seq a (\b -> (undefined::Bool -> Bool -> [] Int) (seq a (id True))) (undefined::([] (Int -> Int)) -> Int -> Int) (seq a (seq a (case1 (\b -> \c -> (undefined::Bool)) (seq a (seq a (seq a (undefined::Bool)))) (seq a a)))))
\a -> seq a (seq a a)
\a -> seq a ((!!) ((\b -> seq b (seq b (undefined::[] (Bool -> [] Int)))) (seq a (\b -> b))) 2 (seq a ((\b -> seq a (seq a (seq b (not (seq a (undefined::Bool)))))) ([]::[] ([] ([] Bool))))))
(undefined::([] Int) -> [] Int)
(\a -> seq a (\b -> head (seq a (seq b (seq b (\c -> head (seq a ([]::[] ([] ([] Int)))))) (\c -> a (seq a (undefined::[] (Int -> ([] Int) -> Bool))) (undefined::Int)))))) (\a -> seq a (\b -> seq a (\c -> id (undefined::Bool -> Bool) (undefined::Bool)) (map (\c -> \d -> d) (undefined::[] Bool))))
\a -> a
\a -> a
(undefined::(([] Int) -> [] Bool) -> Bool -> ([] Int) -> [] Int) (case1 (\a -> map even) ([]::[] Bool)) ((!!) (undefined::[] (Int -> Bool)) 2 (undefined::Int))
\a -> a
(\a -> a) (\a -> a)
\a -> a
(\a -> seq a (\b -> seq a (undefined::(([] Bool) -> Bool) -> ([] Int) -> [] Int) (\c -> seq a (undefined::Bool))) a) (undefined::Int)
(undefined::(([] (([] ([] Int)) -> [] Bool)) -> Int -> [] Int) -> ([] Int) -> [] Int) (\a -> \b -> id (map (\c -> 2) ((undefined::Int -> [] (([] Bool) -> [] Bool)) (seq b (seq b b)))))
\a -> case1 (\b -> (!!) (undefined::[] (([] Int) -> Bool -> [] Int)) b) (\b -> take 1 a) (seq a ((:) 2 ([]::[] Int))) (seq a (seq a (undefined::Bool)))
\a -> seq a (seq a (seq a (seq a (seq a (\b -> seq a (undefined::([] (([] Int) -> [] Int)) -> [] Int))) ((undefined::([] (([] Int) -> Bool)) -> [] ([] Int)) (seq a (undefined::[] (([] Int) -> Bool)))) (seq a (undefined::(([] Int) -> Int -> [] Int) -> [] (([] Int) -> [] Int)) (id (\b -> seq b (undefined::([] Int) -> Int -> [] Int)) (seq a (seq a (seq a (undefined::Bool)))))))))
case1 ((\a -> \b -> seq b (case1 (seq a take))) False) ((\a -> head ([]::[] (Bool -> ([] Int) -> [] Int)) (seq a (seq a (undefined::Bool)))) ((!!) ([]::[] ([] ([] Bool))) (undefined::Int))) ((\a -> (!!) (seq a (undefined::[] ([] Int))) (seq a (undefined::Int))) ((\a -> seq a (undefined::Int -> [] Bool)) (\a -> seq a False)))
(\a -> seq a (\b -> seq b (undefined::([] Int) -> [] Int)) (map (id (undefined::Bool -> ([] Bool) -> [] Bool)) (seq a (seq a ([]::[] Bool))))) (\a -> \b -> (\c -> seq b (seq c (\d -> ([]::[] Int))) ([]::[] (Int -> [] Int))) (\c -> c))
(\a -> id (seq a (\b -> \c -> id) (a (undefined::[] (Int -> Bool)) 0))) head ((\a -> seq a (head ((++) (seq a (undefined::[] Int)) (seq a (undefined::[] Int))))) ([]::[] ([] ([] (Bool -> Bool -> Bool)))))
(\a -> seq a (\b -> seq b (\c -> seq c ((enumFromTo::Int -> Int -> [Int]) 2 (undefined::Int))))) ((undefined::(Int -> Int) -> ([] Int) -> [] (Int -> Int)) (\a -> a)) (case1 ((\a -> seq a (undefined::Int -> ([] Int) -> Bool)) (undefined::[] ([] Int))) (head ([]::[] (([] ([] Int)) -> Bool)) ([]::[] ([] Int))) (undefined::[] Int))
(undefined::([] Int) -> [] Int)
\a -> a
\a -> a
tail
\a -> a
head ((undefined::Int -> (([] Bool) -> [] Bool) -> [] (([] Int) -> [] Int)) ((\a -> seq a (undefined::Int)) (filter (undefined::(Int -> ([] Int) -> Int) -> Bool) ([]::[] (Int -> ([] Int) -> Int)))) ((++) ((undefined::Bool -> [] Bool) (id (\a -> False) (\a -> id 1)))))
case1 ((!!) ([]::[] (Int -> Int -> ([] Int) -> [] Int)) (id (undefined::Int)) ((\a -> seq a a) ((+1) (undefined::Int)))) (map (undefined::(Int -> Int -> Int) -> Int) (filter (\a -> seq a (undefined::Bool)) ([]::[] (Int -> Int -> Int))))
\a -> seq a a
(!!) ([]::[] (([] Int) -> [] Int)) ((\a -> \b -> seq a (seq b 2)) (id (undefined::[] Bool)) ((!!) (undefined::[] (Bool -> [] Int))))
tail
\a -> a
\a -> seq a ((\b -> seq b (seq b (seq a (\c -> (undefined::[] Int))))) ((\b -> b) (seq a (undefined::Int)))) (seq a (\b -> seq b (seq b ((:) (seq b (seq b (\c -> ([]::[] (Int -> Int))) 1)) (map (seq a (undefined::Int -> [] (Int -> Int))) a)))))
\a -> seq a (\b -> (undefined::(Int -> Int -> Int) -> [] Int)) (seq a (\b -> seq a (seq b True)) (id (undefined::[] (Int -> Bool)))) (seq a (\b -> (undefined::Int -> Int -> Int)) ((\b -> (!!) (seq b (undefined::[] ([] ([] (Int -> Int)))))) (seq a ([]::[] ([] Bool)))))
\a -> a
(undefined::(([] ([] ([] Bool))) -> [] Int) -> Int -> ([] Int) -> [] Int) (head ((\a -> seq a (seq a (undefined::[] (([] ([] ([] Bool))) -> [] Int)))) (undefined::Bool))) ((\a -> seq a (seq a ((undefined::(Int -> [] Bool) -> Int) (seq a (undefined::Int -> [] Bool))))) (\a -> \b -> (\c -> seq a (seq c (undefined::Bool))) (\c -> seq a (undefined::Bool))))
(\a -> seq a (\b -> \c -> (!!) (undefined::[] ([] Int)) (undefined::Int)) (((==)::Int -> Int -> Bool) (undefined::Int) (seq a 2))) (\a -> ([]::[] (([] ([] (Bool -> Bool))) -> [] (Bool -> Bool))))
(\a -> id (\b -> seq a (:)) (seq a (seq a (seq a True))) (case1 (\b -> seq a (undefined::([] Bool) -> Int)) (seq a 2) (seq a ([]::[] Bool)))) (\a -> seq a ((undefined::Int -> [] (Int -> Int -> Int -> [] Int)) (head (seq a (tail (undefined::[] Int))))))
\a -> a
\a -> (\b -> case1 (\c -> (undefined::([] Bool) -> [] Int)) (seq b a) ((undefined::Bool -> [] Bool) (seq b (undefined::Bool)))) (\b -> \c -> seq a (undefined::([] Int) -> Int -> [] Int))
(undefined::([] (Int -> [] Int)) -> Bool -> ([] Int) -> [] Int) (id (undefined::([] Bool) -> [] (Int -> [] Int)) (undefined::[] Bool)) ((\a -> head (seq a ([]::[] (([] ([] Int)) -> Bool)))) id ((\a -> seq a ([]::[] ([] Int))) (id (undefined::Int))))
take 0
(undefined::([] Int) -> [] Int)
tail
tail
\a -> (undefined::[] Int)
\a -> head (seq a (seq a (\b -> (undefined::[] (Bool -> [] Int))) (seq a (seq a ((\b -> seq b (undefined::Int)) (seq a (seq a (undefined::Bool)))))))) (undefined::Bool)
head ((\a -> seq a (seq a (undefined::[] (([] (Int -> [] Int)) -> ([] Int) -> [] Int)))) (undefined::Int)) (map (\a -> seq a (\b -> \c -> seq a (undefined::[] Int)) ((+1) (seq a (undefined::Int)))) (map (head (undefined::[] (Bool -> [] ([] (Int -> Bool))))) (id (undefined::[] Bool))))
\a -> (\b -> filter (seq a (seq b (\c -> odd)) a) (seq b (seq a (\c -> seq a a) (head (undefined::[] ([] (Int -> Int))))))) ((\b -> seq b 2) ((!!) (undefined::[] (([] ([] (Bool -> Bool))) -> Bool)) (undefined::Int) (seq a (tail (undefined::[] ([] (Bool -> Bool)))))))
(undefined::([] Int) -> [] Int)
\a -> a
case1 (id (\a -> (undefined::Int -> ([] Int) -> [] Int)) (\a -> seq a (\b -> \c -> True) a)) (undefined::[] Int)
(\a -> (!!) (seq a (seq a (seq a (head (seq a ([]::[] ([] (([] Int) -> [] Int)))))))) (undefined::Int)) ((\a -> seq a (seq a (\b -> \c -> seq b c))) ((\a -> seq a (id True)) (id 2)))
(!!) (map ((\a -> seq a (\b -> tail)) True) ((:) (undefined::Int) (undefined::[] Int))) (case1 (\a -> seq a (\b -> seq b (undefined::Int))) (undefined::Int) ((\a -> seq a ([]::[] ([] (Int -> Bool)))) (undefined::Int)))
(!!) (id (undefined::((Int -> Bool) -> [] Bool) -> [] (([] Int) -> [] Int)) (undefined::(Int -> Bool) -> [] Bool)) ((\a -> seq a (undefined::([] Int) -> Int) (seq a (seq a (seq a (undefined::[] Int))))) (\a -> \b -> seq a (seq a (\c -> (undefined::Bool))) (\c -> \d -> seq a (seq c (undefined::Bool)))))
\a -> a
(\a -> case1 (seq a (\b -> id (++))) ((!!) ([]::[] (([] Int) -> [] Int)) 2) (seq a (undefined::Int -> [] Int) (seq a a))) (head ((!!) (undefined::[] ([] (Bool -> Int))) 2) ((\a -> seq a (seq a False)) ((!!) ([]::[] ([] (([] Int) -> [] Int))) (undefined::Int))))
(undefined::Bool -> ([] Int) -> [] Int) ((\a -> \b -> a) (id True) (id (\a -> seq a (seq a (undefined::Int -> [] Bool)) a)))
(undefined::(Bool -> Bool -> Bool) -> Bool -> ([] Int) -> [] Int) ((!!) (id ([]::[] (Bool -> Bool -> Bool))) 0) ((\a -> seq a (\b -> not (undefined::Bool)) (id (seq a (undefined::Int)))) ((\a -> seq a (id ([]::[] Int))) ((+1) 0)))
(:) 0
tail
\a -> a
(\a -> seq a (id (\b -> map ((-) (undefined::Int)))) (\b -> even (seq a (seq b (seq b (+1)) a)))) (case1 (undefined::Bool -> ([] Bool) -> Int) (id (undefined::Bool -> Int) (id False)) ((undefined::Int -> [] Bool) (id 2)))
\a -> head (undefined::[] ((([] (([] ([] Int)) -> [] (([] Int) -> Bool))) -> Int -> Bool) -> [] Int)) (head (seq a ([]::[] (([] (([] ([] Int)) -> [] (([] Int) -> Bool))) -> Int -> Bool))))
(:) ((+1) ((\a -> seq a (a 2 0 1)) (\a -> \b -> (undefined::Int -> Int))))
(\a -> \b -> (\c -> seq b (seq a (seq c b))) ([]::[] (([] Bool) -> [] Bool))) (\a -> seq a (undefined::([] Int) -> [] Bool))
\a -> a
\a -> case1 (seq a (\b -> (undefined::Bool -> ([] Bool) -> [] Int)) (seq a (undefined::Bool -> Int))) ((\b -> seq b (undefined::Int -> [] Int)) (seq a (seq a (undefined::Int))) (seq a (seq a (undefined::(([] (Bool -> Bool)) -> Bool) -> Int)) (\b -> seq a True))) ((\b -> seq b (undefined::(([] ([] Int)) -> Bool) -> [] Bool)) (seq a (seq a (undefined::Bool))) (seq a ((!!) ([]::[] (([] ([] Int)) -> Bool)) 2)))
case1 (\a -> (\b -> \c -> seq c (\d -> seq c (seq b b))) (seq a (seq a (head ([]::[] ([] Int)))))) (\a -> seq a ([]::[] Int)) (map ((!!) ([]::[] (Bool -> Int)) (undefined::Int)) ((!!) (undefined::[] ([] Bool)) 2))
(!!) (id (undefined::[] ((([] Int) -> [] Int) -> ([] Int) -> [] Int))) ((undefined::([] ([] (Int -> Int))) -> Int) (undefined::[] ([] (Int -> Int)))) ((\a -> seq a ((:) ((undefined::Bool -> Int) (seq a False)))) (undefined::([] (Int -> Bool -> Bool)) -> Int -> Int))
(:) ((\a -> seq a (seq a (seq a (\b -> 1))) (seq a (seq a (seq a (\b -> \c -> ([]::[] Int)))))) (undefined::([] (([] (Int -> Int)) -> [] (Int -> Int))) -> Int -> Bool))
\a -> a
(undefined::Bool -> (([] Int) -> ([] Int) -> [] Bool) -> ([] Int) -> [] Int) True (\a -> (undefined::([] Int) -> [] Bool))
\a -> a
head ((\a -> \b -> (undefined::Bool -> [] (([] Int) -> [] Int)) (seq b (seq a a))) ((\a -> head (seq a ([]::[] Bool))) (((==)::[Int] -> [Int] -> Bool) ([]::[] Int) (undefined::[] Int))) (map (undefined::([] ([] Int)) -> Int -> Int) (filter (\a -> seq a (undefined::Bool)) ([]::[] ([] ([] Int))))))
(\a -> seq a (\b -> seq b (seq a (seq a (seq a (\c -> b)))) (\c -> seq b (id head) (a b (undefined::[] ([] Int)))))) (\a -> \b -> map (\c -> ((==)::Int -> Int -> Bool) (seq a 1) (seq a (undefined::Int))) (seq b (undefined::Bool -> [] (([] Int) -> [] ([] Bool))) True))
\a -> a
\a -> seq a a
(undefined::(([] Int) -> Int) -> ([] Int) -> [] Int) ((\a -> seq a (\b -> seq a (\c -> 2)) (a (seq a (seq a (undefined::Bool))))) ((\a -> seq a id) ((+) (undefined::Int) 2)))
\a -> seq a (\b -> seq a (\c -> (undefined::([] (Int -> [] Int)) -> [] Int) (seq b (seq c ([]::[] (Int -> [] Int)))))) ((\b -> seq b (seq b (seq b (undefined::Int)))) (seq a (\b -> tail (undefined::[] Bool)))) (map (\b -> seq b ((\c -> seq c (undefined::[] ([] (Int -> ([] Int) -> Bool)))) (undefined::Int))) (seq a (case1 (\b -> (undefined::([] Int) -> [] (Int -> Int))) (seq a ([]::[] (Int -> Int))) (seq a ([]::[] Int)))))
(\a -> \b -> seq a ((\c -> seq c (id (undefined::([] Bool) -> [] Int) (undefined::[] Bool))) ((undefined::([] Bool) -> ([] ([] ([] Bool))) -> [] ([] Bool)) (tail (undefined::[] Bool))))) ((\a -> seq a (seq a ([]::[] ([] (([] Int) -> ([] Bool) -> [] Bool))))) ((undefined::([] ([] (([] Int) -> Bool))) -> [] ([] Int)) (id ([]::[] ([] (([] Int) -> Bool))))))
(\a -> \b -> (\c -> seq a ((\d -> seq d b) (seq c True))) (seq b (\c -> seq a (undefined::Bool)) (undefined::Int -> Int -> Int -> [] Int))) ((\a -> head (seq a (undefined::[] (([] (Int -> Int)) -> Int -> Int)))) ((undefined::Int -> Int -> ([] Int) -> Bool) (id 1)))
id ((\a -> \b -> seq a b) ((undefined::(([] ([] Int)) -> [] ([] Int)) -> ([] ([] Int)) -> [] ([] Bool)) id))
(undefined::Bool -> ([] (Int -> Bool)) -> ([] Int) -> [] Int) (((==)::[Int] -> [Int] -> Bool) (tail (undefined::[] Int)) ([]::[] Int)) (undefined::[] (Int -> Bool))
(\a -> seq a (head (seq a (take (undefined::Int) (undefined::[] (Int -> ([] Int) -> [] Int))))) (head (seq a ([]::[] (Bool -> Int))) (seq a (seq a (seq a (undefined::Bool)))))) id
(undefined::(Bool -> Bool -> Bool) -> ([] Int) -> [] Int) ((undefined::(([] Int) -> Int -> Int -> Bool) -> Bool -> Bool -> Bool) (\a -> \b -> \c -> False))
(undefined::(([] Int) -> Int -> Bool) -> ([] Int) -> [] Int) (\a -> id (\b -> seq b (\c -> seq b (undefined::Int -> Bool)) (seq a (seq b ([]::[] ([] (Int -> Int)))))) (\b -> seq b (seq b (seq a (undefined::Int -> Int)) (seq b (seq a (undefined::Int))))))
(\a -> (undefined::([] ([] ([] Bool))) -> ([] Int) -> [] Int) (seq a (seq a (\b -> seq b (undefined::[] ([] ([] Bool)))) ((:) (seq a 2))))) (undefined::([] (([] ([] Int)) -> [] ([] (Int -> Int)))) -> ([] Int) -> [] ([] Int))
(\a -> head (id (seq a ([]::[] ((Bool -> [] Int) -> ([] Int) -> [] Int)))) ((\b -> \c -> b) (seq a (seq a ([]::[] Int))))) (\a -> (\b -> seq a (seq b (\c -> ([]::[] (([] Int) -> Bool))))) (\b -> b) (id (seq a (undefined::([] (([] Int) -> [] Bool)) -> Bool)) (seq a (seq a ([]::[] (([] Int) -> [] Bool))))))
(++) (undefined::[] Int)
(\a -> seq a (seq a (\b -> \c -> id) (a (undefined::[] Int) (undefined::[] Int)))) (\a -> seq a (id take) (seq a (head a))) 2
\a -> a
\a -> case1 (seq a (seq a (undefined::Bool -> Bool -> ([] Bool) -> [] Int) ((\b -> seq b (undefined::Bool)) (undefined::[] Int)))) a (seq a (id (seq a (seq a ((\b -> seq b (undefined::[] Bool)) (seq a (seq a (undefined::Bool))))))))
map (\a -> seq a (id (seq a (\b -> (undefined::Int)))) (seq a (\b -> map (seq b (undefined::Bool -> Int -> [] Int)) (tail (seq a (seq a (seq b ([]::[] Bool))))))))
filter (\a -> seq a (seq a (seq a (case1 (seq a (\b -> seq b (seq a (undefined::(([] Int) -> Int) -> ([] Int) -> Bool)) (undefined::([] Int) -> Int))) (((==)::[Int] -> [Int] -> Bool) (seq a ([]::[] Int)) (seq a (seq a (seq a ([]::[] Int))))) ((\b -> seq b (undefined::(([] Bool) -> Bool) -> [] Int)) (seq a (undefined::Bool)) ((\b -> seq b (undefined::([] Bool) -> Bool)) (seq a (undefined::Bool))))))))
\a -> seq a (seq a (undefined::([] ([] Bool)) -> Bool -> [] Int) (seq a (\b -> seq a ([]::[] ([] Bool))) (head a)) (((==)::Int -> Int -> Bool) ((\b -> seq a (seq a b)) (undefined::Int)) ((\b -> seq a (seq b 0)) (seq a (seq a (seq a (undefined::Bool)))))))
\a -> ([]::[] Int)
tail
(undefined::([] Int) -> [] Int)
\a -> seq a ([]::[] Int)
(undefined::([] Int) -> [] Int)
case1 (\a -> seq a (seq a (undefined::([] Int) -> ([] Int) -> [] Int))) ((undefined::(Int -> [] Int) -> ([] Int) -> [] Int) (\a -> seq a (seq a (seq a ([]::[] Int))))) (head (map (\a -> seq a (seq a ([]::[] Int))) (undefined::[] Bool)))
\a -> seq a a
filter (case1 (\a -> (undefined::([] Int) -> Int -> Bool)) (\a -> (\b -> head (seq b (undefined::[] Bool))) ((undefined::Bool -> [] ([] ([] (Int -> Bool)))) False)) (take ((!!) (undefined::[] Int) 1) ((++) ([]::[] Int) ([]::[] Int))))
(\a -> (undefined::Int -> ([] Int) -> [] Int) (seq a (seq a (case1 (undefined::Bool -> ([] Bool) -> Int) 0 ([]::[] Bool))))) ((\a -> seq a (seq a (seq a (seq a (\b -> b))))) (undefined::Int))
tail
head (id (\a -> \b -> (\c -> seq c (undefined::[] (([] Int) -> [] Int))) (\c -> seq b (undefined::Bool))) (undefined::[] ([] ([] Bool))) ((undefined::(Int -> Bool) -> (([] Int) -> [] Bool) -> Int) (\a -> seq a (seq a False)) ((\a -> \b -> seq a (undefined::[] Bool)) True)))
\a -> seq a (seq a (\b -> a)) ([]::[] ([] (Int -> Int)))
\a -> case1 (undefined::(Bool -> Bool) -> ([] (Bool -> Bool)) -> [] Int) (map (\b -> seq a ((+1) 0)) ((!!) ([]::[] ([] ([] ([] (Int -> Int))))) (undefined::Int))) ((\b -> seq b ([]::[] (Bool -> Bool))) a)
(\a -> seq a (\b -> ([]::[] Int))) (head ([]::[] ((Int -> Int) -> Bool -> [] Int)) (\a -> a) ((\a -> a (seq a (seq a 0))) even))
(undefined::([] (([] (([] (Bool -> Bool)) -> [] (Bool -> Bool))) -> ([] Int) -> Bool)) -> ([] Int) -> [] Int) (head (undefined::[] ([] (([] (([] (Bool -> Bool)) -> [] (Bool -> Bool))) -> ([] Int) -> Bool))))
head ([]::[] (Bool -> (Bool -> Bool) -> ([] Int) -> [] Int)) ((undefined::(([] Bool) -> [] Bool) -> Bool) (\a -> seq a (seq a a))) not
(undefined::(([] ([] ([] ([] ([] Bool))))) -> [] ([] ([] ([] Bool)))) -> ([] Int) -> [] Int) ((\a -> \b -> (\c -> c) (seq a (undefined::[] ([] ([] ([] Bool)))))) ((undefined::(Int -> Int -> Int) -> Bool) (-)))
\a -> map (seq a ((\b -> seq b (\c -> seq c (undefined::Int -> Int)) (tail a)) ((!!) (seq a (seq a (undefined::[] ([] (Bool -> Bool))))) (seq a (seq a 2))))) (undefined::[] Int)
case1 (\a -> \b -> \c -> case1 (seq a take) c c) (\a -> map (undefined::(Int -> Bool) -> Int) (seq a (head ([]::[] ([] (Int -> Bool)))))) (id (head (undefined::[] ((Int -> Bool -> Bool) -> [] Bool))) (\a -> \b -> b))
(\a -> (\b -> seq a (\c -> \d -> d) (seq b (seq b (seq b True)))) (\b -> seq a ((\c -> seq c 1) (seq a (seq a False))))) (head ([]::[] (([] ([] ([] Int))) -> [] ((([] ([] Int)) -> [] Bool) -> ([] ([] Int)) -> [] Bool))))
\a -> id (\b -> id (\c -> seq a (id a))) (seq a (undefined::Int -> [] (Int -> [] Int)) (seq a (head a))) (seq a (seq a (seq a ((!!) (seq a ([]::[] (Int -> Bool))) (seq a (undefined::Int))) (undefined::Int))))
(\a -> seq a (\b -> \c -> seq b (undefined::Bool -> [] Int) (b c (undefined::Bool) (undefined::Bool)))) ((\a -> seq a (undefined::Int)) (\a -> id (seq a (undefined::Bool)))) (undefined::([] Int) -> Bool -> Bool -> Bool)
(!!) ((!!) (undefined::[] ([] (Bool -> ([] Int) -> [] Int))) (head (undefined::[] Int))) ((!!) (undefined::[] Int) ((+1) 2)) False
id ((\a -> case1 (seq a (seq a (undefined::Bool -> ([] Bool) -> ([] Int) -> [] Int))) (\b -> ([]::[] Int)) (undefined::[] Bool)) ((\a -> ((==)::Bool -> Bool -> Bool) (seq a a)) (id False) ((\a -> seq a (seq a True)) (head (undefined::[] ([] Bool))))))
(undefined::([] Int) -> [] Int)
filter (((==)::Int -> Int -> Bool) ((undefined::([] (Int -> Bool)) -> Int) (case1 (\a -> \b -> (undefined::[] (Int -> Bool))) ((:) (undefined::Int -> Bool) (undefined::[] (Int -> Bool))) ((:) 2 ([]::[] Int)))))
tail
map ((\a -> (undefined::Bool -> Bool -> Int -> Int) (seq a (id (undefined::Bool)))) (\a -> (:) ((\b -> b) (seq a (seq a True)))) ((\a -> head (seq a ([]::[] (Int -> Bool))) a) (case1 (\a -> (undefined::([] ([] Bool)) -> Int)) 1 ([]::[] ([] Bool)))))
\a -> (\b -> seq a (\c -> id (undefined::([] ([] ([] Bool))) -> [] Int)) (seq a (seq b (seq a (undefined::Int)))) (map (\c -> seq b (undefined::[] ([] Bool))) a)) ((\b -> \c -> head (seq b (\d -> ([]::[] ([] (([] Int) -> Bool)))) 2)) (seq a (\b -> (\c -> seq c (seq c (undefined::[] ([] Bool)))) (id (seq a False)))))
(undefined::(Int -> [] (Bool -> Bool)) -> Int -> ([] Int) -> [] Int) (\a -> case1 (undefined::Int -> ([] Int) -> [] (Bool -> Bool)) (seq a ([]::[] (Bool -> Bool))) (seq a ([]::[] Int))) 0
\a -> ([]::[] Int)
(++) (id (case1 (undefined::(Int -> [] Int) -> ([] (Int -> [] Int)) -> [] Int) (map (undefined::(([] ([] Int)) -> [] Int) -> Int) (id (undefined::[] (([] ([] Int)) -> [] Int)))) (undefined::[] (Int -> [] Int))))
(\a -> seq a (seq a (undefined::Int -> Bool -> ([] Int) -> [] Int) (seq a (seq a (seq a 1)))) (a (\b -> (\c -> seq c (seq b (undefined::Int -> [] Int))) (seq b (id 0))))) (\a -> seq a (\b -> \c -> b) True (id (\b -> seq a b) (seq a (seq a (seq a 2)))))
\a -> (undefined::((([] (([] Int) -> [] (Int -> Bool))) -> ([] Bool) -> [] Bool) -> [] (Int -> Int)) -> [] Int) (seq a (undefined::(([] (([] Int) -> [] (Int -> Bool))) -> ([] Bool) -> [] Bool) -> [] (Int -> Int)))
(\a -> seq a (seq a (undefined::Int -> ([] Int) -> ([] Int) -> [] Int) (seq a (seq a 0)) ((\b -> seq b (tail (undefined::[] Int))) (seq a (\b -> ([]::[] ([] Bool))))))) ((\a -> \b -> map (seq a (undefined::Bool -> [] (Int -> ([] Int) -> Bool))) (undefined::[] Bool)) ((undefined::([] ([] Bool)) -> Int) (undefined::[] ([] Bool))))
head (id (map (undefined::Int -> (([] Int) -> [] Int) -> ([] Int) -> [] Int) ((\a -> seq a (undefined::[] Int)) (even (undefined::Int))))) (\a -> a)
(\a -> seq a (head (undefined::[] ((Int -> ([] Int) -> Bool) -> ([] Int) -> [] Int)) ((undefined::(Int -> Int) -> Int -> ([] Int) -> Bool) ((-) (seq a 0))))) (undefined::([] (([] Bool) -> [] Bool)) -> Int -> ([] Int) -> ([] ([] Int)) -> [] Bool)
\a -> a
(\a -> seq a ((undefined::Int -> Int -> ([] Int) -> [] Int) (head (seq a ([]::[] Int)))) 0) (id ((undefined::(([] (([] Int) -> ([] Int) -> [] Int)) -> Bool) -> Bool) (\a -> seq a (undefined::Bool))))
\a -> a
\a -> seq a (id (\b -> (!!) ([]::[] ([] Int)) (id (id (seq a (undefined::Int))))) (\b -> (undefined::[] (([] (Int -> [] Int)) -> [] (Int -> [] Int)))))
\a -> ([]::[] Int)
\a -> seq a ([]::[] Int)
(\a -> seq a (\b -> \c -> c)) ((||) (id False) (head ([]::[] Bool))) (id ((\a -> seq a (seq a (undefined::Int -> Int))) ((+1) 0) (undefined::Int)))
(\a -> seq a (seq a (seq a (\b -> (undefined::Int -> ([] Int) -> [] Int))) (seq a (seq a (undefined::Int))))) ((\a -> head (seq a (undefined::[] (([] Int) -> [] (Int -> Bool))))) (((==)::Bool -> Bool -> Bool) (undefined::Bool) (undefined::Bool))) (case1 ((\a -> \b -> \c -> a) (id (undefined::Int))) ((\a -> seq a 2) (head (undefined::[] (Bool -> Bool)))) ((:) (undefined::Bool) (undefined::[] Bool)))
case1 (head ((\a -> (\b -> seq b (seq b (undefined::[] (Int -> ([] Int) -> [] Int)))) (seq a a)) 2)) (map ((\a -> \b -> seq b (seq a (undefined::Int))) (id (undefined::Bool))) ((\a -> seq a (undefined::[] (Int -> ([] Int) -> Int))) (head ([]::[] Int))))
(!!) ((\a -> seq a (map (seq a (undefined::Int -> ([] Int) -> [] Int)) ([]::[] Int))) ((\a -> a) True)) 1
\a -> a
id
(undefined::([] Int) -> [] Int)
\a -> (undefined::[] Int)
(\a -> seq a (\b -> head ((undefined::(Int -> Int -> Bool) -> [] ([] Int)) (\c -> seq c (\d -> seq b (undefined::Int -> Bool)) (seq a (seq b (undefined::[] (Int -> Bool)))))))) (id (head ([]::[] ((([] ([] ([] Bool))) -> [] ([] ([] Bool))) -> Bool))) (id (\a -> a)))
\a -> a
(\a -> head (seq a (seq a (undefined::(Int -> Int -> [] Int) -> [] (([] Int) -> [] Int))) (seq a (head (seq a (head (seq a ([]::[] ([] (Int -> Int -> [] Int)))))))))) ([]::[] ([] (Int -> Int)))
\a -> seq a (undefined::Int -> (([] ([] Bool)) -> [] ([] (Bool -> Bool))) -> [] Int) (id (undefined::Int)) (\b -> (:) ((undefined::Int -> [] (Bool -> Bool)) (undefined::Int)) (map (seq a (\c -> (undefined::[] (Bool -> Bool)))) (undefined::[] Bool)))
head ((\a -> map ((\b -> \c -> \d -> seq b d) (seq a ([]::[] Bool))) (tail (head (seq a ([]::[] ([] Bool)))))) ((undefined::([] ([] Bool)) -> ([] (Int -> Bool)) -> [] (Int -> Bool)) ((\a -> tail (seq a ([]::[] ([] Bool)))) (undefined::[] ([] (Int -> Bool -> Bool))))))
\a -> a
(\a -> \b -> tail a) ([]::[] Int)
head (undefined::[] ((([] (Int -> [] Int)) -> [] (Int -> [] Int)) -> ([] Int) -> [] Int)) (\a -> (\b -> seq b a) (head (id (undefined::Bool -> [] Int) True)))
(undefined::(([] ([] (([] Int) -> Int -> Bool))) -> [] (([] Int) -> Int -> Int -> [] Int)) -> ([] Int) -> [] Int) (\a -> seq a (undefined::([] (Bool -> Bool)) -> [] (([] Int) -> Int -> Int -> [] Int)) (seq a (\b -> ([]::[] (Bool -> Bool))) (seq a (seq a (\b -> seq a False)))))
\a -> a
head (filter ((\a -> (\b -> \c -> b (seq c 2)) (seq a (seq a (\b -> False)))) (head (undefined::[] (Bool -> Int)) (undefined::Bool))) (filter ((!!) (undefined::[] ((([] Int) -> [] Int) -> Bool)) (undefined::Int)) (id (undefined::Bool -> [] (([] Int) -> [] Int)) (id (undefined::Bool)))))
\a -> (!!) (seq a (map (\b -> seq b ((undefined::Bool -> [] Int) (seq a (seq a b)))) ([]::[] Bool))) (id (seq a (\b -> seq a (seq a (seq a (seq b (undefined::Int)))))) ((undefined::Int -> ([] ([] (Int -> Bool))) -> Bool) (seq a (seq a (undefined::Int)))))
head ([]::[] (([] Int) -> [] Int))
\a -> seq a (undefined::(Int -> Int -> Bool) -> Bool -> [] Int) ((\b -> (!!) (seq b (undefined::[] (Int -> Bool)))) True) (seq a (\b -> seq b (seq a (seq a even) 2)) ((undefined::(([] Int) -> [] (Int -> Int)) -> [] ([] Bool)) (seq a (\b -> seq a (seq a ([]::[] (Int -> Int)))))))
(\a -> (\b -> seq b (seq b (seq a (undefined::Bool -> ([] Int) -> [] Int))) (seq a (seq b (undefined::Bool)))) (\b -> (!!) (id b) (a (undefined::Int) (undefined::Int)))) ((\a -> seq a (\b -> seq b (+))) (id 1) (\a -> ((==)::[Int] -> [Int] -> Bool) (head ([]::[] ([] Int))) (undefined::[] Int)))
\a -> map (\b -> seq a (head a)) (seq a (seq a (seq a (undefined::[] (([] ([] ([] (([] Int) -> Int -> Int -> Bool)))) -> [] ([] ([] (([] Int) -> Int))))))))
case1 (undefined::(Int -> Int) -> ([] (Int -> Int)) -> ([] Int) -> [] Int) ((\a -> seq a (undefined::Bool -> ([] Int) -> [] Int)) False (not (undefined::Bool))) (map (\a -> (+1)) ([]::[] ([] ([] (Bool -> Bool)))))
\a -> (undefined::[] Int)
(\a -> seq a (\b -> seq b (seq a (\c -> (undefined::Int -> [] Int))) (head (seq b (undefined::[] ([] Bool)))) (head (undefined::[] (Bool -> Int)) (seq a (undefined::Bool))))) (\a -> \b -> (undefined::Int -> Int -> [] Bool) (id 0) ((!!) ([]::[] ((Bool -> Int) -> Int)) (undefined::Int) (seq b (\c -> seq a (seq c 0)))))
(\a -> (undefined::Int -> Int -> ([] Int) -> [] Int) (seq a (undefined::Int)) (seq a (a (seq a (seq a (undefined::[] Int))) 0))) (undefined::([] Int) -> Int -> Int)
case1 (\a -> seq a (\b -> \c -> seq c (\d -> d)) a) ((undefined::Int -> Bool -> ([] Int) -> [] Int) (undefined::Int) ((\a -> seq a (undefined::Bool)) (head ([]::[] Int)))) (head (undefined::[] ([] Bool)))
\a -> a
(:) ((\a -> head (seq a (undefined::[] ((([] ([] Int)) -> ([] Int) -> [] Bool) -> Int)))) (undefined::Bool) (\a -> seq a (case1 (\b -> \c -> \d -> seq b (seq b (undefined::[] Bool))) (\b -> (undefined::[] Bool)) (head (undefined::[] ([] Int))))))
\a -> a
\a -> seq a (seq a (\b -> a)) (id (undefined::(([] Int) -> ([] Int) -> Bool) -> ([] (Bool -> Bool)) -> Bool) ((!!) (id (undefined::[] (([] Int) -> ([] Int) -> Bool))) (id 2)))
case1 (id (\a -> (\b -> \c -> seq a (seq b id)) (seq a (seq a (seq a 1))))) (head (head (undefined::[] (Bool -> [] (([] Int) -> [] Int))) ((\a -> seq a True) (undefined::[] Bool)))) ((undefined::(([] Int) -> Bool) -> [] ([] Int)) ((undefined::Int -> ([] Int) -> Bool) ((+1) (undefined::Int))))
\a -> seq a (map ((undefined::Bool -> (([] Int) -> ([] ([] Int)) -> [] Bool) -> Int) ((\b -> seq b True) (seq a (id (undefined::Int))))) (seq a (seq a ((undefined::(Bool -> Int) -> [] (([] Int) -> ([] ([] Int)) -> [] Bool)) (case1 (undefined::Int -> ([] Int) -> Bool -> Int) (undefined::Bool -> Int) a)))))
(\a -> seq a (\b -> seq a (seq b (\c -> c)))) ((\a -> seq a (seq a (seq a (undefined::Bool)))) (head ([]::[] Int))) (\a -> id (\b -> seq b (undefined::Int -> [] Bool)) (seq a (seq a (undefined::Bool))) (case1 (\b -> \c -> 2) (seq a (undefined::Int)) (seq a ([]::[] Bool))))
(\a -> \b -> map (seq a (\c -> (+1) (seq b (seq c (undefined::Int))))) (seq a (seq a ([]::[] ([] ([] ([] (([] Int) -> [] (Int -> [] Int))))))))) (\a -> seq a (seq a ((\b -> seq b (\c -> (undefined::[] Int))) False) (seq a (map (seq a take) a))))
id (case1 (\a -> seq a (++)) (\a -> map (\b -> 2) (undefined::[] (Bool -> Bool))) (head ((\a -> seq a ([]::[] ([] Int))) ([]::[] Bool))))
\a -> a
(\a -> \b -> \c -> seq a (seq c c)) (id ((undefined::Int -> ([] Int) -> Bool) ((+1) (undefined::Int)))) ((\a -> seq a True) (undefined::Int -> ([] ([] ([] ([] Bool)))) -> [] (([] Int) -> [] Int)))
id
case1 ((!!) ([]::[] (Bool -> ([] Bool) -> ([] Int) -> [] Int)) ((\a -> seq a 1) (id (undefined::Bool)))) ((\a -> seq a (\b -> b)) (\a -> (\b -> seq b a) (\b -> seq a b))) ((!!) ((undefined::Bool -> [] ([] Bool)) False) (undefined::Int))
(!!) (undefined::[] (([] Int) -> [] Int)) ((undefined::Int -> ([] (Int -> Bool)) -> Int) 0 ((:) (\a -> seq a (seq a True)) (id (undefined::[] (Int -> Bool)))))
\a -> a
\a -> case1 (seq a (head (seq a ([]::[] ((Int -> Int) -> ([] (Int -> Int)) -> [] Int))))) (seq a ((!!) (undefined::[] (Bool -> [] Int)) (undefined::Int) True)) ((++) (seq a (id ([]::[] (Int -> Int)))) (undefined::[] (Int -> Int)))
id
\a -> seq a (seq a (seq a (map (seq a ((!!) (undefined::[] (Bool -> ([] Int) -> Int)) (seq a (seq a (undefined::Int))) (undefined::Bool))) (seq a (undefined::Bool -> (([] Int) -> Int) -> [] ([] Int)) False (seq a (seq a (\b -> head)) a)))))
(undefined::(([] Int) -> ([] (([] ([] Int)) -> [] Bool)) -> Bool -> Bool) -> ([] Int) -> [] Int) (id (head (tail (undefined::[] (([] Int) -> ([] (([] ([] Int)) -> [] Bool)) -> Bool -> Bool)))))
\a -> a
(\a -> (!!) (filter (head (undefined::[] ((([] Int) -> [] Int) -> Bool))) (seq a (seq a ([]::[] (([] Int) -> [] Int))))) (seq a ((undefined::([] (Bool -> Bool)) -> Int) ([]::[] (Bool -> Bool))))) (\a -> map (seq a (\b -> seq b ((\c -> seq c a) (seq b False)))) (seq a ([]::[] (([] ([] ([] Int))) -> [] ([] ([] Bool))))))
head ((:) (head ([]::[] (Bool -> ([] Int) -> [] Int))) ((!!) (undefined::[] ([] (Bool -> ([] Int) -> [] Int))) (undefined::Int))) ((&&) ((!!) ([]::[] Bool) 0) ((\a -> seq a a) False))
\a -> a
head (undefined::[] (([] Int) -> [] Int))
\a -> (undefined::(([] (([] (Int -> Bool)) -> Int -> Bool)) -> Bool -> Bool -> Bool) -> [] Int) (id (head (seq a (seq a (seq a (seq a (seq a (undefined::[] (([] (([] (Int -> Bool)) -> Int -> Bool)) -> Bool -> Bool -> Bool)))))))))
\a -> a
id
(undefined::([] ([] (Int -> Bool))) -> Int -> ([] Int) -> [] Int) ([]::[] ([] (Int -> Bool))) ((\a -> seq a (seq a (head (undefined::[] (([] ([] ([] ([] Bool)))) -> Int))) (seq a ([]::[] ([] ([] ([] Bool))))))) (\a -> (undefined::Int)))
id (\a -> seq a a)
\a -> a
take ((+1) ((-) ((\a -> seq a (seq a (\b -> 1) take)) ((!!) (undefined::[] ([] ([] ([] Bool)))) 2)) ((\a -> \b -> seq a (undefined::Int)) (undefined::Bool) (undefined::Int -> ([] Int) -> Bool))))
\a -> (undefined::[] Int)
\a -> seq a (seq a (seq a ((undefined::([] ([] (Int -> Bool))) -> [] Int) ((\b -> seq b (\c -> seq c (undefined::[] ([] (Int -> Bool)))) b) (seq a (seq a (seq a ((undefined::([] (([] Int) -> Bool)) -> Bool) (seq a (undefined::[] (([] Int) -> Bool)))))))))))
\a -> map (\b -> seq a ((undefined::(([] (Bool -> Bool)) -> [] (Bool -> Bool)) -> Int) (seq a (seq b id)))) (undefined::[] (([] (([] ([] Int)) -> [] ([] Bool))) -> Bool -> Bool -> Bool))
\a -> a
\a -> seq a ((\b -> seq b (map (undefined::([] (([] Int) -> ([] ([] Int)) -> [] Bool)) -> Int)) (head (seq a (undefined::[] ([] ([] (([] Int) -> ([] ([] Int)) -> [] Bool))))))) (\b -> ([]::[] Int)))
(undefined::([] Int) -> [] Int)
(++) (map ((undefined::(([] (([] Int) -> [] Int)) -> [] (Bool -> Bool)) -> Int -> Int) (\a -> take (seq a (undefined::Int)) (head ([]::[] ([] (Bool -> Bool)))))) (head (id ((\a -> seq a (seq a (undefined::(Int -> Bool) -> [] ([] Int))) odd) (undefined::([] (Int -> Bool)) -> Int -> Bool)))))
(\a -> seq a tail) (undefined::([] Bool) -> ([] (([] Int) -> [] ([] Int))) -> [] (Int -> [] Int))
(\a -> seq a (\b -> seq a (case1 (\c -> seq c (seq c (\d -> b))) b b))) ((!!) ((undefined::([] (([] Int) -> Bool)) -> [] Bool) (undefined::[] (([] Int) -> Bool))) ((\a -> seq a (seq a (undefined::Int))) ([]::[] (Int -> Int))))
(\a -> seq a ((undefined::([] ([] Bool)) -> Bool -> ([] Int) -> [] Int) (seq a (seq a ([]::[] ([] Bool)))) (undefined::Bool))) ((undefined::([] ([] Int)) -> (([] Int) -> [] Bool) -> Int) (tail (undefined::[] ([] Int))) (\a -> id head (undefined::[] ([] Bool))))
\a -> a
\a -> map (id (\b -> seq a ((\c -> id (seq c (seq a (undefined::Int)))) ((\c -> seq c (undefined::[] ([] (([] ([] Int)) -> [] Bool)))) 1)))) (seq a (seq a (seq a (tail (head ([]::[] ([] (([] (([] ([] ([] Int))) -> [] ([] Bool))) -> Int -> [] Int))))))))
(\a -> head ((\b -> seq a (seq b (undefined::[] (Int -> ([] Int) -> [] Int)))) (seq a (seq a (undefined::Bool))))) ((\a -> a (seq a (seq a (undefined::[] Int)))) (\a -> seq a (seq a (seq a 0)))) ((\a -> \b -> a) 2 (head (undefined::[] (Int -> ([] Int) -> Int -> Int)) ((!!) (undefined::[] Int) 0)))
(undefined::(([] ([] Bool)) -> [] Bool) -> ([] Int) -> [] Int) (\a -> (undefined::[] Bool))
\a -> ([]::[] Int)
\a -> a
(\a -> seq a (seq a (seq a (\b -> b)))) (((==)::Int -> Int -> Bool) (case1 (undefined::Bool -> ([] Bool) -> Int) (undefined::Int) ([]::[] Bool)) ((undefined::Bool -> Int) True))
\a -> a
(\a -> (\b -> seq a (\c -> b) ((!!) ([]::[] Int) 1)) (seq a (seq a (\b -> \c -> c)) (seq a (seq a False)))) (\a -> \b -> \c -> (undefined::(([] Int) -> ([] (([] Int) -> ([] Int) -> Bool)) -> Int) -> Int) (undefined::([] Int) -> ([] (([] Int) -> ([] Int) -> Bool)) -> Int))
\a -> a
id
\a -> ([]::[] Int)
id (\a -> seq a (\b -> a) (seq a (undefined::([] Int) -> [] ((([] Int) -> [] (Int -> Int)) -> ([] Int) -> [] (Int -> Int)))))
tail
\a -> a
(\a -> \b -> seq a ((undefined::([] Int) -> ([] ([] (Int -> Bool))) -> [] Int) b ((++) (head ([]::[] ([] ([] (Int -> Bool))))) ([]::[] ([] (Int -> Bool)))))) (\a -> (undefined::([] (([] Int) -> Int -> Int -> Bool)) -> Int -> Bool))
id (undefined::(([] Int) -> [] ([] Int)) -> Bool -> ([] Int) -> [] Int) (\a -> seq a (\b -> seq a (seq a (undefined::[] ([] Int)))) (\b -> seq b (seq a a))) ((\a -> seq a (seq a (undefined::Bool))) (head (undefined::[] (([] (([] Int) -> Int -> Int -> Bool)) -> Int -> Int))))
head (case1 (\a -> \b -> seq a ((\c -> seq a (seq a (seq c (undefined::[] (([] Int) -> [] Int))))) (seq a (seq b (seq b ([]::[] (Int -> Bool))))))) ((undefined::Bool -> [] (([] Int) -> [] Int)) ((\a -> seq a False) 0)) (take 2 ([]::[] Bool)))
(!!) ([]::[] (Bool -> Bool -> ([] Int) -> [] Int)) (head (undefined::[] Int)) ((\a -> seq a True) id) (head (tail (undefined::[] ((([] Int) -> Bool -> Bool -> Bool) -> Bool))) (case1 (\a -> \b -> seq b (||)) (\a -> \b -> (undefined::Bool))))
\a -> (!!) (tail (undefined::[] ((([] ([] Int)) -> [] ([] Int)) -> [] Int))) ((\b -> seq a (seq b (seq a 0))) (seq a (seq a (seq a ([]::[] Bool))))) tail
(\a -> (\b -> seq a (seq b (\c -> seq c (undefined::([] Int) -> [] Int)) (undefined::Int))) (\b -> False)) (undefined::([] Int) -> [] (([] (([] Int) -> [] ([] Int))) -> [] (([] Int) -> [] ([] Int))))
(:) ((\a -> a ((++) (seq a (seq a ([]::[] Int))) (undefined::[] Int))) (id (\a -> seq a (seq a (undefined::Bool -> Int)) (seq a (seq a True)))))
(undefined::(([] (([] Int) -> ([] Int) -> [] ([] Int))) -> [] ([] Bool)) -> ([] Int) -> [] Int) (\a -> map (\b -> (++) ([]::[] Bool) (undefined::[] Bool)) (tail ((undefined::([] ([] Bool)) -> [] Bool) ([]::[] ([] Bool)))))
(undefined::([] Int) -> [] Int)
\a -> a
\a -> a
id (undefined::(([] Int) -> ([] Int) -> [] Bool) -> ([] Int) -> [] Int) ((\a -> seq a (undefined::([] Int) -> ([] Int) -> [] Bool)) (\a -> False))
case1 (undefined::Int -> ([] Int) -> [] Int) ((\a -> seq a (id (undefined::Bool -> [] Int)) (seq a (seq a (seq a True)))) ((\a -> seq a tail) (head ([]::[] Int))))
case1 (\a -> seq a (seq a (\b -> id (\c -> tail c))) (seq a (\b -> b ([]::[] Int) (undefined::Bool) True) (seq a (\b -> \c -> \d -> d)))) ((!!) ([]::[] (([] (([] Int) -> Bool)) -> [] Int)) ((+1) (undefined::Int)) ([]::[] (([] Int) -> Bool)))
\a -> id (seq a (\b -> map (seq a (\c -> seq a (undefined::Int))) (seq a (seq a (undefined::[] (([] Int) -> Int -> [] ([] (Int -> Bool)))))))) (\b -> seq a (seq b (take ((undefined::([] (Bool -> Bool)) -> Int) (id (seq b (seq a (id ([]::[] (Bool -> Bool))))))))))
take ((\a -> case1 (\b -> (undefined::([] Bool) -> Int)) (seq a 1) (undefined::[] Bool)) (\a -> seq a ([]::[] ([] Bool))))
\a -> seq a a
(undefined::(([] Int) -> ([] ([] (Int -> Bool))) -> (Bool -> Bool) -> Bool -> Bool) -> ([] Int) -> [] Int) (\a -> seq a (\b -> \c -> id (\d -> (undefined::Bool -> Bool))) (seq a 1))
\a -> (++) a (map (undefined::(([] Int) -> Int -> Int) -> Int) ([]::[] (([] Int) -> Int -> Int)))
\a -> map (seq a (undefined::Bool -> Int)) ([]::[] Bool)
id (\a -> \b -> id (seq b (seq b (seq b (\c -> seq c (id (undefined::[] Int))) (\c -> seq a (id False)))))) (\a -> (undefined::[] (([] Int) -> Bool)))
\a -> seq a (\b -> a) (seq a (seq a (seq a ((\b -> seq b (\c -> (undefined::Int))) (seq a (seq a (undefined::Int)))) (undefined::Int -> Bool))))
\a -> a
\a -> a
\a -> a
(\a -> \b -> seq a (seq b (seq a (seq b (id (\c -> b)))) (\c -> b))) (undefined::Int -> Bool -> Bool)
\a -> (!!) ((\b -> seq a (map (undefined::Bool -> [] Int) (seq b (undefined::[] Bool)))) (seq a (head (undefined::[] (Int -> [] ([] (Int -> Bool))))) ((-) (undefined::Int) 0))) 1
\a -> seq a (\b -> seq b (seq a a)) (case1 (\b -> \c -> (undefined::([] Int) -> Bool)) (\b -> seq a (undefined::Bool)) (seq a (undefined::[] Bool)) (map (undefined::([] ([] Int)) -> Int) (seq a (seq a ([]::[] ([] ([] Int)))))))
\a -> (undefined::[] Int)
id
(undefined::(([] Int) -> ([] Int) -> [] Bool) -> ([] Int) -> [] Int) ((undefined::Int -> ([] Int) -> ([] Int) -> [] Bool) (id (\a -> seq a a) 0))
(\a -> (\b -> seq b ((undefined::(([] Int) -> [] Bool) -> ([] Int) -> [] Int) (\c -> tail ([]::[] Bool)))) (\b -> case1 (\c -> (undefined::([] Bool) -> Bool)) (seq a True) (seq b (undefined::[] Bool)))) (\a -> (\b -> \c -> (undefined::Bool -> [] (Int -> [] Int)) b) (seq a (seq a ((\b -> b) (undefined::Bool)))))
(!!) ((\a -> seq a (seq a (undefined::[] (Int -> ([] Int) -> [] Int)))) ((+1) (undefined::Int))) ((\a -> a) ((+1) 2)) 1
head (map ((\a -> (undefined::([] ([] Int)) -> Bool -> ([] Int) -> [] Int) (seq a (seq a (seq a ([]::[] ([] Int)))))) ((\a -> seq a a) (undefined::Int))) ([]::[] Bool))
(\a -> seq a (\b -> id ((\c -> seq c (undefined::([] Int) -> [] Int)) (seq b ([]::[] Int))))) ((\a -> (+1) (seq a 1)) (id (undefined::Bool))) (\a -> (\b -> seq b (seq a (undefined::([] ([] (Int -> Int))) -> [] ([] ([] Int))) ([]::[] ([] (Int -> Int))))) (seq a (seq a (seq a (head (undefined::[] ([] (([] (([] ([] Int)) -> [] Int)) -> Bool))))))))
\a -> a
\a -> seq a (map (head (id ([]::[] ((([] Int) -> ([] (Bool -> Bool -> Bool)) -> Int -> ([] Bool) -> Bool) -> Int)))) (seq a ([]::[] (([] Int) -> ([] (Bool -> Bool -> Bool)) -> Int -> ([] Bool) -> Bool))))
\a -> seq a (\b -> a) (undefined::Bool)
(\a -> id ((!!) ((\b -> seq b (undefined::[] (([] Int) -> [] Int))) a)) (seq a (\b -> b) a)) ((\a -> (\b -> seq b (seq a (undefined::Int))) (seq a (seq a (undefined::Bool)))) (\a -> case1 (\b -> (undefined::([] Int) -> [] ([] Bool))) (seq a ([]::[] ([] Bool))) (undefined::[] Int)))
(\a -> \b -> (\c -> seq b (seq b (seq c (seq a (undefined::Bool -> [] Int)) (seq a (undefined::Bool))))) ((\c -> c) ((+) (undefined::Int) (undefined::Int)))) (undefined::([] Int) -> ([] ([] (Int -> [] Int))) -> Int -> [] ([] ([] Bool)))
map (\a -> 1)
case1 (\a -> \b -> take) ((\a -> seq a (:)) (id (undefined::Bool))) ((\a -> seq a ([]::[] Int)) (undefined::Bool)) ((+) ((\a -> seq a (seq a 1)) (not False)) ((undefined::Int -> Int) (head ([]::[] Int))))
\a -> (undefined::[] Int)
filter ((\a -> a (seq a (seq a (seq a ((undefined::(Int -> [] Bool) -> [] Int) (seq a (undefined::Int -> [] Bool)))))) (seq a (seq a (seq a ((undefined::Bool -> [] (Bool -> Bool)) (a (undefined::[] Int) ([]::[] (Bool -> Bool)) (undefined::Int))))))) (\a -> \b -> seq a (\c -> seq a True)))
(\a -> (\b -> seq b (\c -> seq c tail)) (seq a (seq a (seq a 2)))) ((\a -> id (seq a (undefined::Int -> ([] Int) -> Bool))) ((+) (undefined::Int) (undefined::Int))) ((undefined::(Int -> Int -> Bool) -> Int) ((\a -> seq a ((==)::Int -> Int -> Bool)) ((+1) (undefined::Int))))
\a -> (!!) (seq a (undefined::[] ([] Int))) (id (\b -> id (seq a (undefined::Int))) ((undefined::([] Int) -> ([] ([] Bool)) -> [] ([] Bool)) (seq a (undefined::[] Int))))
head ([]::[] (((([] ([] Int)) -> [] ([] (Int -> Bool))) -> Bool) -> ([] Int) -> [] Int)) (\a -> (\b -> seq b (seq b (\c -> seq c True)) (\c -> seq a ([]::[] ([] Int)))) (\b -> id (\c -> seq b (\d -> c) (tail ([]::[] (Bool -> Bool))))))
(\a -> (!!) (tail ([]::[] (Bool -> ([] Int) -> [] Int))) a) ((\a -> seq a (seq a 2)) (undefined::([] Int) -> [] (Int -> Bool))) ((\a -> even (seq a (seq a (seq a (+1)) (head ([]::[] Int))))) (\a -> \b -> odd))
(\a -> seq a (seq a (undefined::(Int -> Int -> Int) -> ([] Int) -> [] Int)) (head (seq a (seq a (seq a (undefined::Bool -> [] (Int -> Int -> Int))) (id False))))) (id (\a -> (undefined::([] ([] (Int -> Bool))) -> Int -> ([] Int) -> ([] Int) -> [] Bool)))
tail
case1 (\a -> seq a (undefined::([] ([] (Int -> Int))) -> ([] Int) -> [] Int)) (case1 (\a -> (++)) tail ([]::[] Int)) (undefined::[] ([] (Int -> Int)))
(:) ((\a -> seq a (undefined::(([] Int) -> Int -> Bool) -> Int)) (id (\a -> (+1))) (undefined::([] Int) -> Int -> Bool))
\a -> a
(\a -> (++) (map (\b -> id 2) (map (\b -> 2) (seq a ([]::[] ([] Bool)))))) (\a -> ([]::[] Bool))
id (\a -> a)
\a -> id (undefined::(([] (Int -> ([] Int) -> [] (Int -> Bool))) -> Int -> ([] Int) -> [] (Int -> Bool)) -> [] Int) (id (\b -> \c -> seq a (\d -> id (\e -> (undefined::[] (Int -> Bool))) (map (undefined::(Bool -> Bool) -> Bool -> Bool) ([]::[] (Bool -> Bool))))))
tail
(!!) (id (undefined::[] (([] (Bool -> Bool)) -> ([] Int) -> [] Int))) ((\a -> seq a 1) (\a -> \b -> seq b (seq a False))) ((undefined::(([] Int) -> [] (Int -> [] Int)) -> [] (Bool -> Bool)) (\a -> (++) (seq a ([]::[] (Int -> [] Int))) (seq a (seq a (undefined::[] (Int -> [] Int))))))
(\a -> seq a (\b -> (++) (seq b (seq a ([]::[] Int)))) (undefined::([] Int) -> ([] Bool) -> Bool -> Bool)) (\a -> \b -> not (undefined::Bool))
\a -> id (\b -> map (seq a (\c -> (undefined::Bool -> Int) (seq a b))) ([]::[] Bool)) (seq a (undefined::Bool))
head (undefined::[] ((([] ([] Bool)) -> [] ([] (Bool -> Bool))) -> ([] Int) -> [] Int)) ((\a -> map (seq a (\b -> ([]::[] (Bool -> Bool))))) (id (\a -> seq a 1) (id False)))
\a -> a
case1 ((!!) ([]::[] (Int -> ([] Int) -> ([] Int) -> [] Int)) 0) (case1 (\a -> \b -> seq a tail) (\a -> seq a a) (undefined::[] Bool)) ((!!) (tail (tail ([]::[] ([] Int)))) 0)
\a -> seq a ((enumFromTo::Int -> Int -> [Int]) ((+1) ((\b -> head (undefined::[] (Bool -> Int)) (seq a (seq b (undefined::Bool)))) (\b -> b))) (head (id (undefined::([] ([] (Int -> Bool))) -> [] Int) (take (head a) (seq a (seq a ([]::[] ([] (Int -> Bool)))))))))
case1 (\a -> \b -> b) (map (\a -> id (undefined::Int -> Int) (undefined::Int)) ((++) ([]::[] (Bool -> ([] Int) -> [] (Int -> Bool))) (undefined::[] (Bool -> ([] Int) -> [] (Int -> Bool)))))
tail
\a -> seq a (map (\b -> id (id (\c -> seq a (seq c 0))) (\c -> seq b (\d -> seq d ([]::[] Bool)) ([]::[] ([] (Bool -> Bool))))) (id (seq a (seq a ([]::[] ((([] Int) -> [] (Int -> Int)) -> Bool))))))
id
(\a -> (\b -> (\c -> \d -> seq c (seq c (undefined::[] Int))) b) (seq a (\b -> seq b False) (\b -> \c -> seq c (undefined::Bool)))) ((undefined::([] ([] (Int -> Bool))) -> ([] ([] Int)) -> [] ([] ([] Int))) ((\a -> seq a (seq a (undefined::[] ([] (Int -> Bool))))) (\a -> seq a (seq a 2))))
case1 (\a -> id (\b -> seq b (filter (\c -> (\d -> seq d True) False)))) (\a -> ([]::[] Int)) (undefined::[] (([] Bool) -> Bool))
\a -> seq a (head ((undefined::(([] Int) -> Int) -> [] ([] Int)) (\b -> seq b ((\c -> \d -> seq b c) ((+1) (undefined::Int))) ((\c -> c) (seq a (seq b False))))))
(undefined::([] Int) -> [] Int)
\a -> (undefined::(([] (([] ([] ([] Bool))) -> [] ([] ([] Bool)))) -> ([] ([] Int)) -> [] Bool) -> [] Int) (\b -> \c -> (!!) (seq a (seq a (seq c (undefined::[] ([] Bool))))) ((+1) (seq c ((-) (seq c (undefined::Int)) (undefined::Int)))))
\a -> a
\a -> case1 (\b -> seq a (\c -> seq b (id (undefined::([] Bool) -> [] Int))) (seq a (seq a (seq b (seq b ([]::[] (Int -> Int))))))) (seq a (\b -> ([]::[] Int)) (seq a ((++) (undefined::[] (([] Int) -> [] Int)) (undefined::[] (([] Int) -> [] Int))))) ((\b -> seq a (undefined::Int -> [] Bool) (seq b 2)) (seq a (\b -> seq a (seq a False))))
\a -> case1 (\b -> (undefined::([] ([] (Int -> [] Int))) -> [] Int)) (seq a (seq a (\b -> seq a (seq b (undefined::[] Int))) (undefined::[] (([] ([] (Bool -> Bool))) -> Int)))) (seq a (seq a (seq a ((\b -> seq a (seq b ([]::[] ([] (Int -> [] Int))))) (seq a (seq a ([]::[] ([] ([] Int)))))))))
(undefined::([] Int) -> [] Int)
\a -> seq a (head ([]::[] (([] ([] (Int -> Int))) -> [] Int))) (seq a ((\b -> seq b (head ([]::[] (Int -> [] ([] (Int -> Int)))) (head a))) (undefined::Int)))
(!!) (undefined::[] (([] Int) -> [] Int)) ((\a -> seq a (seq a (seq a (undefined::Bool -> Int)) (even (undefined::Int)))) (take (id 2) (undefined::[] Int)))
(\a -> seq a (id (\b -> case1 (:) (seq b (seq a ([]::[] Int)))) (\b -> seq b (\c -> seq c (undefined::Bool)) (seq b (seq a (seq a ([]::[] ([] (Bool -> Bool))))))))) (\a -> seq a (undefined::Int -> Int -> ([] Int) -> [] (Int -> Bool)) (seq a (seq a (seq a (\b -> seq b 2) (seq a (undefined::[] Bool))))))
(undefined::(Int -> Int) -> (([] Int) -> [] ([] Int)) -> ([] Int) -> [] Int) ((undefined::(Int -> Int -> Bool) -> Int -> Int) (\a -> seq a odd)) (undefined::([] Int) -> [] ([] Int))
\a -> (undefined::[] Int)
\a -> a
\a -> seq a a
(++) (undefined::[] Int)
(\a -> head (seq a (seq a (seq a (head ([]::[] (Bool -> [] (([] Int) -> [] Int)))) (seq a (seq a (seq a id) (seq a False))))))) ((undefined::Bool -> ([] ([] (([] Int) -> [] Int))) -> [] (([] Int) -> Bool)) (case1 (\a -> seq a (undefined::([] ([] Bool)) -> Bool)) (undefined::Bool) (undefined::[] ([] Bool))))
(undefined::([] (([] Int) -> [] Int)) -> ([] Int) -> [] Int) (map (\a -> seq a (map (\b -> seq a (seq b b)))) (map (\a -> seq a (undefined::Int -> Bool -> Bool)) ([]::[] ([] Int))))
(undefined::(([] ([] Int)) -> [] ([] (Int -> Int))) -> ([] Int) -> [] Int) (id (undefined::([] ([] Int)) -> [] ([] (Int -> Int))))
\a -> ([]::[] Int)
(\a -> (!!) (undefined::[] ((Int -> Bool) -> ([] Int) -> [] Int)) (seq a (seq a 2))) (head (undefined::[] (Bool -> Bool)) (not False)) (\a -> (\b -> id (\c -> seq b (undefined::Bool)) (undefined::([] Int) -> Int)) (seq a (\b -> \c -> map (seq a (undefined::Int -> Bool)) (seq c ([]::[] Int)))))
\a -> id (\b -> (enumFromTo'::Int -> Int -> [Int]) (undefined::Int)) (head (seq a (id (seq a (undefined::[] (([] Int) -> ([] Int) -> [] ([] Int))))))) ((undefined::Int -> Int) (seq a ((undefined::([] Int) -> Int) a)))
(\a -> (\b -> seq b (\c -> seq b (seq a tail)) (\c -> b)) (seq a (\b -> seq a (seq b True)) (seq a (undefined::[] ([] Int))))) ((undefined::Int -> ([] Bool) -> [] Bool) ((undefined::Bool -> Int) True))
filter ((\a -> seq a ((\b -> seq b (\c -> seq b (seq a (undefined::(Int -> Bool) -> Bool)) (\d -> seq c False))) (seq a (\b -> \c -> ([]::[] (([] Int) -> Bool)))))) ((\a -> seq a (seq a (\b -> (undefined::([] ([] Int)) -> [] ([] Bool)))) (seq a ((+1) (undefined::Int)))) ((\a -> seq a (\b -> seq a (undefined::Bool -> Bool))) (head ([]::[] Int)))))
\a -> a
\a -> seq a (seq a (seq a (undefined::Bool -> (([] ([] Int)) -> [] ([] ([] Int))) -> [] Int) (case1 (undefined::Int -> ([] Int) -> Bool) (seq a (undefined::Bool)) (seq a a)) ((\b -> \c -> map (\d -> seq d c) (b a)) (id (seq a (undefined::Bool -> ([] Int) -> [] Bool)) True))))
(undefined::([] Int) -> [] Int)
id (undefined::([] (([] (([] Int) -> Bool -> Bool)) -> [] (([] Int) -> Bool -> Bool))) -> ([] Int) -> [] Int) (head (head (tail ([]::[] ([] ([] (([] (([] Int) -> Bool -> Bool)) -> [] (([] Int) -> Bool -> Bool))))))))
head (undefined::[] ((([] Int) -> ([] (Int -> [] Bool)) -> Int -> Int -> [] Bool) -> ([] Int) -> [] Int)) (undefined::([] Int) -> ([] (Int -> [] Bool)) -> Int -> Int -> [] Bool)
(++) (map (\a -> (undefined::(([] ([] ([] Int))) -> [] ([] ([] Int))) -> Int) (\b -> seq b (\c -> seq a b) ([]::[] ([] (Int -> Bool))))) ((:) (((==)::Bool -> Bool -> Bool) (undefined::Bool) (undefined::Bool)) ((\a -> seq a (seq a ([]::[] Bool))) even)))
take 1
(undefined::([] Int) -> [] Int)
(\a -> \b -> seq a (seq a (\c -> seq c (undefined::Int -> [] Int)) (seq b (seq a (seq a False)))) (id (seq b (head b)))) (\a -> seq a (seq a (undefined::[] (Int -> [] Int))))
(undefined::([] Int) -> [] Int)
(undefined::(Bool -> Bool) -> (([] Int) -> Int) -> ([] Int) -> [] Int) ((undefined::(Int -> Int) -> Bool -> Bool) (\a -> seq a a)) (\a -> seq a (seq a (seq a (seq a (undefined::Int -> (([] Int) -> [] Int) -> Int)) (seq a ((+1) (undefined::Int))) (undefined::([] Int) -> [] Int))))
map ((\a -> \b -> id (seq a (seq a (+)) a)) ((-) 2 ((+1) 1)) id)
\a -> seq a (seq a a)
(undefined::Int -> ([] Int) -> [] Int) (id ((undefined::Int -> (([] ([] Int)) -> [] Bool) -> Int) (id 0)) ((undefined::(Int -> Int) -> ([] ([] Int)) -> [] Bool) (\a -> seq a (seq a a))))
\a -> (undefined::[] Int)
(\a -> \b -> seq b ((undefined::([] ([] (Int -> Int))) -> [] Int) (map (head ([]::[] (Int -> [] (Int -> Int)))) (seq a (seq b ([]::[] Int)))))) (\a -> (\b -> seq b (\c -> seq b (seq a (undefined::[] Int))) (seq a (seq b (undefined::[] Bool)))) (\b -> seq a (seq b (\c -> b) (seq a (\c -> b)))))
head ((\a -> id ((undefined::Bool -> Bool -> [] (([] Int) -> [] Int)) (seq a (seq a False))) (seq a (seq a (seq a ((\b -> seq b True) (\b -> seq b (undefined::[] Bool))))))) ((\a -> filter (\b -> (undefined::Bool)) (seq a (seq a ([]::[] ([] Int))))) (\a -> case1 (undefined::Bool -> ([] Bool) -> Bool -> Bool) (\b -> b) (seq a ([]::[] Bool)))))
id ((\a -> \b -> a ((undefined::([] Bool) -> Int -> Bool -> Bool) (seq b (seq a (seq b (undefined::[] Bool))))) (undefined::Int)) ((!!) (undefined::[] ((Int -> Bool -> Bool) -> Int -> [] Int)) ((\a -> seq a (seq a (undefined::Int))) ([]::[] Int))))
\a -> a
(undefined::(([] (([] Int) -> [] ([] Bool))) -> (([] Bool) -> [] Bool) -> ([] Bool) -> [] Bool) -> ([] Int) -> [] Int) (undefined::([] (([] Int) -> [] ([] Bool))) -> (([] Bool) -> [] Bool) -> ([] Bool) -> [] Bool)
(undefined::([] Int) -> [] Int)
(!!) ((\a -> seq a (seq a (undefined::[] (Bool -> ([] Int) -> [] Int)))) (head (undefined::[] Int))) ((+) (id (undefined::Int)) 0) (undefined::Bool)
(!!) ([]::[] ((([] Int) -> Int -> Int) -> ([] Int) -> [] Int)) (case1 (undefined::Bool -> ([] Bool) -> Int) 0 ([]::[] Bool)) (!!)
id
\a -> a
case1 (\a -> id (head (seq a (undefined::[] (([] ([] (([] Int) -> Bool))) -> ([] Int) -> [] Int))))) (\a -> seq a (seq a (undefined::(([] Bool) -> [] ([] Bool)) -> [] Int)) ((\b -> seq b (undefined::([] Bool) -> [] ([] Bool))) (undefined::[] Bool))) ([]::[] ([] (([] Int) -> Bool)))
\a -> id (seq a (undefined::Int -> Bool -> [] Int) (case1 (\b -> (undefined::([] Bool) -> Int)) (seq a 2) (undefined::[] Bool)) (seq a (seq a (\b -> seq a (\c -> seq c (undefined::Bool)) b) ((!!) a (seq a (seq a 0))))))
(undefined::Int -> (Int -> Int -> [] Int) -> ([] Int) -> [] Int) ((undefined::(([] ([] Int)) -> Bool) -> Int) (\a -> seq a (head ([]::[] Bool)))) (\a -> seq a (seq a (\b -> (\c -> seq c (\d -> seq b ([]::[] Int))) True (seq a ((&&) (seq a False) (seq a True))))))
(undefined::([] Int) -> [] Int)
(!!) ((undefined::Bool -> Bool -> [] (([] Int) -> [] Int)) (undefined::Bool) ((\a -> seq a (id False)) (\a -> head (seq a ([]::[] ([] Int)))))) (undefined::Int)
\a -> seq a (seq a a)
(\a -> seq a (\b -> (!!) (seq a (undefined::[] (([] Int) -> [] Int))) a)) (id (case1 (undefined::Bool -> ([] Bool) -> Int) (undefined::Int) ([]::[] Bool))) (\a -> id (seq a (\b -> seq a (undefined::Bool -> [] (Int -> Int)) (seq a False))) (\b -> (\c -> \d -> seq c (seq c id)) (((==)::[Int] -> [Int] -> Bool) (undefined::[] Int) (undefined::[] Int))))
\a -> seq a (undefined::(([] ([] ([] (([] Int) -> [] Int)))) -> [] ([] (([] Int) -> [] Int))) -> [] Int) (\b -> seq b (seq a (\c -> seq a (undefined::Int -> [] ([] (([] Int) -> [] Int))) (seq c (undefined::Int)))) ((\c -> seq b (seq c (undefined::([] ([] Int)) -> [] Int))) a))
\a -> seq a (seq a (seq a a))
(:) ((undefined::Int -> (([] Bool) -> [] (Bool -> Bool)) -> Int) (id (undefined::Bool -> Int) (((==)::[Int] -> [Int] -> Bool) (undefined::[] Int) ([]::[] Int))) (undefined::([] Bool) -> [] (Bool -> Bool)))
\a -> seq a (seq a (\b -> map (seq b (\c -> seq b (\d -> 1) ([]::[] ([] Int)))) (map (undefined::(Int -> Int) -> [] (Bool -> Bool)) (seq b ([]::[] (Int -> Int))))) (\b -> ([]::[] Int)))
\a -> seq a (seq a (id (seq a (\b -> seq a (seq a (\c -> (enumFromTo'::Int -> Int -> [Int]) (undefined::Int) (undefined::Int))) (seq b (\c -> (\d -> seq d (enumFromTo::Int -> Int -> [Int])) (seq c (seq b (undefined::Int))))))) (\b -> seq a (seq a (\c -> \d -> seq a c) (even b) ((\c -> seq c c) (undefined::Int))))))
(++) (undefined::[] Int)
(\a -> (\b -> \c -> seq b (seq c (seq a (undefined::([] Bool) -> [] Int))) (seq b (seq b (seq c ([]::[] Bool))))) (undefined::Int)) ((\a -> seq a (case1 (seq a (undefined::Int -> ([] Int) -> Bool)) (seq a True) (seq a (undefined::[] Int)))) (map (\a -> seq a (seq a tail)) (undefined::[] Int)))
\a -> seq a (seq a (seq a ((\b -> seq b (undefined::(Bool -> Int) -> [] Int)) (\b -> (undefined::([] Bool) -> [] ([] Bool)) (seq a ([]::[] Bool)))))) (seq a (\b -> (!!) (seq b a) ((undefined::([] (Int -> Int -> Int)) -> Int) (seq b (seq a (seq b ([]::[] (Int -> Int -> Int))))))))
\a -> ([]::[] Int)
(\a -> head ([]::[] ((([] ([] Bool)) -> Bool) -> ([] Int) -> [] Int)) (seq a (seq a (seq a (undefined::([] Int) -> ([] ([] Bool)) -> Bool))) (seq a (seq a (seq a ([]::[] Int)))))) ((undefined::(Bool -> [] ([] Int)) -> Bool) ((\a -> seq a (seq a (seq a (undefined::Bool -> [] ([] Int))))) ((:) (undefined::Bool) (undefined::[] Bool))))
take ((+1) ((\a -> id (seq a (undefined::([] Bool) -> Bool -> Int)) (seq a (undefined::[] Bool)) (seq a (seq a ((!!) ([]::[] Bool) (seq a (seq a (undefined::Int))))))) (\a -> (undefined::[] Bool))))
case1 (\a -> seq a (\b -> \c -> seq b (\d -> seq c d)) (undefined::[] Bool)) ((\a -> seq a (\b -> b)) (\a -> seq a (seq a (seq a (seq a (undefined::Bool)))))) (undefined::[] Bool)
(\a -> \b -> seq b (seq a b)) (undefined::([] Int) -> ([] (([] ([] Int)) -> [] ([] (Int -> Int)))) -> Int)
(\a -> (undefined::Int -> (Bool -> Bool) -> ([] Int) -> [] Int) (seq a ((+1) (undefined::Int))) (\b -> (undefined::Bool))) ((-) 2 ((-) ((+1) (undefined::Int)) 2))
\a -> seq a (\b -> seq a a) (\b -> map (\c -> \d -> \e -> (\f -> seq f ([]::[] (Bool -> Bool))) (seq b id)) a)
(undefined::(([] ([] (([] Bool) -> [] Bool))) -> [] (([] Int) -> [] (([] Bool) -> [] Bool))) -> ([] Int) -> [] Int) (undefined::([] ([] (([] Bool) -> [] Bool))) -> [] (([] Int) -> [] (([] Bool) -> [] Bool)))
(\a -> id (\b -> seq a (\c -> c))) ((!!) (undefined::[] (([] Int) -> [] (Bool -> Bool))) 0 ((enumFromTo'::Int -> Int -> [Int]) 1 (undefined::Int))) (case1 ((undefined::Bool -> Int -> ([] Int) -> Int) (not (undefined::Bool))) ((undefined::Bool -> Int) False) ((undefined::Int -> [] Int) (id 1)))
(undefined::(([] (([] (([] Int) -> Bool -> Bool)) -> Int -> Int)) -> Bool) -> ([] Int) -> [] Int) (\a -> seq a (id (case1 (undefined::Bool -> ([] Bool) -> Int -> Bool) odd ([]::[] Bool)) (seq a (seq a ((undefined::Bool -> Int) (seq a (seq a (undefined::Bool))))))))
id (undefined::(([] ([] ([] (([] Int) -> Bool)))) -> [] ([] ([] (([] Int) -> Bool)))) -> ([] Int) -> [] Int) (head (undefined::[] (([] ([] ([] (([] Int) -> Bool)))) -> [] ([] ([] (([] Int) -> Bool))))))
(\a -> \b -> case1 (seq b (\c -> map (undefined::Int -> Int))) (seq a (undefined::Int -> [] Int) (seq b (undefined::Int))) b) (\a -> \b -> seq a (seq b (\c -> seq b (seq a (undefined::([] Bool) -> [] (Int -> Int))) (undefined::[] Bool))) (not (seq b (seq a (seq a (seq a (seq a (undefined::Bool))))))))
\a -> (++) a (seq a (undefined::(([] ([] (([] Int) -> [] ([] Int)))) -> [] Int) -> [] Int) (\b -> a))
(\a -> seq a (\b -> map (undefined::((([] Int) -> [] (Bool -> Bool)) -> Int -> Bool) -> Int) (seq b (undefined::[] ((([] Int) -> [] (Bool -> Bool)) -> Int -> Bool))))) ((undefined::Bool -> ([] ([] (Bool -> Bool))) -> [] (([] Int) -> Bool)) (not (case1 (undefined::Bool -> ([] Bool) -> Bool) True (undefined::[] Bool))))
(\a -> \b -> seq b (head (seq a ([]::[] ((([] Int) -> Int -> [] Int) -> [] Int)))) (seq a (seq a (\c -> seq a (undefined::([] ([] ([] Bool))) -> Int -> [] Int) (seq b (seq a ([]::[] ([] ([] Bool))))))))) ((!!) ((\a -> seq a ([]::[] (([] Int) -> [] ([] Bool)))) ([]::[] Int)) ((\a -> seq a (a (undefined::Int) 2)) (head (undefined::[] (Int -> Int -> Int)))))
(undefined::Bool -> ([] Int) -> [] Int) (((==)::[Int] -> [Int] -> Bool) (tail ((:) (undefined::Int) (undefined::[] Int))) (take 0 (undefined::[] Int)))
id
\a -> seq a (seq a a)
\a -> seq a (map (seq a (id (seq a (\b -> seq b (undefined::(Int -> Int -> [] Int) -> Int)))) (seq a (seq a (\b -> 0)) (seq a (seq a (undefined::Int))))) (seq a ((\b -> (++) ([]::[] (Int -> Int -> [] Int)) (seq b ([]::[] (Int -> Int -> [] Int)))) (head ([]::[] (([] Int) -> [] (Int -> [] Bool))) a))))
(\a -> seq a (\b -> (\c -> seq c (\d -> b)) (seq a (seq a (undefined::Bool))) (seq a (\c -> id (seq c (seq b (seq c head))))))) ((-) (id (\a -> 2) True) ((\a -> a) (undefined::Int)))
take ((\a -> id (\b -> seq b (seq a (undefined::Int)))) ((\a -> odd (seq a 0)) (undefined::[] ([] Int))) (id (odd (head (undefined::[] Int)))))
(undefined::(Bool -> Bool -> Bool) -> ([] Int) -> [] Int) (id (undefined::(Int -> Int -> Int) -> Bool -> Bool -> Bool) ((\a -> seq a (\b -> seq a (+1))) (not True)))
(undefined::([] Int) -> [] Int)
(\a -> (\b -> \c -> seq b (seq c tail)) (\b -> False) (seq a (undefined::Int))) ((\a -> seq a (seq a (\b -> b)) (seq a (seq a True))) ([]::[] (Int -> Bool)))
\a -> id (seq a (seq a (seq a (\b -> head (undefined::[] (([] Bool) -> Int -> [] Int)) (seq a (seq b ([]::[] Bool))) (seq b (seq a (\c -> c) (seq b (seq b (undefined::Int)))))))) (\b -> seq a ((\c -> seq c a) (head ((++) (seq b (undefined::[] Bool)) (undefined::[] Bool))))))
\a -> (++) (seq a a) ([]::[] Int)
(:) (case1 ((undefined::Int -> Int -> ([] Int) -> Int) ((undefined::([] ([] Bool)) -> Int) (head ([]::[] ([] ([] Bool)))))) ((+1) ((\a -> seq a (seq a (seq a (undefined::Int)))) (take 1 ([]::[] ([] ([] (Bool -> Bool))))))) ((\a -> (\b -> seq a b) ([]::[] Int)) (\a -> filter (undefined::(Int -> Int -> Int) -> Bool) ([]::[] (Int -> Int -> Int)))))
filter ((\a -> seq a (undefined::Bool -> Bool -> Int -> Bool) (seq a (seq a (seq a (undefined::Bool))))) ((\a -> seq a (seq a (seq a 2))) (((==)::[Int] -> [Int] -> Bool) (undefined::[] Int) (undefined::[] Int))) ((undefined::(Int -> [] Bool) -> Bool) (case1 (\a -> (undefined::([] Int) -> Int -> [] Bool)) (undefined::Int -> [] Bool) (undefined::[] Int))))
\a -> seq a (seq a a)
(\a -> case1 (\b -> seq a (\c -> seq b (seq a (undefined::([] Int) -> [] Int)))) (undefined::([] Int) -> [] Int) (seq a (seq a ([]::[] Int)))) (\a -> a)
case1 (\a -> seq a (\b -> (++) (seq b (seq b (\c -> ([]::[] Int))) (head (seq a (undefined::[] ([] Bool))))))) (\a -> a) ((undefined::Int -> [] (([] Int) -> Bool)) ((\a -> a) ((+1) (undefined::Int))))
\a -> a
(\a -> seq a (seq a (seq a (id (undefined::(([] Int) -> [] Int) -> ([] Int) -> [] Int))) (\b -> seq b (\c -> b) (seq b (even (undefined::Int)))))) (\a -> seq a (\b -> a) (\b -> seq b (seq b (\c -> (undefined::([] Int) -> [] ([] Int))) (seq a (seq b (seq a (undefined::Int)))))))
\a -> case1 ((\b -> seq b (\c -> head (undefined::[] (([] Int) -> [] Int)))) (seq a (seq a (seq a (undefined::[] ([] Bool)))))) (id (map (\b -> seq b 2) (take 0 a))) (seq a a)
(\a -> \b -> head (seq a (seq b (seq a ([]::[] ((([] ([] Int)) -> [] Bool) -> [] Int))))) ((\c -> seq c (\d -> seq b (undefined::[] Bool))) (seq b (id (undefined::Int))))) (undefined::([] ([] ([] Int))) -> [] ([] Bool))
case1 (\a -> id (\b -> \c -> seq b id)) (\a -> (undefined::([] Int) -> [] Int)) ((undefined::([] ([] (Bool -> Bool))) -> [] Bool) (undefined::[] ([] (Bool -> Bool)))) ((\a -> ((==)::[Int] -> [Int] -> Bool) (undefined::[] Int) (seq a ([]::[] Int))) ((!!) (undefined::[] ((Int -> Bool) -> Int)) 2 (\a -> (undefined::Bool))))
\a -> map (\b -> seq b (seq b (seq b ((!!) (undefined::[] ((([] Int) -> [] ([] Bool)) -> Int)) (seq b 1) ((undefined::(Int -> Int) -> ([] Int) -> [] ([] Bool)) (seq b id)))))) (seq a (take (id (undefined::([] Int) -> Int) a) ([]::[] Bool)))
take ((!!) (undefined::[] Int) ((\a -> seq a (\b -> a) (seq a (seq a (seq a (undefined::[] (([] Int) -> [] Bool)))))) ((-) 0 (id 0))))
(\a -> seq a (seq a ((\b -> seq a (id (undefined::Int -> ([] Int) -> [] Int) (seq b (seq b 1)))) (\b -> (\c -> seq c (seq a (-))) a)))) ((!!) ((\a -> seq a ([]::[] Bool)) (\a -> odd (undefined::Int))) (head (undefined::[] (Bool -> Int)) (odd 2)))
\a -> (undefined::[] Int)
(\a -> seq a (seq a (\b -> seq a (\c -> id)) (seq a (even a)) a)) ((undefined::(Int -> Int -> [] Int) -> Bool -> Int) (enumFromTo::Int -> Int -> [Int]) ((\a -> a) (((==)::Int -> Int -> Bool) (undefined::Int) 2)))
(undefined::(([] ([] ([] ([] Bool)))) -> [] ([] ([] ([] Bool)))) -> ([] Int) -> [] Int) (\a -> (!!) ((\b -> seq a (seq b ([]::[] ([] ([] ([] ([] Bool))))))) (id ([]::[] (Int -> Bool)))) ((undefined::([] Bool) -> Int) (seq a (seq a (seq a (undefined::[] Bool))))))
id (\a -> seq a (\b -> b)) (\a -> seq a ((undefined::(([] Int) -> ([] Int) -> Bool) -> ([] Int) -> [] ([] Int)) (\b -> \c -> seq c (id (undefined::([] ([] ([] Int))) -> Bool)) (seq c (seq a (undefined::[] ([] ([] Int))))))))
\a -> seq a ((!!) (seq a (seq a (seq a (seq a ([]::[] (([] (([] Int) -> [] Int)) -> [] Int)))))) (seq a (undefined::Int)) ((undefined::([] Bool) -> Int -> [] (([] Int) -> [] Int)) (seq a (seq a (seq a ([]::[] Bool)))) ((\b -> seq b (undefined::Int)) (seq a (undefined::Bool)))))
\a -> case1 (\b -> (undefined::([] (Int -> [] Bool)) -> [] Int)) (map (seq a (\b -> seq a (seq a 2))) (seq a (head ([]::[] ([] ([] ([] (Int -> Int)))))))) (seq a (seq a (seq a (seq a (seq a ((\b -> seq b (undefined::[] (Int -> [] Bool))) (seq a (seq a 0))))))))
\a -> seq a (seq a (seq a (seq a (\b -> a)))) (seq a (\b -> seq b (\c -> id (undefined::Int -> [] Bool) (undefined::Int))) (\b -> seq b (seq b (case1 (undefined::Int -> ([] Int) -> Bool) (undefined::Bool) a))))
id
head (tail ([]::[] (([] Int) -> [] Int)))
\a -> a
\a -> seq a (\b -> ([]::[] Int)) (\b -> seq b (seq b (filter (seq b ((\c -> (\d -> seq d (undefined::([] (([] Int) -> Bool)) -> Bool)) (seq a (seq c (undefined::Int)))) (((==)::[Int] -> [Int] -> Bool) (seq a a) (undefined::[] Int)))))))
\a -> ([]::[] Int)
\a -> (undefined::[] Int)
(undefined::Bool -> ([] Int) -> [] Int) ((\a -> seq a (seq a (seq a head))) (undefined::[] ([] Int)) ((\a -> seq a (undefined::[] Bool)) (undefined::Int)))
\a -> a
\a -> filter even (seq a (head ((\b -> \c -> seq b (undefined::[] ([] Int))) (seq a (seq a False)) (head (undefined::[] (Bool -> ([] Int) -> Int)) (even (undefined::Int))))))
(\a -> seq a (\b -> seq b b)) ((\a -> \b -> head (seq b ([]::[] (Bool -> [] (Bool -> Bool)))) (seq a a)) ((\a -> seq a (seq a (seq a (undefined::Bool)))) (undefined::[] ([] (([] Int) -> [] Bool)))))
take (undefined::Int)
(undefined::(Int -> Int -> [] Int) -> ([] Int) -> [] Int) (\a -> \b -> ([]::[] Int))
id (\a -> \b -> take (undefined::Int)) (id (\a -> \b -> (undefined::[] ([] Int))) (filter (undefined::Int -> Bool) ([]::[] Int))) ((undefined::(Bool -> Bool -> Bool) -> Bool) ((undefined::Bool -> Bool -> Bool -> Bool) (undefined::Bool)))
\a -> a
(\a -> seq a (seq a (undefined::([] Int) -> [] Int))) ((\a -> seq a (undefined::[] (([] (([] Int) -> [] (([] Int) -> Bool))) -> Int -> Bool))) ((\a -> a) 0))
\a -> a
\a -> a
\a -> (\b -> seq b (seq a ((enumFromTo::Int -> Int -> [Int]) (seq a (seq b 0)))) (seq a (head (undefined::[] ((Bool -> Bool) -> Int)) ((||) True)))) (\b -> head ([]::[] (([] (([] ([] Bool)) -> [] Bool)) -> Int -> ([] Int) -> Bool -> Bool)))
\a -> seq a (tail ((\b -> seq b (head ([]::[] (Int -> ([] ([] Int)) -> [] Int)) (seq a (seq a (seq b (undefined::Int)))) ((\c -> seq b (seq c ([]::[] ([] Int)))) (\c -> head (undefined::[] ([] (Bool -> Bool))))))) (\b -> seq a (seq a (seq b (undefined::(([] Int) -> Int -> Int) -> [] ([] (Int -> Bool))) ((undefined::Bool -> ([] Int) -> Int -> Int) (seq a True)))))))
\a -> seq a (\b -> a) (seq a (seq a (seq a ((\b -> seq b b) (seq a (head (undefined::[] (([] Bool) -> Int)) (seq a (seq a ([]::[] Bool)))))))))
(\a -> seq a ((\b -> \c -> \d -> seq c (seq b d)) ((!!) (seq a (undefined::[] Bool))) (seq a ((!!) (seq a (seq a (undefined::[] Bool))) (undefined::Int))))) ((\a -> \b -> a) 1)
\a -> seq a ((undefined::(Int -> ([] ([] (([] Int) -> [] ([] Int)))) -> [] (Int -> Int)) -> [] Int) (seq a ((!!) (head (seq a ([]::[] ([] (([] ([] (([] Int) -> [] ([] Int)))) -> [] (Int -> Int)))))))))
map ((\a -> (\b -> \c -> seq c (seq b (\d -> (undefined::Int))) True) (id (\b -> seq b (\c -> seq a (seq a (seq a 2)))))) (\a -> (\b -> (\c -> seq b (seq c (undefined::Int -> ([] Int) -> Int -> Bool))) a) ((undefined::(Int -> Bool) -> [] (Int -> Bool -> Bool)) (seq a (seq a (seq a even))))))
\a -> (undefined::[] Int)
(\a -> filter (\b -> seq a (id (seq b (undefined::(Int -> Int -> Bool) -> Bool))) (head (seq b ([]::[] (Bool -> Int -> Int -> Bool))) False))) (\a -> seq a (\b -> (\c -> seq c (undefined::Int -> Int -> Bool)) b) ((\b -> seq b (seq b (seq b 1))) (\b -> b)))
tail
\a -> seq a ([]::[] Int)
case1 (\a -> id (seq a (\b -> (undefined::([] (Bool -> Bool)) -> ([] Int) -> [] Int) (seq b (seq a (seq a (undefined::[] (Bool -> Bool)))))))) (\a -> map (\b -> 1) (seq a (seq a (seq a (undefined::[] ([] ([] Bool))))))) (undefined::[] ([] (([] Int) -> Bool)))
(\a -> (!!) (seq a (seq a ([]::[] (Bool -> ([] Int) -> [] Int)))) (seq a (seq a 1)) ((\b -> b (seq b True)) (\b -> b))) (map (\a -> map (undefined::Int -> Int -> Int) (seq a (seq a (seq a ([]::[] Int))))) ((\a -> seq a (seq a ([]::[] (([] Int) -> Int -> Bool)))) (\a -> 2)))
(\a -> \b -> seq b (take ((\c -> seq b c) (seq a a)))) ((-) ((+1) 0) ((+1) (undefined::Int))) ((\a -> seq a (\b -> \c -> seq c ([]::[] ([] (Int -> Bool)))) ([]::[] Int)) (\a -> head (seq a (undefined::[] (Bool -> Bool))) (seq a (seq a (undefined::Bool)))))
\a -> a
(!!) (undefined::[] (([] Int) -> [] Int)) (undefined::Int)
(\a -> (!!) (tail (undefined::[] (Bool -> ([] Int) -> [] Int))) (seq a (undefined::Int))) ((undefined::Bool -> ([] Int) -> Int -> Int -> Int) (undefined::Bool)) ((\a -> seq a (seq a (seq a (undefined::Int -> Bool)))) (undefined::Bool) (id ((undefined::(([] Int) -> Int) -> Int) (\a -> 1))))
(\a -> head ([]::[] ((([] ([] Bool)) -> [] Bool) -> ([] Int) -> [] Int)) ((undefined::Bool -> ([] ([] Bool)) -> [] Bool) (((==)::Int -> Int -> Bool) a 1))) ((\a -> \b -> seq a (seq b a)) ((+) 2 1) (\a -> a))
\a -> head (seq a (seq a (seq a (seq a (seq a (seq a (id (seq a ([]::[] ((Int -> ([] (Int -> Bool)) -> Int -> Bool) -> [] Int)))))))))) (\b -> \c -> seq c (\d -> seq b (undefined::Bool)))
(undefined::([] Int) -> [] Int)
\a -> (!!) (undefined::[] ([] Int)) (id ((!!) (undefined::[] (([] ([] Bool)) -> Int)) (id 0)) ((\b -> seq b (head ([]::[] ([] ([] Bool))))) (seq a (seq a (seq a False)))))
\a -> a
case1 (\a -> seq a (\b -> seq b (seq b (seq a (seq b (\c -> seq c (seq b ([]::[] Int)))))) ((!!) (seq b (seq a (undefined::[] Bool))) a))) ([]::[] Int)
\a -> seq a a
(\a -> seq a (undefined::(([] Int) -> Int -> Bool) -> ([] Int) -> [] Int)) ((\a -> seq a True) 2) (\a -> (\b -> \c -> (\d -> d) (seq a (b a (undefined::[] ([] (([] Int) -> [] Int)))))) (seq a (\b -> head (seq b (seq a ([]::[] (([] ([] (([] Int) -> [] Int))) -> Bool)))))))
\a -> seq a a
id ((\a -> seq a (\b -> case1 take ([]::[] Int))) (case1 (\a -> (undefined::([] ([] Bool)) -> Bool)) (undefined::Bool) (undefined::[] ([] Bool)))) (\a -> \b -> seq b (id (seq b (\c -> a))) (undefined::(([] ([] Int)) -> [] Int) -> [] Bool))
tail
(\a -> seq a (undefined::([] Int) -> [] Int)) (undefined::([] ([] Int)) -> [] ([] ([] Int)))
case1 (\a -> \b -> (undefined::(Bool -> Bool -> Bool) -> ([] Int) -> [] Int) (\c -> id)) (\a -> a) ((undefined::(Int -> ([] Int) -> Bool) -> [] Bool) (\a -> seq a (\b -> (undefined::([] Int) -> Bool)) (seq a (seq a 1))))
\a -> seq a (seq a (\b -> (undefined::(Bool -> ([] Int) -> Int -> Int) -> [] Int)) ((\b -> b) (((==)::Int -> Int -> Bool) 1 (undefined::Int)))) (seq a (seq a (seq a (seq a (\b -> seq a (\c -> id (undefined::([] Int) -> Int -> Int))))) ((undefined::(([] ([] (Bool -> Bool))) -> [] Int) -> Int) (\b -> head ([]::[] ([] Int))))))
(\a -> (\b -> (!!) ([]::[] (([] Int) -> [] Int)) b) (seq a (seq a (seq a (undefined::(([] Int) -> [] ([] Int)) -> Int))) (\b -> ([]::[] ([] Int))))) (((==)::[Int] -> [Int] -> Bool) ((\a -> seq a (seq a (undefined::[] Int))) ((++) ([]::[] ([] Bool)))) ((undefined::(([] Int) -> ([] Int) -> Bool) -> [] Int) (\a -> seq a (seq a (undefined::([] Int) -> Bool)))))
\a -> head (take (undefined::Int) (id (seq a (seq a (seq a (seq a ([]::[] ((([] Int) -> Int) -> [] Int)))))))) (undefined::([] Int) -> Int)
(undefined::([] Int) -> [] Int)
\a -> a
\a -> seq a (undefined::[] Int)
\a -> id (\b -> seq a ((\c -> map (\d -> c) (seq b (undefined::[] (Int -> Int)))) (seq b ((undefined::Bool -> Int) b)))) (seq a ((!!) (undefined::[] Bool) (case1 (\b -> head) (seq a 1) a)))
tail
\a -> (:) ((!!) a (case1 (\b -> (undefined::([] Bool) -> Int)) (undefined::Int) (seq a (undefined::[] Bool)))) (seq a (\b -> seq a (seq b (undefined::Int -> [] Int)) (seq a (seq a (undefined::Int)))) ((!!) (seq a (seq a (undefined::[] Bool))) (seq a (undefined::Int))))
(\a -> \b -> seq a ((\c -> seq c (seq b (seq c (undefined::(([] Int) -> [] Bool) -> [] Int))) (seq a (undefined::([] Int) -> [] Bool))) (id (id (undefined::(Bool -> Bool) -> ([] Int) -> Int -> [] Int))))) (id (\a -> (\b -> (\c -> seq a (seq c ([]::[] (([] Int) -> [] Int)))) (seq b (head (undefined::[] Bool)))) (undefined::Int)))
\a -> id (seq a (seq a (\b -> seq a a))) (\b -> b)
\a -> seq a (id (\b -> case1 (\c -> \d -> a) a a)) (seq a (seq a (seq a ((undefined::(([] Int) -> (Int -> Bool) -> Int -> Bool) -> Int) (undefined::([] Int) -> (Int -> Bool) -> Int -> Bool)))))
id
(undefined::(([] Int) -> [] (Int -> ([] Int) -> [] ([] Int))) -> ([] Int) -> [] Int) (\a -> map (\b -> (undefined::Bool -> Int -> ([] Int) -> [] ([] Int)) (id (undefined::Bool))) (seq a (undefined::([] (Int -> Int)) -> [] ([] ([] ([] Bool)))) (undefined::[] (Int -> Int))))
\a -> seq a a
\a -> (!!) (map (seq a (\b -> a)) ((undefined::Bool -> [] (([] Int) -> [] (([] Int) -> Bool))) (odd (seq a (undefined::Int))))) ((\b -> b) (id (seq a (\b -> seq b (undefined::Int)) (head ([]::[] Bool)))))
(undefined::Bool -> ([] Int) -> [] Int) ((undefined::(([] Int) -> ([] Int) -> [] Int) -> Bool) (\a -> \b -> (undefined::[] Int)))
map ((\a -> seq a (undefined::(([] Int) -> Int) -> Int -> Int) (seq a (seq a (undefined::Int -> ([] Int) -> Int)) (seq a (head ([]::[] Int))))) (undefined::Int -> [] Int))
(\a -> seq a (seq a (seq a (\b -> (!!) ([]::[] (([] Int) -> [] Int)) (seq a (undefined::Int)))) ((\b -> seq b (seq b (seq a 0))) (undefined::Bool)))) (undefined::([] ([] Int)) -> Int)
filter (\a -> (||) (id True) ((\b -> seq b ((undefined::([] Int) -> Bool) (seq b ([]::[] Int)))) (seq a ((undefined::Int -> Int -> ([] Int) -> Int) a))))
(\a -> head (map (\b -> seq b (\c -> tail) (seq b (seq b 2))) ((\b -> seq b (seq b (undefined::[] ([] (Int -> Bool))))) (seq a (seq a (seq a ([]::[] Bool))))))) ((\a -> head (seq a (seq a (seq a (seq a (undefined::[] (([] (Int -> Int)) -> Int -> Int))))))) (id (\a -> seq a (undefined::[] ([] ([] (([] Int) -> Bool))))) (not True)))
id (\a -> head ((\b -> (\c -> seq c (seq a (undefined::[] (([] Int) -> [] Int)))) (seq a b)) ((\b -> a ([]::[] Int) ([]::[] (Int -> [] Bool)) b) (seq a (seq a 2))))) ((\a -> seq a (\b -> \c -> (undefined::Int -> Bool))) (case1 (\a -> \b -> True) True ([]::[] Int)))
id ((\a -> \b -> case1 (undefined::Bool -> ([] Bool) -> [] Int) b (seq a (seq b (seq b ([]::[] Bool))))) ((\a -> \b -> seq b (seq a (undefined::Bool))) ((+1) 1) ((\a -> seq a (seq a (seq a (undefined::[] (Bool -> Bool))))) (\a -> seq a True))))
\a -> (undefined::([] ([] Bool)) -> [] Int) ((\b -> seq b (\c -> seq b (seq a ([]::[] ([] Bool)))) (undefined::Int -> [] Bool)) (seq a (seq a (\b -> seq b (undefined::Int))) (undefined::[] ([] Int))))
case1 (undefined::Int -> ([] Int) -> ([] Int) -> [] Int) ((++) (filter ((!!) (undefined::[] Bool)) (undefined::[] Int))) (undefined::[] Int)
(undefined::Bool -> (([] Int) -> Int -> Int) -> ([] Int) -> [] Int) True (!!)
\a -> (\b -> b a) ((\b -> seq b (head (seq a (seq a (undefined::Int -> [] (([] Int) -> [] Int))) (seq a (seq a 2))))) (seq a (undefined::Int)))
case1 (\a -> \b -> \c -> (undefined::Int -> [] Int) (undefined::Int)) (\a -> a) ((!!) (undefined::[] ([] ([] ([] Int)))) ((\a -> seq a (undefined::Int)) (undefined::Bool)))
(\a -> seq a (seq a (id (\b -> (undefined::Int -> ([] Int) -> [] Int)) (seq a False)) (undefined::Int))) (id (id (\a -> \b -> b)))
\a -> (enumFromTo::Int -> Int -> [Int]) 0 ((undefined::(Int -> Int -> [] Int) -> Bool -> Int) (seq a (seq a (seq a (undefined::Int -> Int -> [] Int)))) (seq a (seq a (\b -> seq a False) (seq a (seq a (\b -> ([]::[] ([] ([] (Int -> Bool))))))))))
\a -> (undefined::[] Int)
id ((\a -> seq a (\b -> id)) (\a -> seq a (take a ([]::[] (Int -> [] Int)))) ((\a -> seq a (\b -> seq a False)) (undefined::Int) (undefined::([] Int) -> Int -> Bool)))
(\a -> seq a (seq a (\b -> \c -> ([]::[] Int))) (seq a (\b -> seq b (seq a (\c -> ([]::[] ([] Bool)))) (\c -> seq c (seq a ([]::[] Int)))))) (undefined::([] Int) -> [] (Int -> Int))
(++) (id (\a -> seq a (\b -> seq b (head ([]::[] ([] Int))))) ((\a -> seq a (seq a (seq a False))) ((+1) 1)) (\a -> ([]::[] ([] Bool))))
(\a -> \b -> seq b (seq b (\c -> (!!) (seq a (undefined::[] ([] Int))) (seq b (undefined::Int)))) (case1 (seq b (\c -> \d -> id)) (\c -> c))) (\a -> (undefined::Int -> Bool -> Bool) (seq a (undefined::Int)))
(:) (undefined::Int)
\a -> a
\a -> seq a (seq a ((!!) (seq a (seq a (seq a (seq a (undefined::[] ((Bool -> Bool) -> [] Int)))))) (seq a (seq a (\b -> 1) (seq a (seq a (undefined::Int -> Bool))))))) (undefined::Bool -> Bool)
\a -> a
\a -> a
(\a -> seq a tail) ((undefined::Bool -> ([] ([] (([] (Int -> Bool)) -> Int -> Bool))) -> [] Int) (id ((\a -> seq a (seq a True)) 1)))
id (\a -> seq a ((\b -> \c -> id (seq b (seq a c))) (seq a (\b -> \c -> \d -> (undefined::[] Bool)) (seq a (id 2))))) (\a -> seq a (case1 (\b -> seq a (undefined::([] Int) -> Bool)) (seq a (undefined::Bool)) (undefined::[] Int)))
id (\a -> \b -> head (undefined::[] ([] Int))) (undefined::(([] ([] ([] Bool))) -> [] (([] ([] Int)) -> [] ([] Int))) -> Int)
(\a -> \b -> seq a (seq b (case1 (seq a (\c -> seq c (seq a (undefined::([] ([] Bool)) -> [] Int)))) (take (undefined::Int) b) ((!!) (undefined::[] ([] ([] Bool))) (undefined::Int))))) (\a -> (undefined::Bool -> Bool))
tail
id ((undefined::Int -> Bool -> ([] Int) -> [] Int) (case1 (\a -> (undefined::([] ([] Int)) -> Int)) (undefined::Int) (undefined::[] ([] Int)))) ((undefined::(([] (Bool -> Bool)) -> Bool -> Bool) -> Bool) (id (undefined::([] (Bool -> Bool)) -> Bool -> Bool)))
\a -> (undefined::[] Int)
id
(undefined::([] Int) -> [] Int)
id ((undefined::(([] Int) -> [] ([] Int)) -> Int -> ([] Int) -> [] Int) (undefined::([] Int) -> [] ([] Int))) ((\a -> seq a (seq a (seq a (seq a (seq a (undefined::Int -> Int)) ((+1) 1))))) (\a -> seq a (seq a (seq a a))))
\a -> tail a
(\a -> \b -> (!!) (seq a (seq a ([]::[] ((Bool -> Bool) -> [] Int)))) (seq a (seq a (undefined::Int))) (\c -> seq c c)) ((\a -> \b -> seq b ((:) (\c -> ([]::[] Int)) (seq a ([]::[] (Int -> [] Int))))) ((!!) (undefined::[] (Bool -> Bool)) 1 False))
\a -> seq a (take (head (seq a (\b -> seq b a) (seq a (\b -> \c -> seq a (undefined::[] ([] ([] Int)))) True))) (seq a ((!!) (undefined::[] ((Int -> Bool) -> [] Int))) (id 1) (undefined::Int -> Bool)))
(\a -> \b -> seq a (seq b (\c -> c))) ((\a -> seq a (head (undefined::[] ([] (Bool -> Bool))))) (\a -> head (seq a ([]::[] ([] ([] Bool)))))) (\a -> seq a (seq a (id (head ([]::[] (Int -> Bool -> Int)) ((+1) (undefined::Int)) (seq a (head ([]::[] ((Int -> [] Bool) -> Bool)) (\b -> seq b ([]::[] Bool))))))))
(++) ((enumFromTo::Int -> Int -> [Int]) ((\a -> (!!) (seq a (seq a (undefined::[] Int))) (seq a (undefined::Int))) (\a -> \b -> seq a (\c -> seq c ([]::[] Bool)) (\c -> seq b (seq a (undefined::Int))))) (undefined::Int))
id
(\a -> head (tail (undefined::[] (([] (Int -> [] Int)) -> ([] Int) -> [] Int))) ((undefined::Bool -> [] (Int -> [] Int)) (seq a (seq a (seq a (undefined::Bool)))))) ((++) (map (\a -> \b -> seq a b) ([]::[] Int)) ((!!) (undefined::[] ([] (([] Bool) -> [] Bool))) (id 1)))
case1 (head ([]::[] (([] ([] Int)) -> ([] ([] ([] Int))) -> ([] Int) -> [] Int))) ((\a -> (:) (a (seq a (undefined::Int)))) (undefined::Int -> Int)) (case1 (undefined::Bool -> ([] Bool) -> [] ([] ([] Int))) (id (undefined::[] ([] ([] Int)))) ([]::[] Bool))
tail
(\a -> \b -> seq b (head (seq a (take 1 ([]::[] ((([] Int) -> Bool) -> [] Int)))) (seq a (\c -> False)))) (\a -> seq a (seq a ((!!) (take (seq a (undefined::Int)) (seq a ([]::[] ([] (([] Int) -> Bool))))) (seq a (seq a (\b -> 2)) (undefined::[] Bool)))))
\a -> a
\a -> (\b -> seq a (\c -> map (\d -> seq c (undefined::Int)) (seq a ([]::[] Bool))) (odd b)) (seq a (seq a (case1 (seq a (undefined::Int -> ([] Int) -> Int -> Int)) (\b -> b) (undefined::[] Int) (seq a (id (+1) 2)))))
(undefined::(Int -> ([] Int) -> [] Int) -> ([] Int) -> [] Int) ((\a -> \b -> seq b (\c -> \d -> (undefined::[] Int)) (seq a (seq b (seq b ([]::[] (Int -> Int)))))) (undefined::Bool))
\a -> seq a (\b -> (undefined::Int -> (Int -> Int -> [] Int) -> [] Int) (seq a (seq a (undefined::Int))) (\c -> \d -> ([]::[] Int))) (\b -> seq a (id (\c -> \d -> seq d (not (undefined::Bool)))) (\c -> c))
(\a -> seq a (seq a (\b -> seq b (seq a (undefined::Bool -> ([] Int) -> [] Int))) (seq a (id 1)) (seq a (head (undefined::[] (Int -> Bool))) (seq a (seq a (seq a 0)))))) (map ((\a -> seq a (\b -> id)) True))
\a -> a
id ((undefined::([] (Int -> Bool)) -> Int -> ([] Int) -> [] Int) ((\a -> seq a ([]::[] (Int -> Bool))) ([]::[] Bool))) ((\a -> seq a (seq a 0)) ((\a -> map (seq a (undefined::Bool -> Bool -> Bool))) ((!!) ([]::[] ([] Int)) (undefined::Int))))
(\a -> \b -> seq a (\c -> map (undefined::Bool -> Int) (seq b (seq b ([]::[] Bool))))) (\a -> seq a (\b -> id (undefined::Int)) (\b -> tail (seq b (undefined::[] ([] ([] Int)))))) False
id (\a -> \b -> tail (seq b (seq b (head (seq a (seq a ([]::[] (Bool -> [] Int)))) (not (seq b (seq b (undefined::Bool)))))))) (filter ((undefined::Int -> ([] Int) -> Bool) ((\a -> seq a (seq a 2)) (\a -> seq a (seq a ([]::[] ([] (Int -> Bool))))))))
\a -> a
tail
\a -> seq a (map (\b -> seq a (\c -> (\d -> seq a (seq d (undefined::Int))) (seq a (undefined::Bool))) (take (seq b (seq a 2)) (seq b ([]::[] ([] (Int -> Bool)))))) (seq a (seq a (seq a (seq a (tail (id (seq a ([]::[] ((([] Int) -> Int -> [] Int) -> ([] Int) -> [] Int))))))))))
\a -> a
(\a -> (\b -> seq b (seq b (\c -> seq b id)) (seq b (seq b (seq b 0)))) (head ([]::[] ((Bool -> Int) -> Int -> [] Bool)) (\b -> seq a (seq b 1)))) (\a -> seq a (id (\b -> head ([]::[] (Int -> [] ([] ([] Bool)))) (undefined::Int))) (\b -> \c -> c))
id (undefined::Bool -> (Int -> Bool -> Bool) -> ([] Int) -> [] Int) ((\a -> seq a (id False)) (\a -> \b -> seq a (seq b (undefined::Int)))) ((!!) ((undefined::Int -> [] (Bool -> Bool)) (id ((+1) 1))))
(undefined::(([] Bool) -> [] (Bool -> Bool)) -> Bool -> ([] Int) -> [] Int) (map (&&)) ((\a -> seq a (case1 (\b -> (undefined::([] Bool) -> Bool)) (seq a False) (seq a (undefined::[] Bool)))) (undefined::Int))
(\a -> seq a (\b -> seq b ((\c -> \d -> seq c (undefined::[] Int)) (b (undefined::Int) (undefined::[] Int))))) (undefined::Bool) (\a -> \b -> seq a (undefined::Bool))
\a -> (\b -> seq b (\c -> head (undefined::[] (([] (Bool -> Bool)) -> [] Int)) ([]::[] (Bool -> Bool)))) (seq a (\b -> seq a (seq b (undefined::Int))) (\b -> map (\c -> c))) (seq a (seq a (\b -> map (seq a (seq b (\c -> \d -> True))))) ((+1) (seq a (undefined::Int))))
\a -> map (head (undefined::[] ((([] ([] (([] Int) -> [] ([] Bool)))) -> [] (([] ([] Int)) -> [] ([] ([] Int)))) -> Int))) (seq a (tail (seq a ([]::[] (([] ([] (([] Int) -> [] ([] Bool)))) -> [] (([] ([] Int)) -> [] ([] ([] Int))))))))
\a -> map (id ((!!) (seq a (seq a (seq a ([]::[] ((([] Bool) -> [] (Bool -> Bool)) -> Int))))) (seq a (undefined::Int)))) (seq a (seq a (seq a (seq a (\b -> seq b (undefined::[] (([] Bool) -> [] (Bool -> Bool)))))) (seq a ((undefined::(([] Int) -> Bool) -> Int) (undefined::([] Int) -> Bool)))))
case1 (\a -> (undefined::([] Bool) -> ([] Int) -> [] Int)) id ((undefined::(([] Bool) -> [] (Int -> Int)) -> [] Bool) ((\a -> seq a (undefined::([] Bool) -> [] (Int -> Int))) (not False)))
(!!) ([]::[] ((([] Int) -> ([] Int) -> [] Int) -> ([] Int) -> [] Int)) ((undefined::([] Int) -> Int) (undefined::[] Int)) (\a -> (\b -> (++) (seq a (take (seq b (undefined::Int)) (seq b a)))) (\b -> seq b (seq a (undefined::Bool -> ([] Int) -> Bool)) (undefined::Bool)))
(undefined::(([] Int) -> Int -> Int -> Int) -> ([] Int) -> [] Int) (\a -> \b -> \c -> (\d -> seq d (seq a c)) (map (seq b (\d -> (undefined::[] Int))) (seq b (seq a ([]::[] ([] Int))))))
(\a -> seq a (\b -> (undefined::([] ([] ([] Bool))) -> ([] Int) -> [] Int) (seq b (seq b ([]::[] ([] ([] Bool))))))) ((+1) ((+1) ((+1) 2))) ([]::[] (Int -> [] Int))
\a -> seq a ((!!) (seq a (\b -> \c -> seq a (undefined::[] ([] Int))) ((:) (undefined::Int) a) (seq a ((\b -> b) False))) (seq a (seq a (seq a ((\b -> (undefined::([] (Int -> Bool)) -> Int) (seq a (seq b ([]::[] (Int -> Bool))))) (\b -> seq b (seq b (undefined::Int -> Int)) (seq a (seq a 2))))))))
(\a -> \b -> seq a (seq b (\c -> seq a ([]::[] Int)))) (filter (undefined::(([] ([] Int)) -> Int -> Bool) -> Bool) ([]::[] (([] ([] Int)) -> Int -> Bool))) ((\a -> ((==)::Int -> Int -> Bool) a (seq a a)) ((undefined::([] (([] Int) -> Bool -> Bool)) -> Int) ((++) (undefined::[] (([] Int) -> Bool -> Bool)) (undefined::[] (([] Int) -> Bool -> Bool)))))
(undefined::Bool -> ([] Int) -> [] Int) ((\a -> seq a ((undefined::(([] (Bool -> Bool -> Bool)) -> Int) -> Bool) (undefined::([] (Bool -> Bool -> Bool)) -> Int))) (\a -> \b -> \c -> map (\d -> (undefined::([] Int) -> Bool)) (seq b (seq b (undefined::[] ([] (Bool -> Bool)))))))
\a -> id (id (seq a (\b -> seq a (seq b a))) ((\b -> \c -> (!!) (seq a (seq c (undefined::[] ([] (Int -> [] Bool))))) b) (id (seq a (+1)) (seq a 0))))
(\a -> seq a (id (:) (seq a (case1 (\b -> head) (seq a 1) ([]::[] Int))))) ((\a -> (:) (\b -> seq a (seq b (undefined::Int -> [] Int))) (undefined::[] (([] (Bool -> Bool)) -> Int -> [] Int))) ((!!) ([]::[] ([] ([] (Bool -> Bool)))) 1))
\a -> a
\a -> map (\b -> (undefined::Int)) ((\b -> seq b (seq a (seq a (undefined::[] (([] (([] Int) -> Bool)) -> ([] Int) -> [] Int))))) ((\b -> b) (id (seq a 0))))
\a -> seq a (seq a (id (\b -> seq a (seq b (undefined::Int -> (Bool -> Int) -> [] Int) (seq a (undefined::Int)))) ((\b -> b) ([]::[] (Int -> [] Int)))) (undefined::Bool -> Int))
(\a -> seq a (\b -> seq a (\c -> \d -> b) True (id (\c -> 0) (id b)))) (\a -> seq a (id (seq a (seq a (\b -> (undefined::[] (Int -> Bool)))) (\b -> (\c -> \d -> seq c c) (seq b (seq b 2))))))
\a -> (\b -> seq a (seq b (\c -> \d -> d) (undefined::Int))) (id (case1 (undefined::Bool -> ([] Bool) -> Bool) True (undefined::[] Bool))) ((\b -> seq b (\c -> a)) (\b -> \c -> seq a (seq b True)) (seq a (seq a head (tail (seq a a)))))
(undefined::([] (Int -> Int)) -> Bool -> ([] Int) -> [] Int) ((\a -> seq a ([]::[] (Int -> Int))) True) ((\a -> seq a ((&&) (seq a (undefined::Bool)) (not True))) (map (undefined::([] Bool) -> [] (([] ([] Int)) -> [] ([] ([] Int))))))
head (id (\a -> (undefined::Int -> [] (([] Int) -> [] Int))) (case1 (\a -> (undefined::([] Bool) -> Int)) 2 (undefined::[] Bool)) ((undefined::Bool -> (Int -> Int -> [] Int) -> Int) (((==)::Bool -> Bool -> Bool) (undefined::Bool) False) (\a -> \b -> seq a (seq a (\c -> seq c c) (seq b ([]::[] Int))))))
id tail
\a -> a
\a -> case1 (\b -> \c -> ([]::[] Int)) a (seq a ((undefined::(Int -> Int) -> [] (Int -> Bool -> Bool)) (seq a (\b -> b))))
case1 (undefined::Int -> ([] Int) -> ([] Int) -> [] Int) tail ((\a -> seq a (seq a (seq a ([]::[] Int)))) ((undefined::Int -> [] (Int -> ([] Int) -> Bool)) (undefined::Int)))
\a -> a
(undefined::(([] (Int -> Int -> [] Int)) -> [] (Int -> Int -> [] Int)) -> ([] Int) -> [] Int) (\a -> (\b -> (undefined::([] ([] Int)) -> [] (Int -> Int -> [] Int)) (seq b (seq b (seq b (undefined::[] ([] Int)))))) (\b -> case1 (\c -> (!!)) (\c -> True) (seq a ([]::[] Bool))))
\a -> (undefined::((Int -> ([] Int) -> Bool) -> ([] Bool) -> Bool) -> Bool -> [] Int) (undefined::(Int -> ([] Int) -> Bool) -> ([] Bool) -> Bool) ((undefined::(([] (Int -> ([] Int) -> Bool)) -> Bool) -> Bool) ((\b -> \c -> seq c b) ((!!) (undefined::[] Bool) (undefined::Int))))
(undefined::([] ([] Bool)) -> ([] Int) -> [] Int) ((\a -> seq a (undefined::(([] ([] Int)) -> [] Int) -> [] ([] Bool)) (seq a (\b -> seq a (seq a (undefined::[] Int))))) (case1 (\a -> \b -> seq b (undefined::[] (Int -> Int))) ([]::[] (Int -> Int))))
\a -> a
(\a -> seq a ((undefined::Int -> ([] Int) -> [] Int) (seq a (seq a (\b -> seq b 0) (head (seq a ([]::[] ([] ([] (Int -> [] Int)))))))))) (\a -> seq a ((!!) (map (\b -> head ([]::[] (Int -> Int)) (seq a (undefined::Int))) (head ([]::[] ([] (([] ([] Int)) -> [] ([] (Int -> Bool)))))))))
\a -> seq a (\b -> (\c -> seq c (seq c (seq a (undefined::(([] Int) -> [] Bool) -> [] Int)) (\d -> head (undefined::[] ([] Bool))))) (seq a (undefined::([] ([] Int)) -> [] (([] Int) -> Bool)))) (seq a (seq a ((undefined::([] (Int -> [] Int)) -> Bool) (undefined::[] (Int -> [] Int)))))
\a -> a
(++) (undefined::[] Int)
tail
\a -> (\b -> seq b (undefined::([] Int) -> Int -> [] Int) (head (seq b ([]::[] ([] Int))))) (seq a (seq a (undefined::(([] (Bool -> Bool)) -> Bool -> Bool) -> Int))) ((\b -> seq b (seq a (seq a (\c -> 0)) (undefined::[] (([] ([] Bool)) -> [] Bool)))) (seq a (seq a (seq a (\b -> head)) (seq a (seq a (seq a True))))))
\a -> a
map (\a -> seq a ((undefined::(Int -> ([] ([] Bool)) -> [] ([] Bool)) -> Int) (\b -> seq b (\c -> c))))
tail
(\a -> case1 (\b -> \c -> case1 (undefined::Bool -> ([] Bool) -> [] Int) c ([]::[] Bool)) (case1 (\b -> head) (seq a ([]::[] Int)) (seq a (undefined::[] ([] Int))))) (\a -> \b -> b)
id (\a -> \b -> (!!) ([]::[] (([] Int) -> [] Int)) (seq b 2)) ((\a -> seq a (seq a (undefined::Bool))) 0) ((\a -> (\b -> id (seq b ([]::[] ([] Int)))) (\b -> \c -> seq a (undefined::Bool))) ((undefined::Bool -> [] (([] Bool) -> [] Bool)) (not (undefined::Bool))))
\a -> map (\b -> seq a (seq a (\c -> (+1) (undefined::Int)) ((\c -> \d -> seq c (seq a (undefined::[] ([] (Int -> Int))))) (seq b (id 0))))) (id (seq a ([]::[] (([] Int) -> ([] ([] (([] Int) -> [] Int))) -> [] ([] (([] Int) -> [] Int))))))
(!!) ((undefined::Int -> [] (Bool -> ([] Int) -> [] Int)) ((+1) 2)) ((\a -> seq a (seq a 0)) (undefined::Bool)) (((==)::Bool -> Bool -> Bool) ((\a -> a) False) ((\a -> a) False))
(\a -> (undefined::(Int -> ([] Int) -> [] Int) -> ([] Int) -> [] Int) ((\b -> seq b (seq a (\c -> id))) (seq a (id (undefined::Int -> Bool))))) (\a -> (!!) (seq a (seq a (undefined::[] (([] Bool) -> Int)))) 2 (seq a (seq a (\b -> ([]::[] Bool))) (seq a False)))
(\a -> seq a (id id) (head (map (seq a (undefined::Bool -> ([] Int) -> [] Int)) (undefined::[] Bool)))) (undefined::([] (([] Int) -> [] Bool)) -> ([] Int) -> [] (([] (Int -> Bool)) -> Int -> Bool))
\a -> a
(undefined::([] Int) -> [] Int)
(\a -> seq a ((undefined::(([] ([] Int)) -> [] ([] ([] Int))) -> ([] Int) -> [] Int) (\b -> ([]::[] ([] ([] Int)))))) (\a -> seq a (seq a (case1 (seq a (undefined::(Int -> Int) -> ([] (Int -> Int)) -> Bool)) (((==)::Int -> Int -> Bool) 0 0) (seq a (seq a (seq a (undefined::[] (Int -> Int))))))))
(undefined::([] Int) -> [] Int)
(:) (undefined::Int)
\a -> id (\b -> \c -> take (undefined::Int) a) ((undefined::Int -> ([] Int) -> [] (([] Int) -> Bool)) (seq a (seq a (seq a 0)))) ((&&) ((undefined::([] ([] Int)) -> Bool) (undefined::[] ([] Int))) (seq a (seq a (seq a (seq a (undefined::(Bool -> Bool) -> Bool) (\b -> b))))))
(!!) ((++) (undefined::[] (([] Int) -> [] Int)) ((undefined::Bool -> [] (([] Int) -> [] Int)) (undefined::Bool))) ((\a -> (+1) (seq a (seq a (undefined::Bool -> Int)) (undefined::Bool))) (id (\a -> (undefined::[] (Int -> Int)))))
\a -> a
\a -> a
case1 ((undefined::Bool -> Bool -> ([] Bool) -> ([] Int) -> [] Int) (id (id False))) (\a -> (undefined::[] Int)) ((\a -> seq a (seq a (seq a (seq a ([]::[] Bool))))) ((++) ([]::[] (([] Int) -> [] Int)) (undefined::[] (([] Int) -> [] Int))))
\a -> (\b -> seq a (seq a ((!!) (case1 (undefined::Bool -> ([] Bool) -> [] ([] Int)) ([]::[] ([] Int)) (undefined::[] Bool)) (seq b 1)))) (\b -> \c -> (undefined::(Int -> Bool) -> (Int -> [] Int) -> Bool) (\d -> seq d (seq c (seq a (undefined::Bool)))) (\d -> seq b (\e -> c) (seq d (seq a (seq b False)))))
\a -> map ((\b -> seq b (\c -> seq c (seq c (seq a ((+1) (undefined::Int)))))) (undefined::([] Int) -> [] (Int -> Bool))) (head (undefined::[] ((([] ([] ([] Bool))) -> [] ([] ([] Bool))) -> [] Bool)) (\b -> ([]::[] ([] ([] Bool)))))
\a -> a
\a -> ([]::[] Int)
head ((\a -> seq a (seq a ((undefined::Int -> [] (Bool -> ([] Int) -> [] Int)) (seq a (seq a (undefined::Int)))))) (\a -> map (\b -> True) (seq a (seq a (seq a (undefined::[] Int)))))) ((undefined::Int -> Bool) ((\a -> seq a (seq a (seq a (undefined::Int)))) (undefined::[] ([] Bool))))
case1 ((undefined::Int -> Int -> Int -> ([] Int) -> [] Int) 0 0) ([]::[] Int)
filter (case1 (\a -> seq a (\b -> (undefined::Int -> Bool))) ((!!) ([]::[] ((Bool -> Bool) -> Int -> Bool)) ((+1) (undefined::Int)) (\a -> a)) ([]::[] Bool))
(undefined::(Int -> Int -> Int) -> ([] Int) -> [] Int) (\a -> (!!) (tail ([]::[] ((Int -> Bool) -> Int -> Int))) (id a) (case1 (seq a (undefined::Int -> ([] Int) -> Int -> Bool)) (undefined::Int -> Bool) (seq a ([]::[] Int))))
\a -> seq a (\b -> \c -> seq b (\d -> a) (seq b (seq a False))) (seq a (\b -> case1 (undefined::Int -> ([] Int) -> Bool) (seq a (undefined::Bool)) ([]::[] Int))) (\b -> seq b (id ((\c -> seq c (seq c (undefined::([] (Int -> Bool)) -> [] ([] Bool))) (undefined::[] (Int -> Bool))) (\c -> (undefined::[] ([] (Bool -> Bool)))))))
case1 (undefined::Bool -> ([] Bool) -> ([] Int) -> [] Int) (take ((undefined::(Int -> Bool) -> Int) (\a -> seq a False))) ((\a -> \b -> seq a (undefined::[] Bool)) ([]::[] Int) (undefined::Int))
(undefined::([] Int) -> [] Int)
head (undefined::[] (([] ([] (Int -> Bool))) -> ([] Int) -> [] Int)) ((\a -> (:) (seq a (seq a (undefined::[] (Int -> Bool)))) (undefined::[] ([] (Int -> Bool)))) ((undefined::Int -> [] ([] ([] (([] Bool) -> [] Bool)))) ((+1) 1)))
\a -> a
(\a -> (undefined::(([] Int) -> Int -> [] Int) -> ([] Int) -> [] Int) (\b -> seq a (\c -> b))) (\a -> (\b -> seq b (seq b ([]::[] ([] (([] Int) -> Int -> Int -> [] Int))))) (seq a (\b -> seq b True) ((!!) (undefined::[] ([] ([] Int))) 1)))
\a -> (\b -> seq b a) (undefined::([] Int) -> ([] ([] ([] Int))) -> Int -> [] ([] Int))
\a -> seq a (seq a (case1 (undefined::Bool -> ([] Bool) -> [] Int) a (undefined::[] Bool)))
\a -> id (undefined::(([] Int) -> ([] ([] Int)) -> [] Bool) -> [] Int) (seq a (\b -> case1 (undefined::Bool -> ([] Bool) -> ([] ([] Int)) -> [] Bool) ((\c -> seq c (undefined::([] ([] Int)) -> [] Bool)) ([]::[] Int)) (seq a (undefined::Bool -> [] Bool) (seq a False))))
case1 (undefined::Int -> ([] Int) -> ([] Int) -> [] Int) (\a -> (\b -> seq b a) (id (\b -> seq a (seq a (undefined::[] Bool))))) (map (\a -> seq a (id (undefined::Int))) (undefined::[] Bool))
\a -> (undefined::(Int -> [] Int) -> ([] (([] Bool) -> Int -> [] Int)) -> [] Int) (seq a (seq a (\b -> head ([]::[] (Bool -> [] Int)) (id (undefined::Bool))))) ((\b -> seq b (seq a (map (\c -> (undefined::([] Bool) -> Int -> [] Int)) (seq b (undefined::[] Bool))))) ((\b -> b) (undefined::Int)))
\a -> (undefined::(([] ([] Bool)) -> [] (Int -> Bool)) -> [] Int) ((undefined::([] (([] Int) -> Bool)) -> ([] ([] Bool)) -> [] (Int -> Bool)) (seq a (map (seq a (\b -> (undefined::([] Int) -> Bool))) a)))
case1 ((!!) ([]::[] (Bool -> ([] Bool) -> ([] Int) -> [] Int)) ((+1) 1)) (\a -> (:) (seq a 1) a) ((\a -> seq a (undefined::[] Bool)) ([]::[] (([] ([] Int)) -> [] ([] Bool))))
id (\a -> filter (head ([]::[] ((([] ([] Int)) -> [] ([] Int)) -> Int -> Bool)) ((\b -> seq b (seq a (undefined::([] ([] Int)) -> [] ([] Int)))) (seq a True)))) ((undefined::([] Int) -> Bool -> Int -> Int -> [] Int) (undefined::[] Int) (undefined::Bool))
\a -> ([]::[] Int)
(undefined::Int -> (Int -> Int -> Bool) -> ([] Int) -> [] Int) ((\a -> seq a (seq a (seq a 0))) (head (undefined::[] ([] ([] ([] (([] Int) -> [] Int))))))) (\a -> seq a (seq a (undefined::(Int -> Int -> [] Bool) -> Int -> Bool) (\b -> \c -> seq a (\d -> seq b (undefined::[] Bool)) (not (seq b (undefined::Bool))))))
\a -> seq a (\b -> case1 (undefined::Int -> ([] Int) -> Int -> [] Int) (\c -> a) (undefined::[] Int)) (seq a (undefined::[] ([] (Bool -> Bool)))) (seq a ((\b -> seq b (\c -> seq c 0) (\c -> c)) (tail (seq a (seq a ([]::[] (([] (([] ([] Int)) -> [] ([] Int))) -> Int)))))))
id (\a -> \b -> seq a (case1 take b b)) ((undefined::Int -> ([] (Int -> Bool)) -> Int -> Bool) (case1 (\a -> \b -> 2) 1 (undefined::[] Int)))
(\a -> (undefined::Bool -> ([] Int) -> [] Int) (seq a (\b -> True) (seq a (seq a (seq a (undefined::[] (([] ([] Bool)) -> [] ([] Bool)))))))) (id ((\a -> seq a (\b -> \c -> b)) (head ([]::[] (Int -> [] ([] (Int -> Int)))) ((+1) 2))))
\a -> (\b -> seq b (case1 (\c -> (undefined::([] Int) -> Int -> [] Int)) (\c -> a) a (seq a ((\c -> seq c (seq c 2)) (map (\c -> False)))))) (seq a (\b -> seq b (seq a ((!!) ([]::[] (([] (([] (Bool -> Bool)) -> Bool -> Bool)) -> Bool))) (seq a (seq b (\c -> seq a (undefined::Int)) (undefined::Bool))))))
\a -> (enumFromTo::Int -> Int -> [Int]) 0 2
id (take ((!!) ((undefined::Bool -> Bool -> [] Int) (id (undefined::Bool)) (id (\a -> False) (id ([]::[] Bool)))) (undefined::Int)))
head (map (\a -> \b -> id ((undefined::Int -> Bool -> [] Int) (seq b (undefined::Int))) (case1 (\c -> head) (seq b True) (seq b (undefined::[] Bool)))) ((undefined::Int -> [] (([] ([] (Int -> ([] Int) -> Bool))) -> [] Int)) ((\a -> id a) (undefined::Int))))
filter (\a -> (\b -> (undefined::(([] Int) -> ([] (Bool -> Bool -> Bool)) -> Int -> Int) -> Bool) (\c -> seq c (seq b (head ([]::[] (([] (Bool -> Bool -> Bool)) -> Int -> Int)))))) a)
\a -> a
(\a -> seq a ((!!) (undefined::[] (Bool -> ([] Int) -> [] Int)) (seq a (seq a (seq a 2))))) ((undefined::Bool -> ([] Int) -> [] ([] Int)) ((!!) (undefined::[] Bool) 2)) (undefined::Bool)
id
id
id (undefined::([] (([] (([] ([] Bool)) -> [] ([] Bool))) -> [] Bool)) -> ([] Int) -> [] Int) ([]::[] (([] (([] ([] Bool)) -> [] ([] Bool))) -> [] Bool))
\a -> head (seq a (undefined::[] ((([] ([] (Int -> Int -> [] Int))) -> [] (Int -> Int -> Int -> [] Int)) -> [] Int))) (id (undefined::([] ([] (Int -> Int -> [] Int))) -> [] (Int -> Int -> Int -> [] Int)))
\a -> (undefined::[] Int)
(undefined::Bool -> Int -> ([] Int) -> [] Int) (((==)::Int -> Int -> Bool) (id (undefined::Int)) (undefined::Int)) (head ([]::[] Int))
\a -> (\b -> (undefined::(([] Int) -> ([] Int) -> Bool) -> [] Int) (\c -> id (\d -> id (seq b (id True))))) ((!!) (seq a (seq a (seq a ([]::[] (([] Int) -> [] ([] Bool)))))) ((!!) (seq a (seq a a)) 1))
\a -> map (seq a (head (seq a (\b -> (\c -> seq c (undefined::[] ((Bool -> Bool -> Bool) -> Int))) (seq b (seq b (undefined::Int)))) ((\b -> seq a (seq b True)) (tail ([]::[] (([] Int) -> Bool))))))) (seq a (undefined::[] (Bool -> Bool -> Bool)))
\a -> a
\a -> a
filter ((\a -> head ((!!) (seq a (undefined::[] ((Int -> Int) -> [] (Int -> Bool)))) 0 id)) ((\a -> a (seq a (seq a 0)) ((+1) 1)) ((undefined::Bool -> Int -> Int -> Bool) (even 2))))
(\a -> head (seq a ((undefined::(Int -> Int -> Bool) -> [] (([] Int) -> [] Int)) (\b -> \c -> a (seq a ([]::[] Int)) (tail ([]::[] Bool)))))) ((\a -> \b -> seq a (\c -> seq c (undefined::([] Bool) -> Bool))) True ((\a -> seq a (seq a (seq a (undefined::Int)))) (head (undefined::[] ([] ([] Bool))))))
(\a -> seq a (seq a (\b -> (undefined::Bool -> ([] Int) -> [] Int)))) False ((undefined::([] (([] Int) -> Bool -> Bool)) -> Bool) ([]::[] (([] Int) -> Bool -> Bool))) (head ((\a -> (\b -> seq a (seq b b)) (seq a (undefined::[] Bool))) (\a -> (\b -> seq b True) (head (undefined::[] (Int -> [] Bool))))))
take (id (head (tail (head (undefined::[] ([] ((([] ([] ([] ([] Bool)))) -> [] (Int -> [] Int)) -> Int)))))) ((!!) (id ([]::[] (([] ([] ([] ([] Bool)))) -> [] (Int -> [] Int)))) ((\a -> seq a (seq a (undefined::Int))) (take 2))))
(\a -> \b -> (!!) (seq b ([]::[] (([] Int) -> [] Int))) a) ((!!) (head (undefined::[] ([] Int))) (id 1)) (\a -> not)
(undefined::(([] Int) -> [] ([] Bool)) -> Bool -> ([] Int) -> [] Int) (head (map (\a -> \b -> (undefined::[] ([] Bool))) (undefined::[] Int))) True
(undefined::([] Int) -> [] Int)
(\a -> seq a ((\b -> seq b (\c -> seq a tail)) (seq a (\b -> seq b 2)) (case1 (seq a (undefined::([] Int) -> ([] ([] Int)) -> Bool)) (seq a False) (seq a (undefined::[] ([] Int)))))) (case1 (\a -> seq a (seq a (undefined::([] ([] ([] (Int -> Bool)))) -> [] Int))) ((\a -> seq a (seq a (undefined::[] Int))) (\a -> seq a (\b -> seq b (undefined::Bool)))))
(!!) (undefined::[] (Bool -> ([] Int) -> [] Int)) (id (\a -> 0) True) ((\a -> seq a (undefined::(([] (Int -> Bool)) -> [] Int) -> Bool)) (even 1) (\a -> seq a ([]::[] Int)))
(undefined::([] Int) -> [] Int)
\a -> a
(\a -> seq a (\b -> (undefined::([] Bool) -> ([] Int) -> [] Int) (head (seq b (undefined::[] ([] Bool))))) (seq a (undefined::([] Int) -> [] ([] Bool)))) (id ((\a -> \b -> a) ((+1) 2)) (\a -> \b -> a))
\a -> take ((\b -> seq b (case1 (undefined::Int -> ([] Int) -> Int) 1 (undefined::[] Int))) ((undefined::Int -> ([] ([] (Bool -> Bool))) -> Bool -> Bool) 2)) (undefined::[] Int)
id
\a -> a
(!!) ((\a -> (\b -> seq b (seq b (undefined::[] (([] Int) -> [] Int)))) (\b -> seq a (seq a (undefined::Bool)))) ((\a -> seq a (seq a (undefined::Int))) (head (undefined::[] ([] (Int -> Bool)))))) ((undefined::Int -> (([] Int) -> Int -> Bool) -> Int) ((-) 1 (undefined::Int)) (id (\a -> \b -> seq a (undefined::Bool))))
id
\a -> a
(undefined::(([] ([] Int)) -> [] ([] Int)) -> ([] Int) -> [] Int) (\a -> a)
filter (\a -> seq a (seq a False))
tail
map (\a -> a)
\a -> a
\a -> a
\a -> seq a (\b -> (:) (case1 (undefined::([] Bool) -> ([] ([] Bool)) -> Int) (seq a (undefined::Int)) (seq b ([]::[] ([] Bool)))) (id (seq a (undefined::([] ([] (Int -> Bool))) -> [] Int)) (seq a (id (undefined::[] ([] (Int -> Bool))))))) (seq a (seq a ((\b -> seq b (undefined::Bool -> ([] ([] Int)) -> [] ([] ([] Int))) (seq b (seq b (seq b b)))) (seq a (seq a ((\b -> b) (seq a (seq a (undefined::Bool)))))))))
head ([]::[] (([] (Int -> ([] Int) -> ([] ([] Int)) -> [] Bool)) -> ([] Int) -> [] Int)) (take (head ([]::[] (([] Bool) -> Int)) (head ([]::[] ([] Bool)))) (tail ([]::[] (Int -> ([] Int) -> ([] ([] Int)) -> [] Bool))))
(\a -> seq a (seq a ((\b -> head (seq b (undefined::[] (([] Int) -> [] Int)))) (seq a (\b -> seq b (head (undefined::[] ((Int -> Int) -> Bool -> Bool)) (head ([]::[] (Int -> Int))))))))) not
(:) ((\a -> \b -> seq b ((\c -> seq c (seq c (undefined::Int))) (seq b (seq a a)))) ((undefined::([] ([] Bool)) -> Bool) (tail (undefined::[] ([] Bool)))) (undefined::([] Int) -> Int -> Int))
\a -> seq a (case1 (seq a (\b -> (!!) (seq a (seq a ([]::[] (([] ([] (Int -> Int))) -> [] Int)))) (seq b (seq a (seq a (undefined::Int)))))) (seq a a) (seq a (map (\b -> id (undefined::[] (Int -> Int))) (seq a (tail (undefined::[] (Int -> Int -> [] Bool)))))))
\a -> seq a a
(undefined::([] Int) -> [] Int)
(undefined::(([] ([] Int)) -> [] ([] Bool)) -> ([] Int) -> [] Int) (undefined::([] ([] Int)) -> [] ([] Bool))
\a -> seq a (\b -> map (id (seq a (undefined::(([] (([] Bool) -> [] Bool)) -> [] Int) -> Int))) (id (seq b (seq a (undefined::[] (([] (([] Bool) -> [] Bool)) -> [] Int)))))) (undefined::([] ([] ([] Int))) -> [] ([] ([] Bool)))
\a -> a
(\a -> seq a tail) ((\a -> seq a (seq a (undefined::[] (([] (([] ([] Int)) -> [] Bool)) -> Int -> [] Int)))) ((undefined::([] ([] Int)) -> Bool) (take 1 ([]::[] ([] Int)))))
case1 (\a -> \b -> tail) (undefined::([] Int) -> [] Int) (map (\a -> seq a (tail ([]::[] ([] Bool)))) (undefined::[] ([] ([] (Int -> Bool)))))
\a -> map (head ((!!) (seq a (seq a ([]::[] (Bool -> [] (Int -> Int))))) (seq a (seq a 2)) (((==)::Int -> Int -> Bool) (seq a (seq a 2)) (seq a (seq a (undefined::Int)))))) (case1 (:) a ([]::[] Int))
tail
\a -> a
\a -> a
(\a -> (!!) (seq a ((!!) (seq a ([]::[] ([] (([] Int) -> [] Int)))) (seq a 0))) (seq a (\b -> (undefined::Int)) (head (seq a (undefined::[] (([] Bool) -> Bool)))))) (head ((:) (\a -> seq a (enumFromTo::Int -> Int -> [Int])) (undefined::[] (Bool -> Int -> Int -> [] Int))) ((\a -> seq a (head ([]::[] Bool))) (id 2)))
\a -> case1 (\b -> seq b (\c -> \d -> a)) ((undefined::Bool -> Int -> [] Int) (undefined::Bool)) (seq a (\b -> ([]::[] Bool)) ([]::[] (([] Int) -> Bool))) 0
(++) ((\a -> take a (filter (seq a (seq a even)) (seq a (seq a (undefined::[] Int))))) ((\a -> seq a (\b -> seq a a)) 2 ((undefined::Bool -> Int -> [] ([] (Int -> Bool))) (((==)::Bool -> Bool -> Bool) False False))))
id (undefined::([] Int) -> [] Int)
\a -> (undefined::[] Int)
(undefined::(([] ([] (([] Int) -> [] ([] Bool)))) -> [] ([] (([] Int) -> [] ([] Bool)))) -> ([] Int) -> [] Int) (\a -> id (undefined::(Bool -> Bool -> Bool) -> [] ([] (([] Int) -> [] ([] Bool)))) (\b -> (undefined::Bool -> Bool)))
(\a -> (\b -> seq b (undefined::(Int -> [] Bool) -> ([] Int) -> [] Int) ((!!) (undefined::[] (Int -> [] Bool)) 1)) (seq a (\b -> \c -> seq a c) (seq a (\b -> b)))) (\a -> a)
(undefined::(([] ([] ([] Int))) -> [] ([] ([] Int))) -> ([] Int) -> [] Int) (filter (undefined::([] ([] Int)) -> Bool))
(\a -> seq a (seq a (seq a (\b -> (undefined::Int -> ([] (([] Int) -> Bool)) -> [] Int) (seq b 0) (filter (\c -> False) (a (undefined::[] ([] (Int -> Bool))) b)))))) (\a -> \b -> (:) (seq b (undefined::([] (Int -> Bool)) -> ([] Int) -> Bool) (seq a (seq b (seq a ([]::[] (Int -> Bool)))))) (undefined::[] (([] Int) -> Bool)))
(undefined::([] (Int -> Int)) -> ([] (Int -> Bool)) -> ([] Int) -> [] Int) (head (map (\a -> ([]::[] (Int -> Int))) ([]::[] Bool))) ((\a -> (\b -> seq a (seq b (seq b (undefined::[] (Int -> Bool))))) (\b -> b)) ((\a -> seq a (seq a (seq a ([]::[] ([] Bool))))) (undefined::[] (Int -> [] Int))))
(undefined::(([] Int) -> [] (Int -> ([] ([] Int)) -> [] ([] Bool))) -> ([] Int) -> [] Int) (\a -> seq a (filter (seq a (\b -> seq a (\c -> True) 0)) (seq a (seq a (seq a ([]::[] (Int -> ([] ([] Int)) -> [] ([] Bool))))))))
\a -> seq a a
\a -> seq a (id (id (\b -> seq a (\c -> seq a a))) id (head ((\b -> seq a (seq b (seq b (filter (undefined::([] ([] (Int -> Int))) -> Bool) ([]::[] ([] ([] (Int -> Int)))))))) (((==)::[Int] -> [Int] -> Bool) ([]::[] Int) a))))
\a -> ([]::[] Int)
\a -> (undefined::Int -> [] Int) (seq a (undefined::Int))
(\a -> (!!) (head ((\b -> seq b (undefined::[] ([] (([] Int) -> [] Int)))) (id True))) (id (head (undefined::[] (Bool -> Int)) (seq a (seq a False))))) ((\a -> seq a (\b -> seq a (\c -> (undefined::[] (Bool -> Bool)))) (id (seq a (undefined::Int)))) ((!!) ([]::[] (([] ([] ([] ([] Bool)))) -> Bool)) (undefined::Int) (id ([]::[] ([] ([] ([] Bool)))))))
(undefined::([] Int) -> [] Int)
(\a -> \b -> seq b (\c -> map (\d -> a) ([]::[] Int))) 2 (id (\a -> \b -> b) head)
\a -> a
(undefined::([] Int) -> [] Int)
\a -> (\b -> seq b a) (seq a (seq a (head ([]::[] (Int -> ([] ([] Int)) -> [] (([] Int) -> Bool)))) ((undefined::([] ([] Bool)) -> Int) (undefined::[] ([] Bool)))))
\a -> head (seq a (seq a (seq a ([]::[] (([] ([] (Int -> Bool))) -> Bool -> [] Int))))) (seq a ((:) (tail (undefined::[] (Int -> Bool))) (seq a (seq a (undefined::[] ([] (Int -> Bool))))))) (case1 ((!!) (seq a ([]::[] (([] Int) -> Bool)))) (seq a False) a)
id (\a -> case1 (\b -> (undefined::(([] Int) -> [] ([] Bool)) -> ([] Int) -> [] Int) (\c -> id (seq a (undefined::[] ([] Bool))))) (seq a (id (undefined::([] ([] Bool)) -> [] Int)) ((undefined::([] ([] (Int -> Bool))) -> [] ([] Bool)) ([]::[] ([] (Int -> Bool))))) ([]::[] Int))
(\a -> (\b -> seq a (\c -> seq b (seq c c))) (\b -> seq a b)) (\a -> seq a ((\b -> seq b (seq a (\c -> ([]::[] (Int -> Bool)))) (seq b a)) (\b -> seq b (map (undefined::Bool -> [] (Int -> [] Int)) (undefined::[] Bool)))))
\a -> filter (\b -> (&&) ((undefined::Int -> Bool) (undefined::Int)) (seq b (seq a (seq a (head (seq a ([]::[] Bool))))))) (map (seq a (seq a (\b -> (\c -> seq b c) (seq b 1)))) (seq a (tail ([]::[] (Int -> ([] Int) -> ([] Int) -> [] Int)))))
\a -> id (seq a (undefined::((([] ([] Int)) -> [] ([] Int)) -> ([] ([] ([] ([] Bool)))) -> Int -> Int) -> [] Int)) (\b -> \c -> \d -> seq b (undefined::(Int -> Int) -> Int) (head (seq d (undefined::[] (([] ([] Bool)) -> Int -> Int))) (undefined::[] ([] Bool))))
\a -> (\b -> seq a (\c -> c (seq b ((undefined::Int -> [] (Int -> [] Int)) b)))) (seq a (seq a (case1 (undefined::Bool -> ([] Bool) -> Int) (undefined::Int) ([]::[] Bool)))) (undefined::([] (Int -> [] Int)) -> [] Int)
(undefined::Bool -> ([] Int) -> [] Int) ((\a -> ((==)::Int -> Int -> Bool) (seq a 0) 1) (\a -> seq a ((!!) (id (undefined::[] (Int -> Int -> Bool))) (id (undefined::Int)))))
case1 take ((++) ((\a -> seq a ([]::[] Int)) (head ([]::[] Int))) ((undefined::([] (Int -> Int -> Bool)) -> [] Int) (head ([]::[] ([] (Int -> Int -> Bool))))))
\a -> seq a (\b -> a) (seq a (\b -> seq b (seq b ((!!) (seq b (seq a ([]::[] ([] (Int -> ([] Int) -> ([] Int) -> Bool))))) (seq a ((+) (undefined::Int) (seq b (seq b (undefined::Int)))))))))
case1 (\a -> seq a (undefined::([] ([] (Int -> Bool))) -> ([] Int) -> [] Int)) (\a -> a) (map (\a -> (undefined::[] (Int -> Bool))) (id (undefined::[] (Int -> Int))))
(\a -> seq a ((!!) (seq a (seq a (\b -> ([]::[] (([] Int) -> [] Int)))) (seq a (seq a (seq a (undefined::Bool))))) (id (\b -> a) (seq a (seq a (undefined::[] Int)))))) ((undefined::(([] Bool) -> [] Int) -> Int -> Int) (\a -> tail (seq a (undefined::[] Int))) ((undefined::([] ([] Bool)) -> Int) (undefined::[] ([] Bool))))
id
\a -> (undefined::Bool -> [] Int) (seq a (id (\b -> seq a (undefined::Int -> Bool)) (\b -> b) ((\b -> b head a) (seq a (\b -> \c -> b a)))))
case1 ((!!) (undefined::[] (Bool -> ([] Bool) -> ([] Int) -> [] Int)) ((\a -> seq a (undefined::Int)) (undefined::Bool))) (\a -> (undefined::Int -> (([] Int) -> Int) -> [] Int) (seq a (undefined::Int)) (seq a (\b -> seq b (seq b (seq a 1))))) ([]::[] Bool)
\a -> a
\a -> seq a (seq a a)
(undefined::([] Int) -> [] Int)
(\a -> map (seq a id)) ((\a -> seq a (head (seq a (undefined::[] ([] (Int -> ([] Int) -> Int -> [] Int)))))) ((undefined::Bool -> Bool) (id False)))
id
(\a -> \b -> seq a (case1 (undefined::Bool -> ([] Bool) -> [] Int) (undefined::[] Int) ([]::[] Bool))) ((undefined::(Int -> [] ([] Bool)) -> Bool -> ([] Int) -> Int) (\a -> map (seq a (\b -> b)) (undefined::[] ([] Bool))))
\a -> (\b -> seq b (seq a ((enumFromTo'::Int -> Int -> [Int]) b b))) ((+1) (seq a (seq a (undefined::(([] ([] Bool)) -> [] ([] (Bool -> Bool))) -> Int)) (seq a (\b -> seq a ([]::[] ([] (Bool -> Bool)))))))
id (\a -> (\b -> (undefined::Bool -> ([] Int) -> [] Int) (b ([]::[] Int) False False)) (seq a ((undefined::Int -> ([] Int) -> Bool -> Bool -> Bool) (seq a (seq a 0))))) (\a -> \b -> tail (seq a ((undefined::([] (([] (Int -> Int)) -> Bool)) -> [] Bool) (seq a (seq b (seq b (seq a (seq a (seq a ([]::[] (([] (Int -> Int)) -> Bool)))))))))))
(++) (id ((!!) ((!!) (undefined::[] ([] (Int -> [] Int))) 1) ((\a -> seq a (seq a (undefined::Int))) (undefined::Bool))) ((\a -> (\b -> seq a (seq b 0)) (id (seq a (undefined::[] Int)))) (\a -> map (seq a (\b -> (undefined::Int -> Bool))) (id ([]::[] Bool)))))
head (undefined::[] (([] Int) -> [] Int))
(++) (map (\a -> (undefined::Int)) (id (undefined::(([] (Bool -> Bool -> Bool)) -> Bool -> Bool) -> [] Bool) (id (undefined::([] (Bool -> Bool -> Bool)) -> Bool -> Bool))))
(\a -> seq a (\b -> seq a (seq b ((undefined::([] ([] Bool)) -> ([] Int) -> [] Int) (undefined::[] ([] Bool))))) (seq a (seq a (seq a (seq a (\b -> seq b (seq a (seq b (undefined::Bool))))))))) ([]::[] Int)
(:) ((-) ((\a -> (+1) (a ([]::[] Bool) 0 ([]::[] Int))) (\a -> head (undefined::[] (Int -> Int -> ([] Int) -> Int)) 1)) ((undefined::([] Bool) -> ([] ([] (Bool -> Bool))) -> Int) (undefined::[] Bool) ((\a -> seq a (seq a ([]::[] ([] (Bool -> Bool))))) (undefined::Bool))))
\a -> a
\a -> a
\a -> map (\b -> seq b (seq b (\c -> \d -> seq a (undefined::Int)) (not (seq a False)) ((undefined::Bool -> Int -> [] Bool) (seq b (seq b (undefined::Bool)))))) ((undefined::Bool -> [] (([] ([] ([] Int))) -> [] ([] Bool))) (seq a True))
(\a -> \b -> (\c -> \d -> seq a c) (head (seq b ([]::[] ([] Int))))) (((==)::Int -> Int -> Bool) (undefined::Int) (head (undefined::[] Int))) (undefined::([] Int) -> [] (Int -> Bool))
(\a -> seq a (\b -> (undefined::([] (([] Int) -> Bool)) -> ([] Int) -> [] Int) (seq a (id ([]::[] (([] Int) -> Bool))))) (undefined::([] ([] Int)) -> [] ([] Int))) (\a -> id (seq a (head (undefined::[] (Bool -> ([] ([] (Int -> Bool))) -> Int -> Bool))) (seq a (seq a True))))
tail
id (\a -> \b -> (undefined::Bool -> ([] Int) -> [] Int) (seq a (seq a False))) (id (\a -> seq a (seq a ([]::[] Bool)))) (id ((+1) (id (undefined::(([] (Int -> [] Int)) -> Int -> Bool) -> Int) (undefined::([] (Int -> [] Int)) -> Int -> Bool))))
id
(undefined::([] (([] (([] Int) -> [] Bool)) -> Int -> Int)) -> ([] Int) -> [] Int) ((undefined::Bool -> [] (([] (([] Int) -> [] Bool)) -> Int -> Int)) (odd (head ((\a -> seq a (undefined::[] Int)) (undefined::Int)))))
id
(undefined::(([] (([] Int) -> Int -> Int -> Int)) -> Bool -> Bool -> Bool) -> ([] Int) -> [] Int) (id (\a -> seq a (undefined::Bool -> Bool -> Bool)))
\a -> a
id
\a -> seq a (\b -> a) (undefined::([] Int) -> [] (Int -> [] Int))
id (\a -> (undefined::Int -> (Int -> Bool -> Bool) -> [] Int) (seq a (\b -> seq a (seq b (undefined::Int))) (seq a (id ([]::[] ([] (([] Bool) -> [] Bool)))))) ((\b -> (!!) (seq b ([]::[] (Int -> Bool -> Bool))) (seq a 1)) (\b -> seq a (seq a (\c -> True)))))
tail
(\a -> head (seq a ([]::[] (([] ([] (Int -> Int))) -> ([] Int) -> [] Int)))) ([]::[] ([] ([] Int))) (head ([]::[] ((([] ([] ([] Bool))) -> [] Int) -> [] ([] (Int -> Int)))) (\a -> seq a ((\b -> seq b (seq b ([]::[] Int))) (seq a (undefined::Int)))))
\a -> ([]::[] Int)
\a -> map (seq a (\b -> (undefined::Int))) (seq a (seq a (tail ([]::[] (([] (([] ([] Int)) -> [] ([] Int))) -> Int -> ([] ([] Bool)) -> [] ([] (Bool -> Bool)))))))
(\a -> seq a (undefined::([] Int) -> [] Int)) (\a -> (!!) (filter (seq a (\b -> False)) (seq a (undefined::[] Int))) ((!!) (seq a (seq a ([]::[] Int))) (seq a (undefined::Int))))
tail
tail
(undefined::([] Int) -> [] Int)
\a -> a
\a -> map (\b -> (undefined::Bool -> Int) (seq b False)) ((\b -> seq b (undefined::Int -> [] ([] ([] Int))) 0) (seq a (seq a ((!!) (undefined::[] (([] Bool) -> Bool))) (seq a (seq a (seq a (undefined::Int)))))))
head (tail (undefined::[] ((([] ([] Int)) -> [] ([] (Int -> Bool))) -> ([] Int) -> [] Int))) (\a -> seq a (id (\b -> seq b (undefined::Int -> [] ([] (Int -> Bool))) (seq a (seq b (undefined::Int))))) (seq a (case1 (\b -> (undefined::([] Bool) -> Bool)) (seq a False) (seq a (undefined::[] Bool)))))
(\a -> \b -> a (a b 1 (seq b 2)) (seq b (\c -> 1) (seq b (seq a (undefined::[] ([] Int))))) (head (id b))) (\a -> seq a (\b -> (undefined::(([] (([] Bool) -> [] Bool)) -> Int -> Bool) -> Int -> [] Int) (\c -> (undefined::Bool -> Int -> Bool) True)))
id
(undefined::(([] Int) -> Int -> [] Int) -> ([] Int) -> [] Int) ((\a -> head (seq a ((\b -> seq b ([]::[] (([] Int) -> Int -> [] Int))) (undefined::Bool)))) ((\a -> seq a (\b -> seq a ([]::[] ([] Bool)))) True))
\a -> a
(undefined::([] Int) -> [] Int)
tail
(undefined::(([] Int) -> (([] ([] Int)) -> [] ([] Bool)) -> ([] ([] Int)) -> [] ([] Bool)) -> ([] Int) -> [] Int) (undefined::([] Int) -> (([] ([] Int)) -> [] ([] Bool)) -> ([] ([] Int)) -> [] ([] Bool))
head ((\a -> seq a (\b -> (undefined::[] (([] Int) -> [] Int))) (\b -> seq b (seq a (\c -> (undefined::[] (Int -> Bool)))) (seq a (seq b False)))) (id ((undefined::(Bool -> Bool -> Bool) -> Bool) ((undefined::Bool -> Bool -> Bool -> Bool) (odd (undefined::Int))))))
(\a -> seq a (\b -> seq a (\c -> \d -> d) (seq a (seq b (undefined::[] Int))))) (id (odd (undefined::Int))) (head (undefined::[] (Int -> ([] (Int -> Int)) -> Int -> Int)) (head ((\a -> seq a (undefined::[] Int)) ([]::[] Bool))))
id
\a -> (undefined::((([] Int) -> [] (Bool -> Bool)) -> ([] Int) -> [] (Int -> ([] Bool) -> [] (Bool -> Bool))) -> [] Int) (\b -> \c -> seq b (seq b (seq b (\d -> seq b (tail ([]::[] (Int -> ([] Bool) -> [] (Bool -> Bool))))) (id (\d -> (undefined::Int)) (seq c (seq a (seq c True)))))))
(\a -> \b -> seq b (seq b ((undefined::([] (Int -> Int)) -> Int -> [] Int) (seq b (seq a (undefined::[] (Int -> Int))))) 2)) ((\a -> (\b -> \c -> seq a (seq b (undefined::Int))) ((:) ([]::[] Int) ([]::[] ([] Int)))) ((\a -> \b -> a) (undefined::Bool)))
tail
\a -> seq a (id (undefined::Int -> (([] (Int -> Bool)) -> Int -> Bool) -> [] Int) 2) ((undefined::Bool -> ([] (Int -> Bool)) -> Int -> Bool) (not (seq a (seq a (undefined::Int -> Bool)) (seq a 2))))
(\a -> seq a (seq a (\b -> seq a (undefined::Bool -> ([] Int) -> [] Int)) (seq a ([]::[] Int))) (seq a a)) (head ((undefined::Int -> (([] Int) -> Int -> Bool) -> [] Bool) 0 (undefined::([] Int) -> Int -> Bool)))
(undefined::([] Int) -> [] Int)
(++) (case1 (\a -> \b -> (\c -> seq b (seq b (seq c ([]::[] Int)))) (seq a (undefined::Int -> Int) (seq a (undefined::Int)))) ((\a -> seq a id (seq a ([]::[] Int))) (undefined::[] ([] Bool))) ((\a -> seq a (seq a (seq a (seq a (undefined::[] Bool))))) ((\a -> seq a (undefined::Bool)) (id ([]::[] ((Int -> Int) -> Int -> Int))))))
\a -> (enumFromTo'::Int -> Int -> [Int]) ((\b -> seq a (seq a (seq b (+1))) (seq a ((+1) (undefined::Int)))) (seq a ((\b -> seq b (undefined::[] (Int -> [] Int))) (undefined::Int -> Bool -> Bool)))) (seq a (\b -> seq a (\c -> b)) (seq a (seq a (seq a 1))) (map even))
id
\a -> seq a (seq a (\b -> seq a (seq a (undefined::(Int -> Int -> [] Int) -> [] Int))) (seq a (\b -> seq b (undefined::([] Bool) -> Int) (seq b (seq a (seq b ([]::[] Bool)))))) ((undefined::([] (([] ([] ([] (Bool -> Bool)))) -> Bool)) -> Int -> Int -> [] Int) ((!!) ([]::[] ([] (([] ([] ([] (Bool -> Bool)))) -> Bool))) (seq a 0))))
\a -> a
(\a -> id (seq a (\b -> seq b (undefined::([] Int) -> [] Int))) (case1 (seq a (seq a (:))) (undefined::[] Bool))) ((\a -> seq a (seq a (undefined::Bool -> Int))) (\a -> seq a (\b -> seq a (undefined::Bool))) ((!!) ([]::[] ((Int -> Int -> Int) -> Bool)) 1 (\a -> id)))
\a -> seq a a
head (tail (tail (id ([]::[] ((([] Int) -> Int -> Int -> [] Int) -> ([] Int) -> [] Int))))) ((\a -> head (seq a ([]::[] (([] Int) -> Int -> Int -> [] Int)))) (\a -> case1 (\b -> (undefined::([] Int) -> Bool)) a (seq a (undefined::[] Int))))
id
\a -> a
tail
\a -> a
\a -> a
(\a -> seq a (seq a (\b -> seq b (seq a (\c -> id) (seq b (seq a (undefined::Int)))))) (take (seq a (undefined::Int)) (seq a (seq a (undefined::[] (Int -> Int)))))) ((undefined::Int -> [] (([] (([] Int) -> Int -> Int)) -> [] ([] (Int -> Int)))) ((\a -> seq a ((+1) (undefined::Int))) (\a -> (undefined::Bool))))
\a -> a
\a -> seq a (id ((!!) (seq a (id ([]::[] ((([] Int) -> Bool -> Bool) -> [] Int)))) (seq a ((undefined::([] (([] (Int -> Bool)) -> Bool)) -> Int) (tail (undefined::[] (([] (Int -> Bool)) -> Bool))))))) (\b -> \c -> c)
id
(\a -> seq a (\b -> \c -> seq c c)) ((\a -> (+1) (seq a 0)) (id False)) (\a -> seq a ((undefined::(([] Int) -> [] ([] Int)) -> Bool -> Bool -> Bool) (seq a (seq a (seq a (undefined::Bool -> ([] Int) -> [] ([] Int)))) (seq a False))))
(undefined::(([] (Bool -> Bool)) -> [] (Bool -> Bool)) -> ([] Int) -> [] Int) (\a -> a)
head ([]::[] (Bool -> Int -> ([] Int) -> [] Int)) (undefined::Bool) ((!!) ([]::[] (Bool -> Int)) (head ([]::[] Int)) ((undefined::(([] (Int -> Int)) -> Int -> Int) -> Bool) (\a -> \b -> head (undefined::[] Int))))
tail
\a -> a
\a -> a
(\a -> seq a (\b -> \c -> c)) ((\a -> head (seq a ([]::[] Bool))) (odd (undefined::Int))) (\a -> (undefined::Bool -> Bool -> Bool))
\a -> a
(\a -> seq a ((\b -> seq a (seq a (take (seq b ((+1) (undefined::Int)))))) (seq a (\b -> id (undefined::Bool -> [] (Int -> [] ([] Bool))) True)))) (\a -> seq a (\b -> (undefined::Bool -> [] (Bool -> Bool -> Bool)) (seq b ((undefined::([] (Bool -> Bool)) -> Bool) (seq a (seq b (undefined::[] (Bool -> Bool))))))))
case1 (\a -> \b -> \c -> (undefined::Bool -> (([] Int) -> Bool) -> [] Int) (seq c True) (((==)::[Int] -> [Int] -> Bool) (seq b (seq a ([]::[] Int))))) ((undefined::([] (Int -> Bool)) -> ([] Int) -> [] Int) ((\a -> seq a (undefined::[] (Int -> Bool))) ((+1) 1))) (take (id (id 2)) ((undefined::([] Bool) -> [] ([] ([] Bool))) ([]::[] Bool)))
(\a -> \b -> seq a (\c -> \d -> seq a b) (seq a (id (undefined::Int -> Bool))) (\c -> seq a ((\d -> seq c d) (seq b (undefined::Int))))) (\a -> id ((undefined::Int -> [] (Int -> Int)) (seq a (seq a ((+1) (seq a (seq a 2)))))))
\a -> a
(undefined::([] Int) -> [] Int)
id
tail
(\a -> seq a (id (id (seq a (\b -> b))))) (undefined::Bool)
\a -> filter (undefined::Int -> Bool) (seq a (\b -> map (\c -> seq c (undefined::Int)) ([]::[] Bool)) ((\b -> seq a ((:) b)) (seq a (seq a (seq a True)))))
(\a -> seq a (undefined::Bool -> Bool -> ([] Int) -> [] Int) (seq a (seq a (seq a False)))) (\a -> \b -> b) ((undefined::Int -> Int -> Bool) (undefined::Int) (case1 (undefined::Int -> ([] Int) -> Int) 0 (undefined::[] Int)))
id (\a -> \b -> id (seq a (undefined::(([] (Int -> Int)) -> Int -> Int) -> [] Int)) (\c -> seq c (seq a (\d -> seq b d)))) (undefined::([] Int) -> ([] Int) -> [] Int)
\a -> a
(++) ((\a -> seq a (map (seq a (seq a (seq a (undefined::(([] ([] Bool)) -> [] ([] Bool)) -> Int)))) ([]::[] (([] ([] Bool)) -> [] ([] Bool))))) ([]::[] (([] (([] ([] Int)) -> [] Bool)) -> ([] Bool) -> [] Bool)))
(undefined::Int -> ([] Int) -> [] Int) ((\a -> (+) (seq a (undefined::Int))) (\a -> seq a True) (head (undefined::[] ((([] Int) -> [] ([] Int)) -> Int)) (id (\a -> seq a ([]::[] ([] Int))))))
\a -> a
(++) (map (\a -> (undefined::Int)) (undefined::[] ((([] Int) -> Bool -> Bool) -> ([] (([] Int) -> Bool -> Bool)) -> ([] Int) -> Bool -> Bool)))
(\a -> seq a ((\b -> (undefined::Bool -> ([] Int) -> [] Int) (seq b (seq a (seq b (undefined::Bool))))) (\b -> seq a (seq a (\c -> id)) (\c -> c)))) (\a -> tail a)
id (\a -> \b -> b) ((\a -> \b -> id a) False (head (id ((\a -> seq a ([]::[] (([] ([] Int)) -> [] Bool))) 0))))
id (undefined::Bool -> (Int -> ([] Int) -> Int) -> ([] Int) -> [] Int) ((\a -> even (seq a (undefined::Int))) (\a -> not (undefined::Bool))) (\a -> case1 (\b -> (undefined::([] Int) -> Int)) a)
\a -> (\b -> seq b (seq b ((!!) (seq a (seq b ([]::[] (Bool -> [] Int)))) (seq a 2) (seq a ((\c -> c) (even 1)))))) (id (\b -> case1 (seq a (undefined::Bool -> ([] Bool) -> [] Bool)) (seq b ([]::[] Bool))) (\b -> ((==)::Int -> Int -> Bool) (seq b (seq a (undefined::(([] Bool) -> Bool) -> Int)) (\c -> seq a (seq c (undefined::Bool))))))
(\a -> seq a (id (undefined::(([] Int) -> [] (Int -> Int)) -> ([] Int) -> [] Int)) (\b -> map (\c -> seq c (undefined::Int -> Int)) (seq b ([]::[] Bool)))) (map ((undefined::Int -> ([] (Int -> Int -> Bool)) -> Int -> Int) ((+) 0 ((+1) 0))))
(undefined::(([] Int) -> [] ([] Bool)) -> ([] Int) -> [] Int) ((\a -> seq a (\b -> (undefined::([] Int) -> [] ([] Bool)))) (filter (undefined::Bool -> Bool) (undefined::[] Bool)) (undefined::Bool))
head (id ((undefined::Bool -> Bool -> [] (([] Int) -> [] Int)) (undefined::Bool)) ((\a -> seq a (id False)) (undefined::Int)))
case1 ((\a -> seq a (seq a (\b -> (undefined::Int -> ([] Int) -> [] Int)))) False (id ((\a -> seq a (seq a False)) ((+1) 1)))) ((\a -> seq a (head ([]::[] ((Bool -> Bool) -> [] Int)) (seq a (undefined::Bool -> Bool)))) (\a -> seq a (seq a (seq a (seq a (undefined::Bool -> Bool -> Bool -> Bool)) (seq a (seq a (undefined::Bool)))))))
\a -> a
\a -> (undefined::[] Int)
\a -> (\b -> seq a (\c -> seq a (\d -> a)) (seq b (seq b (seq b (undefined::[] (([] Int) -> Bool))))) ((\c -> c (undefined::Int) a) (\c -> \d -> (undefined::Int)))) (undefined::([] Int) -> ([] Int) -> [] Bool)
\a -> seq a (case1 (\b -> \c -> seq a (\d -> (undefined::[] Int))) (\b -> seq a a) (seq a (undefined::Bool -> [] Int) (seq a False))) (seq a (\b -> seq a ((\c -> \d -> seq c (undefined::Bool)) ([]::[] (Bool -> Bool)))) (\b -> seq b (head ([]::[] (Int -> ([] Int) -> [] Bool))) (seq a (seq b (seq b 2)))))
(undefined::([] (([] Bool) -> [] Bool)) -> ([] Int) -> [] Int) (head (map (\a -> seq a ((undefined::(Bool -> Bool) -> [] (([] Bool) -> [] Bool)) (\b -> (undefined::Bool)))) (undefined::[] (([] Int) -> Bool))))
\a -> a
(!!) (undefined::[] (([] Int) -> [] Int)) ((-) ((\a -> seq a (seq a 0)) (undefined::[] Bool)) (case1 (\a -> (undefined::([] Int) -> Int)) 1 (undefined::[] Int)))
\a -> (\b -> seq a (seq b (seq a ((\c -> \d -> seq c ([]::[] Int)) False) (case1 (undefined::([] Bool) -> ([] ([] Bool)) -> Bool) (seq b b) (seq b ([]::[] ([] Bool))))))) ((\b -> seq b (\c -> seq b True)) ((+1) (seq a (undefined::Int))) ((!!) (id ([]::[] (([] ([] (Int -> Bool))) -> Int))) (seq a 0)))
(\a -> case1 (seq a (\b -> \c -> (undefined::([] Int) -> [] Int))) id (take 2 ([]::[] Bool))) (\a -> \b -> \c -> seq a True)
(\a -> \b -> seq a (seq b ((\c -> \d -> seq c (undefined::[] Int)) a))) (undefined::Int) ((\a -> seq a (\b -> \c -> seq c (undefined::[] Bool)) (\b -> seq a (undefined::Bool))) (id (\a -> (undefined::[] (Int -> [] Int))) (not True)))
(!!) ((\a -> seq a (undefined::([] Int) -> [] (([] Int) -> [] Int)) (seq a (seq a (seq a ([]::[] Int))))) ((\a -> seq a (head ([]::[] Int))) (head (undefined::[] ([] Bool))))) ((\a -> a (head (undefined::[] ([] Int))) (a (undefined::[] Int) (undefined::Int))) (id (\a -> seq a (undefined::([] Int) -> Int -> Int)) ((!!) (undefined::[] Bool) (undefined::Int))))
(\a -> (undefined::(Int -> ([] Int) -> Bool) -> ([] Int) -> [] Int) (seq a (seq a (\b -> \c -> \d -> b) True))) (\a -> seq a (\b -> \c -> seq b (undefined::Bool -> Bool)) True (seq a (case1 (\b -> (undefined::([] Bool) -> Bool)) (seq a (undefined::Bool)) (seq a ([]::[] Bool)))))
case1 (\a -> \b -> seq b (\c -> \d -> d) a) ((undefined::(Int -> Int) -> ([] Int) -> [] Int) (undefined::Int -> Int)) ((undefined::Bool -> [] Int) ((undefined::Int -> Bool) (id (undefined::Int))))
\a -> seq a a
(\a -> \b -> seq a (\c -> seq c (\d -> seq b b) (not (undefined::Bool))) (undefined::Int -> ([] Int) -> ([] Int) -> [] Int)) ((undefined::Int -> ([] (Bool -> Bool)) -> Int) (undefined::Int))
\a -> (undefined::([] ([] (Int -> Int))) -> (([] Int) -> [] ([] Bool)) -> [] Int) (id (\b -> seq a ([]::[] ([] (Int -> Int)))) ([]::[] ([] Bool))) (undefined::([] Int) -> [] ([] Bool))
(undefined::([] Int) -> [] Int)
\a -> a
(!!) (map (\a -> case1 (seq a (:)) (undefined::[] Int)) (case1 (\a -> (undefined::([] Int) -> [] Bool)) ([]::[] Bool) (undefined::[] Int))) ((undefined::(([] Int) -> [] Bool) -> Int -> Int) (\a -> seq a (seq a (seq a (undefined::[] Bool)))) ((undefined::(Bool -> [] Int) -> Int) (\a -> seq a (seq a (undefined::[] Int)))))
(\a -> (\b -> (\c -> seq c ((:) b)) ((!!) (undefined::[] (Bool -> Bool)) b)) (seq a (seq a (\b -> seq b (undefined::Int))) (\b -> seq b (seq b (undefined::Bool))))) (undefined::([] (Int -> Int)) -> [] (Int -> Int))
(undefined::([] Int) -> [] Int)
\a -> a
\a -> (undefined::[] Int)
map ((!!) ((!!) ([]::[] ([] (Bool -> Int -> Int))) 0) ((-) 1 (id 1)) (not ((undefined::(Int -> Int) -> (Int -> Bool) -> Bool) (\a -> id a) ((undefined::(([] Int) -> [] Int) -> Int -> Bool) (map (\a -> 2))))))
(\a -> (undefined::([] (Bool -> Bool)) -> ([] Int) -> [] Int) (head ([]::[] (Bool -> [] (Bool -> Bool))) (seq a (seq a (undefined::Bool))))) (head ((\a -> head ((\b -> seq b ([]::[] ([] Int))) (seq a (seq a (undefined::Int))))) (case1 (undefined::Bool -> ([] Bool) -> Bool) (undefined::Bool) ([]::[] Bool))))
\a -> (\b -> head (seq b (seq b (\c -> (undefined::[] (Int -> [] Int))) (seq a (undefined::Int -> Bool))))) (seq a (\b -> \c -> seq c id)) (case1 (\b -> seq b (undefined::([] Bool) -> Int -> Int)) (\b -> b) (seq a ([]::[] Bool)) (seq a 0))
\a -> filter ((undefined::(([] Int) -> [] (Int -> [] Int)) -> Int -> Bool) (\b -> seq a (undefined::Int -> [] (Int -> [] Int)) ((+1) (seq a (undefined::Int))))) a
\a -> seq a a
\a -> (!!) ((undefined::Bool -> [] ([] Int)) (seq a (seq a True))) ((+1) ((+) 0 (case1 (undefined::Int -> ([] Int) -> Int) (undefined::Int) a)))
\a -> a
\a -> a
id (\a -> a)
\a -> a
\a -> a
\a -> map (\b -> seq b (seq b ((undefined::(([] (Int -> Int)) -> [] (Int -> Int)) -> Int) id))) ([]::[] (([] Int) -> Bool -> Bool))
\a -> head ((\b -> take (seq a b) (seq b ([]::[] ((Int -> Int -> Bool) -> [] Int)))) (seq a (head a))) (seq a (\b -> odd))
(\a -> (undefined::Bool -> Int -> ([] Int) -> [] Int) (seq a (seq a True)) (head (seq a ([]::[] ((Bool -> Bool) -> Int))) (\b -> seq b b))) ((\a -> \b -> (\c -> seq c (\d -> seq a 0)) ((!!) b)) (\a -> seq a (undefined::Bool)))
\a -> seq a ((!!) (seq a (\b -> \c -> ([]::[] ([] Int))) (seq a (seq a (seq a 1))) (seq a (undefined::(Int -> Int -> Int) -> Bool) (\b -> (+1)))) (seq a (\b -> \c -> seq a (undefined::Int)) (seq a (seq a (\b -> seq a id))) (seq a ((\b -> seq b a) (even (seq a 2))))))
(\a -> id (id (\b -> \c -> c) (\b -> seq a (seq b 2)))) ((\a -> head ([]::[] ((([] ([] Bool)) -> [] Bool) -> Bool)) (\b -> seq a (id ([]::[] Bool)))) (undefined::Int))
\a -> a
(undefined::Int -> (([] (Int -> Bool)) -> Int) -> ([] Int) -> [] Int) (id (\a -> (undefined::Int)) (undefined::([] (Int -> Int)) -> Int)) (undefined::([] (Int -> Bool)) -> Int)
case1 (\a -> case1 (undefined::Int -> ([] Int) -> ([] Int) -> [] Int) (undefined::([] Int) -> [] Int) (seq a (undefined::Int -> [] Int) a)) ([]::[] Int)
id
id ((\a -> head (seq a (seq a ([]::[] ((Int -> Int) -> ([] Int) -> [] Int))))) ((\a -> a True False) (head ([]::[] (Bool -> Bool -> Bool))))) ((!!) ((\a -> \b -> seq a (seq a ([]::[] Int))) (undefined::Int) (\a -> (undefined::Int -> [] Int))))
(\a -> \b -> seq a b) ((\a -> id (seq a (seq a (seq a (undefined::([] Bool) -> [] ([] (Int -> Bool)))) (seq a (seq a (undefined::[] Bool)))))) ((undefined::(([] Int) -> [] Int) -> Int) ((:) (undefined::Int))))
case1 (\a -> (undefined::Int -> ([] Bool) -> ([] Int) -> [] Int) ((-) (seq a 0) (seq a 2))) tail (undefined::[] Bool)
id (\a -> (undefined::([] Int) -> [] Int)) ((&&) (not (undefined::Bool)) (id (\a -> a) (undefined::Bool)))
(undefined::((([] Int) -> Int -> Int -> [] Int) -> Int) -> ([] Int) -> [] Int) ((\a -> \b -> seq a ((undefined::Bool -> Int) (even 1))) (\a -> seq a ((undefined::Int -> Bool) a)))
take (case1 (\a -> \b -> seq b (seq a (seq a 1))) ((\a -> seq a (undefined::Int)) False) ((:) (\a -> (undefined::Bool)) (undefined::[] (([] Int) -> Bool))))
(\a -> \b -> id (\c -> seq b (undefined::Bool -> [] Int)) (undefined::Int -> [] Bool) (case1 (seq a (undefined::Bool -> ([] Bool) -> Bool)) (undefined::Bool) (seq a ([]::[] Bool)))) (case1 (\a -> \b -> (undefined::Bool)) ((\a -> seq a True) ([]::[] ([] Int))) ((\a -> seq a (undefined::[] (Int -> Int))) (undefined::[] (Int -> Int))))
(\a -> \b -> seq a (\c -> ([]::[] Int))) (head ([]::[] (Int -> Bool)) 1) (case1 (\a -> (undefined::Bool -> ([] Int) -> Int -> [] Bool) (seq a (undefined::Bool))) (undefined::Int -> [] Bool) ((\a -> seq a ([]::[] Int)) 0))
\a -> seq a a
\a -> a
\a -> (:) (head (id (\b -> (:) 2 a) (\b -> map (\c -> seq a ([]::[] Bool)) (seq b a)))) (case1 (\b -> (undefined::([] Bool) -> Bool -> [] Int)) (seq a (undefined::Bool -> [] Int)) (undefined::[] Bool) ((\b -> seq b (seq a True)) (\b -> (undefined::[] (Bool -> Bool)))))
\a -> seq a (\b -> map (\c -> seq c 2) (id ((undefined::Int -> [] (([] ([] Int)) -> [] Int)) (undefined::Int)))) ((undefined::([] Bool) -> ([] (([] ([] Int)) -> [] Bool)) -> Int -> Int -> Bool) (seq a (\b -> id ([]::[] Bool)) (seq a (\b -> seq b (seq b True)))))
(undefined::(([] Int) -> ([] ([] Int)) -> [] Bool) -> ([] Int) -> [] Int) (\a -> seq a ((\b -> (\c -> seq a (\d -> seq c ([]::[] Bool))) (seq a (seq a (seq b (undefined::Int -> Int))))) (seq a (\b -> \c -> seq a (undefined::[] ([] Bool))) (\b -> odd b))))
(undefined::([] Int) -> [] Int)
\a -> (undefined::Int -> [] Int) (seq a head (tail a))
(\a -> seq a ((\b -> \c -> filter (seq b (\d -> True)) (seq c (undefined::[] Int))) ((\b -> seq b (\c -> \d -> b)) (seq a (seq a (seq a ([]::[] Int))))))) (\a -> seq a (seq a (seq a ((\b -> seq b (seq a (undefined::([] Bool) -> [] ([] (Int -> Int)))) ([]::[] Bool)) (undefined::Bool)))))
(undefined::(([] ([] Int)) -> [] ([] ([] Int))) -> ([] Int) -> [] Int) ((\a -> seq a (\b -> seq a (\c -> seq c ([]::[] ([] ([] Int)))) (seq b (seq a ([]::[] ([] Bool)))))) ((\a -> seq a (seq a (seq a ([]::[] ([] Int))))) (id True)))
\a -> (undefined::([] (([] (([] Int) -> [] (([] Int) -> Bool))) -> [] (([] Int) -> [] ([] Int)))) -> [] Int) (tail (seq a (seq a (seq a (undefined::[] (([] (([] Int) -> [] (([] Int) -> Bool))) -> [] (([] Int) -> [] ([] Int))))))))
(undefined::(Int -> [] Int) -> ([] Int) -> [] Int) (head ((\a -> map (\b -> seq a (undefined::Int -> [] Int)) (seq a ([]::[] Bool))) 0))
\a -> tail (take (undefined::Int) (filter (\b -> (undefined::(Int -> Bool -> Bool) -> Bool) ((!!) ([]::[] (Bool -> Bool)))) ((\b -> seq b a) (head ([]::[] (([] ([] Int)) -> [] Int))))))
\a -> (undefined::((Int -> Int -> Int) -> Int) -> [] Int) ((\b -> \c -> seq a (c (seq a (seq b 2)) (c 2 1))) ((undefined::([] ([] Bool)) -> [] (([] Bool) -> [] Bool)) ([]::[] ([] Bool))))
\a -> seq a (seq a ((\b -> seq b (undefined::(([] Int) -> Int -> Bool) -> [] Int)) (seq a (\b -> (undefined::Int -> Bool)) (((==)::[Int] -> [Int] -> Bool) a a)) (seq a (\b -> b) ((!!) (head ([]::[] ([] (([] Int) -> Int -> Bool)))) ((+1) 0)))))
\a -> a
(\a -> (undefined::((([] ([] ([] Int))) -> [] ([] Bool)) -> Int) -> ([] Int) -> [] Int) (\b -> seq b (seq a (\c -> (undefined::Int))) (seq b (seq a (seq a (undefined::Bool)))))) ((\a -> \b -> map (((==)::Int -> Int -> Bool) (seq b (seq b a)))) ((\a -> seq a (undefined::Int)) (undefined::([] Int) -> [] Bool)))
(undefined::(Int -> Int -> [] Int) -> ([] Int) -> [] Int) ((\a -> seq a (undefined::Int -> Int -> [] Int)) (\a -> seq a (\b -> tail ([]::[] Bool)) False))
case1 (\a -> (undefined::Bool -> ([] Int) -> ([] Int) -> [] Int) (undefined::Bool)) (\a -> a) ((\a -> (\b -> seq b ([]::[] Int)) (seq a (seq a (undefined::Int)))) (id not (undefined::Bool)))
case1 take ((\a -> seq a ((undefined::Int -> [] Int) (seq a (seq a 2)))) (\a -> (!!) ((\b -> seq b ([]::[] (Int -> Int))) (seq a (seq a 2)))))
case1 (\a -> (undefined::([] Int) -> Bool -> ([] Int) -> [] Int)) (head (id (undefined::[] (Bool -> ([] Int) -> [] Int)))) (id (undefined::Int -> [] Int) ((+1) (undefined::Int))) ((\a -> \b -> seq a (seq a False)) 1 ((\a -> seq a (seq a (seq a (undefined::[] ([] (Int -> Bool)))))) (head (undefined::[] (([] Int) -> Bool)))))
\a -> a
(\a -> seq a (\b -> tail) (seq a (seq a (id ((!!) ([]::[] Int) 2))))) (id (undefined::([] ([] Int)) -> [] ([] (Int -> Bool))))
(undefined::([] Int) -> [] Int)
\a -> a
\a -> a
(\a -> seq a (\b -> \c -> seq a (undefined::[] Int)) ((!!) ([]::[] (([] Int) -> ([] (Bool -> Bool)) -> Bool)) a)) 1
tail
(undefined::([] Int) -> [] Int)
\a -> a
\a -> a
(\a -> (\b -> seq b (\c -> seq c tail)) ((+1) (seq a (undefined::Int))) (seq a (undefined::Int -> Int))) (\a -> seq a True)
\a -> seq a (id (\b -> seq a (undefined::Int -> (Int -> [] Int) -> [] Int) (seq a (seq a (undefined::Int)))) (seq a (seq a (\b -> seq a b) (head ([]::[] Bool)))) (\b -> (undefined::(([] Int) -> ([] Int) -> [] Int) -> [] Int) ((!!) (undefined::[] (([] Int) -> ([] Int) -> [] Int)) (seq a b))))
head ((\a -> seq a (head (seq a (id (seq a ([]::[] (Bool -> [] (([] Int) -> [] Int)))))) (seq a (seq a (seq a odd)) (seq a (seq a 1))))) ((\a -> a) (\a -> seq a False) ((\a -> id a) ((!!) (undefined::[] Int) 1))))
id
tail
tail
(undefined::([] Int) -> [] Int)
(\a -> seq a (undefined::(Int -> Int -> Int) -> ([] Int) -> [] Int)) ((\a -> seq a (seq a (seq a False))) ((:) (undefined::[] Int) (undefined::[] ([] Int)))) ((undefined::([] ([] Int)) -> Int -> Int -> Int) (id (\a -> seq a (undefined::[] ([] Int))) False))
(++) (map ((!!) ((\a -> seq a (seq a (undefined::[] (Int -> Int)))) (undefined::[] Bool)) 2) (map (\a -> seq a ((undefined::([] ([] (Bool -> Bool))) -> Int) (seq a (seq a (undefined::[] ([] (Bool -> Bool))))))) ([]::[] (Int -> Int -> Bool))))
\a -> seq a a
(undefined::(Int -> Int -> Int) -> ([] Int) -> [] Int) (case1 (\a -> \b -> head (seq b ([]::[] (Int -> Int -> Int)))) (id (undefined::([] Bool) -> Int -> Int -> Int) ([]::[] Bool)) ((:) (undefined::Int) (undefined::[] Int)))
\a -> (undefined::[] Int)
(\a -> seq a (\b -> seq a (id (head (tail ([]::[] (Bool -> [] Int))))) (id (undefined::Bool -> Bool) (a (head b))))) (\a -> case1 (undefined::([] ([] Int)) -> ([] ([] ([] Int))) -> Bool) (seq a (id (seq a (undefined::Bool)))) ((\b -> seq b ([]::[] ([] ([] Int)))) a))
(undefined::([] Int) -> [] Int)
(\a -> filter ((\b -> (undefined::(([] Int) -> Int) -> Int -> Bool) (seq b (seq b (seq a (undefined::([] Int) -> Int))))) (undefined::Bool))) ((\a -> \b -> seq b (seq a (undefined::[] (Int -> Bool)))) ((+1) 0) ((undefined::([] Bool) -> Int) (take 0 (undefined::[] Bool))))
\a -> seq a (seq a (undefined::([] (([] (([] Int) -> [] ([] Bool))) -> Bool)) -> [] Int) ([]::[] (([] (([] Int) -> [] ([] Bool))) -> Bool)))
head ([]::[] (((([] Int) -> [] ([] Int)) -> ([] Int) -> [] (Bool -> Bool)) -> ([] Int) -> [] Int)) (id (\a -> map (\b -> \c -> c)))
\a -> map (seq a (head (undefined::[] ((([] Int) -> ([] Int) -> [] ([] Int)) -> Int)))) (seq a (seq a (\b -> tail ([]::[] (([] Int) -> ([] Int) -> [] ([] Int))))) (head (seq a (seq a (seq a (seq a (seq a (undefined::[] Bool))))))))
map ((-) ((undefined::(([] (Int -> Bool)) -> [] Int) -> ([] Int) -> Int) (\a -> id ([]::[] Int)) ((undefined::(([] ([] Int)) -> [] Int) -> [] Int) (\a -> map (\b -> 0) (seq a ([]::[] ([] ([] ([] Bool)))))))))
(\a -> seq a (seq a (seq a (seq a (seq a (\b -> \c -> tail) (seq a a)) ((undefined::Int -> Bool) (undefined::Int)))))) (id (undefined::(([] (([] ([] Int)) -> [] ([] Bool))) -> Bool -> Bool) -> Bool) (\a -> ((==)::Bool -> Bool -> Bool) (seq a (undefined::Bool))))
(:) (case1 (\a -> case1 (seq a (\b -> seq a (undefined::([] Bool) -> Int))) (seq a 0)) (id ((\a -> seq a (undefined::Int)) (undefined::[] (([] Bool) -> [] Bool)))) (id (\a -> id ([]::[] Bool)) (undefined::([] Int) -> [] ([] Bool))))
\a -> (\b -> (++) a (seq b (seq b (\c -> a)) (odd (seq b 1)))) (\b -> seq b (seq b (seq a (seq b (\c -> filter (undefined::([] (Int -> Int)) -> Bool) (seq b (undefined::[] ([] (Int -> Int)))))) (case1 ((!!) (undefined::[] (([] Int) -> Int -> [] Int))) (\c -> a)))))
\a -> a
(:) ((\a -> (undefined::([] Bool) -> Bool -> Int) (a 2) (seq a (undefined::Bool -> Bool) (seq a (even (undefined::Int))))) ((undefined::([] (([] Int) -> Bool)) -> Int -> [] Bool) (undefined::[] (([] Int) -> Bool))))
\a -> a
filter (case1 (\a -> seq a (seq a (seq a (\b -> \c -> odd) ([]::[] Int)))) ((!!) (map (\a -> seq a True) (undefined::[] Int))) ((\a -> (undefined::Int -> [] Int) (seq a 1)) (id (undefined::Bool -> [] ([] Bool)) False)))
(\a -> \b -> (\c -> seq a (seq c (\d -> b))) a (\c -> seq c ((\d -> seq d (seq c (undefined::[] Bool))) (seq a (\d -> seq d (undefined::Int)))))) ((undefined::(([] Int) -> Bool -> Bool) -> Bool) ((undefined::([] ([] Int)) -> ([] Int) -> Bool -> Bool) (take (undefined::Int) ([]::[] ([] Int)))))
(!!) (undefined::[] (([] Int) -> [] Int)) ((undefined::(Bool -> Bool) -> ((Int -> Int) -> Bool) -> Int) (undefined::Bool -> Bool) ((\a -> seq a (undefined::(Int -> Int) -> Bool)) ((!!) (undefined::[] (([] Int) -> Int)) (undefined::Int))))
tail
\a -> seq a (seq a (seq a (seq a (\b -> \c -> a))) (head (head (seq a ([]::[] ([] Bool)))))) ((\b -> seq a (case1 (\c -> (undefined::([] Bool) -> Bool)) (seq b True) (seq a (undefined::[] Bool)))) (\b -> filter (\c -> id False) (seq a ([]::[] (([] Int) -> Bool -> Bool)))))
\a -> (undefined::(Int -> [] Bool) -> (([] Int) -> Int -> Int -> Int) -> [] Int) (\b -> seq b (seq a (case1 (undefined::Int -> ([] Int) -> [] Bool) ([]::[] Bool) (undefined::[] Int)))) (\b -> (\c -> seq c (seq c (\d -> seq c (-)) (seq b (undefined::[] (Bool -> Bool))))) (seq a (seq b (\c -> seq b (\d -> d) (seq c (undefined::[] Int))))))
\a -> a
(undefined::(([] (([] Int) -> Int -> [] Int)) -> ([] Int) -> [] ([] Int)) -> ([] Int) -> [] Int) (head ([]::[] (([] (([] Int) -> Int -> [] Int)) -> ([] Int) -> [] ([] Int))))
(\a -> (undefined::Bool -> (Int -> Int) -> ([] Int) -> [] Int) (a ([]::[] ([] Int)))) (\a -> case1 (\b -> (undefined::([] ([] Int)) -> Bool)) (seq a (undefined::Bool)) (seq a ([]::[] ([] Int)))) (\a -> seq a (seq a (seq a a)))
(undefined::([] Int) -> [] Int)
(\a -> (!!) ([]::[] (Int -> ([] Int) -> [] Int)) (seq a (seq a (seq a 0)))) ((\a -> head (seq a ([]::[] ([] ([] ([] Bool)))))) ((!!) (undefined::[] Int))) ((\a -> head (undefined::[] (Bool -> Int)) (seq a True)) (\a -> a))
\a -> a
(undefined::([] Int) -> [] Int)
(\a -> seq a (\b -> ([]::[] Int))) head
(undefined::Bool -> (([] Int) -> [] ([] Bool)) -> ([] Int) -> [] Int) (head (undefined::[] ((([] ([] Int)) -> [] Int) -> Bool)) (\a -> seq a (seq a (undefined::[] Int)))) ((\a -> (!!) (seq a (seq a (undefined::[] (([] Int) -> [] ([] Bool))))) (seq a (seq a 0))) ((!!) (undefined::[] ([] (([] (Int -> Bool)) -> Int -> Bool))) 2))
(\a -> id (seq a (\b -> seq b take) (odd 1))) ((:) (\a -> not True) (head (undefined::[] ([] (([] Int) -> Bool))))) ((\a -> (\b -> b) (seq a (head ([]::[] Int)))) (tail (undefined::[] (([] ([] (Bool -> Bool))) -> ([] Int) -> [] (Int -> Int)))))
\a -> (undefined::((([] Int) -> [] (Int -> ([] Int) -> Int)) -> Int) -> [] Int) (\b -> seq a 1)
\a -> a
(\a -> seq a (\b -> (\c -> \d -> seq c d) (seq b (seq a (seq a ([]::[] ([] (Int -> Int))))))) ((undefined::Int -> [] (([] ([] (Int -> Bool))) -> [] Bool)) (a (seq a (!!))))) ((\a -> seq a (undefined::Int -> (([] Int) -> Int -> Int) -> Int) a) ((\a -> seq a a) (undefined::Int)))
\a -> a
head (head ([]::[] ((([] Int) -> ([] (([] Int) -> Int -> Bool)) -> Int -> Int) -> [] (([] Int) -> [] Int))) (\a -> seq a (seq a (\b -> seq a (\c -> (\d -> seq d (\e -> (undefined::Int))) c ((!!) (undefined::[] (Int -> Int -> Int)) 1))))))
(\a -> (\b -> \c -> (\d -> seq a (seq d c)) (seq c (seq b (undefined::[] Bool)))) (case1 (\b -> \c -> (undefined::Bool)) (seq a True) (seq a ([]::[] Int)))) ((\a -> seq a (seq a (\b -> seq b (undefined::[] (Int -> Int))) (undefined::Int -> Int -> Bool))) ((\a -> a) (((==)::[Int] -> [Int] -> Bool) ([]::[] Int) ([]::[] Int))))
\a -> ([]::[] Int)
\a -> a
(\a -> seq a (\b -> map (\c -> (undefined::Int)) (tail ((undefined::Int -> [] Bool) 1)))) (\a -> seq a (seq a (\b -> seq a ((\c -> seq c (undefined::[] Bool)) 2)) (seq a (seq a (not (seq a (not (undefined::Bool))))))))
(\a -> (\b -> \c -> seq b (seq b (seq b (id (tail c))))) ((undefined::([] ([] Bool)) -> ([] Int) -> [] Bool) (seq a (seq a (seq a ([]::[] ([] Bool))))))) ((undefined::(([] Int) -> [] (Int -> Bool)) -> Bool) ((undefined::Bool -> ([] Int) -> [] (Int -> Bool)) (odd (undefined::Int))))
(undefined::([] (Int -> Bool)) -> Int -> ([] Int) -> [] Int) (case1 (\a -> seq a (undefined::([] Bool) -> [] (Int -> Bool))) ([]::[] (Int -> Bool)) ([]::[] Bool)) ((\a -> (+1) a) (head (undefined::[] (([] ([] Bool)) -> Int)) ([]::[] ([] Bool))))
\a -> head (tail (undefined::[] (([] (Bool -> Bool)) -> ([] ([] Int)) -> [] Int))) ((\b -> seq a (seq b (seq b (undefined::[] (Bool -> Bool))))) a) (tail ((\b -> seq a (seq b (head (seq b (seq b ([]::[] ([] ([] Int)))))))) (head (seq a (undefined::[] (([] Int) -> ([] ([] ([] Int))) -> [] ([] Bool)))))))
(\a -> seq a (\b -> \c -> \d -> seq a (undefined::[] Int)) a) (id (\a -> (undefined::Int)) ((++) ([]::[] Int) ([]::[] Int))) (((==)::Int -> Int -> Bool) ((\a -> seq a 0) ([]::[] ([] Bool))) ((\a -> seq a (seq a 0)) (tail ([]::[] ([] (Int -> Bool))))))
\a -> (undefined::(([] (([] Int) -> [] ([] Int))) -> [] (Int -> Int)) -> [] Int) ((!!) (tail (undefined::[] (([] (([] Int) -> [] ([] Int))) -> [] (Int -> Int)))) ((!!) a (seq a (seq a (undefined::Int)))))
\a -> head (undefined::[] ((([] (Int -> ([] ([] Int)) -> [] Int)) -> Int -> ([] ([] Int)) -> [] Int) -> [] Int)) (seq a head)
(undefined::Bool -> ([] Int) -> [] Int) ((\a -> seq a (case1 (\b -> (undefined::([] Bool) -> Bool)) False (seq a ([]::[] Bool)))) (undefined::Bool))
(\a -> seq a (case1 (\b -> \c -> \d -> d) (seq a id) (seq a (undefined::Int -> [] Bool) (undefined::Int)))) (\a -> seq a (seq a (\b -> (undefined::[] (Int -> [] (([] Bool) -> [] Bool))))) (seq a (\b -> seq b (seq b 2)) (seq a (seq a (seq a (undefined::Int))))))
\a -> (\b -> id (head (seq b (tail (undefined::[] ((Int -> Int -> Int) -> [] Int))))) (seq a (seq a (\c -> \d -> (+1))) (seq b ([]::[] ([] Bool))))) (seq a (\b -> \c -> seq a (id (seq c (\d -> seq a (seq c b)))) (\d -> seq c (\e -> seq c (\f -> ([]::[] Bool)) (\f -> \g -> (undefined::Bool))))))
(\a -> seq a (\b -> (:) (seq a (undefined::Int -> Int) (seq b 2)))) ((\a -> seq a (seq a (seq a True))) (id (undefined::[] (([] (Int -> Int)) -> [] Bool)))) (undefined::[] ([] Bool))
\a -> seq a a
(undefined::(([] ([] Bool)) -> [] (Int -> Bool)) -> ([] Int) -> [] Int) (\a -> (\b -> seq a (seq b (seq b ((\c -> seq c (undefined::[] (Int -> Bool))) (seq b (\c -> (undefined::Bool))))))) (seq a ([]::[] (([] Bool) -> [] Bool))))
(\a -> \b -> (!!) ([]::[] (([] Int) -> [] Int)) (seq a (seq a a))) ((\a -> seq a 2) ((!!) ([]::[] Bool) 1)) ((!!) ((undefined::(Int -> [] Int) -> [] (([] Bool) -> [] Bool)) ((enumFromTo'::Int -> Int -> [Int]) (undefined::Int))) ((undefined::([] (Bool -> Bool -> Bool)) -> Int) ([]::[] (Bool -> Bool -> Bool))))
id
\a -> (!!) (seq a (seq a ((undefined::Int -> [] (Int -> [] Int)) (id 1)))) (seq a (+1) (seq a ((+1) (undefined::Int)))) (seq a (seq a ((+) (seq a (\b -> seq a (undefined::Int)) (+1)) (seq a (undefined::Int)))))
(\a -> seq a (\b -> \c -> c)) ((\a -> seq a (undefined::Int)) ((++) (undefined::[] Bool))) (id (undefined::(([] Bool) -> [] Bool) -> Int -> Bool) tail)
(\a -> seq a (\b -> \c -> c) ([]::[] (Int -> Bool))) (\a -> (undefined::[] (Int -> Int)))
(\a -> (!!) (seq a (seq a (seq a (undefined::Int -> [] (([] Int) -> [] Int)))) (seq a (seq a (seq a (undefined::Int))))) ((undefined::(Int -> Int -> [] Int) -> Int) (\b -> seq b (\c -> seq c (undefined::[] Int))))) (id (\a -> seq a ((undefined::Bool -> [] (Int -> Bool)) (((==)::Int -> Int -> Bool) (seq a (seq a 1)) (seq a 2)))))
head ([]::[] (([] (Int -> Int)) -> ([] Int) -> [] Int)) (tail ((\a -> seq a (undefined::([] (Int -> [] Int)) -> [] (Int -> Int)) (seq a (seq a ([]::[] (Int -> [] Int))))) ((!!) (undefined::[] Int) ((+1) (undefined::Int)))))
(undefined::(([] Int) -> [] (Int -> Int)) -> ([] Int) -> [] Int) (\a -> seq a ((\b -> \c -> seq b (seq b (undefined::[] (Int -> Int)))) (seq a (seq a (seq a (undefined::[] Bool)))) (seq a (seq a (seq a (undefined::Bool -> [] Int))) True)))
\a -> id (seq a (id (seq a (seq a (\b -> \c -> seq a (seq b a))) (seq a (\b -> \c -> (undefined::Int)) (tail a))))) (\b -> (\c -> seq a ((undefined::([] Bool) -> Int) (seq c ([]::[] Bool)))) (seq b (\c -> (undefined::([] Int) -> [] Int))))
id
\a -> a
(undefined::([] Int) -> [] Int)
(undefined::([] Int) -> [] Int)
\a -> (!!) ([]::[] (([] (([] Int) -> [] Int)) -> [] Int)) ((\b -> b) (seq a (seq a (seq a 2)))) (head ([]::[] ([] (([] Int) -> [] Int))))
(\a -> (\b -> \c -> seq b (\d -> seq c b)) (undefined::[] Int) (seq a ((undefined::Bool -> Int) a))) False
\a -> (undefined::[] Int)
(:) 1
(\a -> seq a (undefined::Bool -> ([] Int) -> [] Int) (case1 (\b -> head) (seq a True) (seq a (undefined::[] Bool)))) (\a -> seq a (head (seq a (seq a (id ([]::[] (([] Bool) -> [] (([] Int) -> Bool)))))) (undefined::[] Bool)))
case1 ((\a -> seq a (seq a (\b -> (undefined::Int -> ([] Int) -> [] Int))) (undefined::Int)) (undefined::([] ([] ([] Int))) -> [] Bool)) ((\a -> take (id 1) (seq a ([]::[] Int))) (!!))
\a -> seq a (seq a (undefined::([] (([] Int) -> ([] Int) -> Bool)) -> Int -> [] Int) (seq a (seq a (\b -> ([]::[] (([] Int) -> ([] Int) -> Bool))) (seq a 0))) (seq a (id ((undefined::Bool -> Int) (seq a ((undefined::Int -> Bool) (head a)))))))
tail
(\a -> head ((undefined::(([] Int) -> [] Int) -> [] (([] Int) -> [] Int)) (seq a ((undefined::Bool -> ([] Int) -> [] Int) (a (seq a (undefined::[] ([] (([] Int) -> [] Int))))))))) (head (tail (undefined::[] (Int -> ([] ([] (([] Int) -> [] Int))) -> Bool))) ((\a -> id (seq a (undefined::Int))) ([]::[] Int)))
case1 ((\a -> seq a (\b -> \c -> seq c (\d -> d))) True) (\a -> (\b -> (\c -> seq c a) (seq b (undefined::Int))) (seq a (\b -> head) (seq a (seq a 0)))) ((\a -> \b -> seq a (undefined::[] Bool)) 2 (head (tail (undefined::[] (Bool -> Bool)))))
\a -> seq a a
(\a -> seq a ((undefined::Bool -> ([] Int) -> [] Int) (id ((\b -> seq b (seq b (undefined::Bool))) (seq a ([]::[] Int)))))) ([]::[] (([] ([] ([] (([] Bool) -> [] Bool)))) -> [] ([] ([] (([] Bool) -> [] Bool)))))
take ((\a -> \b -> (\c -> seq c (seq c 0)) a) ((\a -> a (a (seq a (undefined::Bool)))) (\a -> a)) (head (undefined::[] ((([] ([] Int)) -> [] (([] Int) -> Bool)) -> Bool)) (\a -> seq a (\b -> seq b (undefined::[] (([] Int) -> Bool))) (seq a (seq a head)))))
(\a -> seq a (\b -> (undefined::[] Int))) (\a -> (++) (map (\b -> seq a (\c -> c) (id False)) (seq a (undefined::[] (([] ([] (([] ([] Bool)) -> [] ([] Bool)))) -> Bool)))))
\a -> a
case1 (case1 (\a -> (undefined::([] Bool) -> Int -> ([] Int) -> [] Int)) ((!!) ([]::[] (Int -> ([] Int) -> [] Int)) (undefined::Int)) (undefined::[] Bool)) ((\a -> seq a (\b -> seq a (undefined::[] Int)) (\b -> \c -> c)) ((\a -> seq a (take a)) ((+1) (undefined::Int))))
\a -> map (seq a (head (seq a (undefined::[] (Bool -> Bool -> Bool -> Int))) (seq a (undefined::Bool)) ((!!) (head (undefined::[] ([] Bool))) (undefined::Int)))) (seq a (seq a (seq a (seq a (seq a (undefined::Bool -> Int -> [] Bool)) (undefined::Bool)))) (seq a (\b -> (undefined::Int)) (\b -> (undefined::Bool))))
(\a -> (:) (seq a ((!!) (id (undefined::[] ((([] Int) -> Int) -> Int))) (undefined::Int) (\b -> id (id ((+1) (undefined::Int))))))) (\a -> seq a ((:) (case1 (undefined::Int -> ([] Int) -> Bool) (seq a (undefined::Bool)) (seq a (undefined::[] Int))) (seq a (id (undefined::([] (Int -> [] Int)) -> [] Bool)) (id ([]::[] (Int -> [] Int))))))
take ((!!) (id (\a -> ([]::[] ((Int -> [] Int) -> Int))) (undefined::Int)) (id (\a -> 0) ([]::[] Bool)) (head (map (undefined::Bool -> Bool -> Int -> [] Int) ([]::[] Bool)) (not ((undefined::(([] Int) -> Int) -> Bool) (\a -> 1)))))
id
(\a -> (++) ((\b -> \c -> seq c b) (seq a (seq a (seq a ([]::[] Int)))) (a (seq a (seq a (seq a ([]::[] Int))))))) (\a -> (undefined::([] Int) -> [] Bool))
\a -> a
take ((-) (id (undefined::(([] Int) -> ([] Int) -> Int) -> Int) ((undefined::Int -> ([] Int) -> ([] Int) -> Int) 0)) ((\a -> seq a (head ([]::[] (([] (Int -> Bool)) -> Int)) (seq a (seq a ([]::[] (Int -> Bool)))))) (case1 (\a -> (undefined::([] Int) -> [] ([] Int))) (id ([]::[] ([] Int))))))
\a -> a
\a -> a
(undefined::([] Int) -> [] Int)
\a -> a
(\a -> seq a (\b -> (!!) ([]::[] ((([] ([] Int)) -> [] Bool) -> [] Int)) (undefined::Int) (\c -> (undefined::Bool -> [] Bool) (undefined::Bool)))) (\a -> map (\b -> \c -> (\d -> \e -> d) (undefined::[] Bool)) ((\b -> seq b (seq b (undefined::[] Bool))) (undefined::Bool)))
\a -> (undefined::[] Int)
(undefined::([] Int) -> [] Int)
\a -> a
\a -> seq a ((\b -> (enumFromTo::Int -> Int -> [Int]) (seq b (seq a (\c -> 2) (seq b 2))) ((+) (undefined::Int) (seq b (undefined::Int)))) (seq a (\b -> (:) (seq b (seq b (take 0 ([]::[] (([] Int) -> Int -> [] Int))))) (tail (undefined::[] ([] (([] Int) -> Int -> [] Int)))))))
\a -> a
\a -> seq a (seq a a)
id (\a -> (undefined::(([] ([] Int)) -> [] ([] Bool)) -> ([] Int) -> [] Int) (seq a ((undefined::Int -> ([] ([] Int)) -> [] ([] Bool)) (seq a (undefined::Int))))) (id (\a -> \b -> case1 (seq b ((undefined::Int -> Int -> ([] Int) -> Bool -> Bool) 1)) ((\c -> seq b (seq c id)) (id ([]::[] (Int -> [] Int))))))
filter ((!!) ([]::[] (Int -> Int -> Bool)) (id (id (+1) (undefined::Int))) ((\a -> seq a (case1 (undefined::Int -> ([] Int) -> Int) 2 (undefined::[] Int))) ([]::[] (([] (Int -> Int -> Int)) -> [] ([] ([] Int))))))
\a -> seq a a
case1 (\a -> \b -> \c -> \d -> seq a (seq c ([]::[] Int))) (\a -> \b -> b) ((\a -> seq a ([]::[] Int)) (undefined::Int -> Bool)) (undefined::Bool)
(undefined::(([] ([] Bool)) -> [] ([] Bool)) -> ([] Int) -> [] Int) (\a -> a)
case1 (\a -> (++)) ((undefined::([] ([] Bool)) -> ([] Int) -> [] Int) ((\a -> seq a (undefined::[] ([] Bool))) (head ([]::[] ([] ([] (Int -> Int))))))) ((!!) ((:) (undefined::[] Int) (undefined::[] ([] Int))) 1)
(\a -> \b -> (\c -> seq c (seq c (seq c (seq c b)))) (seq a (seq a (\c -> seq b 1)) (head (seq b ([]::[] ([] Int)))))) (\a -> (undefined::Int -> [] (([] ([] Int)) -> [] Int)) (seq a (id (undefined::(Int -> [] Bool) -> Int)) (\b -> seq a (seq a (undefined::[] Bool)))))
\a -> seq a a
(\a -> \b -> \c -> (!!) (seq b (seq c (undefined::[] ([] Int)))) a) 0 (id ((undefined::Bool -> (([] ([] Int)) -> [] Bool) -> Bool) (undefined::Bool)) (\a -> (undefined::[] Bool)))
\a -> ([]::[] Int)
id
\a -> a
(undefined::([] Int) -> [] Int)
(undefined::([] Int) -> [] Int)
head (head (id (id ([]::[] ([] ((([] ([] Int)) -> [] ([] (Int -> Int))) -> ([] Int) -> [] Int)))))) (map ((\a -> seq a (\b -> seq a (\c -> (undefined::[] (Int -> Int))) (seq a (seq b ([]::[] ([] Int)))))) (\a -> seq a (\b -> ([]::[] ([] Bool))) (seq a (seq a (seq a (undefined::[] ([] (Bool -> Bool)))))))))
\a -> (\b -> seq a (seq a (seq a (seq b (\c -> a))) (\c -> (undefined::(([] Bool) -> [] ([] Bool)) -> [] (Bool -> Bool)) (seq a (\d -> seq a ([]::[] ([] Bool))))))) (seq a (map (\b -> seq b (seq b (\c -> seq b (seq b (seq c False))))) (map (seq a (undefined::Bool -> [] ([] Bool))) (seq a (undefined::[] Bool)))))
(undefined::([] Int) -> [] Int)
(\a -> seq a (\b -> seq a (\c -> (++) (seq a ([]::[] Int)) (undefined::[] Int)))) (undefined::Int) (id (\a -> (\b -> seq b (undefined::Bool -> Int -> Int -> [] Int)) (seq a (seq a (undefined::Int)))) ((\a -> seq a (seq a (\b -> b))) (filter (undefined::([] ([] (Bool -> Bool))) -> Bool) ([]::[] ([] ([] (Bool -> Bool)))))))
(:) ((\a -> seq a (id (undefined::(([] Int) -> Int) -> Bool -> Int))) ((!!) ([]::[] Int) 2) ((undefined::Bool -> ([] Int) -> Int) (id False)) (not ((\a -> seq a (\b -> seq b (undefined::Bool)) ([]::[] Int)) (\a -> seq a (seq a (seq a (seq a ((+1) (undefined::Int)))))))))
(\a -> seq a (undefined::([] Int) -> [] Int)) ((&&) ((undefined::([] Bool) -> Bool) (head (undefined::[] ([] Bool)))) (case1 (\a -> (undefined::([] ([] Bool)) -> Bool)) False ([]::[] ([] Bool))))
id
case1 (undefined::(([] Int) -> [] Int) -> ([] (([] Int) -> [] Int)) -> ([] Int) -> [] Int) (case1 (\a -> \b -> tail (seq b ([]::[] Int))) ((\a -> seq a (undefined::[] Int)) ([]::[] ([] ([] Int))))) ([]::[] (([] Int) -> [] Int))
(\a -> seq a (\b -> map (\c -> b)) (seq a ((\b -> seq b (seq b 2)) (\b -> tail (undefined::[] (Int -> Int)))))) ((undefined::([] (Int -> Bool)) -> ([] Int) -> Bool -> Bool) ((\a -> seq a (seq a (seq a ([]::[] (Int -> Bool))))) (\a -> seq a (id ([]::[] Bool)))))
\a -> seq a ((\b -> b (seq a (\c -> ([]::[] ([] Int))) (\c -> id ([]::[] Int))) (case1 (seq b (undefined::Bool -> ([] Bool) -> [] ([] Int))) (seq b ([]::[] ([] Int))) (seq b ([]::[] Bool)))) (\b -> \c -> a))
(\a -> seq a (case1 (seq a (\b -> seq b (undefined::([] Bool) -> ([] Int) -> [] Int))) (\b -> b) (a (seq a ([]::[] (Int -> [] Bool))) 1))) ((\a -> \b -> (!!) (seq b (seq a ([]::[] ([] Bool))))) ((\a -> seq a (seq a a)) ((!!) (undefined::[] Int) (undefined::Int))))
\a -> (undefined::Bool -> [] Int) ((\b -> b) ((\b -> seq b (head (undefined::[] Bool))) ((+1) (undefined::Int))))
\a -> case1 (\b -> seq a (undefined::([] ([] (([] Int) -> Bool))) -> [] Int)) (seq a (\b -> seq a (seq b (seq b a))) ((undefined::Int -> [] (([] ([] Int)) -> [] ([] Int))) (seq a (seq a 1)))) ((undefined::(Int -> Bool) -> [] ([] (([] Int) -> Bool))) ((undefined::Bool -> Int -> Bool) (seq a (undefined::Bool))))
(undefined::Bool -> ([] Int) -> [] Int) (undefined::Bool)
\a -> a
(undefined::(([] (([] Int) -> Int -> Int -> Int)) -> ([] Int) -> Bool) -> ([] Int) -> [] Int) ((undefined::Int -> ([] (([] Int) -> Int -> Int -> Int)) -> ([] Int) -> Bool) ((undefined::([] Int) -> Int) (tail (undefined::[] Int))))
id (\a -> seq a ((\b -> seq b (\c -> seq b tail) 1) (\b -> (undefined::Int -> [] Bool) 2))) ((++) (id (undefined::[] (([] ([] (([] Int) -> [] Int))) -> Int -> [] Int))) ([]::[] (([] ([] (([] Int) -> [] Int))) -> Int -> [] Int)))
(:) ((\a -> (+) ((+) (seq a (seq a (undefined::Int))) (seq a (seq a 0))) (seq a (\b -> b) (seq a (seq a (undefined::Int))))) ([]::[] (Bool -> Bool)))
\a -> case1 (\b -> seq a (seq b (seq b (seq b (\c -> a))))) (seq a a) (id (\b -> seq b (seq b ([]::[] ([] (([] Int) -> [] Int))))) (seq a (seq a id) (head a)))
\a -> a
\a -> seq a (undefined::(([] ([] ([] Bool))) -> [] ([] Bool)) -> (Int -> Int) -> [] Int) ((!!) ([]::[] (([] ([] ([] Bool))) -> [] ([] Bool))) (seq a (seq a 2))) (seq a ((\b -> (!!) (seq b (undefined::[] (Int -> Int))) ((+1) (seq a (undefined::Int)))) ((undefined::([] ([] Int)) -> [] ([] ([] (Int -> Bool)))) (seq a (seq a (seq a ([]::[] ([] Int))))))))
id (\a -> take (seq a (\b -> (undefined::Int)) a)) (head (head (id ((\a -> seq a (seq a (undefined::Bool -> [] ([] Int))) (seq a (seq a False))) (\a -> seq a (\b -> (undefined::[] (Bool -> Bool))) (seq a a))))))
case1 (\a -> head (seq a ((undefined::Int -> [] (([] Bool) -> ([] Int) -> [] Int)) (seq a (seq a (seq a 2)))))) ((\a -> case1 (\b -> id) (seq a ([]::[] Int))) (((==)::Int -> Int -> Bool) 0 (undefined::Int))) ([]::[] Bool)
\a -> (\b -> (undefined::(([] Int) -> Bool) -> [] Int) (seq b (undefined::([] Int) -> Bool))) (\b -> (undefined::(([] ([] Bool)) -> [] Bool) -> Int -> Bool) ((\c -> seq b (seq c (\d -> c))) (seq a (seq a (seq b ([]::[] Bool))))))
(undefined::([] ([] Bool)) -> ([] Int) -> [] Int) (case1 (undefined::Bool -> ([] Bool) -> [] ([] Bool)) ((\a -> seq a ([]::[] ([] Bool))) ((+1) 1)) (take (undefined::Int) ([]::[] Bool)))
\a -> a
(!!) ((\a -> seq a (seq a (\b -> (undefined::[] (([] Int) -> [] Int))))) (undefined::Int) ((undefined::([] ([] ([] (Int -> [] Int)))) -> [] Int) ([]::[] ([] ([] (Int -> [] Int)))))) (case1 (undefined::Bool -> ([] Bool) -> Int) ((\a -> seq a a) 2) ((\a -> seq a (undefined::[] Bool)) ([]::[] Int)))
id (\a -> seq a (\b -> seq b b)) ((\a -> seq a (seq a (id id (head ([]::[] Bool))))) (map (\a -> seq a (undefined::[] (Int -> Int -> [] Int))) ([]::[] ([] Bool))))
\a -> a
head ([]::[] ((Int -> Int) -> ([] Int) -> [] Int)) (\a -> a)
\a -> id (seq a (seq a (\b -> (undefined::Int -> Int -> [] Int))) (seq a (seq a (seq a 0))) (seq a (seq a (head (seq a (seq a (seq a a))))))) (undefined::Int)
\a -> (undefined::[] Int)
(!!) (map (\a -> \b -> tail) (undefined::[] Int)) ((\a -> seq a (head (undefined::[] Int))) ((++) (undefined::[] ([] (([] Int) -> [] Int))) (undefined::[] ([] (([] Int) -> [] Int))))) ((undefined::Bool -> ([] ([] (([] Int) -> [] Int))) -> Bool) (undefined::Bool) ((!!) ([]::[] ([] ([] (([] Int) -> [] Int)))) (undefined::Int)))
\a -> seq a (seq a (filter even a))
(!!) (tail (undefined::[] ((([] Int) -> Int) -> ([] Int) -> [] Int))) 1 (\a -> (+) 1 (seq a (head ([]::[] (Int -> Int)) (head a))))
tail
\a -> a
\a -> (undefined::([] (([] Bool) -> [] Bool)) -> [] Int) (head (map (\b -> seq a (seq b (tail (undefined::[] (([] Bool) -> [] Bool))))) (seq a ([]::[] ([] (([] Bool) -> Bool))))))
\a -> ([]::[] Int)
filter (\a -> seq a (seq a ((\b -> \c -> seq c (seq a (\d -> d) b)) (case1 (\b -> (undefined::([] Bool) -> Bool)) (undefined::Bool) ([]::[] Bool)))) (seq a (seq a (\b -> (\c -> \d -> \e -> c) (even a))) (seq a ((!!) (undefined::[] ([] ([] Bool))) (seq a 2)))))
(\a -> seq a (seq a (\b -> \c -> ([]::[] Int)) (case1 (seq a (\b -> \c -> odd)) (\b -> (undefined::Bool))))) ((undefined::Int -> ([] Int) -> ([] (([] Int) -> ([] Int) -> [] Bool)) -> Bool) ((\a -> seq a (seq a (seq a (undefined::Int)))) (case1 (undefined::Int -> ([] Int) -> Bool -> Bool) not)))
\a -> seq a a
\a -> a
(undefined::Int -> ([] Int) -> [] Int) ((\a -> (undefined::Int -> Int) (seq a (undefined::Int))) (\a -> \b -> case1 (\c -> (undefined::([] ([] Int)) -> [] Int)) ([]::[] Int) ([]::[] ([] Int))))
(undefined::([] Int) -> [] Int)
\a -> a
\a -> seq a (seq a (\b -> a)) False
\a -> a
case1 (\a -> head (seq a ((undefined::Int -> [] (([] Bool) -> ([] Int) -> [] Int)) (seq a ((+1) (undefined::Int)))))) (\a -> seq a (seq a (\b -> a)) (seq a (seq a (undefined::([] Int) -> Bool)))) ((\a -> (undefined::Int -> [] Bool) (seq a (seq a 1))) ((\a -> \b -> seq a (undefined::[] (Int -> Int))) True))
id
\a -> ([]::[] Int)
\a -> take ((+) (seq a (\b -> (undefined::Int)) (seq a (seq a (seq a ([]::[] Bool))))) 2) a
\a -> a
id
\a -> seq a (map (undefined::(Bool -> [] (([] (Int -> [] Int)) -> [] (Int -> [] Int))) -> Int) (seq a (seq a (seq a (seq a (seq a (tail (seq a (undefined::[] (Bool -> [] (([] (Int -> [] Int)) -> [] (Int -> [] Int))))))))))))
\a -> case1 (\b -> (undefined::([] Int) -> [] Int)) (seq a (\b -> ([]::[] Int)) (odd (seq a (seq a (undefined::Int))))) a
take (undefined::Int)
(\a -> (undefined::(([] ([] Int)) -> [] ([] Bool)) -> ([] Int) -> [] Int) (\b -> (\c -> seq c (seq b (seq a ([]::[] ([] Bool))))) 0)) ((\a -> \b -> (\c -> \d -> c a) (\c -> a)) False)
take ((+1) (id ((+) ((\a -> seq a 1) (undefined::Int)) ((\a -> seq a 2) (id ([]::[] (Int -> Bool)))))))
\a -> (undefined::[] Int)
(undefined::([] Int) -> [] Int)
(\a -> case1 (seq a (seq a (head (tail (seq a ([]::[] (Int -> ([] Int) -> [] Int))))))) ((\b -> seq a (seq b (undefined::[] Int))) (id a))) ((+) ((\a -> seq a (seq a 1)) (\a -> seq a (undefined::Bool))) ((\a -> seq a (seq a 0)) False))
head ([]::[] ((Bool -> Bool -> Bool) -> ([] Int) -> [] Int)) ((\a -> seq a (head ([]::[] (Bool -> Bool -> Bool -> Bool)))) (head (undefined::[] ([] ([] Int)))) ((\a -> not (seq a (undefined::Bool))) ((:) ([]::[] (Int -> Int -> Int)) (undefined::[] ([] (Int -> Int -> Int))))))
(++) (map (undefined::(([] ([] ([] Bool))) -> [] ([] ([] Bool))) -> Int) (id (\a -> seq a (seq a ([]::[] (([] ([] ([] Bool))) -> [] ([] ([] Bool)))))) ((!!) ([]::[] Bool) (head (undefined::[] Int)))))
\a -> a
\a -> head (seq a ((undefined::(Int -> Int -> Bool -> Bool) -> [] ([] Int)) (\b -> \c -> \d -> d)))
\a -> a
(\a -> case1 (\b -> \c -> \d -> (undefined::[] Int)) (seq a (\b -> seq a b)) (a (undefined::[] (([] ([] Int)) -> [] Bool)) (seq a 1))) ((\a -> seq a (\b -> (\c -> seq c (\d -> ([]::[] Int))) (seq b (seq a (undefined::[] Bool))))) ((+1) (head ([]::[] Int))))
(undefined::(Int -> Bool) -> ([] Int) -> [] Int) (\a -> seq a (seq a ((\b -> \c -> seq a b) (seq a (seq a (seq a (undefined::Bool)))) (seq a (undefined::[] Int)))))
(!!) (id ((undefined::(([] Int) -> Int -> Int) -> [] (([] Int) -> [] Int)) (\a -> head (undefined::[] (([] Bool) -> Int -> Int)) (seq a (seq a ([]::[] Bool)))))) ((+) ((\a -> seq a (seq a (undefined::Int))) (undefined::Bool)) ((\a -> seq a (seq a 2)) (id (undefined::[] (Int -> [] Int)))))
\a -> ([]::[] Int)
tail
(\a -> filter (id (undefined::([] Bool) -> Bool -> Int -> Bool) (seq a (seq a (seq a ([]::[] Bool)))) (((==)::Int -> Int -> Bool) (undefined::Int) ((+1) (undefined::Int))))) (\a -> \b -> (\c -> case1 (\d -> (undefined::([] Int) -> [] (Int -> Int))) (undefined::[] (Int -> Int)) (seq c ([]::[] Int))) (seq b (id (undefined::([] (Bool -> Bool)) -> Int -> Int)) (seq a (seq a ([]::[] (Bool -> Bool))))))
take ((\a -> seq a (undefined::(([] Int) -> [] (Int -> Bool)) -> Int) (seq a (seq a (\b -> (undefined::([] Int) -> [] (Int -> Bool))) (seq a True)))) (case1 (\a -> head (seq a (undefined::[] (([] ([] Bool)) -> [] Bool)))) (undefined::[] Bool) (undefined::[] ([] Bool))))
\a -> seq a (\b -> \c -> \d -> a) (seq a (seq a (undefined::Bool -> Bool))) (undefined::Int) (seq a (\b -> seq b (seq b (\c -> 0)) (\c -> (undefined::Int -> Int))) (\b -> (!!) (undefined::[] (([] Bool) -> ([] ([] Bool)) -> [] Bool)) (seq b (seq a 2))))
(\a -> id (seq a (seq a (\b -> seq a (\c -> (undefined::[] Int)))))) head ((!!) ([]::[] (Bool -> [] (([] Int) -> Bool))) 0 ((undefined::(Bool -> Bool) -> Bool) (\a -> seq a a)))
(\a -> id (\b -> id (undefined::Int -> [] Int) (seq b (seq a (undefined::(Int -> Int) -> Int) (\c -> c))))) (\a -> tail ((undefined::([] Int) -> [] (([] Int) -> Bool)) (seq a (\b -> (undefined::[] Int)) (\b -> \c -> seq b (seq b 0)))))
take ((\a -> seq a (id (seq a (undefined::([] Bool) -> Int)) (seq a ([]::[] Bool)))) (\a -> seq a (undefined::Bool -> [] (([] Int) -> Bool)) (seq a (seq a (undefined::Bool)))))
map (\a -> (undefined::Bool -> (([] ([] Bool)) -> [] ([] Bool)) -> Int) (seq a (((==)::Int -> Int -> Bool) (seq a (seq a a)) (seq a (seq a a)))) (\b -> (undefined::Int -> Int -> [] ([] Bool)) a (seq a a)))
(\a -> (undefined::(([] Int) -> [] (Int -> Bool)) -> ([] Int) -> [] Int) (seq a (seq a (\b -> seq a ((\c -> seq c ([]::[] (Int -> Bool))) (\c -> c)))))) (\a -> seq a (seq a (seq a (id (\b -> id (undefined::([] Int) -> [] Int))))) (undefined::Bool -> Int -> Int))
\a -> (undefined::[] Int)
(\a -> (\b -> \c -> seq b (seq b (\d -> c) (seq a (undefined::[] (Int -> Int))))) (seq a (\b -> a) (\b -> seq a even))) (((==)::Int -> Int -> Bool) ((\a -> seq a 2) True) 0)
(undefined::(([] ([] Int)) -> [] Int) -> (Int -> Int) -> ([] Int) -> [] Int) head ((!!) (undefined::[] (Int -> Bool -> Int -> Int)) 2 2 (id (\a -> seq a (undefined::Bool)) (\a -> id (seq a True))))
\a -> seq a ([]::[] Int)
(undefined::([] Int) -> [] Int)
head ((\a -> seq a ([]::[] (([] ([] (Int -> Bool))) -> ([] Int) -> [] Int))) ((\a -> seq a (undefined::Int)) (\a -> seq a (seq a ([]::[] ([] Bool)))))) ((\a -> seq a (undefined::(Int -> Bool) -> [] ([] (Int -> Bool))) (undefined::Int -> Bool)) head)
id
tail
case1 ((undefined::Int -> Int -> Int -> ([] Int) -> [] Int) ((+) (undefined::Int) 0) (id (\a -> (undefined::Int)) (head ([]::[] (([] Int) -> Int -> Int))))) ((enumFromTo'::Int -> Int -> [Int]) ((\a -> seq a (seq a 0)) (tail (undefined::[] Int))) (case1 (undefined::Int -> ([] Int) -> Int) 1 ([]::[] Int)))
(\a -> seq a (\b -> seq b (seq b (seq a (undefined::Int -> ([] Int) -> [] Int)) 2)) (seq a (\b -> map (seq a (undefined::Bool -> [] Bool)) (undefined::[] Bool)))) (\a -> seq a (\b -> a) (\b -> seq b (\c -> seq c (seq c ([]::[] Bool))) (seq a (seq a (seq b ([]::[] Int))))))
tail
(\a -> seq a (id (case1 (seq a (\b -> \c -> seq b tail)) (seq a tail) ([]::[] Bool)))) ((undefined::Bool -> Int -> Bool) (undefined::Bool) (case1 (\a -> \b -> 1) 2 ([]::[] Bool)))
(\a -> (undefined::([] Bool) -> Int -> ([] Int) -> [] Int) (seq a (tail (undefined::[] Bool)))) (undefined::([] Int) -> Int -> Bool) 2
(\a -> \b -> seq a (seq b ((!!) (seq a (undefined::[] (([] Int) -> [] Int))) (undefined::Int)))) (undefined::Bool) ((!!) (filter even (id ([]::[] Int))) (case1 (\a -> head) (undefined::Int) ([]::[] Int)))
case1 (\a -> id (\b -> \c -> c)) (take (case1 (undefined::Int -> ([] Int) -> Int) (undefined::Int) ([]::[] Int))) (take ((\a -> seq a (undefined::Int)) False) ((\a -> seq a ([]::[] (Int -> Int -> Bool))) 1))
\a -> map (seq a (seq a (seq a ((\b -> \c -> c b a 0 (seq a b)) 1)))) (seq a (id (map (\b -> \c -> \d -> seq a (seq c (\e -> (+1)))) ((undefined::Bool -> [] Bool) (seq a (undefined::Bool))))))
\a -> (\b -> (!!) (seq b (undefined::[] ((([] Int) -> Int) -> [] Int))) (seq b (seq b (undefined::Int))) (\c -> seq a (seq a (undefined::(([] Int) -> Int -> Int) -> Int)) (undefined::([] Int) -> Int -> Int))) (seq a (\b -> tail ([]::[] (([] ([] (Int -> Bool))) -> Int -> ([] ([] Int)) -> [] ([] (Int -> Bool))))))
\a -> seq a (seq a ((undefined::(([] ([] ([] ([] Bool)))) -> ([] Int) -> Bool) -> Bool -> [] Int) (\b -> case1 (\c -> (undefined::([] Bool) -> ([] Int) -> Bool)) (\c -> True) ([]::[] Bool)) (case1 (\b -> \c -> seq c (head ([]::[] Bool))) ((\b -> seq b False) (seq a (undefined::Int -> [] Bool))) ((\b -> seq b (undefined::[] (Bool -> Bool))) (seq a (undefined::Int))))))
(undefined::([] Int) -> [] Int)
\a -> tail (undefined::[] Int)
(\a -> (++) (seq a ((undefined::(([] Int) -> Int -> Int) -> [] Int) ((!!) (seq a (seq a ([]::[] (([] Int) -> Int -> Int)))) (seq a (seq a (undefined::Int))))))) (id (id ((\a -> seq a ((\b -> seq a b) (seq a (seq a False)))) (\a -> (\b -> seq b (seq b (undefined::[] ([] (Int -> Bool))))) (undefined::Bool)))))
(undefined::(([] Int) -> Int -> Int) -> ([] Int) -> [] Int) (head ((\a -> (\b -> seq b (seq a (undefined::[] (([] Int) -> Int -> Int)))) (undefined::Bool -> Bool)) (undefined::Bool)))
(\a -> seq a (undefined::Bool -> ([] Int) -> [] Int)) ((undefined::([] ([] (([] Int) -> Int -> Bool))) -> Bool) (undefined::[] ([] (([] Int) -> Int -> Bool)))) (head ((\a -> filter not (seq a (seq a ([]::[] Bool)))) ((\a -> seq a (seq a (undefined::[] (Int -> [] Int)))) (even 1))))
(\a -> (!!) (seq a (map (\b -> (undefined::([] Int) -> [] Int)) (seq a ([]::[] ([] ([] Int)))))) ((\b -> seq a (seq b 1)) (seq a (seq a (seq a (undefined::Bool)))))) (id (\a -> (\b -> (\c -> seq b (seq c (undefined::Bool))) (seq a (head ([]::[] ([] Int))))) ((++) (id (seq a (seq a (seq a (undefined::[] ([] (([] Int) -> Int))))))))))
(undefined::([] Int) -> [] Int)
\a -> seq a a
tail
id (\a -> filter (seq a ((\b -> seq b (seq a (undefined::(Int -> Bool) -> Int -> Bool)) (\c -> even (undefined::Int))) ((\b -> seq b (seq b (undefined::Bool))) (tail (seq a (undefined::[] Bool)))))) (seq a (\b -> map (\c -> (undefined::Int)) (seq a (undefined::[] (([] Bool) -> Bool)))) (\b -> (undefined::(([] Int) -> [] Bool) -> Int -> Int) (seq b (undefined::([] Int) -> [] Bool)))))
(\a -> (undefined::(Int -> ([] Int) -> Int) -> ([] Int) -> [] Int) ((\b -> seq a (\c -> seq b (undefined::([] Int) -> Int))) (seq a (undefined::[] ([] ([] Bool)))))) (\a -> seq a ((undefined::(([] Bool) -> Bool) -> ([] ([] Int)) -> [] Int) (id (id (seq a (\b -> seq a (seq a (undefined::Bool))))))))
\a -> map (\b -> seq b (seq b (\c -> seq c (undefined::Bool -> Int)) (seq a (head (undefined::[] Bool))) (undefined::Bool))) (seq a (\b -> \c -> a) True 2)
\a -> seq a (seq a (seq a (\b -> ([]::[] Int)) ((\b -> (-) (b (undefined::Int) (undefined::Int)) (seq b (undefined::Int))) (\b -> seq a (seq a ((undefined::([] ([] Bool)) -> Int -> Int) (seq a (seq a (undefined::[] ([] Bool))))))))))
tail
(\a -> (!!) (undefined::[] ((Int -> Bool) -> ([] Int) -> [] Int)) (seq a (seq a (undefined::Int))) ((!!) (seq a (undefined::[] (Int -> Bool))) (seq a (seq a 0)))) (\a -> id (undefined::([] Int) -> Bool))
case1 (\a -> seq a (seq a (\b -> \c -> tail))) ((undefined::Bool -> Int -> ([] Int) -> [] Int) True) ((\a -> seq a (undefined::[] Bool)) (odd 1)) 1
\a -> map (seq a (\b -> (undefined::([] (([] Int) -> Bool)) -> Int -> Int) (seq b (undefined::[] (([] Int) -> Bool))) (id (seq b (undefined::([] ([] ([] Bool))) -> Int)) (id ([]::[] ([] ([] Bool))))))) ((\b -> seq a (\c -> seq a (undefined::[] (([] Int) -> [] ([] Int)))) (head (seq b a))) (seq a (\b -> seq a False) (\b -> b)))
(\a -> (\b -> seq b (\c -> seq c id) (undefined::Int -> [] Int)) ((:) (seq a (seq a id)) (seq a (seq a (undefined::[] (([] Bool) -> [] Bool)))))) (\a -> seq a (map (seq a (\b -> \c -> seq c (seq b (seq c True)))) ([]::[] Int)))
\a -> ([]::[] Int)
\a -> seq a ((!!) ((!!) (seq a (undefined::Int -> [] ([] ([] Int))) (undefined::Int)) ((\b -> seq b (seq b (undefined::Int))) (seq a (seq a (undefined::Bool)))))) (seq a (seq a 0))
(\a -> seq a (id (\b -> (undefined::([] Int) -> [] Int)) (seq a (id (seq a (undefined::Int -> [] (Int -> Int))) (id (undefined::Int)))))) (\a -> \b -> map odd (map (\c -> seq c (undefined::Int)) a))
\a -> a
id
\a -> seq a (undefined::Int -> ([] (([] Int) -> Bool)) -> [] Int) (seq a (case1 (\b -> (undefined::([] Bool) -> Int)) (seq a (undefined::Int)) (undefined::[] Bool))) (map (seq a (seq a (seq a (\b -> \c -> False)))) (seq a (filter (\b -> seq b (undefined::Bool)) (seq a ([]::[] (([] Bool) -> [] (Bool -> Bool)))))))
case1 take (undefined::[] Int)
\a -> seq a (\b -> seq a (seq b (tail (seq b a)))) (\b -> (\c -> head (seq c a)) (\c -> id (\d -> (undefined::([] (([] Int) -> Bool)) -> Int)) (c (tail ([]::[] (Bool -> Bool))))))
head ((undefined::Int -> [] (Int -> ([] Int) -> [] Int)) ((\a -> seq a 1) (not True))) (undefined::Int)
\a -> seq a (undefined::[] Int)
(undefined::([] Int) -> [] Int)
\a -> a
\a -> a
\a -> id ((:) ((!!) ((enumFromTo::Int -> Int -> [Int]) (seq a (undefined::Int)) (seq a (undefined::Int))) ((\b -> seq b 1) (seq a (undefined::[] Bool)))) a)
\a -> seq a (seq a (\b -> (undefined::[] Int))) (seq a (seq a (\b -> \c -> seq a (seq b (seq c (seq b (undefined::Int -> Bool -> [] ([] Bool)) (seq b 0))) (seq a False)))))
(\a -> \b -> (!!) (seq b (undefined::[] ((([] Int) -> Bool) -> [] Int))) (seq a (head ([]::[] Int))) (seq b (\c -> (undefined::([] ([] Bool)) -> Bool) (seq a (seq b (undefined::[] ([] Bool))))))) ((\a -> seq a (\b -> seq b (seq a (undefined::[] (Int -> [] Int)))) (seq a (seq a (\b -> seq a False)))) (\a -> a))
(\a -> \b -> seq a (\c -> seq a (a b (undefined::Int)) (seq a (seq c 0))) (seq a head)) (undefined::([] Int) -> Int -> Int -> [] Int)
\a -> seq a (id (seq a (\b -> (undefined::(Int -> [] Int) -> [] Int)) (undefined::[] (([] Bool) -> [] Bool)) (seq a (\b -> seq b (seq b (undefined::([] Bool) -> Int -> [] Int)) (seq a (seq a (undefined::[] Bool)))) (seq a (seq a (\b -> seq b (undefined::[] ([] Bool))) (seq a (seq a (\b -> (undefined::([] Int) -> Int)))))))))
\a -> a
tail
(\a -> (\b -> seq b (seq a (\c -> \d -> d)) b) ((undefined::([] ([] Bool)) -> Int) (seq a (seq a (seq a ([]::[] ([] Bool))))))) ((undefined::Bool -> Bool -> [] (([] Int) -> [] Int)) (((==)::Int -> Int -> Bool) (undefined::Int) 0) ((||) (undefined::Bool) False))
\a -> a
\a -> a
(undefined::(([] ([] ([] Int))) -> ([] ([] ([] ([] Int)))) -> [] ([] ([] Int))) -> ([] Int) -> [] Int) (undefined::([] ([] ([] Int))) -> ([] ([] ([] ([] Int)))) -> [] ([] ([] Int)))
(\a -> seq a (\b -> \c -> \d -> seq b d) (seq a (a (undefined::Bool) False))) (undefined::Bool -> Bool -> Bool) (head ((undefined::(Int -> [] Bool) -> [] (Bool -> Int)) (\a -> seq a (seq a ([]::[] Bool)))) ((\a -> seq a True) (undefined::Int -> Int -> Int -> Bool)))
id (id (\a -> map (\b -> seq b ((!!) (a (seq a b) b) b))) ((\a -> seq a (seq a (\b -> \c -> seq a (undefined::Bool -> [] Int) (seq c False)))) (map (undefined::([] ([] Int)) -> [] Int) (id ([]::[] ([] ([] Int)))))))
\a -> a
\a -> a
(\a -> (undefined::(Bool -> Bool) -> ([] Int) -> [] Int) (seq a (\b -> (\c -> seq c b) (undefined::[] Bool)))) ((\a -> seq a (\b -> map (undefined::([] ([] Bool)) -> Bool -> Bool) (seq a (undefined::[] ([] ([] Bool)))))) ((\a -> seq a ((+1) 1)) (((==)::Int -> Int -> Bool) (undefined::Int) 0)))
(!!) ((\a -> map (\b -> \c -> (undefined::[] Int)) (seq a (seq a ([]::[] ([] ([] ([] Int))))))) (map (\a -> seq a (undefined::[] (Int -> Int))) ([]::[] ([] Bool)))) ((\a -> \b -> seq a (seq b a)) 2 ((\a -> seq a (\b -> \c -> True)) ((:) ([]::[] Bool) (undefined::[] ([] Bool)))))
(undefined::(([] Int) -> [] ([] Int)) -> Bool -> ([] Int) -> [] Int) (\a -> (undefined::(([] (Bool -> Bool)) -> [] Int) -> [] ([] Int)) (\b -> seq a a)) ((\a -> seq a (seq a (head (undefined::[] (Int -> Bool))) 1)) (\a -> (undefined::([] ([] (Int -> Bool))) -> [] ([] ([] ([] Bool)))) (seq a (seq a ([]::[] ([] (Int -> Bool)))))))
\a -> (undefined::((([] ([] Int)) -> [] ([] Int)) -> ([] ([] Int)) -> [] ([] (([] Int) -> Int -> Int -> Int))) -> [] Int) (undefined::(([] ([] Int)) -> [] ([] Int)) -> ([] ([] Int)) -> [] ([] (([] Int) -> Int -> Int -> Int)))
(\a -> seq a (seq a (\b -> (:)))) ((||) (undefined::Bool) (undefined::Bool)) (not ((\a -> seq a (seq a (undefined::Bool))) ([]::[] Int))) 1
id (\a -> seq a (\b -> seq a (\c -> seq b tail) (seq b (seq a 0))) ((\b -> seq a (seq b ([]::[] (([] Int) -> [] Int)))) (seq a (\b -> seq b True)))) ((\a -> \b -> seq a (case1 (undefined::Int -> ([] Int) -> [] ([] Int)) (seq b (undefined::[] ([] Int))))) (undefined::Int))
\a -> ([]::[] Int)
id (\a -> seq a (seq a (\b -> (undefined::Bool -> ([] Int) -> [] Int)) True)) ((undefined::([] ([] Int)) -> ([] Int) -> [] Int) ([]::[] ([] Int))) ((undefined::(([] ([] Int)) -> [] Bool) -> Bool) (undefined::([] ([] Int)) -> [] Bool))
\a -> a
\a -> seq a ((\b -> (undefined::Int -> ([] (([] Int) -> [] Int)) -> [] Int) b) ((\b -> b) (seq a (seq a (seq a (undefined::Int)))))) (take (seq a ((-) 2) (undefined::Int)) (seq a (seq a (undefined::([] Bool) -> [] (([] Int) -> [] Int)) (head (undefined::[] ([] Bool))))))
\a -> (enumFromTo::Int -> Int -> [Int]) (seq a (\b -> 2) (seq a (seq a (seq a ([]::[] ([] (Bool -> Bool))))))) (seq a (case1 (\b -> seq a (\c -> b)) 2 ((!!) (undefined::[] ([] Int)) 1)))
head ((!!) (id (tail (undefined::[] ([] (Bool -> ([] Int) -> [] Int))))) ((\a -> seq a (seq a 0)) (\a -> even (undefined::Int)))) (head (undefined::[] (Int -> (Int -> [] Int) -> Bool)) ((+1) (undefined::Int)) (\a -> seq a (\b -> ([]::[] Int)) ((!!) ([]::[] (([] Int) -> Bool -> Bool)) a)))
\a -> seq a (\b -> seq b (seq b (map (undefined::(Int -> Int -> Bool) -> Int) (seq b (seq a (undefined::Int -> [] (Int -> Int -> Bool))) (seq a b))))) (undefined::Int)
\a -> (\b -> (enumFromTo::Int -> Int -> [Int]) (seq b (undefined::Bool -> Int) (even b))) (seq a (\b -> seq b (seq a 0)) (\b -> b)) ((!!) (seq a a) (case1 (seq a (undefined::([] Bool) -> ([] ([] Bool)) -> Int)) (seq a (undefined::Int)) ([]::[] ([] Bool))))
\a -> (undefined::(([] Int) -> [] Int) -> [] Int) ((\b -> seq b (seq b (seq b (undefined::Int -> ([] Int) -> [] Int)))) (seq a (seq a (seq a (undefined::[] ([] Int))))) (head (undefined::[] Int)))
(undefined::Bool -> ([] Int) -> [] Int) (case1 (undefined::Bool -> ([] Bool) -> Bool) ((\a -> seq a (undefined::Bool)) (undefined::Bool)) (head ([]::[] (([] ([] Int)) -> [] Bool)) (head (undefined::[] ([] ([] Int))))))
\a -> a
(\a -> \b -> map (\c -> seq c (seq a (undefined::([] ([] Bool)) -> Int)) ([]::[] ([] Bool))) ((\c -> seq a (seq b (seq c (undefined::[] (([] ([] Bool)) -> [] ([] Bool)))))) (undefined::Bool))) (head ([]::[] (([] Int) -> [] (([] (([] Bool) -> [] Bool)) -> [] (([] Bool) -> [] Bool)))))
take ((\a -> seq a ((\b -> (undefined::([] (([] Bool) -> [] Bool)) -> Int) (seq b (undefined::[] (([] Bool) -> [] Bool)))) (seq a (seq a (seq a (seq a (\b -> False))))))) (\a -> (\b -> seq b (\c -> seq a ([]::[] (Int -> [] Int))) (\c -> seq c (undefined::Bool))) (undefined::([] ([] ([] Int))) -> [] ([] Bool))))
head (undefined::[] ((([] Int) -> [] ([] (([] (Int -> Bool)) -> Int -> Bool))) -> ([] Int) -> [] Int)) (undefined::([] Int) -> [] ([] (([] (Int -> Bool)) -> Int -> Bool)))
\a -> a
\a -> seq a a
(undefined::Bool -> ([] Int) -> [] Int) (id (\a -> False) (head ([]::[] (([] ([] (([] ([] Int)) -> [] ([] Int)))) -> [] Int))))
(\a -> id (\b -> seq b (seq a a) (id ([]::[] Int))) (\b -> seq a (case1 (\c -> (undefined::([] Bool) -> ([] Int) -> Bool)) (\c -> True) (seq a (undefined::[] Bool))))) (\a -> seq a tail)
id
id ((\a -> \b -> (undefined::([] Bool) -> Bool -> [] Int) (seq a (seq b (undefined::[] Bool))) (seq b a)) ((undefined::Int -> Bool -> Bool) (id 0) ((!!) (undefined::[] Bool) (undefined::Int))))
(\a -> seq a (\b -> (undefined::([] (([] (Bool -> Bool -> Bool)) -> Bool)) -> [] Int) ([]::[] (([] (Bool -> Bool -> Bool)) -> Bool)))) (undefined::Bool)
head (id (undefined::[] ((([] ([] ([] (([] Int) -> [] Int)))) -> [] (Int -> [] Int)) -> ([] Int) -> [] Int))) (\a -> case1 (seq a (seq a (\b -> \c -> seq c (undefined::[] (Int -> [] Int))))) (seq a (head (seq a ([]::[] ([] (Int -> [] Int)))))) (seq a (undefined::([] Bool) -> [] Int) (undefined::[] Bool)))
(undefined::Bool -> ([] Int) -> [] Int) (head ([]::[] (Bool -> Bool)) (even (id (undefined::Int))))
(\a -> seq a (seq a (\b -> case1 (seq b (:)) (seq b (undefined::[] Int))) (\b -> ([]::[] (([] Int) -> Bool))))) (\a -> seq a (seq a (seq a (undefined::(Int -> Bool -> Bool) -> Bool) (seq a (seq a (\b -> (undefined::Int -> Bool -> Bool))) (seq a 2)))))
id (case1 ((undefined::Bool -> Bool -> ([] Bool) -> ([] Int) -> [] Int) (head ([]::[] Bool))) (\a -> (undefined::(Bool -> Bool) -> [] Int) (\b -> b)) ((\a -> seq a tail (seq a (undefined::[] Bool))) (head ([]::[] Int))))
(\a -> (:) (seq a (seq a (seq a (\b -> seq a (undefined::([] Int) -> Int) (seq b (undefined::[] Int)))) (\b -> seq a (+1) (seq b (seq a 2)))))) (\a -> \b -> (undefined::Int -> Bool -> Bool))
tail
(:) (case1 (\a -> seq a (\b -> id (undefined::(Int -> Int -> Int) -> Int))) (\a -> seq a (a (undefined::Int) 2)) ((\a -> seq a (undefined::[] Int)) False) ((\a -> (!!) (seq a (seq a (undefined::[] (Int -> Int -> Int)))) (seq a (seq a (undefined::Int)))) ((\a -> a) ([]::[] (Int -> Bool)))))
(\a -> \b -> (\c -> seq a (seq a (seq c (undefined::Int -> [] Int)))) (seq b (a ([]::[] Int) b)) (seq a (seq a (seq b (\c -> (undefined::Int)) (undefined::[] (Bool -> Bool)))))) ((==)::[Int] -> [Int] -> Bool)
\a -> a
\a -> seq a (seq a (seq a (undefined::[] Int)))
\a -> a
\a -> seq a a
\a -> seq a (seq a (map (seq a (seq a (\b -> case1 (seq b (\c -> (undefined::([] Bool) -> Int))) (seq a (undefined::Int)) (b (undefined::([] Int) -> ([] Int) -> [] Bool) (undefined::[] Int) (undefined::[] Int))))))) (seq a (head ([]::[] ([] ((([] Int) -> ([] Int) -> [] Bool) -> ([] Int) -> ([] Int) -> [] Bool)))))
\a -> seq a (case1 (seq a (\b -> (!!) (undefined::[] (Bool -> ([] Bool) -> [] Int)) (undefined::Int) ((\c -> seq c b) (seq b (undefined::Int))))) (seq a (\b -> a) (seq a (seq a (id (undefined::([] Int) -> Int -> Int -> Bool))))) (seq a (seq a (head (seq a ([]::[] ((Bool -> Bool) -> [] Bool))) (seq a (\b -> False))))))
(\a -> head ((\b -> seq b (seq a ([]::[] (Bool -> ([] Int) -> [] Int)))) (undefined::Bool)) (odd (seq a (\b -> seq b 2) (head (undefined::[] Bool))))) ((\a -> seq a (tail (undefined::[] (([] (Int -> Bool -> Bool)) -> Bool -> Bool)))) ((!!) (undefined::[] (([] ([] Int)) -> Bool)) 0 (undefined::[] ([] Int))))
(\a -> (\b -> \c -> seq a (undefined::([] ([] ([] Bool))) -> [] Int) (seq b (id ([]::[] ([] ([] Bool)))))) (\b -> tail ([]::[] (Bool -> Bool)))) (\a -> (undefined::[] Bool))
\a -> a
tail
\a -> seq a (seq a (seq a a))
(undefined::(([] Int) -> ([] (([] Int) -> [] ([] Bool))) -> ([] Int) -> [] ([] Bool)) -> ([] Int) -> [] Int) (\a -> seq a (\b -> seq b (\c -> seq a (\d -> \e -> ([]::[] ([] Bool))) (head a)) (\c -> take (undefined::Int) (seq a (seq b ([]::[] ([] ([] Bool))))))))
(\a -> seq a (\b -> (undefined::((([] (Int -> Int)) -> Int -> Int) -> Bool) -> [] Int) (\c -> seq b (seq b (seq b even) (seq c (c ([]::[] (Int -> Int)) 1)))))) (\a -> (\b -> seq a (\c -> seq c (seq b (undefined::[] ([] (Bool -> Bool))))) (seq b ([]::[] Bool))) (seq a (seq a (\b -> seq a False)) ((:) (undefined::Int) (undefined::[] Int))))
(undefined::(([] Int) -> ([] Bool) -> [] Bool) -> ([] Int) -> [] Int) (id (head ([]::[] (Int -> ([] Int) -> ([] Bool) -> [] Bool))) ((\a -> a (seq a (seq a (undefined::Int)))) (\a -> seq a (seq a (seq a a)))))
\a -> ([]::[] Int)
tail
(!!) (tail (tail (undefined::[] ((([] Bool) -> Bool) -> ([] Int) -> [] Int)))) ((\a -> seq a 0) (odd (undefined::Int))) (\a -> seq a (seq a (\b -> seq b (undefined::Int -> Bool)) (seq a (head (undefined::[] ([] ([] ([] Int))))))) (seq a (id (seq a (undefined::(Int -> Int) -> Int)) (id id))))
id
(\a -> id (undefined::(Int -> ([] Int) -> Int) -> ([] Int) -> [] Int) (seq a (undefined::([] ([] Int)) -> Int -> ([] Int) -> Int) (undefined::[] ([] Int)))) (\a -> \b -> seq a (seq a (head (seq b ([]::[] (Bool -> ([] Int) -> [] (Int -> Int)))))) (seq b ((\c -> seq a (seq c True)) (seq b (head (undefined::[] Int))))))
(\a -> (\b -> \c -> seq b (\d -> c) (seq a (undefined::Bool))) (\b -> seq a ((\c -> c) ((+1) (undefined::Int))))) ([]::[] (([] (([] ([] Int)) -> [] ([] Bool))) -> Int -> Bool))
head (filter ((\a -> \b -> odd (seq a (seq b (seq b (seq a (undefined::Int)))))) (\a -> seq a ((\b -> seq b (undefined::Int)) (\b -> id b)))) ((\a -> seq a ([]::[] (([] Int) -> [] Int))) (\a -> (\b -> seq b (seq b id)) (seq a (id ([]::[] ([] (Bool -> Bool))))))))
(undefined::Bool -> ([] Int) -> [] Int) ((\a -> seq a (seq a (seq a (undefined::(Bool -> Bool) -> Bool))) (seq a (\b -> not b))) (id (map (\a -> \b -> seq b (id (undefined::Bool))))))
\a -> a
(undefined::([] Int) -> [] Int)
(\a -> (\b -> seq a (seq a (seq a (\c -> id)) (seq a (seq b (seq a 0))))) (undefined::Bool)) ((\a -> seq a (seq a (seq a (seq a (undefined::[] (([] ([] (Bool -> Bool))) -> Int -> Int)))))) ((\a -> seq a False) ((-) (undefined::Int))))
(\a -> seq a (seq a (\b -> (!!) (undefined::[] (Bool -> [] Int)) (id (undefined::Int)) (seq a (\c -> seq b a) (seq b (head ([]::[] ([] Bool)))))))) False
(\a -> \b -> map (\c -> (\d -> seq d (undefined::Int)) (seq b (seq a False))) (seq a (id ([]::[] (([] (Int -> [] Int)) -> [] (Int -> [] Int)))))) (\a -> seq a (\b -> id (seq a (undefined::[] (Int -> ([] Int) -> Int -> Int -> Int)))) (seq a (seq a (\b -> seq b ([]::[] Bool))) (seq a (undefined::([] Int) -> Bool))))
id (\a -> (\b -> seq b (seq b (id (undefined::([] Bool) -> ([] Int) -> [] Int) (seq a (seq a (undefined::[] Bool)))))) (seq a (seq a ((++) (seq a (tail (undefined::[] ([] ([] Int))))))))) (\a -> seq a (id (undefined::Int -> Int -> [] ([] Int)) (id (seq a (undefined::Int)))) (seq a (case1 (undefined::Int -> ([] Int) -> Int) (seq a 1) (seq a (undefined::[] Int)))))
\a -> map ((!!) (seq a (seq a (undefined::[] ((([] (Bool -> Bool)) -> Bool -> Bool) -> Int)))) (seq a (head ([]::[] (Int -> Int)) 1))) ((undefined::(Bool -> Bool) -> [] (([] (Bool -> Bool)) -> Bool -> Bool)) (\b -> b))
\a -> a
(\a -> \b -> (\c -> seq c (seq b b)) (\c -> (:) a (seq a (seq c (undefined::[] Bool))))) ((\a -> ((==)::[Int] -> [Int] -> Bool) ([]::[] Int) (seq a ([]::[] Int))) (\a -> (\b -> seq b (seq b ([]::[] ([] ([] ([] Bool)))))) (\b -> b)))
id (\a -> (undefined::(Int -> ([] Int) -> Bool) -> ([] Int) -> [] Int)) (case1 (undefined::Int -> ([] Int) -> Bool) False (undefined::[] Int)) (head ([]::[] ((Bool -> Bool) -> Int -> ([] Int) -> Bool)) (head (undefined::[] (Bool -> Bool -> Bool)) (undefined::Bool)))
tail
\a -> (!!) ([]::[] ([] Int)) (seq a (\b -> head ([]::[] ((Int -> Bool) -> Int))) (head (seq a (undefined::[] (Int -> Int)))) (\b -> seq b (undefined::(Bool -> Bool) -> Bool) (\c -> not c)))
(\a -> seq a (undefined::Int -> ([] Int) -> [] Int)) (\a -> (\b -> seq b (a ([]::[] Int))) (undefined::[] Bool)) ((undefined::([] ([] Int)) -> Int) (case1 (\a -> \b -> ([]::[] ([] Int))) ([]::[] ([] Int)) (undefined::[] Bool)))
(undefined::(([] ([] ([] Int))) -> [] ([] Bool)) -> ([] Int) -> [] Int) (map (\a -> (\b -> seq b (seq b (seq b (seq a (tail (undefined::[] Bool)))))) (case1 (\b -> (undefined::([] Int) -> Bool)) (seq a (undefined::Bool)) (undefined::[] Int))))
(undefined::([] Int) -> [] Int)
\a -> a
(!!) (map (\a -> (undefined::Bool -> ([] Int) -> [] Int)) (undefined::[] Bool)) ((\a -> seq a (seq a (undefined::Int))) ([]::[] Bool)) ((\a -> seq a (seq a ((undefined::([] Int) -> Bool) (seq a (undefined::[] Int))))) (undefined::([] ([] Int)) -> [] ([] Int)))
id (\a -> (!!) (seq a (seq a (\b -> (undefined::[] (([] Int) -> [] Int))) (seq a (seq a (undefined::[] Bool))))) (case1 (undefined::Bool -> ([] Bool) -> Int) 1 ([]::[] Bool))) (\a -> \b -> \c -> (\d -> seq d (seq b (id (undefined::Bool -> [] ([] Int)) (seq c (seq d False))))) (map (\d -> \e -> seq e (undefined::[] Int)) (undefined::[] Int)))
case1 (\a -> seq a (\b -> seq a ((\c -> seq c id) (seq b (\c -> 2)))) (case1 (\b -> (undefined::([] Int) -> Bool)) (seq a False) (seq a ([]::[] Int)))) (map (\a -> (undefined::Int)) (case1 (\a -> (undefined::([] Int) -> [] (Bool -> Bool))) (undefined::[] (Bool -> Bool)) (undefined::[] Int)))
(\a -> \b -> seq b ((\c -> seq c (\d -> seq b b)) (seq a (seq b (seq b (undefined::Int)))) (seq a (undefined::([] Bool) -> [] Bool)))) (head (take (case1 (undefined::Bool -> ([] Bool) -> Int) 1 (undefined::[] Bool)) (undefined::[] (([] ([] (Int -> Bool))) -> [] (Int -> Int -> Bool)))))
\a -> a
case1 ((\a -> (!!) (seq a (seq a (undefined::[] (Int -> ([] Int) -> [] Int)))) a) ((-) (undefined::Int) 2)) (tail (take ((\a -> seq a (seq a (undefined::Int))) ([]::[] Bool)) (map (\a -> 1) ([]::[] Bool))))
map ((\a -> \b -> seq b ((undefined::Int -> (([] Int) -> Int -> Bool) -> Int) (seq b b)) (\c -> \d -> (\e -> seq a (seq e (undefined::Bool))) (seq b (seq d (undefined::[] (([] Bool) -> Bool)))))) ((\a -> seq a (\b -> seq b (\c -> seq a (enumFromTo::Int -> Int -> [Int])) (seq b b))) (\a -> seq a (id (undefined::([] Int) -> [] Bool) (id ([]::[] Int))))))
\a -> a
\a -> seq a (\b -> seq a ((!!) (undefined::[] ((([] Int) -> [] Int) -> [] Int)) (seq b 0))) ((&&) (id True) (seq a (seq a False))) (\b -> (enumFromTo'::Int -> Int -> [Int]) (seq b (seq a (seq a (undefined::([] Bool) -> Int))) (seq b (tail ([]::[] Bool)))) ((undefined::Bool -> Int) (undefined::Bool)))
id (\a -> ([]::[] Int))
(undefined::([] Int) -> [] Int)
head (take (case1 (undefined::Int -> ([] Int) -> Int) 2 (undefined::[] Int)) ((++) (undefined::[] (Int -> ([] Int) -> [] Int)) ([]::[] (Int -> ([] Int) -> [] Int)))) ((+) ((\a -> seq a 0) (tail (undefined::[] ([] (([] Int) -> Bool))))) ((undefined::([] (Bool -> Bool)) -> Int) (undefined::[] (Bool -> Bool))))
id (take ((\a -> seq a 0) ((\a -> seq a (seq a ((\b -> seq b (undefined::[] ([] (Bool -> Bool)))) a))) ((\a -> seq a (undefined::Bool)) (undefined::[] Bool)))))
\a -> a
\a -> (undefined::(([] (([] Int) -> Int -> [] Int)) -> ([] Int) -> [] (([] ([] Int)) -> [] ([] (Int -> Bool)))) -> [] Int) (\b -> (\c -> seq c (map (\d -> \e -> take d (undefined::[] ([] (Int -> Bool)))))) (seq b (seq a (head a))))
\a -> a
\a -> map (\b -> b) (undefined::[] Int)
(!!) ((\a -> seq a (seq a (undefined::[] (Bool -> ([] Int) -> [] Int)))) (not True)) (undefined::Int) (case1 ((undefined::Bool -> Bool -> ([] Bool) -> Bool) False) (head (undefined::[] Bool)) ((undefined::Int -> [] Bool) (undefined::Int)))
id (\a -> seq a (\b -> \c -> (undefined::([] Int) -> [] Int)) (seq a (seq a True))) ((undefined::Bool -> [] (([] Bool) -> [] Bool)) (((==)::[Int] -> [Int] -> Bool) ([]::[] Int) ([]::[] Int))) ((\a -> seq a (seq a id) (seq a a)) False)
(\a -> \b -> seq a b) (head ([]::[] (Int -> ([] (Int -> Bool)) -> [] (Int -> Bool))) (head (undefined::[] (Int -> Int)) 1))
case1 (\a -> (undefined::([] (Int -> Bool -> Bool)) -> ([] Int) -> [] Int)) (\a -> tail (seq a a)) ([]::[] (Int -> Bool -> Bool))
map (undefined::Int -> Int)
case1 ((!!) ((\a -> seq a (seq a (undefined::[] (([] Int) -> ([] Int) -> [] Int)))) (undefined::Int))) ((!!) ((undefined::Int -> [] (([] Int) -> [] Int)) 2) ((\a -> seq a (undefined::Int)) (\a -> seq a False))) ((:) (undefined::Int) ([]::[] Int))
\a -> seq a ((\b -> head (undefined::[] (Bool -> Int -> [] Int)) True (seq b b)) (seq a (seq a ((\b -> seq b (\c -> (undefined::Int))) a (seq a (\b -> seq b ([]::[] ([] (Bool -> Bool)))) ([]::[] (Bool -> Bool)))))))
\a -> a
(\a -> seq a ((\b -> a (seq b (seq b (seq b (undefined::Bool -> [] Int)) (seq b (seq a (undefined::Bool)))))) ((\b -> \c -> \d -> b) (seq a (not True))))) (\a -> seq a ((undefined::Int -> Bool -> ([] Int) -> [] Int) (seq a (seq a (seq a (undefined::Int))))) (seq a (undefined::Bool)))
(undefined::([] Int) -> [] Int)
\a -> (undefined::[] Int)
\a -> (undefined::[] Int)
(\a -> seq a (\b -> seq b (\c -> seq a (undefined::Int -> [] Int) (seq a (seq a (undefined::Int)))))) ((undefined::(([] Bool) -> Bool) -> Bool) (\a -> (undefined::Bool))) ((\a -> map (seq a (undefined::([] Int) -> Int -> [] ([] Int))) ([]::[] ([] Int))) (undefined::Int))
case1 (\a -> \b -> head (take 2 (seq a (seq b (undefined::[] (([] Int) -> [] Int)))))) (\a -> seq a (seq a a)) (head (tail (undefined::[] (Int -> [] ([] Int)))) ((\a -> a) (id 1)))
(\a -> (undefined::(([] (Int -> Bool -> Bool)) -> Int) -> ([] Int) -> [] Int) (seq a (\b -> id (seq b (undefined::Bool -> Int)) (seq a (undefined::Bool))))) (undefined::Int)
(\a -> (!!) (undefined::[] (([] ([] Bool)) -> ([] Int) -> [] Int)) 2 (take (seq a (seq a (undefined::Int))) (id (undefined::[] ([] Bool))))) ((\a -> (\b -> seq a (seq b (\c -> ([]::[] Int)))) (seq a (seq a (seq a (undefined::[] ([] Bool)))))) ((\a -> seq a (\b -> \c -> seq a (undefined::Bool))) (undefined::Int)))
(\a -> \b -> seq a (\c -> seq b (seq a (seq b (undefined::([] ([] Bool)) -> [] Int)) (seq b (seq c ([]::[] ([] Bool)))))) (seq a (id (seq b (undefined::[] (([] (([] Int) -> Int -> [] Int)) -> Bool)))))) (\a -> \b -> (undefined::([] Int) -> Bool))
case1 (\a -> (\b -> \c -> \d -> seq b (tail c)) ((-) a a)) ((\a -> \b -> seq a id) (not False) ((\a -> seq a a) False)) (map (undefined::([] ([] Int)) -> Int) ((++) ([]::[] ([] ([] Int))) ([]::[] ([] ([] Int)))))
tail
\a -> seq a (\b -> a) ((\b -> \c -> seq b False) (seq a (seq a (seq a 2))) (case1 (undefined::Bool -> ([] Bool) -> Int) 0 (seq a ([]::[] Bool))))
tail
id (\a -> \b -> ([]::[] Int)) (\a -> id (seq a (\b -> \c -> seq c (\d -> \e -> a))) (case1 (\b -> seq a (undefined::([] Bool) -> Int)) (seq a 1) (seq a (undefined::[] Bool))))
\a -> seq a (seq a ((\b -> seq b (\c -> ([]::[] Int))) ((undefined::(([] Int) -> [] Int) -> Bool) (\b -> a)))) (\b -> \c -> seq c (seq b ((undefined::Bool -> (([] Int) -> Bool) -> [] ([] Bool)) (seq a (seq b True))) (undefined::([] Int) -> Bool)))
case1 (undefined::(Int -> Int) -> ([] (Int -> Int)) -> ([] Int) -> [] Int) ((\a -> \b -> seq a (undefined::([] ([] Int)) -> [] Int) (seq b ([]::[] ([] Int)))) (undefined::([] Int) -> Bool)) ((\a -> \b -> seq a ([]::[] (Int -> Int))) (((==)::Int -> Int -> Bool) (undefined::Int)) (undefined::Int))
(\a -> seq a (seq a (\b -> b))) ((!!) (undefined::[] (Bool -> Bool)))
\a -> seq a (head (seq a (tail (undefined::[] ((([] Int) -> ([] (Int -> Int)) -> ([] Int) -> [] (Int -> Int)) -> [] Int)))) (undefined::([] Int) -> ([] (Int -> Int)) -> ([] Int) -> [] (Int -> Int)))
(undefined::([] Int) -> [] Int)
(undefined::([] Int) -> [] Int)
(\a -> seq a (\b -> seq a (\c -> id (undefined::(([] Bool) -> Bool) -> [] Int) (seq b (\d -> False)))) (seq a (undefined::([] ([] Bool)) -> [] ([] (Bool -> Bool))))) (\a -> \b -> seq b (\c -> seq a (not (seq c (undefined::Bool)))) (\c -> seq a (\d -> seq c (undefined::Int -> [] Int)) (\d -> id (undefined::Bool -> Bool))))
tail
(:) (id (undefined::Bool -> Int -> Int) ((\a -> a) (not (undefined::Bool))) 1)
\a -> seq a (seq a (seq a a))
id
case1 ((\a -> \b -> head (seq a (undefined::[] (([] Bool) -> ([] Int) -> [] Int)))) ((\a -> seq a (undefined::Bool)) (id 0))) (\a -> case1 (\b -> seq a tail) (undefined::[] Int) (tail (undefined::[] Int))) ((\a -> \b -> seq a (undefined::[] Bool)) (not (undefined::Bool)) (\a -> seq a a))
\a -> seq a (\b -> id (undefined::Int -> (([] Int) -> Bool) -> [] Int) (seq a (seq a (seq b (undefined::Int))))) (\b -> seq a (undefined::([] ([] Int)) -> [] ([] Int)) (seq a (id ([]::[] ([] Int))))) (\b -> seq b (seq a (seq b (seq a (seq a (undefined::(([] ([] ([] Int))) -> [] ([] ([] Int))) -> Bool))))) (\c -> map (seq a (\d -> (undefined::[] ([] Int)))) ([]::[] ([] Int))))
(\a -> (!!) (seq a (seq a ([]::[] (Bool -> ([] Int) -> [] Int)))) (seq a (seq a (undefined::Int)))) ((undefined::(([] Int) -> Int) -> Bool -> Bool) (undefined::([] Int) -> Int)) (even ((undefined::([] Int) -> Bool -> Int) (undefined::[] Int) (head (undefined::[] Bool))))
id (undefined::Bool -> (Int -> [] Bool) -> ([] Int) -> [] Int) ((\a -> seq a a) (undefined::Bool)) ((\a -> seq a (\b -> (undefined::[] Bool))) ((!!) (head (undefined::[] ([] Int))) (id (undefined::Int))))
\a -> seq a (tail (seq a a))
head (undefined::[] (([] (Int -> [] Int)) -> ([] Int) -> [] Int)) ((undefined::([] (([] Int) -> [] Int)) -> [] (Int -> [] Int)) (tail ((\a -> seq a (seq a (undefined::[] (([] Int) -> [] Int)))) ([]::[] Int))))
\a -> a
(undefined::([] Int) -> [] Int)
tail
\a -> (undefined::[] Int)
(\a -> seq a (\b -> seq a ((undefined::Int -> Int -> [] Int) (undefined::Int)) ((\c -> seq a (seq c 2)) (seq b (undefined::Bool))))) (\a -> \b -> case1 (\c -> \d -> \e -> c 0) (\c -> ((==)::[Int] -> [Int] -> Bool) a a) ((!!) ([]::[] ([] (Int -> Bool))) (undefined::Int)))
(\a -> seq a (seq a (\b -> seq b b))) ((\a -> a) ((\a -> seq a (undefined::Int)) (\a -> seq a (seq a (undefined::Int)))))
tail
case1 (\a -> (\b -> seq b (\c -> \d -> c)) (undefined::Bool)) (\a -> a) (filter ((\a -> seq a (undefined::Int -> Bool)) (undefined::Int)) ((\a -> seq a ([]::[] Int)) (undefined::[] Bool)))
\a -> seq a (\b -> a) (id (seq a (seq a (seq a (\b -> head (seq b (seq a ([]::[] Bool))))) (undefined::Int -> Int -> ([] Int) -> Int -> Int))))
\a -> a
(\a -> id (\b -> seq b (map (seq b (\c -> (undefined::(Int -> Int) -> Int)) (seq a (seq b (undefined::Bool)))) (undefined::[] (Int -> Int))))) (undefined::([] Int) -> ([] (([] (Int -> Int)) -> Int -> Int)) -> Int -> Bool)
\a -> seq a (seq a (undefined::[] Int))
\a -> (undefined::[] Int)
map (+1)
\a -> (enumFromTo'::Int -> Int -> [Int]) (seq a (seq a (seq a (head ((undefined::(([] (Int -> Bool)) -> Int -> Bool) -> [] Int) (\b -> seq a even)))))) (seq a (undefined::(Bool -> [] ([] ([] Bool))) -> Int -> Int) (undefined::Bool -> [] ([] ([] Bool))) 1)
\a -> seq a (head ((\b -> head (seq b ([]::[] (Bool -> Bool -> [] ([] Int))))) (undefined::Int) ((\b -> b) (seq a True)) True))
(\a -> \b -> seq b (seq a (seq b (undefined::Bool -> ([] Int) -> [] Int) b))) (head ([]::[] (Int -> Int)) (head (undefined::[] Int))) (not ((!!) ((\a -> seq a (undefined::[] Bool)) (\a -> seq a (seq a 0))) ((+1) (head ([]::[] Int)))))
(undefined::Bool -> ([] Int) -> [] Int) ((undefined::Int -> (([] ([] Int)) -> [] Int) -> Bool) 1 ((!!) (tail (undefined::[] (([] ([] Int)) -> [] Int))) (head ([]::[] Int))))
(\a -> id (\b -> seq a (\c -> seq a (undefined::([] Int) -> [] Int)) (seq a (seq b (undefined::[] ([] Bool))))) (seq a (\b -> seq a 0) (seq a id))) (undefined::((Int -> Int) -> Bool) -> ([] (Int -> Int)) -> [] (Int -> Int))
\a -> a
(undefined::([] Int) -> [] Int)
case1 (\a -> \b -> seq a (seq b (undefined::Bool -> [] Int) (seq b (\c -> seq c False) a))) ((undefined::(([] ([] Int)) -> [] (Bool -> Bool)) -> [] Int) (\a -> seq a ((\b -> seq b (seq a (undefined::[] (Bool -> Bool)))) (seq a (seq a (undefined::[] (Int -> [] Bool)))))))
\a -> (undefined::[] Int)
(undefined::Bool -> ([] Int) -> [] Int) ((\a -> seq a False) (\a -> head ((\b -> seq b (seq b ([]::[] (Int -> Int -> Bool)))) (seq a (seq a (undefined::Int))))))
filter ((undefined::(([] Int) -> ([] (([] Int) -> Bool)) -> Int -> Bool) -> Int -> Bool) ((\a -> seq a (seq a (\b -> seq b (\c -> seq b (seq b (seq b (undefined::Int -> Bool))))))) (id True)))
id (undefined::([] ([] ([] (([] Int) -> Bool -> Bool)))) -> ([] Int) -> [] Int) ((\a -> seq a (seq a (seq a (seq a (seq a ([]::[] ([] ([] (([] Int) -> Bool -> Bool))))))))) (\a -> seq a (seq a (\b -> \c -> b)) (seq a (seq a (seq a (undefined::Bool))))))
\a -> filter (undefined::Int -> Bool) a
\a -> (\b -> id (\c -> \d -> a) (id (seq b (undefined::Bool))) False) (undefined::([] Int) -> [] ([] Int))
\a -> seq a (case1 (\b -> \c -> seq c (head ([]::[] ((([] Int) -> Int) -> [] Int)))) ((!!) ([]::[] ((([] Int) -> Int) -> [] Int)) (undefined::Int)) a (seq a head))
case1 (\a -> (undefined::([] Bool) -> ([] Int) -> [] Int)) ((\a -> seq a (++)) (undefined::Bool) ((\a -> seq a (undefined::[] Int)) (undefined::Int))) (undefined::[] Bool)
\a -> (\b -> seq b (\c -> (:) (seq b (undefined::Int)) a)) (seq a ((\b -> seq b (seq b (undefined::Bool))) ((+1) (seq a 0)))) ([]::[] (Bool -> Bool))
\a -> a
\a -> (!!) (seq a (seq a (undefined::[] ((([] ([] Int)) -> [] ([] (Int -> Bool))) -> [] Int)))) (case1 (\b -> (undefined::([] Bool) -> Int)) (seq a 2) (seq a (undefined::[] Bool))) (seq a (head (seq a (seq a (seq a ((\b -> seq a (seq b ([]::[] (([] ([] Int)) -> [] ([] (Int -> Bool)))))) True))))))
(\a -> seq a (filter (seq a (\b -> seq a (seq a (seq b (seq a (\c -> (undefined::Bool))))) ((\c -> seq c (\d -> b)) (seq b (undefined::Bool))))))) (head ((!!) (tail ([]::[] ([] (([] ([] ([] Bool))) -> [] ([] Bool))))) ((+1) ((\a -> seq a (undefined::Int)) (undefined::Bool)))))
head (head ([]::[] ([] ((([] ([] Bool)) -> [] ([] (Bool -> Bool))) -> ([] Int) -> [] Int)))) (\a -> seq a (\b -> ([]::[] ([] (Bool -> Bool)))) (undefined::([] Int) -> Int))
id (undefined::([] (([] (([] ([] ([] Int))) -> [] ([] Bool))) -> Int -> Bool)) -> ([] Int) -> [] Int) (undefined::[] (([] (([] ([] ([] Int))) -> [] ([] Bool))) -> Int -> Bool))
\a -> map (\b -> seq a (seq b (\c -> head) (seq a (seq a ([]::[] Bool)))) (seq a (\c -> (undefined::[] Int)) (seq a (seq a (seq a (undefined::[] ([] (Int -> Bool)))))))) (seq a (seq a ([]::[] ([] (([] ([] (Int -> ([] Int) -> Bool))) -> [] ([] (Int -> ([] Int) -> Bool)))))))
\a -> ([]::[] Int)
\a -> a
tail
(++) ((++) ((undefined::Bool -> [] Int) ((\a -> seq a (undefined::Bool)) (\a -> (undefined::[] Int)))) ((undefined::(([] Int) -> [] (Int -> Bool)) -> [] Int) (undefined::([] Int) -> [] (Int -> Bool))))
(undefined::(([] Int) -> ([] Int) -> ([] ([] Int)) -> [] ([] Int)) -> ([] Int) -> [] Int) (\a -> seq a (\b -> seq a (\c -> seq a (undefined::((Int -> Int -> Bool) -> Int) -> [] ([] Int)) (seq a (seq c (\d -> seq b (undefined::(Int -> Int -> Bool) -> Int)) (undefined::Bool))))))
\a -> a
\a -> head (seq a (seq a (seq a (seq a ([]::[] (Bool -> ([] (Bool -> Bool)) -> [] Int)))))) (id True) (seq a (seq a (map (head (undefined::[] (Int -> Bool -> Bool -> Bool)) (seq a (seq a (undefined::Int)))) (map (seq a (undefined::(([] Int) -> [] Int) -> Bool)) (undefined::[] (([] Int) -> [] Int))))))
\a -> seq a a
(undefined::Int -> (([] Int) -> Int) -> ([] Int) -> [] Int) (id 0) (id (undefined::([] Int) -> Int))
\a -> (!!) ((:) ((\b -> b (undefined::Int)) (seq a (\b -> seq b a))) (seq a (\b -> seq a ([]::[] ([] Int))) (seq a (id (undefined::[] ([] (Int -> Bool))))))) ((undefined::(Int -> Int) -> Int) (seq a ((\b -> seq b (\c -> (undefined::Int))) (seq a ((+1) (undefined::Int))))))
(\a -> \b -> seq b (\c -> b) (\c -> seq a (\d -> ([]::[] ([] ([] (([] Int) -> Bool))))) (seq b (seq c 0)))) (case1 ((!!) (undefined::[] (([] Int) -> [] (([] Bool) -> [] Bool)))) ((\a -> seq a ([]::[] (([] Bool) -> [] Bool))) (tail (undefined::[] ([] Int)))) (filter (\a -> (undefined::Bool)) ([]::[] Int)))
(undefined::(([] ([] Int)) -> [] ([] (Int -> Bool))) -> ([] Int) -> [] Int) (\a -> seq a (undefined::[] ([] (Int -> Bool))))
(!!) ((\a -> seq a (seq a ([]::[] (Bool -> ([] Int) -> [] Int)))) (undefined::Bool)) ((\a -> seq a (seq a 0)) (id True)) ((undefined::(([] Int) -> Int -> [] Int) -> Bool) (undefined::([] Int) -> Int -> [] Int))
(\a -> seq a (seq a (\b -> seq a (undefined::Int -> ([] Int) -> [] Int)) (seq a (seq a (undefined::Bool)))) ((undefined::Int -> Int) (seq a 1))) (\a -> seq a ((\b -> \c -> seq c (map (seq b (undefined::Int -> [] Bool)) (seq a (undefined::[] Int)))) ((!!) ([]::[] (([] Int) -> Bool)) (undefined::Int) (seq a (seq a (seq a ([]::[] Int)))))))
\a -> case1 (seq a (\b -> \c -> seq b ((undefined::Int -> [] Int) (seq c (seq c (seq c 0)))))) a ((undefined::Bool -> Bool -> [] ([] (Int -> Bool))) (even 1) (seq a (((==)::[Int] -> [Int] -> Bool) (undefined::[] Int) a)))
\a -> map (\b -> head (seq a (seq b (\c -> seq c ([]::[] Int)) (\c -> id (undefined::([] Int) -> [] ([] (Bool -> Bool))) a)))) (seq a (seq a (seq a ([]::[] (([] Int) -> [] (Int -> Int -> ([] Int) -> Int))))))
id
case1 ((\a -> seq a (seq a (undefined::Int -> ([] Int) -> ([] Int) -> [] Int))) ((undefined::(Bool -> Bool) -> Bool) ((&&) (undefined::Bool)))) (case1 (\a -> \b -> tail) (head (undefined::[] (([] Int) -> [] Int))) (tail ([]::[] Bool))) (head (undefined::[] ((Int -> [] (([] Int) -> Bool)) -> [] Int)) ((\a -> seq a (undefined::Int -> [] (([] Int) -> Bool))) ((+1) (undefined::Int))))
(\a -> (\b -> seq b tail) (\b -> seq a (undefined::Bool))) (((==)::[Int] -> [Int] -> Bool) ((\a -> seq a (seq a (undefined::[] Int))) (id False)) ((:) (undefined::Int) (head ([]::[] ([] Int)))))
(\a -> id (undefined::Int -> Int -> ([] Int) -> [] Int) a a) ((\a -> seq a (undefined::Int)) (\a -> (!!) (undefined::[] (Bool -> Int -> Int -> Bool)) (undefined::Int) ((!!) (undefined::[] Bool) (undefined::Int))))
(\a -> seq a ((!!) (seq a (seq a (undefined::Bool -> [] (([] Int) -> [] Int))) (seq a (seq a True))) (seq a (\b -> (+1) (undefined::Int)) (\b -> b)))) ((\a -> (!!) ((undefined::([] (Int -> [] Int)) -> [] Bool) (seq a (seq a (undefined::[] (Int -> [] Int)))))) ((\a -> a) 1))
(\a -> \b -> seq a (\c -> seq a (id b)) (seq b (\c -> seq a (seq c head)) (seq b (seq a (seq b (undefined::[] ([] Bool))))))) ((undefined::(([] Int) -> [] ([] Int)) -> Bool -> Int) (\a -> seq a ([]::[] ([] Int))) (((==)::Bool -> Bool -> Bool) True True))
(undefined::Int -> (([] Int) -> ([] Int) -> Bool) -> ([] Int) -> [] Int) ((\a -> id (seq a (undefined::Int))) (((==)::Int -> Int -> Bool) (undefined::Int))) (\a -> \b -> seq b (seq b (seq b (seq b (\c -> id (seq c (undefined::Bool))))) False))
(!!) (undefined::[] (([] Int) -> [] Int)) (id (\a -> 2) (\a -> \b -> (undefined::([] Int) -> [] Bool) (undefined::[] Int)))
(\a -> seq a (\b -> b)) (undefined::Int)
(\a -> \b -> seq a (map (undefined::Bool -> Int) (seq a (seq a ((\c -> seq c (undefined::[] Bool)) (seq a b)))))) ((!!) ((enumFromTo::Int -> Int -> [Int]) (head (undefined::[] Int)) (undefined::Int)) ((\a -> seq a (seq a (undefined::Int))) True))
(undefined::Int -> (([] ([] Int)) -> [] Int) -> ([] Int) -> [] Int) (id (undefined::Int)) (\a -> head ((undefined::Int -> [] (([] (Bool -> Bool)) -> [] Int)) (undefined::Int)) (id (seq a (undefined::Bool -> [] (Bool -> Bool))) (seq a (seq a (seq a (undefined::Bool))))))
tail
(\a -> seq a ((\b -> seq b (\c -> a (undefined::[] Int) (seq c (seq c c)))) (\b -> ([]::[] ([] Bool))))) (\a -> seq a (\b -> (undefined::[] Int)))
(undefined::([] Int) -> [] Int)
(\a -> (\b -> \c -> case1 (\d -> (undefined::([] ([] Bool)) -> [] Int)) (seq b c) (seq b (undefined::[] ([] Bool)))) ((!!) (seq a (undefined::[] Int)) (undefined::Int))) (undefined::([] (Int -> Int)) -> Int -> ([] (Bool -> Bool)) -> [] (Bool -> Bool))
\a -> seq a (seq a (undefined::(([] ([] Bool)) -> [] (Bool -> Bool)) -> [] Int) (\b -> seq b (\c -> (undefined::([] Int) -> [] (Bool -> Bool)) (seq b (seq c a))) (\c -> ((==)::Int -> Int -> Bool) (head c))))
(\a -> seq a (\b -> (!!) ([]::[] (([] Int) -> [] Int)) (seq b (seq a (undefined::Int))))) (odd 0) ((\a -> seq a (\b -> \c -> (\d -> seq a (seq d even)) (\d -> c))) (id (undefined::Int -> ([] Int) -> Bool -> Bool) 0))
(\a -> (!!) (seq a (seq a ([]::[] (Int -> ([] Int) -> [] Int)))) (seq a (undefined::Int))) (case1 (\a -> (undefined::([] Int) -> Bool)) False (undefined::[] Int)) (id ((undefined::(([] Int) -> [] Int) -> Int) ((++) ((\a -> seq a (undefined::[] Int)) (undefined::([] Int) -> [] ([] Bool))))))
case1 (id (\a -> seq a (undefined::Int -> ([] Int) -> ([] Int) -> [] Int) a)) (case1 (\a -> \b -> \c -> (undefined::[] Int)) (\a -> a) ([]::[] Bool)) ((\a -> seq a (seq a (seq a ([]::[] Int)))) (undefined::([] Int) -> ([] Int) -> [] ([] Int)))
\a -> seq a (seq a a)
(\a -> seq a (\b -> seq a ((undefined::(Int -> Int) -> [] Int) (seq a (\c -> (\d -> d) c))))) (\a -> seq a (seq a (head (seq a (map (id (\b -> seq b (&&))) ((undefined::([] Int) -> [] ([] ([] Bool))) ([]::[] Int)))))))
map (\a -> (undefined::Int))
\a -> (undefined::[] Int)
(\a -> \b -> seq a (seq a (\c -> \d -> b)) ((!!) ([]::[] Int) (undefined::Int)) (case1 (\c -> (undefined::([] ([] Bool)) -> Bool)) True (seq b (undefined::[] ([] Bool))))) ((!!) ((:) (\a -> id not True) (tail ((undefined::Int -> [] (([] Int) -> Bool)) (undefined::Int)))))
take (head ((\a -> seq a (\b -> \c -> ([]::[] Int)) (seq a (seq a (seq a ([]::[] (([] Int) -> Bool)))))) (case1 (\a -> head) 0 ([]::[] Int)) ((\a -> seq a (\b -> seq b 0) ([]::[] (Int -> [] Int))) (tail ([]::[] (([] ([] ([] ([] Bool)))) -> [] ([] ([] ([] Bool)))))))))
(\a -> (\b -> seq b (++) ([]::[] Int)) (seq a (case1 (seq a (undefined::Int -> ([] Int) -> Int)) (seq a 2) (seq a ([]::[] Int))))) (\a -> (undefined::[] (Int -> Bool -> Bool -> Bool)))
tail
\a -> seq a (map (seq a ((\b -> seq a ((\c -> \d -> c) (seq b (seq a (undefined::Int))))) ((!!) (seq a (seq a ([]::[] (([] Int) -> [] ([] Bool))))) (undefined::Int)))) (tail (map (\b -> \c -> seq c (\d -> c)) (seq a ([]::[] Bool)))))
\a -> seq a (seq a (\b -> \c -> seq c (\d -> a) (id c))) (\b -> seq b ((undefined::Bool -> ([] Int) -> Bool) True)) (id (\b -> \c -> (undefined::Int)) (take (undefined::Int) ([]::[] ([] (Int -> Bool)))) ((\b -> seq a (seq b (seq a (undefined::Bool)))) (seq a (map even))))
head (tail (head ([]::[] ([] ((([] (Int -> [] Bool)) -> ([] Int) -> [] Bool) -> ([] Int) -> [] Int))))) (undefined::([] (Int -> [] Bool)) -> ([] Int) -> [] Bool)
id
\a -> a
\a -> (enumFromTo'::Int -> Int -> [Int]) ((\b -> case1 (\c -> (undefined::([] Bool) -> Int)) (seq a 0) (seq b ([]::[] Bool))) (seq a id)) (undefined::Int)
\a -> a
(:) (id ((\a -> (undefined::Bool -> (Int -> [] ([] (Int -> Int))) -> Int) (id (seq a (undefined::Bool))) (seq a (undefined::Int -> [] ([] (Int -> Int))))) (\a -> tail ((++) (seq a (seq a (head (seq a ([]::[] ([] ([] (Int -> Int)))))))) (seq a ((undefined::Int -> [] ([] (Int -> Int))) (seq a (undefined::Int))))))))
(undefined::Int -> ([] Int) -> [] Int) ((\a -> seq a (head (filter (\b -> False) (seq a ([]::[] Int))))) (id (id (undefined::[] (Int -> ([] Int) -> Int -> Int -> [] Int)))))
id
(undefined::([] Int) -> [] Int)
(\a -> seq a (\b -> \c -> c) (seq a (\b -> a) (seq a (seq a (seq a 0))))) True
(!!) ((undefined::([] Int) -> [] (Bool -> ([] Int) -> [] Int)) (tail ([]::[] Int))) (id (\a -> 1) (undefined::Bool)) ((\a -> (\b -> not (seq b True)) (seq a (id ([]::[] ([] ([] ([] Int))))))) (id ([]::[] (([] (([] Int) -> [] Bool)) -> Bool -> Bool))))
\a -> (\b -> case1 ((\c -> seq c (:)) (seq b False)) (seq a (undefined::Bool -> [] Int) True) (seq a a)) ((\b -> seq b (seq a (seq a (seq b (seq a (undefined::([] Bool) -> [] ([] (Int -> Bool)))) ([]::[] Bool))))) (seq a (\b -> \c -> a) (seq a 0)))
\a -> a
(\a -> seq a (seq a (:) (seq a (seq a (seq a (seq a (undefined::([] Bool) -> Int))) ([]::[] Bool))))) (\a -> \b -> (\c -> (\d -> seq d (seq b (undefined::Bool))) (seq a (seq c (\d -> (undefined::[] Bool))))) (\c -> seq b (seq b (seq b (seq b (undefined::Bool -> [] Bool)) False))))
\a -> (undefined::[] Int)
id ((\a -> \b -> \c -> take (seq a 2) ([]::[] Int)) (undefined::Bool)) (undefined::([] Int) -> [] ([] Bool))
\a -> case1 (seq a (\b -> (\c -> seq c (\d -> a)) (seq a 0))) (seq a (\b -> a) True) (undefined::[] (([] Int) -> [] ([] Bool)))
\a -> a
\a -> (++) (case1 (undefined::([] Int) -> ([] ([] Int)) -> [] Int) (seq a a) ((\b -> id (seq b ([]::[] ([] Int)))) (seq a a))) a
\a -> map ((undefined::Bool -> Bool -> Int) (seq a ((\b -> seq b (seq b False)) (\b -> b)))) ((++) (seq a (seq a (\b -> (undefined::[] Bool))) (seq a (\b -> b))) (map (\b -> seq a False) a))
(\a -> (\b -> \c -> map (\d -> 2) (seq b (seq b ([]::[] (Bool -> Bool))))) ((\b -> seq a b) a)) (undefined::Int)
(\a -> seq a (\b -> \c -> id c)) (case1 (\a -> \b -> (undefined::Int)) 1 ([]::[] Bool)) (head ((undefined::(Bool -> Bool) -> [] (([] ([] ([] Bool))) -> [] ([] Bool))) id))
\a -> a
(\a -> seq a (\b -> case1 (undefined::Int -> ([] Int) -> [] Int) b (undefined::[] Int))) (\a -> \b -> \c -> c)
\a -> a
(\a -> seq a (\b -> seq a (take (seq b (seq b (seq a 1))))) (seq a (undefined::[] (([] ([] ([] Int))) -> Int -> Bool)))) ((\a -> seq a ([]::[] ((Int -> ([] Int) -> Bool) -> Int -> ([] Int) -> Bool))) ((undefined::Bool -> Int) (((==)::Int -> Int -> Bool) (undefined::Int) (undefined::Int))))
\a -> a
id
\a -> a
(\a -> (\b -> seq a (\c -> seq b (undefined::([] Int) -> [] Int))) (seq a (id (undefined::Bool))) (head (seq a (seq a (seq a (undefined::Bool -> [] Int)) (seq a (seq a (undefined::Bool))))))) ((\a -> id (\b -> \c -> c) (seq a (undefined::Bool))) (undefined::Int))
\a -> map (seq a (seq a (\b -> seq b (undefined::Int -> Bool -> Int)) (not (seq a True)) (undefined::Int))) ((\b -> (\c -> seq c (seq a (undefined::[] Bool))) ((+1) (seq b 0))) (undefined::([] Bool) -> [] (Bool -> Bool)))
(\a -> (\b -> \c -> seq b (undefined::Bool -> [] Int) True) (\b -> seq a (map (seq b (undefined::(([] Int) -> Int) -> Bool -> Bool)) ([]::[] (([] Int) -> Int))))) (\a -> False)
(undefined::([] Int) -> [] Int)
\a -> map (seq a (seq a (undefined::(([] (Int -> ([] Int) -> Bool)) -> [] Int) -> Int))) (take (case1 (seq a (undefined::Bool -> ([] Bool) -> Int)) 2 (seq a ([]::[] Bool))) (seq a ([]::[] (([] (Int -> ([] Int) -> Bool)) -> [] Int))))
\a -> ([]::[] Int)
(\a -> id (id (seq a (seq a (\b -> \c -> c))) (map (seq a (\b -> (undefined::Int -> [] Int))) (seq a (undefined::[] (([] Int) -> Int)))))) ((\a -> seq a (\b -> \c -> seq a (undefined::Int)) (even (a (undefined::Bool) 1))) (undefined::Bool -> Int -> Int))
take ((undefined::(([] (Bool -> Bool)) -> Bool -> Bool) -> Int) ((\a -> seq a (\b -> \c -> \d -> d) (seq a (id 0))) ((undefined::([] Bool) -> [] (([] Int) -> Bool)) ([]::[] Bool))))
case1 (id (\a -> \b -> b)) ([]::[] Int)
\a -> (undefined::[] Int)
tail
(undefined::([] Int) -> [] Int)
\a -> a
\a -> seq a (undefined::[] Int)
\a -> (undefined::(([] Int) -> [] Bool) -> Int -> [] Int) (seq a (\b -> head (undefined::[] (([] Int) -> [] Bool))) (seq a (seq a (seq a (undefined::Int))))) (undefined::Int)
(undefined::Bool -> ([] Int) -> [] Int) ((\a -> seq a ((undefined::([] ([] (Int -> Int))) -> Bool) (seq a ([]::[] ([] (Int -> Int)))))) ((\a -> tail (seq a (undefined::[] (([] Int) -> [] Int)))) ([]::[] ([] Bool))))
(\a -> seq a (\b -> \c -> head ([]::[] (Int -> [] Int)) ((+1) 0))) (case1 (\a -> \b -> (undefined::[] ([] ([] Int)))) (undefined::[] ([] ([] Int))) ([]::[] Bool)) ((\a -> \b -> seq a (seq b (\c -> c)) (seq b (head ([]::[] Int)))) (map (\a -> \b -> b) ([]::[] Bool)))
(\a -> filter (seq a (case1 (undefined::Bool -> ([] Bool) -> Int -> Bool) (undefined::Int -> Bool) ([]::[] Bool)))) (\a -> seq a a)
\a -> seq a (seq a (map (\b -> seq a ((\c -> c a) (seq a (\c -> seq c (seq b (seq b (seq b 0))))))) (seq a (undefined::[] (([] ([] (([] ([] Int)) -> [] Int))) -> [] ([] (([] ([] Int)) -> [] Int)))))))
case1 (\a -> \b -> (!!) ([]::[] (Int -> ([] Int) -> [] Int)) (head b) (seq b (seq b (undefined::Int -> Int)) a)) ((\a -> seq a (\b -> tail (seq b ([]::[] Int)))) ([]::[] (Int -> Int -> [] Int))) ((enumFromTo::Int -> Int -> [Int]) ((\a -> seq a 0) (undefined::[] Bool)) (undefined::Int))
(undefined::Bool -> Bool -> ([] Int) -> [] Int) ((\a -> even a) (undefined::Int)) (not ((\a -> seq a (\b -> seq b False)) (\a -> seq a (undefined::Bool)) ((\a -> \b -> seq b (seq a True)) (undefined::[] Bool))))
(\a -> seq a (\b -> \c -> seq a (undefined::([] Int) -> [] Int))) (undefined::Int) (undefined::Int) (id (undefined::Int))
\a -> tail a
\a -> (undefined::[] Int)
\a -> a
\a -> (enumFromTo::Int -> Int -> [Int]) ((+) ((undefined::([] Bool) -> Int) (tail ([]::[] Bool))) (seq a 1)) (seq a (seq a (\b -> seq a (\c -> 2) (b (seq a 2)))) ((undefined::(Bool -> Bool) -> Int -> Bool) id))
\a -> a
(\a -> \b -> (undefined::(Int -> Int -> Bool) -> ([] Int) -> [] Int) (id (seq a ((==)::Int -> Int -> Bool)))) (id (\a -> seq a 0) ((||) (undefined::Bool))) (case1 (\a -> (undefined::Bool -> ([] Int) -> ([] Int) -> Bool) (seq a False)) (\a -> (undefined::Bool)) ((\a -> seq a ([]::[] Int)) (\a -> seq a a)))
case1 ((!!) ((undefined::Int -> [] (([] Int) -> [] Int)) ((!!) (undefined::[] Int) (undefined::Int)))) ([]::[] Int)
\a -> a
\a -> id (case1 (seq a (\b -> (\c -> \d -> seq c c) (seq a a))) a a)
\a -> (\b -> case1 (:) a (seq b (undefined::([] ([] ([] Int))) -> [] Int) (undefined::[] ([] ([] Int))))) (seq a ((!!) (seq a ((\b -> seq b (seq b (undefined::[] Bool))) True)) 2))
\a -> a
(\a -> seq a (\b -> b)) (case1 (undefined::([] Bool) -> ([] ([] Bool)) -> [] ([] Bool)) ((undefined::([] (Int -> Int -> Int)) -> [] ([] Bool)) (id (undefined::[] (Int -> Int -> Int)))))
filter (\a -> seq a (\b -> (\c -> \d -> seq b c) (seq b True)) (\b -> \c -> (undefined::Int)) (\b -> (undefined::(([] ([] Int)) -> [] ([] Bool)) -> Bool -> Bool) (undefined::([] ([] Int)) -> [] ([] Bool))))
(undefined::(([] ([] (([] Bool) -> [] Bool))) -> ([] Int) -> [] Bool) -> ([] Int) -> [] Int) ((!!) ([]::[] (([] ([] (([] Bool) -> [] Bool))) -> ([] Int) -> [] Bool)) ((\a -> seq a 1) (head (undefined::[] Bool))))
tail
(\a -> seq a (seq a (\b -> seq a (:)) (undefined::[] Int)) (case1 (seq a (undefined::Bool -> ([] Bool) -> Int)) (seq a 0) (seq a ([]::[] Bool)))) (\a -> head (undefined::[] ([] (([] (Bool -> Bool)) -> Bool -> Bool))))
\a -> (undefined::[] Int)
\a -> seq a a
(\a -> seq a (seq a (\b -> tail) (id (filter (seq a (undefined::(Int -> [] Int) -> Bool)) (seq a ([]::[] (Int -> [] Int))))))) (\a -> (:) id (undefined::[] (Bool -> Bool)))
case1 (undefined::([] Int) -> ([] ([] Int)) -> ([] Int) -> [] Int) (filter (\a -> seq a (id (seq a (id (undefined::Bool)))))) (filter (\a -> (&&) False False) ((\a -> seq a (undefined::[] ([] Int))) (undefined::Bool)))
tail
\a -> a
(:) (case1 (undefined::Bool -> ([] Bool) -> Int) (undefined::Int) (id (undefined::[] Bool)))
(\a -> seq a (\b -> tail) (seq a (seq a (seq a (seq a (undefined::([] ([] ([] Int))) -> [] ([] ([] Bool)))))))) (head (undefined::[] Int))
take ((\a -> case1 (\b -> (undefined::([] (Int -> [] Int)) -> Int)) ((-) (undefined::Int) 1) (seq a (undefined::Int -> [] (Int -> [] Int)) (seq a 0))) ([]::[] (Int -> ([] ([] Int)) -> [] ([] (Int -> Bool)))))
case1 (undefined::Bool -> ([] Bool) -> ([] Int) -> [] Int) (\a -> map (\b -> seq a 1) (seq a (seq a (seq a (undefined::[] (([] Int) -> Int -> [] Int)))))) ((\a -> seq a (seq a (seq a (seq a (undefined::[] Bool))))) (\a -> case1 (\b -> id) (seq a ([]::[] Int))))
tail
head (head ([]::[] ([] ((([] Int) -> ([] Int) -> Int -> Int) -> ([] Int) -> [] Int)))) ((undefined::([] (Int -> Int)) -> ([] Int) -> ([] Int) -> Int -> Int) ((!!) ([]::[] ([] (Int -> Int))) (head ([]::[] Int))))
case1 ((\a -> \b -> case1 (seq b (seq a (:)))) (odd ((+1) (undefined::Int)))) ((undefined::Bool -> Int -> ([] Int) -> [] Int) (even (undefined::Int)) ((-) 0 1)) (undefined::[] Int)
head (head (undefined::[] ((([] ([] Int)) -> [] ([] (([] Int) -> ([] Int) -> Bool))) -> [] (([] Int) -> [] Int))) (undefined::([] ([] Int)) -> [] ([] (([] Int) -> ([] Int) -> Bool))))
(:) (case1 (\a -> \b -> \c -> 1) ((\a -> seq a (undefined::([] (Bool -> Bool)) -> Int)) (undefined::[] Int)) ((\a -> seq a ([]::[] Int)) (undefined::Int)) ((++) ([]::[] (Bool -> Bool)) ((undefined::(([] Int) -> [] Int) -> [] (Bool -> Bool)) (take (undefined::Int)))))
\a -> seq a (seq a (undefined::(([] Int) -> ([] Bool) -> [] Bool) -> [] Int) (seq a (seq a ((\b -> seq b ((\c -> seq c (seq b (undefined::([] Int) -> ([] Bool) -> [] Bool))) (seq b (undefined::Bool)))) ((\b -> seq b (seq b (enumFromTo'::Int -> Int -> [Int]))) (\b -> id True))))))
\a -> a
map ((undefined::(([] Int) -> ([] Int) -> Bool) -> Int -> Int -> Int) (\a -> (undefined::Int -> ([] Int) -> Bool) (head a)) ((+) (case1 (\a -> (undefined::([] Bool) -> Int)) 1 ([]::[] Bool)) ((\a -> a) (undefined::Int))))
id ((undefined::Int -> (Int -> Bool) -> ([] Int) -> [] Int) (case1 (\a -> (undefined::([] ([] Int)) -> Int)) (undefined::Int) ([]::[] ([] Int)))) ((undefined::(([] Int) -> Int) -> Int -> Int -> Bool) (\a -> seq a (seq a (seq a 2))) ((!!) (undefined::[] Int) (undefined::Int)))
\a -> seq a (seq a (id (undefined::Int -> (([] Int) -> [] ([] Bool)) -> [] Int))) (seq a (case1 (seq a (undefined::Bool -> ([] Bool) -> Int)) (seq a 2) ([]::[] Bool))) (seq a ((\b -> head (seq b (\c -> ([]::[] (([] Int) -> [] ([] Bool)))) ((+1) 2))) ((\b -> seq a (seq a (seq b (undefined::[] (([] Bool) -> [] Bool))))) ((!!) a (undefined::Int)))))
\a -> a
\a -> a
(\a -> seq a (\b -> seq b (\c -> (undefined::([] Int) -> [] Int)) (undefined::Int))) ((\a -> seq a (seq a a)) 1) ((\a -> (undefined::Bool -> ([] Int) -> Int -> Int -> Int) a) (case1 (\a -> (undefined::([] ([] Bool)) -> Bool)) (undefined::Bool) (undefined::[] ([] Bool))))
id
id (case1 (\a -> (undefined::([] Bool) -> ([] Int) -> [] Int)) ((!!) (undefined::[] (([] Int) -> [] Int)) (undefined::Int)) ((\a -> seq a (seq a (seq a (seq a (undefined::[] Bool))))) ((undefined::Bool -> Int -> [] (Int -> Int -> Bool)) (id True))))
(\a -> seq a (\b -> seq a (\c -> id)) (seq a (seq a ([]::[] Int))) (case1 (\b -> seq b (undefined::([] ([] Int)) -> Bool)) a (undefined::[] ([] Int)))) ((\a -> seq a (seq a (\b -> a))) (odd 0) (\a -> a))
(\a -> seq a (\b -> seq a (\c -> (undefined::[] Int)))) ((\a -> seq a (seq a (seq a (undefined::Int)))) ((!!) ([]::[] Bool) (undefined::Int))) ([]::[] ([] (Int -> Int)))
\a -> a
id (case1 (\a -> seq a (seq a (seq a (\b -> \c -> c)))) (\a -> tail ((undefined::Bool -> [] Int) (seq a (not False)))) ((\a -> (undefined::([] Bool) -> [] ([] (Int -> Bool))) (seq a (undefined::[] Bool))) ((undefined::(Int -> Int) -> Bool) (\a -> a))))
\a -> seq a (seq a ((\b -> seq b a) (undefined::([] Int) -> ([] (Int -> Bool)) -> Bool -> Bool)))
\a -> a
(undefined::([] Int) -> [] Int)
\a -> a
case1 (\a -> \b -> \c -> head ([]::[] ((([] Int) -> [] ([] Bool)) -> [] Int)) (undefined::([] Int) -> [] ([] Bool))) (\a -> a) ([]::[] Int)
(undefined::Bool -> (([] Bool) -> [] (Bool -> Bool)) -> ([] Int) -> [] Int) False (id (id (\a -> seq a (seq a (undefined::([] (([] Int) -> [] Int)) -> [] (Bool -> Bool))) (map (undefined::Bool -> ([] Int) -> [] Int) (seq a a)))))
(\a -> seq a (seq a (seq a (\b -> (undefined::Bool -> ([] Int) -> [] Int))) (seq a 2)) ((\b -> seq b (seq a (seq b (undefined::Bool)))) (filter id (undefined::[] Bool)))) ((\a -> seq a (\b -> seq b ([]::[] ([] Int)))) ([]::[] ([] (Bool -> Bool))) (undefined::Bool))
(\a -> \b -> seq a b) (undefined::([] (([] ([] Int)) -> [] Int)) -> ([] (([] Int) -> [] (Int -> [] Int))) -> Bool)
(\a -> seq a (\b -> \c -> c) (seq a (undefined::([] Bool) -> Bool -> Bool))) ((\a -> seq a (\b -> tail ((\c -> seq c (undefined::[] ([] ([] Int)))) (undefined::Bool)))) (undefined::Int))
\a -> head (take (id (undefined::Bool -> Int) (not False)) (map (\b -> \c -> a) (seq a (undefined::[] Bool)))) (\b -> map (head (undefined::[] (Bool -> Bool -> Bool)) (seq b (seq a (seq b False)))) ((undefined::([] ([] Bool)) -> [] Bool) (seq b (head (undefined::[] ([] ([] Bool)))))))
\a -> a
(\a -> \b -> seq a (undefined::[] Int)) (id (id (undefined::([] Int) -> Int -> Int) (tail (undefined::[] Int))) ((\a -> seq a (seq a (seq a (undefined::Int)))) (\a -> seq a (seq a (seq a (undefined::Bool))))))
(undefined::Bool -> ([] Int) -> [] Int) ((\a -> not (seq a (a (\b -> \c -> (undefined::Bool))))) ((\a -> seq a (\b -> b a (undefined::Int))) 0))
(\a -> seq a (\b -> seq a (seq b take)) a) ((\a -> odd (seq a (undefined::Int))) (undefined::[] (([] Int) -> [] Int))) ((\a -> seq a (seq a (seq a (\b -> (undefined::Int))) (seq a (seq a (seq a ([]::[] Bool)))))) (undefined::[] (Int -> Bool)))
(\a -> (!!) (seq a (undefined::[] (Int -> ([] Int) -> [] Int))) (seq a (seq a 1)) ((\b -> seq b ((+1) (undefined::Int))) (seq a False))) ((undefined::([] Int) -> ([] ([] (Int -> Bool))) -> Bool) (filter odd (undefined::[] Int)) ((\a -> seq a (seq a (seq a ([]::[] ([] (Int -> Bool)))))) (\a -> seq a (seq a (seq a ([]::[] Int))))))
\a -> a
(\a -> seq a (id (seq a ((undefined::([] Bool) -> Bool -> ([] Int) -> [] Int) (seq a (seq a (undefined::[] Bool))) (id False))))) (undefined::([] Int) -> [] ([] Int))
\a -> id (undefined::([] (([] ([] ([] Bool))) -> Bool -> Bool)) -> [] Int) (seq a ((!!) ((:) (seq a ([]::[] (([] ([] ([] Bool))) -> Bool -> Bool))) ([]::[] ([] (([] ([] ([] Bool))) -> Bool -> Bool)))) (seq a (id (undefined::Int -> Int)) (seq a (seq a 2)))))
\a -> ([]::[] Int)
tail
\a -> seq a a
(\a -> seq a (seq a ((undefined::(([] (Int -> Int)) -> [] (Int -> Int)) -> ([] Int) -> [] Int) ((++) ((\b -> seq b ([]::[] (Int -> Int))) (seq a (undefined::Int))))))) tail
(\a -> (++) (seq a (seq a (\b -> \c -> ([]::[] Int)) (seq a (seq a (undefined::Int)))) (\b -> (\c -> seq b (seq b c)) (seq a (undefined::Bool))))) (id (id (id (\a -> (undefined::(([] Int) -> ([] ([] Int)) -> [] Bool) -> ([] ([] Int)) -> [] ([] Bool))))))
id ((\a -> seq a (undefined::Int -> Bool -> ([] Int) -> [] Int) (undefined::Int)) (((==)::Bool -> Bool -> Bool) (not (undefined::Bool)) (undefined::Bool))) ((\a -> (\b -> seq a (seq a (seq b True))) (seq a (seq a (seq a (undefined::([] Int) -> [] ([] Int)))))) ((\a -> (+1) (seq a 0)) ((!!) (undefined::[] Int))))
tail
(\a -> \b -> map (undefined::Int -> Int) ((:) 2 (seq b (seq a b)))) ((\a -> \b -> tail (seq b (seq a (undefined::Int -> [] ([] (Int -> Bool))) (seq a (undefined::Int))))) (head ([]::[] (Int -> ([] Int) -> Bool -> Bool)) (head (undefined::[] Int))))
(\a -> \b -> (undefined::Bool -> ([] (([] Int) -> [] Int)) -> [] Int) ((||) (undefined::Bool) False) (seq b (seq b (\c -> seq a (undefined::[] (([] Int) -> [] Int)))) (seq a (seq a (undefined::[] Bool))))) (\a -> (undefined::[] ([] ([] Bool))))
(!!) ((\a -> (!!) (head (undefined::[] ([] ([] (([] Int) -> [] Int))))) (seq a 0)) ((==)::Bool -> Bool -> Bool)) ((\a -> (undefined::Bool -> Int) (seq a False)) (\a -> \b -> a))
case1 (case1 (undefined::Bool -> ([] Bool) -> Int -> ([] Int) -> [] Int) ((undefined::Bool -> Int -> ([] Int) -> [] Int) True) ((undefined::Bool -> [] Bool) True)) ((\a -> (!!) (seq a ([]::[] ([] Int))) (seq a 0)) (\a -> (undefined::Int -> [] Int)))
\a -> map (head ((!!) (seq a (seq a (undefined::Bool -> [] ([] (Bool -> Int)))) (seq a (seq a (undefined::Bool)))) (case1 (undefined::Int -> ([] Int) -> Int) (undefined::Int) a))) (seq a (id (\b -> (undefined::[] Bool)) (undefined::Int -> [] ([] Bool))))
\a -> seq a (\b -> (undefined::Bool -> [] Int) (undefined::Bool)) (head (seq a (seq a ([]::[] (([] (([] Int) -> ([] Int) -> Bool)) -> ([] (Int -> Int -> [] Int)) -> Int -> Int)))))
case1 (\a -> (undefined::([] Bool) -> ([] Int) -> [] Int)) (undefined::([] Int) -> [] Int) ((\a -> seq a (a (seq a ([]::[] Int)) (undefined::[] Int))) ((!!) (undefined::[] (([] Int) -> ([] Int) -> [] Bool)) 0))
(undefined::([] Int) -> [] Int)
(\a -> \b -> id (\c -> b) (\c -> seq a (\d -> seq a (undefined::[] (Int -> Bool))) (seq b (seq b (seq a True))))) (undefined::Int)
\a -> seq a ((\b -> (!!) (seq b (seq a ([]::[] (Bool -> [] Int)))) 2 (not (seq a (b ([]::[] Int) ([]::[] (([] ([] Int)) -> [] ([] Bool))) (undefined::Int) ([]::[] Int))))) (\b -> \c -> (!!) (seq c (\d -> seq c (undefined::[] (Int -> ([] Int) -> Bool))) (even 2)) (seq b (seq a ((undefined::Bool -> Int) False)))))
\a -> (\b -> \c -> seq b (id (undefined::Bool -> [] Int)) (not True)) (seq a ((+) (head (undefined::[] Int)) (seq a (seq a (undefined::Int))))) (seq a (seq a ((undefined::(([] Int) -> Int) -> Bool -> ([] Bool) -> [] Bool) (seq a (\b -> (undefined::([] Int) -> Int)) (tail (seq a ([]::[] Bool)))))))
\a -> case1 (seq a ((!!) (undefined::[] (Bool -> ([] Bool) -> [] Int)) (id (seq a (undefined::Int))))) (seq a a) ([]::[] Bool)
\a -> filter ((undefined::(([] ([] Int)) -> [] ([] Int)) -> Int -> Bool) (\b -> (!!) (id ([]::[] ([] ([] Int)))) (undefined::Int))) a
\a -> seq a (seq a (\b -> (undefined::((([] Bool) -> [] Bool) -> [] ([] Bool)) -> [] Int) (\c -> map (\d -> seq b ([]::[] Bool)) (seq b ([]::[] ([] (([] ([] Int)) -> Int)))))) (seq a (seq a ((undefined::(([] Int) -> Int) -> [] (([] (([] Bool) -> Bool)) -> [] Bool)) (seq a (\b -> \c -> seq c (undefined::Int)) (head (seq a ([]::[] ([] ([] (Int -> Int)))))))))))
\a -> seq a a
id (id (\a -> (\b -> seq b (undefined::Bool -> ([] Int) -> [] Int)) (seq a True)) ((\a -> a) (\a -> \b -> seq a b))) ((\a -> \b -> seq a True) (undefined::Int) (map ((undefined::Int -> Int -> Int -> Bool) 0)))
(\a -> (\b -> seq a ((undefined::([] Bool) -> ([] Int) -> [] Int) (seq b (seq a (undefined::[] Bool))))) (id (\b -> \c -> c) (seq a (seq a (seq a (undefined::Int)))))) (case1 (\a -> map (\b -> \c -> c)) ((undefined::Int -> [] (([] Int) -> [] Int)) 0) ((\a -> seq a ([]::[] Bool)) ([]::[] ([] (Int -> Bool)))))
(\a -> seq a (seq a (seq a ((\b -> seq a (seq b (:) (undefined::Int))) (\b -> seq a (\c -> c) (odd (undefined::Int))))))) (id ((\a -> (\b -> seq b (\c -> seq a (undefined::[] ([] (Int -> Bool))))) (seq a False)) ((\a -> seq a ([]::[] Int)) (id (\a -> a)))))
(\a -> seq a (map (seq a (\b -> seq b (undefined::([] (Int -> Int)) -> Int -> Int)) (seq a (id 1)) ((undefined::([] Bool) -> [] (Int -> Int)) (head (seq a ([]::[] ([] Bool)))))))) (map (undefined::([] Int) -> Int -> [] Int))
\a -> a
\a -> head (undefined::[] (([] (Int -> [] Int)) -> [] Int)) ((undefined::Bool -> Int -> [] (Int -> [] Int)) (((==)::[Int] -> [Int] -> Bool) a (undefined::[] Int)) ((undefined::([] ([] Int)) -> Int) (id (seq a (undefined::[] ([] Int))))))
(!!) ((undefined::(Int -> Int -> [] Int) -> [] (([] Int) -> [] Int)) ((!!) (undefined::[] (Int -> Int -> [] Int)) (undefined::Int))) ((\a -> (!!) ([]::[] Int) (seq a (seq a (undefined::Int)))) ((\a -> seq a (seq a (seq a ([]::[] (([] ([] Bool)) -> [] ([] Bool)))))) (head (undefined::[] Int))))
\a -> seq a (undefined::(([] Int) -> Int -> Int -> [] Int) -> [] Int) (\b -> seq b ((\c -> seq c (seq a ((undefined::(Int -> Bool) -> Int -> Int -> [] Int) (undefined::Int -> Bool)))) (seq b (\c -> seq c (seq a (undefined::Int -> Bool -> Bool)) (seq a (undefined::Int))))))
(undefined::(([] Int) -> [] ([] (Bool -> Bool))) -> Bool -> ([] Int) -> [] Int) (\a -> map (\b -> seq b (undefined::[] (Bool -> Bool))) (seq a (seq a (undefined::[] (([] Int) -> [] Int))))) ((\a -> seq a (\b -> seq a (seq a False)) (seq a (id ([]::[] Int)))) ((\a -> seq a 2) (\a -> seq a (tail ([]::[] Int)))))
\a -> a
\a -> take ((+) (head (id (undefined::(Bool -> Bool) -> [] Int) (\b -> seq a b))) (seq a ((!!) a) (id (seq a 0)))) ((undefined::(Int -> [] (Int -> Int)) -> [] Int) (undefined::Int -> [] (Int -> Int)))
(\a -> head (seq a (undefined::[] (([] ([] ([] Bool))) -> ([] Int) -> [] Int))) (map (\b -> (undefined::[] ([] Bool))) (seq a (seq a ([]::[] (Int -> Bool)))))) (\a -> (undefined::(([] ([] Int)) -> [] Bool) -> [] (Int -> [] Int)) (seq a (seq a (\b -> \c -> b)) (seq a (seq a (seq a (undefined::[] Bool))))))
case1 ((undefined::([] ([] (Int -> Int))) -> Int -> ([] Int) -> [] Int) ((\a -> seq a (seq a (seq a (undefined::[] ([] (Int -> Int)))))) (undefined::Int -> [] Int))) (undefined::[] Int)
(undefined::(([] (Int -> Int)) -> [] (Int -> Int)) -> ([] Int) -> [] Int) (id (\a -> \b -> seq a (seq a (undefined::Bool -> [] (Int -> Int)) (seq a (undefined::Bool)))) (case1 (\a -> (undefined::([] Int) -> ([] Bool) -> Bool)) (\a -> seq a (undefined::Bool)) (undefined::[] Int)))
(undefined::([] (([] (([] ([] Int)) -> [] (([] Int) -> Bool))) -> Int)) -> ([] Int) -> [] Int) ((!!) (undefined::[] ([] (([] (([] ([] Int)) -> [] (([] Int) -> Bool))) -> Int))) (head ([]::[] ((Int -> Int) -> Int)) (undefined::Int -> Int)))
\a -> (undefined::[] Int)
\a -> (\b -> seq b (seq a (seq a (seq b ((\c -> head (seq b (seq b c))) (seq a (seq b (seq a (undefined::Bool -> [] ([] Int))) (undefined::Bool)))))))) (\b -> seq a (undefined::[] (([] (Int -> Bool -> Bool)) -> [] (Int -> Bool -> Bool))))
(\a -> \b -> case1 (\c -> \d -> b) (seq a b) (seq b (undefined::Int -> [] Int) (seq b (undefined::Int)))) (\a -> \b -> \c -> case1 (seq b (undefined::Bool -> Bool -> ([] Bool) -> Int) (undefined::Bool)) (seq a 1) ((undefined::([] Int) -> [] Bool) (undefined::[] Int)))
(undefined::([] Int) -> [] Int)
\a -> (\b -> seq b (seq a (seq b (undefined::(([] Int) -> [] (Int -> [] Int)) -> [] Int))) (seq b (seq b (\c -> filter (\d -> seq c False) (seq b (undefined::[] (Int -> [] Int))))))) (seq a (case1 (seq a (seq a (head ([]::[] (Bool -> ([] Bool) -> Int))))) ((+1) (id (undefined::Int))) ([]::[] Bool)))
\a -> (undefined::(([] ([] ([] Int))) -> [] ([] ([] Bool))) -> [] Int) (\b -> id (seq a (id (\c -> (undefined::Bool -> [] ([] ([] Bool)))) (head (seq b ([]::[] ([] Bool)))) (seq a id (seq b (seq b (undefined::Bool)))))))
(\a -> head (seq a (tail ([]::[] ((Int -> [] Int) -> ([] Int) -> [] Int)))) (\b -> ([]::[] Int))) (\a -> (undefined::Int -> [] Int))
\a -> a
(undefined::(([] ([] (([] ([] ([] Int))) -> [] ([] Bool)))) -> [] Bool) -> ([] Int) -> [] Int) ((\a -> seq a (\b -> seq a (\c -> seq b (undefined::[] Bool)) (id (undefined::[] Int)))) ((\a -> seq a (seq a False)) (\a -> seq a (tail (undefined::[] Bool)))))
(\a -> \b -> (undefined::(([] Int) -> [] ([] Bool)) -> [] Int) (seq a (seq a (seq b (undefined::Int -> ([] Int) -> [] ([] Bool)))) (seq b (head b)))) (id (id (undefined::Bool -> ([] Int) -> ([] ([] Int)) -> [] Bool)) ((\a -> a) True))
\a -> a
(\a -> (!!) (seq a (map (\b -> \c -> (undefined::[] Int)) ([]::[] Int))) ((\b -> seq b (seq a (undefined::Int))) (head (seq a (undefined::[] ([] ([] Bool))))))) (\a -> seq a (seq a (seq a (\b -> seq b (seq a ([]::[] ([] (([] (Int -> Int)) -> Int -> Int))))) (id ((+) (seq a (undefined::Int)) (seq a 1))))))
\a -> seq a (undefined::(([] (([] Bool) -> [] (Bool -> Bool))) -> [] (([] Int) -> Bool)) -> [] Int) (\b -> seq a (undefined::(([] Int) -> Bool -> Bool) -> [] (([] Int) -> Bool)) (undefined::([] Int) -> Bool -> Bool))
(++) ([]::[] Int)
\a -> a
(\a -> (!!) (seq a (\b -> ([]::[] (([] Int) -> [] Int))) (id (seq a (undefined::Int)))) (seq a (seq a (head ([]::[] (([] ([] Bool)) -> Int)) ([]::[] ([] Bool)))))) ((\a -> map (map (\b -> seq b (seq a (undefined::[] (([] Int) -> Bool)))))) (head (undefined::[] Int)))
\a -> seq a a
\a -> a
id
(\a -> seq a (seq a ((undefined::([] (([] Int) -> Bool)) -> ([] Int) -> [] Int) ((undefined::(Int -> Int -> Bool) -> [] (([] Int) -> Bool)) (\b -> \c -> seq a (seq c False)))))) (id ((\a -> seq a (undefined::(([] Int) -> [] ([] Bool)) -> Int)) (head (undefined::[] Int))) (id (\a -> \b -> ([]::[] ([] Bool))) (undefined::Bool)))
\a -> ([]::[] Int)
(\a -> seq a (seq a (\b -> seq b (seq b (seq a (\c -> id b))) ((\c -> c) (undefined::Bool))))) (case1 (\a -> head (seq a (seq a ([]::[] (([] (Int -> Int)) -> Int -> Int))))) (\a -> seq a (\b -> a) (seq a (head (undefined::[] (([] ([] ([] ([] Bool)))) -> Int))))))
(\a -> seq a (filter (\b -> (\c -> seq b (seq c (undefined::([] (Int -> Bool)) -> Bool)) (seq c (undefined::[] (Int -> Bool)))) (seq a (tail (undefined::[] ([] ([] (([] Int) -> [] (([] Int) -> Bool)))))))))) (undefined::([] ([] Int)) -> [] ([] (Int -> Bool)))
\a -> seq a (map (head (undefined::[] ((([] (([] ([] Int)) -> [] ([] Int))) -> [] (Bool -> Bool)) -> Int))) (seq a (seq a (seq a (seq a (id (seq a (id ([]::[] (([] (([] ([] Int)) -> [] ([] Int))) -> [] (Bool -> Bool)))))))))))
(undefined::([] Int) -> [] Int)
(!!) ((\a -> seq a (\b -> seq a (undefined::[] (([] Int) -> [] Int)))) (undefined::Int) ((undefined::(Int -> Bool) -> Int) (undefined::Int -> Bool))) ((+1) ((\a -> seq a (seq a (\b -> (undefined::Int)) (seq a (seq a (undefined::Bool))))) ([]::[] ([] (Bool -> Bool)))))
map (undefined::Int -> Int)
(\a -> seq a ((undefined::([] Bool) -> Bool -> ([] Int) -> [] Int) (head (seq a ([]::[] ([] Bool)))))) ((:) (undefined::[] ([] Bool)) (head (undefined::[] ([] ([] ([] Bool)))))) ((\a -> (!!) (seq a (seq a ([]::[] Bool))) (seq a (seq a (undefined::Int)))) (undefined::Bool))
id
(\a -> seq a (\b -> b)) (\a -> seq a ([]::[] ([] (Bool -> Bool))))
\a -> seq a ((\b -> b (seq a (\c -> seq b a) (seq b (seq a False)))) (seq a ((\b -> seq b (\c -> \d -> b)) (id a)))) (seq a (seq a (\b -> case1 (undefined::Bool -> ([] Bool) -> Int) (undefined::Int) ([]::[] Bool))) (\b -> seq a (\c -> b) 0))
(\a -> \b -> seq a b) (\a -> seq a (\b -> (undefined::Int -> [] ([] ([] Int))) 2) (\b -> seq b (case1 (\c -> (undefined::([] Bool) -> [] ([] ([] Bool)))) b (seq a ([]::[] Bool)))))
id
case1 (id (undefined::([] ([] ([] Bool))) -> ([] ([] ([] ([] Bool)))) -> ([] Int) -> [] Int)) ((\a -> seq a tail) (undefined::Int)) (id (\a -> seq a (undefined::[] ([] ([] ([] Bool))))) ((\a -> seq a True) 2))
head (undefined::[] (([] Int) -> [] Int))
id
(undefined::Int -> Int -> Int -> ([] Int) -> [] Int) (undefined::Int) (undefined::Int) ((\a -> seq a (undefined::(Int -> ([] Int) -> Bool) -> Int)) ([]::[] Bool) (\a -> seq a (\b -> seq a (seq a (seq b (undefined::Int -> Bool)) a))))
(undefined::(([] ([] Int)) -> [] ([] (Int -> Bool))) -> ([] Int) -> [] Int) (\a -> (undefined::[] ([] (Int -> Bool))))
\a -> (\b -> \c -> seq b (seq b (undefined::Int -> [] Int))) (seq a (id (undefined::Int -> Int))) ((\b -> b 2 a) (\b -> seq a (id (undefined::([] Int) -> Bool)))) (head (seq a ([]::[] Int)))
\a -> seq a (seq a (id (\b -> seq b (seq a (seq a (id (\c -> seq a a))) (seq b (seq b ((++) (undefined::[] ([] Bool)) ([]::[] ([] Bool))))))))) (seq a (seq a (\b -> seq a (id (\c -> seq b ([]::[] ([] (([] Int) -> [] Int))))))) ((-) ((+1) (undefined::Int)) (seq a (undefined::Int))))
map (head (undefined::[] (Int -> Int -> Int)) 1)
(++) (head ((\a -> map (\b -> head (undefined::[] (Bool -> [] Int)) (seq b (seq a True))) (seq a (seq a (seq a (id ([]::[] (([] Bool) -> Bool))))))) (case1 (\a -> \b -> seq a (undefined::Int)) ((+1) 2) (undefined::[] Bool))))
(:) (case1 ((\a -> seq a (undefined::Bool -> Bool -> ([] Bool) -> Int) (seq a False)) id) ((\a -> seq a (seq a (seq a (seq a 1)))) ((\a -> seq a a) (undefined::Bool))) ((\a -> seq a (undefined::Bool -> [] Bool) (seq a (undefined::Bool))) (undefined::Int -> [] Bool)))
\a -> (\b -> seq b (map (id (\c -> seq a (undefined::Int))) (undefined::[] ([] ([] (([] ([] Int)) -> [] Int)))))) (seq a (seq a (undefined::[] (([] (([] ([] Int)) -> [] ([] ([] Int)))) -> Bool))))
(undefined::Int -> (([] Bool) -> [] (Bool -> Bool)) -> ([] Int) -> [] Int) ((\a -> seq a (seq a (undefined::Int))) (undefined::Int -> Int -> ([] Int) -> Bool)) (\a -> map (seq a ((undefined::Int -> Int -> Bool -> Bool) (seq a (seq a (undefined::Int))))) (map (\b -> seq b 2) a))
(\a -> id (seq a (\b -> \c -> id) (seq a (seq a (undefined::Int)))) ((\b -> seq b ((+1) 0)) (seq a (undefined::([] ([] Int)) -> [] Bool)))) (\a -> (\b -> seq a (\c -> seq a (seq c ([]::[] (Int -> Int -> Int)))) (seq a (seq b (\c -> seq a c)))) (seq a (map (\b -> seq a (undefined::[] (([] Int) -> Bool -> Bool))) (seq a (seq a a)))))
(:) ((undefined::((([] Int) -> ([] Int) -> [] Int) -> Int) -> Int) (\a -> (\b -> seq a (seq a (seq b (undefined::Bool -> Int)) (undefined::Bool))) (seq a (tail ((undefined::Bool -> [] (([] Int) -> [] Int)) (undefined::Bool))))))
\a -> a
(\a -> (\b -> seq a (seq a (\c -> seq b tail)) (seq a 0)) (seq a (\b -> seq a (seq a ([]::[] (([] Int) -> [] Int)))) (id ([]::[] ([] Bool))))) ((\a -> seq a (seq a (\b -> seq a (\c -> True) (seq b (seq a (undefined::Int)))))) (id (\a -> seq a (undefined::([] Int) -> Int -> Bool)) 2))
(\a -> (\b -> seq b (\c -> map (\d -> seq a (undefined::Int)) (seq a c))) ((\b -> seq b (id (undefined::Int -> [] Bool))) ((:) id (undefined::[] (Bool -> Bool))))) (map (\a -> seq a (seq a (\b -> seq a (undefined::Bool -> [] ([] Bool)) (seq a (undefined::Bool))))) (map (\a -> True) ([]::[] (Int -> Bool))))
\a -> a
(\a -> (\b -> seq a (seq b (\c -> \d -> d) (\c -> True))) (seq a (case1 (\b -> (undefined::([] Bool) -> [] (Int -> Bool))) (seq a (undefined::[] (Int -> Bool))) (seq a (undefined::[] Bool))))) (case1 (\a -> id (\b -> seq b (undefined::([] Int) -> Int -> Bool))) (\a -> \b -> seq b (undefined::Bool)) ((\a -> seq a ([]::[] Int)) True))
\a -> a
\a -> seq a a
\a -> map ((undefined::Bool -> ((([] Int) -> [] (Bool -> Bool)) -> Int -> Int) -> Int) (seq a not (seq a (odd 2)))) (seq a ((++) (seq a (seq a ([]::[] ((([] Int) -> [] (Bool -> Bool)) -> Int -> Int)))) (id ([]::[] ((([] Int) -> [] (Bool -> Bool)) -> Int -> Int)))))
\a -> (++) (head (seq a ([]::[] ((([] Int) -> [] ([] (Int -> Int))) -> [] Int))) (undefined::([] Int) -> [] ([] (Int -> Int)))) a
map ((+) ((undefined::(([] (Int -> Bool -> Bool)) -> Bool -> Bool) -> Int) (\a -> (\b -> (!!) (seq b (seq b (undefined::[] (Bool -> Bool)))) (head (undefined::[] Int))) (seq a (\b -> seq a (undefined::[] ([] Int)))))))
\a -> (undefined::[] Int)
(\a -> \b -> seq a (undefined::Int -> ([] Int) -> [] Int)) (head ([]::[] Int)) (id (head (undefined::[] (([] Int) -> Bool)) (undefined::[] Int))) 0
map (\a -> head (undefined::[] (([] (([] ([] ([] Bool))) -> ([] Int) -> Bool)) -> Int)) (seq a ((\b -> seq b (seq a ([]::[] (([] ([] ([] Bool))) -> ([] Int) -> Bool)))) ((\b -> seq b (undefined::Bool)) a))))
(\a -> take (seq a (seq a ((\b -> seq b (seq a (undefined::([] Bool) -> Int))) (\b -> \c -> seq c (undefined::Bool)) (seq a (undefined::[] Bool)))))) ((\a -> seq a (seq a (seq a (seq a (\b -> seq b ([]::[] (([] Int) -> Bool))))))) (id (\a -> seq a head) (((==)::[Int] -> [Int] -> Bool) ([]::[] Int) (undefined::[] Int))))
\a -> seq a (undefined::(([] (([] ([] Bool)) -> [] ([] (Bool -> Bool)))) -> Bool -> Bool) -> [] Int) (\b -> (undefined::(([] (([] ([] Int)) -> [] ([] Int))) -> [] Int) -> Bool -> Bool) (seq b (\c -> map (seq c (+1)) a)))
\a -> seq a a
id
(undefined::([] Int) -> [] Int)
(:) (head (undefined::[] ((Int -> Int -> Int) -> ([] (Bool -> Bool)) -> Int)) (\a -> head (seq a (seq a (undefined::([] Bool) -> [] (Int -> Int))) (seq a (seq a ([]::[] Bool))))) ((\a -> seq a (\b -> ([]::[] (Bool -> Bool))) (seq a a)) (id (\a -> seq a (undefined::Int)) (\a -> seq a a))))
id ((!!) ((!!) ([]::[] ([] (Int -> ([] Int) -> [] Int))) ((+1) 0)) ((undefined::(([] Bool) -> Bool) -> Int) (\a -> seq a (seq a True))) (head (id ([]::[] ((([] ([] Int)) -> Int -> [] Int) -> Int))) (\a -> (undefined::(Int -> Int -> Int) -> Int -> [] Int) (\b -> seq b (\c -> c)))))
(undefined::([] Int) -> [] Int)
(:) ((undefined::Bool -> Int) ((\a -> ((==)::Int -> Int -> Bool) (undefined::Int) a) ((!!) (undefined::[] (Int -> Int)) (undefined::Int) ((+) 0 1))))
\a -> map ((\b -> \c -> \d -> seq b (undefined::Int)) (undefined::[] Bool) (seq a (\b -> seq b (seq a ([]::[] (Int -> Bool)))) (seq a (\b -> b)))) a
\a -> seq a ((!!) ([]::[] (([] (([] Bool) -> Int -> Int -> [] Int)) -> [] Int)) (seq a ((\b -> b) 2))) (seq a ((\b -> seq b (seq b (tail (undefined::[] (([] Bool) -> Int -> Int -> [] Int))))) (\b -> head (seq b (undefined::[] (Bool -> Bool))) (head (seq a (undefined::[] Bool))))))
\a -> a
\a -> ([]::[] Int)
\a -> a
(\a -> seq a (seq a ((\b -> seq a (seq b (undefined::([] Int) -> ([] Int) -> [] Int))) (seq a (undefined::Int))))) (\a -> seq a (\b -> (undefined::Bool -> Bool)) (seq a (seq a (seq a 1)))) ((\a -> head (seq a (\b -> seq b ([]::[] ([] Int))) (a (undefined::[] ([] Bool))))) (\a -> map (\b -> (undefined::Bool)) (undefined::[] Int)))
(\a -> case1 (\b -> head ([]::[] (([] Int) -> ([] Int) -> [] Int))) (\b -> b) ((\b -> seq b ([]::[] Int)) (seq a ([]::[] Bool)))) ((\a -> (\b -> id (seq b (undefined::[] (([] Int) -> [] Int)))) (\b -> seq a (seq a (seq a (undefined::Bool))))) (take ((undefined::([] Bool) -> Int) (id ([]::[] Bool)))))
\a -> a
\a -> seq a (filter (seq a (seq a (\b -> seq b (\c -> seq a (not (undefined::Bool))))) (seq a (\b -> \c -> id) (seq a (seq a (seq a True))))) ((enumFromTo::Int -> Int -> [Int]) (seq a ((\b -> b) (seq a (undefined::Int)))) (seq a (seq a ((+1) (seq a 2))))))
case1 (\a -> \b -> \c -> case1 (\d -> seq a (undefined::([] Bool) -> [] Int)) c (seq a (undefined::[] Bool))) ((\a -> \b -> take a b) (undefined::Int)) ((\a -> seq a (seq a (undefined::Int -> [] ([] ([] (Int -> Bool))))) (undefined::Int)) (\a -> \b -> seq b (undefined::Int)))
\a -> seq a ((++) a a)
head ([]::[] (([] ([] Int)) -> Bool -> ([] Int) -> [] Int)) (case1 (\a -> \b -> (undefined::[] ([] Int))) (undefined::[] ([] Int)) ([]::[] Int)) ((\a -> seq a (\b -> seq b True)) (\a -> seq a 0) ((\a -> seq a (seq a (undefined::Int))) (head ([]::[] Bool))))
(\a -> \b -> seq b (seq b (seq a (seq a (\c -> (undefined::Int -> [] Int)) (seq a (seq a (+1))))) (seq a (seq b (seq b (\c -> c) (seq b (undefined::Int))))))) ((\a -> seq a take) ((\a -> head (seq a (undefined::[] ([] Int)))) (undefined::([] Int) -> [] ([] Bool))))
\a -> seq a (\b -> seq b (id (id (\c -> a))) (\c -> map (\d -> seq c (undefined::[] Bool)) (tail c))) (seq a (map (seq a (\b -> \c -> seq c (undefined::([] Int) -> Bool)) (seq a (seq a (seq a True)))) (seq a (\b -> seq a ([]::[] (Int -> Int))) (\b -> b))))
\a -> a
(\a -> seq a (seq a (:)) (head (seq a (seq a (seq a ([]::[] Int)))))) (\a -> id (seq a (seq a (\b -> seq a (not True)))) (\b -> map (undefined::Bool -> [] Bool) (seq a a)))
(undefined::([] Int) -> [] Int)
(\a -> seq a (seq a (\b -> seq a (\c -> c)) a)) ((\a -> \b -> seq a (seq a 2)) (head (undefined::[] ([] ([] Bool)))) (head ([]::[] (Int -> Int -> Int))))
(undefined::(([] (([] Bool) -> [] Bool)) -> ([] Int) -> [] ([] Int)) -> ([] Int) -> [] Int) ((undefined::Int -> ([] (([] Bool) -> [] Bool)) -> ([] Int) -> [] ([] Int)) ((+1) ((\a -> a) (head ([]::[] Int)))))
\a -> a
(\a -> seq a (seq a (undefined::(([] Int) -> Int -> Int) -> ([] Int) -> [] Int)) (seq a (\b -> seq a (\c -> \d -> 2) (undefined::Bool)))) (\a -> (!!) a (seq a ((\b -> b) 0)))
(undefined::Bool -> ([] Int) -> [] Int) ((\a -> seq a (\b -> seq a (seq b True)) ((+1) 1)) ((\a -> seq a (\b -> seq b (undefined::Int -> [] Int))) (\a -> head (seq a ([]::[] Int)))))
id (\a -> \b -> seq a (\c -> seq b (undefined::([] ([] ([] Bool))) -> [] Int)) (seq a (seq b (seq a (undefined::[] Bool)))) ((\c -> seq a (seq c ([]::[] ([] ([] Bool))))) (tail ([]::[] Bool)))) (\a -> head (seq a (tail (tail (seq a (seq a ([]::[] (([] ([] (([] Int) -> Bool))) -> Int -> [] (([] Int) -> Bool)))))))))
\a -> seq a ((undefined::(([] Int) -> [] ((([] (Int -> Int)) -> Int -> Int) -> ([] (Int -> Int)) -> Int -> Int)) -> [] Int) (seq a (seq a (\b -> seq b (seq a (seq a (seq b (undefined::[] ((([] (Int -> Int)) -> Int -> Int) -> ([] (Int -> Int)) -> Int -> Int)))))))))
(undefined::Bool -> (Int -> [] Bool) -> ([] Int) -> [] Int) (undefined::Bool) (id (\a -> seq a (seq a (undefined::([] (Int -> Int)) -> Bool -> [] Bool)) (seq a (seq a (seq a (undefined::[] (Int -> Int))))) (seq a (case1 (undefined::Int -> ([] Int) -> Bool) (undefined::Bool) ([]::[] Int)))))
filter (case1 (id ((\a -> seq a (\b -> (undefined::([] Bool) -> Int -> Bool))) (undefined::Int))) (\a -> (\b -> seq a (seq b (b (undefined::Int)))) (((==)::Int -> Int -> Bool) a)) ((\a -> (\b -> seq b (undefined::[] Bool)) a) ((undefined::Bool -> Int) (undefined::Bool))))
head ([]::[] ((([] Bool) -> Bool) -> Int -> ([] Int) -> [] Int)) ((\a -> seq a (\b -> True)) ((!!) (undefined::[] Bool) (undefined::Int))) ((\a -> (-) (seq a 0)) (undefined::Int -> [] (([] Int) -> Bool)) (case1 (undefined::Int -> ([] Int) -> Int) (undefined::Int) (undefined::[] Int)))
(\a -> seq a (\b -> \c -> c) (seq a (undefined::[] (Int -> Bool)))) ((undefined::Bool -> ([] Int) -> Int -> Int) ((\a -> seq a (not True)) 2))
(:) ((\a -> (undefined::([] (Int -> Int)) -> (([] Int) -> Bool) -> Int) (undefined::[] (Int -> Int)) (\b -> seq a (seq b (undefined::([] Int) -> Bool)) (undefined::[] Int))) ((\a -> \b -> seq a ((\c -> seq a (seq c ([]::[] ([] ([] (Int -> [] Int)))))) (even 1))) (undefined::Bool)))
(undefined::([] Int) -> [] Int)
\a -> seq a (seq a (\b -> (\c -> seq c (\d -> ([]::[] Int))) (seq b head)) (case1 (undefined::Bool -> ([] Bool) -> Int) (undefined::Int) (seq a (id (undefined::[] Bool)))) ((\b -> seq a ((\c -> seq b (seq c 2)) (undefined::Bool))) (seq a (seq a (map (seq a (undefined::([] Int) -> [] Bool)) (seq a (undefined::[] ([] Int))))))))
\a -> (undefined::Int -> [] Int) (seq a (seq a (seq a (case1 (seq a (undefined::Bool -> ([] Bool) -> Bool -> Int)) (\b -> (undefined::Int)) (seq a ([]::[] Bool)) (seq a (\b -> seq b (undefined::Bool)) (id ([]::[] Bool)))))))
\a -> seq a (undefined::(Int -> [] Bool) -> [] Int) (id (\b -> (\c -> \d -> c) (seq b (seq b ([]::[] Bool)))) (seq a ((\b -> \c -> seq c (seq b ([]::[] ([] ([] Bool))))) (head (undefined::[] Int)))))
(\a -> head (seq a ((undefined::Bool -> [] (Int -> ([] Int) -> [] Int)) (seq a (seq a True))))) (undefined::(([] Int) -> Int) -> [] ([] Int)) ((undefined::(([] ([] Int)) -> [] Bool) -> Int -> Int) (\a -> (undefined::[] Bool)) (id (id ((\a -> seq a (undefined::Int)) False))))
\a -> case1 (\b -> (undefined::Int -> ([] (Int -> Int -> [] Int)) -> [] Int) (seq b (seq b (seq a (seq a 1))))) a (map (undefined::(Int -> Bool) -> Int -> Int -> [] Int) (seq a (seq a (seq a (undefined::[] (Int -> Bool))))))
\a -> a
\a -> seq a (seq a (seq a (seq a (seq a (seq a ((\b -> seq b (undefined::Int -> Bool -> [] Int)) (\b -> seq a (undefined::Bool)) (head a))))))) (undefined::Bool)
\a -> seq a (id (filter (seq a (seq a ((\b -> seq a (seq a (undefined::(Int -> [] Bool) -> Int -> Bool)) (\c -> seq a (seq b ([]::[] Bool)))) (\b -> take (seq a (undefined::Int)) b)))) (seq a (seq a ((\b -> filter (\c -> seq a True) (seq b a)) (tail (seq a (seq a (undefined::[] (([] ([] ([] Bool))) -> [] ([] ([] Bool))))))))))))
id (case1 (\a -> seq a (seq a (\b -> \c -> seq b c) (seq a (\b -> (\c -> seq c (undefined::Int -> [] Int)) b)))) ((\a -> seq a (seq a (undefined::[] Int))) (\a -> seq a (\b -> seq b (undefined::[] ([] (([] Int) -> Int -> Bool)))) (seq a (seq a (seq a (undefined::Int)))))))
(undefined::Int -> ([] Int) -> [] Int) ((\a -> id (\b -> seq a (undefined::Int)) (\b -> (undefined::[] ([] (Bool -> Bool))))) (map (\a -> \b -> not (seq b True))))
case1 (head (map (\a -> seq a (\b -> seq a (\c -> c))) ((\a -> seq a (seq a (undefined::[] Int))) (head ([]::[] ([] ([] (Int -> Int)))))))) (map (\a -> seq a (\b -> seq a 1) (seq a (a (undefined::Bool) even 1))) (head (undefined::[] ([] (Bool -> (Int -> Bool) -> Int -> Bool)))))
(:) (undefined::Int)
take 1
map (\a -> seq a (\b -> seq a a) (\b -> (undefined::Bool -> [] ([] Bool)) b))
\a -> a
\a -> ([]::[] Int)
(undefined::(([] (([] ([] ([] Int))) -> [] ([] ([] Bool)))) -> [] (Int -> Int)) -> ([] Int) -> [] Int) (\a -> (undefined::[] (Int -> Int)))
\a -> a
case1 ((undefined::([] Bool) -> Int -> ([] Int) -> ([] Int) -> [] Int) (map (undefined::(([] ([] ([] Bool))) -> Int) -> Bool) (tail (undefined::[] (([] ([] ([] Bool))) -> Int))))) (\a -> a) (undefined::[] Int)
\a -> (!!) ((undefined::(Int -> [] Bool) -> [] (Int -> [] Int)) (\b -> tail ([]::[] Bool))) (seq a ((\b -> (+1) b) (seq a ((+1) 1)))) (seq a (seq a (id (undefined::(Bool -> Bool) -> Int -> Int)) (head (seq a ([]::[] (Bool -> Bool)))) (seq a (undefined::Bool -> Int) ((||) False (undefined::Bool)))))
(\a -> seq a ((undefined::Bool -> Bool -> ([] Int) -> [] Int) (seq a (undefined::Bool))) (case1 (\b -> seq a (undefined::([] ([] Bool)) -> Bool)) (seq a (undefined::Bool)) ([]::[] ([] Bool)))) (take ((\a -> \b -> a) 1 ((undefined::Int -> [] (([] Int) -> [] Int)) 2)))
(++) ((\a -> (\b -> (:) (id 1) (seq b (seq a ([]::[] Int)))) (undefined::([] Int) -> Bool -> Bool -> Bool)) (\a -> ([]::[] ([] (Int -> Int -> [] Int)))))
(\a -> seq a (seq a (undefined::([] Bool) -> Bool -> ([] Int) -> [] Int) (seq a (undefined::[] Bool))) ((\b -> b (seq a a)) (seq a (((==)::Int -> Int -> Bool) a)))) ((\a -> seq a (seq a (undefined::([] Bool) -> Int)) ([]::[] Bool)) (\a -> map (seq a (undefined::([] (Bool -> Bool)) -> [] ([] Int))) (seq a (seq a (seq a ([]::[] ([] (Bool -> Bool))))))))
case1 (undefined::([] ([] Bool)) -> ([] ([] ([] Bool))) -> ([] Int) -> [] Int) (undefined::([] Int) -> [] Int) (undefined::[] ([] ([] Bool)))
(\a -> filter (\b -> case1 ((!!) (undefined::[] (Bool -> ([] Bool) -> Bool)) b) (seq a (not False)) (id (undefined::[] Bool)))) (\a -> (enumFromTo'::Int -> Int -> [Int]) (seq a (\b -> (\c -> seq c (undefined::Int)) False) (map (\b -> seq b ([]::[] (Int -> Bool))) (seq a (seq a (undefined::[] Bool))))))
case1 (\a -> \b -> (!!) (seq b (seq b (seq a (undefined::[] (([] Int) -> [] Int))))) ((-) 2 1)) (case1 ((!!) (undefined::[] (Int -> ([] Int) -> [] Int)) 2) ((\a -> seq a (undefined::[] Int)) (undefined::Bool))) ((\a -> seq a (undefined::Int -> [] ([] ([] (Bool -> Bool)))) (seq a (undefined::Int))) ((\a -> seq a ([]::[] ([] ([] (Int -> Bool))))) (tail (undefined::[] Bool))))
(\a -> (\b -> seq b (\c -> \d -> seq c d) (seq a (b (undefined::[] (([] Int) -> Int -> Int))))) (\b -> ([]::[] Int))) (\a -> (undefined::[] (([] ([] (Int -> [] Int))) -> Int -> Bool)))
\a -> (undefined::(([] Int) -> [] (([] ([] (Int -> Int))) -> [] ([] (Int -> Int)))) -> [] Int) (\b -> (undefined::[] (([] ([] (Int -> Int))) -> [] ([] (Int -> Int)))))
filter ((undefined::(Int -> ([] Int) -> ([] (([] ([] Int)) -> [] (([] Int) -> Bool))) -> [] ([] ([] Bool))) -> Int -> Bool) (undefined::Int -> ([] Int) -> ([] (([] ([] Int)) -> [] (([] Int) -> Bool))) -> [] ([] ([] Bool))))
(undefined::([] Int) -> [] Int)
\a -> a
(\a -> seq a (\b -> \c -> head (seq b (seq c (seq c (undefined::[] ([] Int))))))) ((undefined::(([] Int) -> [] ([] Bool)) -> Bool) (\a -> seq a (seq a ([]::[] ([] Bool))))) ([]::[] ([] ([] (Int -> Int))))
(undefined::(([] Int) -> [] Bool) -> ([] Int) -> [] Int) ((!!) ((undefined::([] Int) -> [] (([] Int) -> [] Bool)) (undefined::[] Int)) (id (undefined::([] ([] ([] Bool))) -> Int) (undefined::[] ([] ([] Bool)))))
case1 (\a -> case1 (\b -> \c -> seq c (\d -> d)) (\b -> seq b (seq a ([]::[] Int))) ([]::[] Int)) (head (undefined::[] ((([] Int) -> ([] ([] Int)) -> [] Bool) -> [] Int)) ((\a -> \b -> \c -> seq c (seq a (undefined::[] Bool))) ((!!) (undefined::[] Int) 2)))
\a -> a
id
(undefined::(([] Int) -> ([] ([] ([] (Bool -> Bool)))) -> Int -> [] ([] ([] Bool))) -> ([] Int) -> [] Int) (\a -> \b -> \c -> (!!) ([]::[] ([] ([] ([] Bool)))) (seq c (seq a c)))
id
(undefined::([] Int) -> [] Int)
(\a -> \b -> seq a (map ((\c -> \d -> c) (seq a 0)) ((!!) ([]::[] ([] Bool)) (seq a (a (undefined::[] (Int -> [] Bool)) (undefined::Int)))))) ((undefined::Bool -> ([] (Int -> [] Bool)) -> Int -> Int) ((\a -> not (seq a True)) (undefined::Bool)))
head (head ((\a -> seq a (seq a (seq a (head (undefined::[] (Int -> [] ([] (([] Int) -> [] Int))))) (seq a (undefined::([] ([] (Int -> Int))) -> Int) (undefined::[] ([] (Int -> Int))))))) ((undefined::([] (([] (([] Int) -> [] (Int -> Int))) -> Bool)) -> Int) ([]::[] (([] (([] Int) -> [] (Int -> Int))) -> Bool)))))
\a -> a
\a -> (:) (seq a (seq a (case1 (undefined::Int -> ([] Int) -> Int -> Int) id ([]::[] Int)) (seq a 2))) (filter (case1 (undefined::Bool -> ([] Bool) -> Int -> Bool) (\b -> True) (seq a (undefined::[] Bool))) (undefined::[] Int))
\a -> map id a
head (take ((\a -> seq a (seq a (undefined::Int))) (undefined::Bool)) ([]::[] ((([] ([] Int)) -> [] ([] Int)) -> ([] Int) -> [] Int))) (\a -> a)
(!!) ((\a -> seq a (undefined::[] (([] Int) -> [] Int))) ((+1) ((\a -> seq a (seq a (undefined::Int))) (id (undefined::[] ([] ([] Bool))))))) (id (head ([]::[] Int)))
(undefined::([] ([] ([] Bool))) -> ([] (([] Int) -> Bool)) -> ([] Int) -> [] Int) (map (undefined::Int -> [] ([] Bool)) (head (undefined::[] ([] Int)))) ([]::[] (([] Int) -> Bool))
tail
head (undefined::[] (Bool -> Bool -> ([] Int) -> [] Int)) False (case1 (\a -> (\b -> seq b (undefined::([] Int) -> Bool)) (seq a ([]::[] (Int -> Int)))) (head (id (undefined::[] Bool))) ((undefined::Bool -> [] Int) (undefined::Bool)))
\a -> seq a ((\b -> take (seq a (\c -> 1) (seq b (seq b (seq a (undefined::([] Bool) -> ([] Int) -> Bool))))) (seq b a)) (undefined::([] (([] Int) -> Int -> Int -> Bool)) -> Int -> Int -> Int))
(undefined::Bool -> ([] Int) -> [] Int) (not (case1 ((!!) ([]::[] (([] Int) -> Bool))) (((==)::Int -> Int -> Bool) (undefined::Int) 2) ((:) 0 ([]::[] Int))))
head (take (head (tail (undefined::[] ((([] Int) -> Bool -> Bool -> Bool) -> Int))) ((undefined::([] Bool) -> ([] Int) -> Bool -> Bool -> Bool) (tail ([]::[] Bool)))) ((undefined::Bool -> Int -> [] (([] Int) -> [] Int)) (undefined::Bool) (undefined::Int)))
(\a -> seq a ((undefined::Int -> Int -> ([] Int) -> [] Int) (seq a 2)) ((\b -> seq b (seq a 0)) (seq a (undefined::[] ([] (([] Int) -> Bool -> Bool)))))) (\a -> (undefined::(([] Int) -> [] ([] Int)) -> Bool) (\b -> seq b (seq a (\c -> seq c ([]::[] ([] Int)))) ((++) ([]::[] ([] (Int -> Int))) ([]::[] ([] (Int -> Int))))))
(\a -> (\b -> seq b (id (undefined::Bool -> ([] Int) -> [] Int))) (seq a (id 2))) ((!!) ([]::[] (([] Int) -> Bool -> Bool -> Bool)) (id 2)) True
(\a -> (\b -> seq b (\c -> \d -> seq a d) (undefined::Bool)) (\b -> seq b (map (\c -> \d -> ([]::[] Bool)) (seq b ([]::[] ([] ([] Bool))))))) (\a -> seq a (head (undefined::[] ((([] Int) -> ([] Int) -> [] ([] Int)) -> [] Bool)) (seq a (seq a (seq a (id (\b -> \c -> seq b ([]::[] ([] Int)))))))))
\a -> (\b -> case1 (\c -> (undefined::([] Int) -> Int -> [] Int)) (seq b (undefined::Int -> [] Int)) (undefined::[] Int)) (not (seq a (seq a not) True)) ((undefined::(([] Int) -> [] (([] Bool) -> [] Bool)) -> Int) (\b -> tail (id (undefined::[] (([] Bool) -> [] Bool)))))
id (\a -> id (\b -> (undefined::[] Int))) ((undefined::Bool -> (Int -> Int) -> Bool) (odd (undefined::Int)) ((undefined::Bool -> Int -> Int) (undefined::Bool)))
(undefined::(([] ([] Bool)) -> [] ([] Bool)) -> Bool -> ([] Int) -> [] Int) (\a -> map (seq a (undefined::(([] Int) -> Int -> Int) -> [] Bool)) (head (undefined::[] ([] (([] Int) -> Int -> Int))))) (case1 (\a -> \b -> seq b (id False)) ((\a -> seq a False) 0) (take 0 ([]::[] Int)))
tail
\a -> (\b -> seq a (\c -> case1 (seq b (:)) a (seq b a)) (seq b (\c -> ([]::[] (Int -> Int))))) (\b -> seq b (\c -> case1 (\d -> (undefined::([] Int) -> [] ([] Bool))) (seq a (undefined::[] ([] Bool))) (undefined::[] Int)) (map ((undefined::(([] Int) -> Bool -> Bool) -> Int -> Int) (undefined::([] Int) -> Bool -> Bool))))
\a -> seq a (undefined::[] Int)
(undefined::(([] Int) -> [] ((Int -> Int -> Int) -> Int -> Int -> Int)) -> ([] Int) -> [] Int) (\a -> seq a (undefined::Int -> [] ((Int -> Int -> Int) -> Int -> Int -> Int)) (seq a (undefined::Bool -> Int) (((==)::Int -> Int -> Bool) (undefined::Int) (undefined::Int))))
\a -> seq a ((\b -> case1 (\c -> (undefined::([] Bool) -> Int -> [] Int)) (\c -> (undefined::[] Int)) (seq b ([]::[] Bool))) (head ((\b -> seq b (seq b ([]::[] (([] Int) -> ([] Int) -> Bool)))) (seq a (seq a (undefined::Bool))))) (seq a (seq a ((\b -> seq b (seq b (head (undefined::[] (Bool -> Int)) (seq a (seq b (undefined::Bool)))))) (seq a (tail ((\b -> seq b (undefined::[] (Bool -> Bool))) (seq a (undefined::Bool)))))))))
\a -> map (\b -> (undefined::(Bool -> [] ([] (Int -> Bool))) -> Int) (head (seq a ((++) ([]::[] (Bool -> [] ([] (Int -> Bool)))) ([]::[] (Bool -> [] ([] (Int -> Bool)))))))) (take (undefined::Int) (seq a (seq a (undefined::[] (([] ([] Bool)) -> [] Bool)))))
\a -> seq a (seq a (seq a ((\b -> case1 (\c -> \d -> seq d (seq d a)) (seq a a) (seq a (seq b ([]::[] (Int -> Int))))) ((undefined::([] Bool) -> [] (Int -> ([] Int) -> ([] Int) -> [] ([] Int))) (seq a (seq a (seq a (seq a (undefined::[] Bool)))))))))
\a -> map (seq a (undefined::(Int -> Bool) -> Int)) (seq a (\b -> seq b (seq a (undefined::[] (Int -> Bool)))) tail)
\a -> seq a (undefined::[] Int)
(\a -> (!!) (undefined::[] (([] Int) -> [] Int)) a) (case1 (\a -> seq a (undefined::([] Bool) -> Bool -> Int)) (\a -> seq a 1) (undefined::[] Bool) (undefined::Bool))
(\a -> \b -> id ((undefined::Bool -> ([] (([] Int) -> Bool)) -> [] Int) (seq b (undefined::Bool)) (seq b (seq b (seq a (\c -> ([]::[] (([] Int) -> Bool))) (seq a (seq a 0))))))) (\a -> (\b -> id (seq b (seq a (seq b ([]::[] (([] (Bool -> Bool)) -> [] (Bool -> Bool))))))) (seq a (seq a (id head) ([]::[] Int))))
\a -> map (\b -> 1) ([]::[] (([] ([] (([] ([] Int)) -> [] (([] Int) -> Bool)))) -> [] (([] Int) -> [] Bool)))
tail
\a -> seq a (\b -> head (undefined::[] ((([] (([] Int) -> Int)) -> [] Int) -> [] Int))) (seq a (\b -> seq a (seq b (undefined::Bool))) (seq a (\b -> seq a (seq a (undefined::[] Bool))))) (seq a (seq a (\b -> \c -> a)) (seq a ((!!) (seq a (seq a (tail ([]::[] (Int -> Bool))))))))
(\a -> seq a ((\b -> seq b (seq a (undefined::Bool -> ([] Int) -> [] Int))) (head (seq a (undefined::[] ([] Bool)))))) (id ((\a -> odd a) 1)) ((undefined::([] (Bool -> Bool)) -> Int -> Bool) (id ([]::[] (Bool -> Bool))) (head ((enumFromTo::Int -> Int -> [Int]) (undefined::Int) 2)))
(undefined::Int -> (Int -> Int) -> ([] Int) -> [] Int) (case1 (\a -> seq a (undefined::([] Int) -> Int)) (undefined::Int) (undefined::[] Int)) id
(\a -> \b -> seq a (id (undefined::([] Int) -> ([] Int) -> [] Int)) (seq a (seq a (undefined::[] Int)))) (take (id 1) (tail (undefined::[] (Int -> [] ([] (Bool -> Bool)))))) ((\a -> seq a ((\b -> seq b (seq b (undefined::Int))) (undefined::Int -> [] Bool))) (((==)::Int -> Int -> Bool) (undefined::Int) (undefined::Int)))
(\a -> seq a (\b -> id take a)) 0 (\a -> (\b -> \c -> ((==)::Bool -> Bool -> Bool) b (seq c b)) ((undefined::([] Int) -> Bool) ((++) ([]::[] Int) ([]::[] Int))))
\a -> case1 ((\b -> (undefined::Bool -> Bool -> ([] Bool) -> [] Int) (seq b (undefined::Bool))) ((\b -> seq b (undefined::Int)) (odd (undefined::Int)))) (seq a (head (seq a ([]::[] (Int -> [] Int)))) (seq a (seq a 0))) (seq a (\b -> (undefined::(Int -> [] Int) -> [] Bool)) (seq a (seq a True)) (seq a (\b -> a)))
\a -> seq a a
id (\a -> \b -> b) (undefined::([] (([] Int) -> Int -> Int -> [] Int)) -> ([] Int) -> Bool)
(\a -> head (seq a ([]::[] (([] (Int -> Bool)) -> ([] Int) -> [] Int)))) ((:) (undefined::Int -> [] Int) (undefined::[] (Int -> [] Int))) ((\a -> seq a (seq a (seq a (seq a (seq a ([]::[] (Int -> Bool))))))) (map (\a -> id ([]::[] (Bool -> Bool))) (tail (undefined::[] ([] (Int -> Int))))))
case1 (\a -> seq a (seq a (\b -> id (\c -> \d -> d) (seq a (head ([]::[] ([] ([] Int)))))))) id (undefined::[] (Int -> Int))
take (case1 ((undefined::([] ([] Bool)) -> Int -> ([] Int) -> Int) (undefined::[] ([] Bool))) 1 ((undefined::(([] Int) -> [] (Int -> [] Int)) -> [] Int) (\a -> seq a (undefined::Int -> [] (Int -> [] Int)) 1)))
\a -> (undefined::(([] ([] (([] Int) -> ([] ([] Int)) -> [] Bool))) -> [] (Int -> [] Int)) -> [] Int) (\b -> (\c -> seq b ((!!) (seq b (seq b (undefined::[] ([] (Int -> [] Int))))) c)) ((undefined::([] Bool) -> Int) ([]::[] Bool)))
\a -> a
(undefined::([] (([] Bool) -> [] Bool)) -> Int -> ([] Int) -> [] Int) ([]::[] (([] Bool) -> [] Bool)) (head (id (undefined::[] ((([] ([] (Int -> Int))) -> Bool -> Bool) -> Int))) (\a -> (undefined::Int -> Bool -> Bool) (seq a 0)))
(undefined::Bool -> ([] ([] ([] (Int -> [] Bool)))) -> ([] Int) -> [] Int) ((\a -> seq a (seq a (seq a (undefined::Bool)))) (\a -> seq a a)) (undefined::[] ([] ([] (Int -> [] Bool))))
filter (id ((!!) ((\a -> case1 (\b -> seq a tail) (seq a (id ([]::[] Bool))) (undefined::[] Bool)) (id (case1 (undefined::Bool -> ([] Bool) -> Int -> Int) (+1) ([]::[] Bool) ((!!) ([]::[] Int) (undefined::Int)))))))
take ((\a -> a) (id ((\a -> seq a (undefined::Int)) 2)))
\a -> seq a (map (id (\b -> seq b (seq b (\c -> (undefined::Int))) (\c -> seq b (\d -> \e -> e) (head (undefined::[] ([] ([] (Int -> Bool)))))))) (seq a ((!!) ([]::[] ([] (([] Int) -> Int -> Int -> Int))) (seq a (head (id a))))))
\a -> (:) 1 a
\a -> a
case1 ((undefined::Int -> Bool -> ([] Bool) -> ([] Int) -> [] Int) ((\a -> seq a 1) (\a -> (undefined::Bool)))) ((undefined::Int -> Int -> ([] Int) -> [] Int) 1 1) ((!!) ((\a -> seq a ([]::[] ([] Bool))) (undefined::Int)) ((!!) (undefined::[] Int) 2))
\a -> seq a (seq a (seq a a))
(\a -> seq a (\b -> take 0 (undefined::[] Int))) ((\a -> \b -> a) (undefined::Bool) (map (\a -> seq a ([]::[] ([] Bool))) ([]::[] Int)))
\a -> (!!) (seq a (filter ((undefined::Bool -> ([] Int) -> Bool) (seq a True)) (head (id (seq a (seq a (undefined::[] ([] ([] Int))))))))) (seq a ((+1) (seq a (\b -> \c -> c) (seq a (seq a (undefined::[] (([] Bool) -> Bool)))) (undefined::Int))))
(\a -> seq a (seq a (head (seq a (seq a (seq a ([]::[] (Bool -> ([] Int) -> [] Int))))))) (seq a (seq a ((\b -> seq a (seq b (undefined::Bool))) (take a))))) (undefined::Int)
(undefined::(([] Int) -> ([] ([] Int)) -> [] Bool) -> ([] Int) -> [] Int) ((\a -> \b -> seq a (\c -> seq a (\d -> seq d ([]::[] Bool)) (id ([]::[] (Int -> Bool))))) ((\a -> seq a (seq a (seq a (undefined::Int)))) (\a -> (undefined::Bool))))
(!!) ((\a -> (\b -> seq b (undefined::[] (([] Int) -> [] Int))) (seq a (seq a (seq a (undefined::Int))))) (\a -> seq a (seq a (seq a ((undefined::([] Bool) -> [] ([] Int)) (seq a (undefined::[] Bool))))))) ((\a -> (!!) (head (undefined::[] ([] Int))) (seq a (seq a 2))) ((\a -> seq a ([]::[] (([] Int) -> [] Int))) (((==)::Int -> Int -> Bool) 1 (undefined::Int))))
(\a -> \b -> a (seq b (undefined::[] ([] ([] Bool)))) (seq a (\c -> 0) (\c -> b)) ((-) 2 (seq a (undefined::Int)))) (\a -> seq a (seq a (\b -> \c -> (undefined::Int -> [] Int))) (undefined::(Int -> Int) -> [] ([] Bool)))
head ([]::[] (([] (([] (([] ([] ([] Bool))) -> [] ([] Bool))) -> Int -> Bool)) -> ([] Int) -> [] Int)) (undefined::[] (([] (([] ([] ([] Bool))) -> [] ([] Bool))) -> Int -> Bool))
\a -> ([]::[] Int)
\a -> a
(\a -> seq a (id (\b -> \c -> c))) (((==)::[Int] -> [Int] -> Bool) (tail (undefined::[] Int)) (undefined::[] Int)) (\a -> map ((!!) (tail (seq a ([]::[] Int)))) (seq a (\b -> seq a ([]::[] Int)) (seq a (undefined::[] (Int -> Bool)))))
(\a -> (undefined::Bool -> Bool -> ([] Int) -> [] Int) (seq a (not False)) (seq a (seq a (seq a (seq a ((undefined::(([] Int) -> Bool) -> Bool) (seq a (undefined::([] Int) -> Bool)))))))) (id ((\a -> seq a (undefined::(([] Int) -> Int -> Bool) -> Int)) (head (undefined::[] ([] Bool))) (\a -> head (seq a ([]::[] (Bool -> Int -> Bool))) (odd (seq a 1)))))
(\a -> seq a (\b -> seq b ((\c -> \d -> seq c (undefined::[] Int)) ([]::[] Int)))) (id (\a -> seq a ([]::[] Bool)) (id False)) ((undefined::(([] Bool) -> Bool) -> ([] ([] Int)) -> [] ([] Int)) ((undefined::Bool -> ([] Bool) -> Bool) (id True)))
(\a -> seq a (\b -> b)) (\a -> id (undefined::([] Int) -> [] (([] Int) -> Int)))
(undefined::(([] ([] (([] Int) -> [] ([] Bool)))) -> [] (Int -> ([] ([] Int)) -> [] ([] Int))) -> ([] Int) -> [] Int) (\a -> (\b -> seq b (seq a (seq b (undefined::[] (Int -> ([] ([] Int)) -> [] ([] Int)))))) (seq a (seq a (seq a (seq a (undefined::([] (Int -> Bool)) -> Bool))) (seq a (seq a (seq a ([]::[] (Int -> Bool))))))))
\a -> (undefined::Int -> [] Int) ((\b -> \c -> seq c (seq b (undefined::Int))) (seq a (seq a (seq a ([]::[] Bool)))) (\b -> seq b (seq b (undefined::(Bool -> Bool) -> [] ([] Int))) (\c -> c)))
id
case1 (undefined::Bool -> ([] Bool) -> ([] Int) -> [] Int) (\a -> seq a (seq a (map (\b -> seq b 1) (id (undefined::[] Bool))))) (filter ((undefined::([] Int) -> Bool -> Bool) ([]::[] Int)) ((\a -> seq a ([]::[] Bool)) (undefined::Int)))
id (\a -> \b -> \c -> c) (map (\a -> id (undefined::[] ([] Bool))) ([]::[] Int)) (id (\a -> seq a ((undefined::Bool -> Int) (seq a (undefined::Bool)))) ((\a -> map (seq a (undefined::([] ([] ([] Int))) -> Int))) (undefined::[] Int)))
id
head (head (undefined::[] (Bool -> Int -> [] (([] Int) -> [] Int))) ((\a -> a) (not False)) (case1 (\a -> \b -> 2) ((\a -> seq a (undefined::Int)) (undefined::Bool)) ((++) ([]::[] Bool) ([]::[] Bool))))
id (id (\a -> \b -> b) (undefined::([] (([] Int) -> ([] Int) -> [] Bool)) -> ([] Int) -> [] Int))
\a -> seq a a
case1 (id (\a -> seq a (\b -> take) True) (\a -> seq a (seq a (\b -> (undefined::[] Bool))) a)) (map ((\a -> \b -> seq a (seq a 0)) (id ([]::[] ([] (Int -> Bool))))) (filter (undefined::Bool -> Bool) (head ([]::[] ([] Bool)))))
\a -> tail a
\a -> seq a (seq a ((\b -> \c -> map (\d -> seq c (undefined::Int)) (seq b ([]::[] (Bool -> Bool)))) ((undefined::Int -> ([] Int) -> [] ([] Int)) (seq a (seq a (seq a (undefined::Int)))))) (not False))
(\a -> \b -> seq a (undefined::Bool -> ([] Int) -> [] Int) True) (undefined::Int) (undefined::([] ([] ([] Int))) -> [] ([] Bool))
(\a -> id (seq a (undefined::(([] Int) -> [] Bool) -> ([] Int) -> [] Int)) ((\b -> \c -> seq b ([]::[] Bool)) (seq a (seq a (a (undefined::[] Int) 0 1))))) (undefined::([] Int) -> Int -> Int -> Int)
(undefined::(([] Int) -> ([] ([] Int)) -> [] Bool) -> ([] Int) -> [] Int) (\a -> (\b -> head (seq a (\c -> (undefined::[] (([] ([] Int)) -> [] Bool))) (seq b (seq b (undefined::Int))))) (seq a (\b -> (undefined::([] Bool) -> Int) (id (seq b (undefined::[] Bool))))))
(\a -> (++) (seq a (\b -> ([]::[] Int)) (\b -> \c -> (undefined::[] (Int -> Int))))) (undefined::([] Int) -> ([] (([] (Int -> Int)) -> Int -> Int)) -> [] (Bool -> Bool))
(\a -> filter (\b -> seq b (head (undefined::[] (Bool -> Bool -> Bool))) (seq a (seq a (seq a (undefined::Bool)))) (id even 0))) (undefined::[] (([] Bool) -> [] Bool))
\a -> a
\a -> a
id (head (undefined::[] ((([] ([] Int)) -> [] ([] (Int -> Bool))) -> ([] Int) -> [] Int)) (\a -> seq a (seq a (seq a (\b -> \c -> seq c ([]::[] ([] (Int -> Bool)))) 0 0))))
(undefined::([] Int) -> [] Int)
\a -> seq a ((\b -> seq a (id (seq b (\c -> seq b a)))) ((\b -> b (seq a (seq a 0))) (undefined::Int -> Bool)) ((\b -> head (seq b (undefined::[] ((([] Int) -> [] ([] Bool)) -> Bool)))) (seq a (\b -> False) (seq a ([]::[] ([] Bool))))))
\a -> case1 (\b -> (undefined::([] (([] Int) -> Int -> Bool)) -> [] Int)) a (seq a (map (\b -> \c -> even) a))
id
head (undefined::[] (Int -> Int -> ([] Int) -> [] Int)) ((\a -> head (seq a ([]::[] Int))) ([]::[] ([] (([] ([] Bool)) -> [] Bool)))) (case1 (\a -> seq a (undefined::([] Int) -> Bool -> Int)) (undefined::Bool -> Int) (undefined::[] Int) (case1 (\a -> head) (undefined::Bool) (undefined::[] Bool)))
\a -> seq a (id (\b -> \c -> ([]::[] Int))) (seq a (undefined::Bool)) ((undefined::Int -> ([] (Int -> Int)) -> Int -> Int) (seq a (seq a (\b -> (undefined::Int))) (seq a (seq a (seq a (undefined::[] ([] (([] Int) -> Bool))))))))
\a -> a
\a -> a
map (id (\a -> (undefined::Int)))
\a -> a
\a -> a
\a -> a
\a -> a
id
(undefined::([] Int) -> [] Int)
(\a -> \b -> seq a (seq b b)) (undefined::Int -> ([] Bool) -> [] (Bool -> Bool))
\a -> seq a a
(\a -> id ((undefined::([] Bool) -> ([] Int) -> [] Int) ((undefined::Bool -> [] Bool) (seq a a)))) (id (\a -> seq a (undefined::(Int -> Bool) -> Bool)) (undefined::Bool -> Int) ((\a -> seq a (id (undefined::Int -> Bool))) (odd 2)))
take ((!!) ([]::[] ((([] (Int -> Int)) -> Int -> Int -> Bool) -> Int)) 2 (\a -> \b -> seq a (\c -> (!!) ((\d -> head d) (seq a (undefined::[] ([] Bool)))) 0)))
case1 (\a -> \b -> (\c -> seq c (undefined::Int -> ([] Int) -> [] Int) (undefined::Int)) ((\c -> c) False)) (\a -> seq a (id (\b -> a)) True) (filter (\a -> seq a (seq a (seq a True))) ((undefined::([] (Bool -> Bool)) -> [] Int) (undefined::[] (Bool -> Bool))))
head ((\a -> case1 (undefined::Int -> ([] Int) -> [] (([] Int) -> [] Int)) (id (seq a ([]::[] (([] Int) -> [] Int)))) ((\b -> seq b (undefined::[] Int)) (\b -> seq b ([]::[] Bool)))) ((\a -> case1 (seq a (undefined::Int -> ([] Int) -> Int)) (seq a (undefined::Int)) (seq a (undefined::[] Int))) (undefined::([] (([] (Int -> Bool)) -> [] (Int -> Bool))) -> [] Bool)))
(undefined::(([] Int) -> ([] (([] (Int -> Bool)) -> [] (Int -> Bool))) -> Int -> Int) -> ([] Int) -> [] Int) (\a -> \b -> (undefined::([] ([] (Bool -> Bool))) -> Int -> Int -> Int) (seq a (undefined::[] ([] (Bool -> Bool)))) (undefined::Int))
(\a -> seq a (seq a (\b -> (undefined::[] Int)))) ((\a -> seq a 0) (id (\a -> seq a (\b -> \c -> a) (undefined::Bool))))
(undefined::(([] Int) -> ([] Int) -> [] Int) -> ([] Int) -> [] Int) (\a -> \b -> seq a (\c -> b) (\c -> id ((\d -> seq d (undefined::[] (Bool -> Bool))) (seq a (seq a (undefined::Int))))))
id ((\a -> \b -> id (\c -> (undefined::Int -> [] Int)) (undefined::[] (Int -> Bool)) (id (seq b (undefined::([] Bool) -> Int)) (a (undefined::[] ([] (([] Int) -> [] ([] Bool))))))) (\a -> id (id (seq a (id (undefined::(Int -> Int -> [] Int) -> [] Bool))) (seq a (seq a (id (seq a (enumFromTo::Int -> Int -> [Int]))))))))
head ((\a -> seq a (undefined::Bool -> Int -> [] (([] Int) -> [] Int)) (head (seq a (undefined::[] Bool))) ((!!) ([]::[] (Int -> Int)) (undefined::Int) (id (seq a 0)))) ((\a -> seq a (seq a (seq a (undefined::([] Bool) -> [] (Int -> [] Int))) (seq a (seq a ([]::[] Bool))))) ((undefined::Bool -> ([] ([] Int)) -> [] Int) True)))
id (map (case1 (undefined::(Int -> Bool -> Bool) -> ([] (Int -> Bool -> Bool)) -> Int -> Int) (\a -> seq a (seq a (undefined::(Int -> ([] ([] Int)) -> [] Int) -> Int) (seq a (\b -> \c -> seq c ([]::[] Int))))) ((\a -> seq a ([]::[] (Int -> Bool -> Bool))) ((undefined::(Int -> Int) -> Bool) (\a -> 2)))))
(!!) ((\a -> id (seq a (\b -> (undefined::[] (([] Int) -> [] Int))) False)) 1) ((\a -> a) (\a -> (+1) (seq a a)) ((\a -> seq a (seq a a)) 1))
(undefined::([] Int) -> [] Int)
\a -> seq a (seq a a)
(undefined::([] (Bool -> Bool)) -> ([] Int) -> [] Int) ((undefined::Int -> [] (Bool -> Bool)) ((\a -> id (seq a (undefined::Int))) (undefined::[] Bool)))
\a -> (:) (undefined::Int) a
\a -> seq a (seq a (\b -> seq a (seq a (seq a (undefined::Bool -> Int -> [] Int) (seq a (undefined::Bool))))) (id (seq a (undefined::(Int -> Bool) -> Int)) (\b -> (undefined::Bool)))) (seq a ((undefined::([] (([] Int) -> [] Int)) -> Int) (undefined::[] (([] Int) -> [] Int))))
\a -> (\b -> map (seq a (undefined::Int -> ([] ([] (Int -> Bool))) -> Int) (seq b 0)) ((undefined::Int -> [] ([] ([] (Int -> Bool)))) ((+1) (seq a (undefined::Int))))) ((\b -> seq b (\c -> seq b (seq b (seq c (undefined::([] Bool) -> [] (Int -> Bool))) (seq a (undefined::[] Bool))))) (\b -> seq b ((!!) (seq a (seq a ([]::[] ([] ([] Bool))))) (id (undefined::Int)))))
(\a -> \b -> seq b (\c -> seq b (seq c (undefined::([] Int) -> [] Int)) (undefined::[] Int)) (seq b (seq a (seq a (\c -> (undefined::([] (Bool -> Bool)) -> Int))) (id ([]::[] Bool))))) ((undefined::Bool -> ([] ([] ([] Int))) -> [] ([] ([] Int))) ((\a -> seq a (seq a (undefined::Bool))) ([]::[] ([] Bool))))
(undefined::([] (([] (([] Int) -> [] Int)) -> ([] Int) -> Bool)) -> ([] Int) -> [] Int) (undefined::[] (([] (([] Int) -> [] Int)) -> ([] Int) -> Bool))
\a -> a
head (undefined::[] ((([] ([] Int)) -> [] (([] ([] ([] ([] Bool)))) -> [] ([] ([] ([] Bool))))) -> ([] Int) -> [] Int)) (head (tail (head ([]::[] ([] (([] ([] Int)) -> [] (([] ([] ([] ([] Bool)))) -> [] ([] ([] ([] Bool))))))))))
(\a -> seq a (\b -> seq b (\c -> (undefined::([] Int) -> [] Int))) (seq a ([]::[] Int)) (head (undefined::[] (([] ([] (Int -> [] Int))) -> Int)) (seq a (seq a (seq a (undefined::[] ([] (Int -> [] Int)))))))) ((undefined::Int -> Int -> ([] Int) -> [] Bool) ((-) ((+1) (undefined::Int)) (id (undefined::Int))))
\a -> a
(undefined::([] Int) -> [] Int)
\a -> seq a (id (\b -> (undefined::[] Int)) (seq a (\b -> (undefined::([] Int) -> ([] (([] Bool) -> Bool)) -> Int -> Int)) ((\b -> seq a b) (seq a (seq a False)))))
\a -> a
(\a -> seq a (\b -> seq b (\c -> \d -> d) a)) ((\a -> seq a (seq a (seq a 2))) ([]::[] ([] (Int -> [] Int)))) (\a -> False)
head (tail (take 0 ((undefined::Bool -> [] (Bool -> ([] Int) -> [] Int)) (undefined::Bool)))) ((\a -> seq a (a (undefined::Int) 2)) ((\a -> \b -> seq a (seq b even)) (undefined::[] ([] Bool))))
\a -> a
id ((:) (id (head ((:) (undefined::Bool -> Int) ((undefined::([] Bool) -> [] (Bool -> Int)) (id (undefined::[] Bool)))) ((undefined::(Int -> Bool -> Int -> Bool) -> Bool) ((undefined::Bool -> Int -> Bool -> Int -> Bool) (id True))))))
\a -> seq a (seq a (seq a (seq a (\b -> seq b (undefined::(([] Int) -> [] (Int -> [] Int)) -> [] Int)) (seq a (seq a (seq a (undefined::(Int -> Bool) -> Bool)) (\b -> seq b (seq b False))))) (\b -> (undefined::[] (Int -> [] Int)))))
\a -> head (undefined::[] ((([] (([] ([] Int)) -> [] ([] Bool))) -> Bool -> Bool -> Bool) -> [] Int)) ((\b -> seq a (\c -> (undefined::([] ([] Int)) -> Bool -> Bool -> Bool) (seq b (seq a (undefined::[] ([] Int)))))) (seq a (undefined::([] ([] (Bool -> Bool))) -> Bool) (seq a (undefined::[] ([] (Bool -> Bool))))))
(\a -> seq a (undefined::([] ([] Bool)) -> ([] Int) -> [] Int)) (\a -> case1 (\b -> (undefined::([] Bool) -> Bool -> Bool)) (seq a not) (seq a ([]::[] Bool))) ((\a -> map (undefined::Bool -> [] Bool) (seq a ([]::[] Bool))) (\a -> \b -> seq a (\c -> \d -> (undefined::Int))))
(:) ((\a -> a (undefined::Int)) ((!!) (undefined::[] ((Int -> [] Bool) -> Int -> Int)) ((!!) (undefined::[] Int) 1) ((\a -> (!!) (seq a ([]::[] ([] Bool)))) ((!!) ([]::[] (Int -> Bool)) (undefined::Int)))))
\a -> map (seq a (\b -> case1 (undefined::Int -> ([] Int) -> Int) (seq a (seq b (seq b (undefined::Int)))) a)) ((\b -> map (\c -> seq b (!!)) (seq b (seq b ([]::[] Bool)))) (\b -> (\c -> \d -> (||) c) (seq b (seq b (seq b (undefined::Bool))))))
(undefined::([] Int) -> [] Int)
\a -> seq a (seq a (case1 (seq a (id (seq a (undefined::([] (Int -> Int)) -> ([] ([] (Int -> Int))) -> [] Int)))) (seq a a) (seq a (undefined::[] ([] (Int -> Int))))))
tail
\a -> (\b -> id (\c -> a) (seq a ((!!) a) (seq a (seq b (seq b (undefined::Int)))))) ((undefined::((([] Int) -> Bool) -> Bool -> Int) -> ([] ([] Int)) -> [] ([] Int)) (\b -> \c -> (+1) (seq b (seq a (seq a (undefined::Int))))))
(\a -> seq a ((\b -> seq b (seq a (head (tail (seq b (undefined::[] (([] Int) -> [] Int))))))) False)) True
(\a -> (undefined::([] ([] Bool)) -> Int -> ([] Int) -> [] Int) ([]::[] ([] Bool)) (seq a ((\b -> seq b (seq a 1)) (\b -> seq b (seq a ([]::[] Bool)))))) (\a -> (\b -> (undefined::(Bool -> Int) -> [] (Int -> [] Bool)) (\c -> head (seq b ([]::[] Int)))) (\b -> a))
tail
\a -> map (\b -> (undefined::Bool -> Int) (seq a b)) ([]::[] Bool)
map (\a -> 0)
(\a -> seq a (seq a (seq a (\b -> \c -> seq c (seq c (seq a (seq b (seq b c))))) (seq a (\b -> seq b (undefined::Int -> Int -> [] Int)) ([]::[] ([] Bool)))))) (undefined::(Bool -> ([] Int) -> Int -> [] Int) -> ([] Int) -> Bool -> Bool)
tail
\a -> seq a (undefined::(Int -> ([] Int) -> ([] Int) -> [] Bool) -> [] Int) (seq a (seq a (\b -> (\c -> (undefined::([] Int) -> ([] Int) -> ([] Int) -> [] Bool) (seq b (c b b))) (\c -> \d -> a))))
(\a -> (undefined::Int -> Bool -> ([] Int) -> [] Int) (seq a (undefined::Int)) a) (undefined::Bool)
(\a -> seq a (seq a (seq a (seq a (undefined::(([] Int) -> [] ([] Bool)) -> ([] Int) -> [] Int)))) (seq a (seq a (id (undefined::Bool -> ([] Int) -> [] ([] Bool)) (odd (undefined::Int)))))) (\a -> \b -> \c -> c)
id
(!!) ([]::[] (([] Int) -> [] Int)) (head (id (\a -> (undefined::Int -> [] Int)) (head ([]::[] ([] (Int -> Bool)))) ((\a -> seq a (undefined::Int)) (id ([]::[] Bool)))))
\a -> a
(\a -> case1 (seq a (\b -> seq a (:)) (seq a (seq a (seq a False)))) ((enumFromTo'::Int -> Int -> [Int]) (seq a (undefined::Int)) (undefined::Int))) (head ([]::[] (([] (([] ([] ([] Int))) -> [] ([] Bool))) -> ([] Int) -> [] Bool)))
(\a -> seq a (\b -> seq b (\c -> b) (\c -> \d -> seq a (\e -> seq d (undefined::Bool)) (id (undefined::Int -> [] Int))))) (\a -> seq a (\b -> (undefined::[] ([] (Bool -> Bool)))) ((\b -> \c -> \d -> seq b (seq a ([]::[] ([] Int)))) (seq a (undefined::Bool))))
case1 (id (\a -> seq a (\b -> seq b (\c -> tail)) (seq a a))) ((\a -> (\b -> seq b (undefined::([] Int) -> [] Int)) (seq a (seq a (undefined::Bool)))) (\a -> seq a (\b -> (undefined::Int -> Int)) (seq a False))) (case1 (id (undefined::Int -> ([] Int) -> [] Bool)) (head (undefined::[] ([] Bool))) (id ([]::[] Int)))
(\a -> seq a (\b -> (undefined::([] Int) -> [] Int)) (seq a (\b -> b))) (\a -> seq a (undefined::Bool))
(\a -> seq a (seq a (seq a (\b -> map (\c -> seq c b))))) (\a -> head (seq a (undefined::Int -> [] (Int -> [] Int)) (seq a (undefined::Int)))) ((\a -> seq a (id ((undefined::([] ([] Int)) -> Int) (seq a (seq a (undefined::[] ([] Int))))))) (\a -> id (\b -> seq b (undefined::[] ([] Bool))) (\b -> head (undefined::[] ([] Bool)))))
(undefined::([] Int) -> [] Int)
(!!) ((:) (\a -> \b -> b) (id (undefined::[] (Bool -> ([] Int) -> [] Int)))) (id (\a -> 1) (id (undefined::[] Int))) True
(\a -> seq a (id (\b -> take b)) ((+) 2 (head ([]::[] Int)))) ((undefined::Bool -> ([] (Int -> Int)) -> Int -> Int) (undefined::Bool))
filter (\a -> seq a (seq a ((undefined::([] Bool) -> Int -> Int -> Bool) (tail (undefined::[] Bool)))) a a)
take (case1 (\a -> \b -> (undefined::(([] Bool) -> Bool) -> Int) (seq b (\c -> a (undefined::Int) (undefined::Bool)))) (undefined::Int) (map (\a -> (undefined::Int -> Bool -> Bool)) (id ([]::[] Int))))
\a -> id (\b -> \c -> ([]::[] Int)) (seq a (\b -> seq b (\c -> (+1))) (\b -> id True)) ((\b -> b (\c -> case1 (undefined::Bool -> ([] Bool) -> [] ([] Bool)) ([]::[] ([] Bool)) (undefined::[] Bool))) (\b -> seq b ((\c -> seq c (seq c 1)) (seq a (head ([]::[] Bool))))))
\a -> a
id
(\a -> (undefined::([] ([] Bool)) -> Int -> ([] Int) -> [] Int) (seq a (seq a ([]::[] ([] Bool))))) ((\a -> seq a a) (\a -> a)) ((\a -> seq a ((-) (seq a 1) (seq a (seq a (undefined::Int))))) ((undefined::(Int -> Bool) -> ([] Int) -> Int -> Int) (\a -> seq a (seq a True))))
(\a -> id (seq a (\b -> (enumFromTo'::Int -> Int -> [Int]) (head b) (seq a ((\c -> c) (seq a (undefined::Int))))))) ((undefined::(([] Int) -> [] (Int -> Int)) -> ([] Int) -> [] (Int -> [] Int)) (\a -> (\b -> seq b (seq a (seq b (undefined::[] (Int -> Int))))) False))
\a -> (:) (seq a (seq a (\b -> 0) (seq a (seq a (seq a (seq a (seq a ([]::[] (([] ([] (([] Bool) -> [] Bool))) -> Int))))))))) (seq a ((\b -> seq b ((\c -> seq c (seq b a)) ((+1) 0))) ((\b -> b) ([]::[] Bool))))
\a -> a
map (\a -> case1 (\b -> (undefined::([] Bool) -> Int)) (undefined::Int) ([]::[] Bool))
\a -> (\b -> seq a (\c -> \d -> seq c a) ((++) ([]::[] ([] Int)) ([]::[] ([] Int))) ((\c -> seq b (seq c id)) (not (undefined::Bool)))) (undefined::([] Int) -> ([] Bool) -> [] Bool)
(!!) (head (undefined::[] ((Bool -> Int) -> [] (([] Int) -> [] Int))) (\a -> seq a (seq a (\b -> 2)) (seq a (seq a (seq a (undefined::[] Bool)))))) (undefined::Int)
\a -> seq a a
\a -> a
case1 ((!!) (undefined::[] (Int -> ([] Int) -> ([] Int) -> [] Int)) ((+) (undefined::Int) 0)) (\a -> a) ((\a -> seq a (undefined::[] Int)) (undefined::[] ([] (([] ([] Bool)) -> [] ([] Bool)))))
map (undefined::Int -> Int)
(\a -> (undefined::Bool -> Int -> ([] Int) -> [] Int) (seq a (odd 1))) (id (\a -> seq a ((==)::[Int] -> [Int] -> Bool)) True) ((\a -> seq a ((\b -> seq a (seq b (undefined::Int))) (undefined::Bool))) (\a -> map (\b -> (undefined::[] Bool)) (undefined::[] ([] ([] ([] Int))))))
case1 (undefined::(Int -> [] Int) -> ([] (Int -> [] Int)) -> ([] Int) -> [] Int) (\a -> a) (undefined::[] (Int -> [] Int))
\a -> seq a a
id (\a -> seq a (seq a (seq a (seq a (seq a (seq a (seq a (undefined::Int -> ([] Int) -> [] Int)))))) ((\b -> seq b (seq a (undefined::Int))) (seq a (seq a (seq a ([]::[] ([] ([] Int))))))))) ((\a -> (++) (seq a (seq a (undefined::[] (([] Int) -> Bool)))) (seq a (seq a (undefined::[] (([] Int) -> Bool))))) (\a -> seq a (seq a ([]::[] (Bool -> Bool)))))
(undefined::((Int -> Bool) -> ([] (Int -> Bool)) -> [] (Int -> Bool)) -> ([] Int) -> [] Int) (\a -> (\b -> \c -> seq b c) (undefined::[] ([] (Bool -> Bool))))
id
(undefined::Bool -> ([] Int) -> [] Int) ((\a -> seq a (seq a (seq a (\b -> seq a (undefined::Bool)) (head ([]::[] ([] (([] Bool) -> [] Bool))))))) (undefined::[] (Int -> ([] (Int -> Int)) -> Int -> Int)))
\a -> (!!) (id (\b -> tail (seq b (head ([]::[] ([] ([] Int)))))) (head ([]::[] (([] ([] Int)) -> [] Int)))) ((-) (seq a (seq a (seq a (undefined::Bool -> Int)) (seq a False))) ((!!) a (seq a (seq a 1))))
\a -> (\b -> \c -> seq b (seq a (\d -> ([]::[] Int)) (tail ([]::[] ([] Bool))))) (\b -> seq a (\c -> \d -> \e -> seq e (undefined::([] Int) -> Bool)) (seq a (seq a b))) (seq a ((!!) (id (undefined::[] ((Int -> Int -> Bool) -> Int))) ((+1) 1)) (undefined::Int -> Int -> Bool))
\a -> a
(\a -> (\b -> seq b (seq b (undefined::([] ([] Bool)) -> ([] Int) -> [] Int)) (seq b (seq a (seq b (undefined::[] ([] Bool)))))) (\b -> head ((undefined::Bool -> [] (Int -> Int -> Bool)) False))) ((\a -> seq a (\b -> head (seq a (undefined::Int -> [] (Int -> Int)) (seq a 2)))) (undefined::Bool))
(\a -> (\b -> \c -> (:) (seq b (undefined::Int)) c) (seq a (seq a (\b -> \c -> seq a ([]::[] (Int -> Bool))) (seq a (seq a (seq a ([]::[] Int))))))) (\a -> tail (seq a ((undefined::(([] Int) -> ([] Int) -> Bool) -> [] (([] Int) -> Bool)) ((==)::[Int] -> [Int] -> Bool))))
\a -> (\b -> seq a (seq b (\c -> a)) (\c -> seq b (\d -> \e -> seq a c) (\d -> seq d (id (undefined::[] Bool))))) (seq a ((!!) (map (\b -> \c -> 1) a) (head ([]::[] Int))))
id (\a -> \b -> (undefined::[] Int)) ((\a -> \b -> seq a (id a) (seq b (seq b (seq a (undefined::[] Int))))) (\a -> seq a (seq a (\b -> seq b (undefined::[] Bool)) (even (seq a (undefined::Int))))))
(undefined::(([] (([] Int) -> Bool -> Bool)) -> ([] (([] Int) -> Int)) -> Int -> Bool) -> ([] Int) -> [] Int) (\a -> \b -> (\c -> seq c (id (undefined::(([] Bool) -> Bool) -> Int -> Bool))) ((!!) ([]::[] Bool) (undefined::Int)) (\c -> seq b (seq a (\d -> seq d (undefined::Bool)) (seq a (undefined::Int)))))
\a -> (\b -> (undefined::([] ([] ([] (Int -> Bool)))) -> Bool -> [] Int) (undefined::[] ([] ([] (Int -> Bool)))) (seq b (((==)::Bool -> Bool -> Bool) (undefined::Bool) (seq a (seq b False))))) (id ((!!) ((undefined::Int -> [] Int) (head a)) (seq a (seq a ((\b -> seq b 1) (seq a 2))))))
\a -> map (seq a (\b -> seq b (\c -> seq b (undefined::([] (([] Int) -> Bool)) -> Int)) (seq b 0) (seq b ([]::[] (([] Int) -> Bool))))) ((undefined::Int -> [] Bool) (head (seq a (undefined::[] ((Bool -> Bool) -> Int))) ((!!) (undefined::[] (Bool -> Bool)) 1)))
(undefined::(([] ([] ([] Bool))) -> [] ([] ([] Bool))) -> ([] Int) -> [] Int) (take (undefined::Int))
\a -> a
\a -> a
(!!) ((:) (\a -> map (seq a (undefined::Bool -> Int)) ([]::[] Bool)) (map (\a -> \b -> b) (undefined::[] Bool))) ((\a -> id (\b -> seq a b) (seq a (seq a 1))) ((!!) (tail (undefined::[] (([] ([] Int)) -> [] ([] Bool)))) 0))
\a -> case1 (seq a (undefined::(([] ([] Int)) -> [] Int) -> ([] (([] ([] Int)) -> [] Int)) -> [] Int)) (seq a (seq a a)) (seq a (\b -> id ([]::[] (([] ([] Int)) -> [] Int))) id)
(\a -> seq a ((!!) (seq a ([]::[] (Bool -> ([] Int) -> [] Int))) (seq a (seq a (seq a 1)))) (seq a (id (undefined::(([] Int) -> Bool) -> Bool)) (seq a (\b -> odd (undefined::Int))))) ((\a -> seq a (seq a (undefined::([] (Bool -> Bool -> Bool)) -> [] ([] Bool)))) ((\a -> seq a (seq a (seq a False))) (undefined::([] Int) -> Bool)))
\a -> a
(\a -> \b -> seq a (\c -> (\d -> seq d b) (tail ([]::[] ([] (Bool -> Bool))))) (undefined::([] Int) -> [] (Int -> [] Int))) ((\a -> \b -> seq b (seq a 0)) ((&&) False False) (id ((undefined::([] Int) -> ([] ([] Bool)) -> [] Bool) ([]::[] Int))))
(undefined::([] Int) -> [] Int)
(\a -> seq a (id (\b -> seq b ((++) (seq b ([]::[] Int))))) (\b -> map (seq a (\c -> not)) ([]::[] ([] Int)))) ((\a -> id (seq a (undefined::Bool -> ([] Int) -> Int -> Bool)) ((!!) (undefined::[] Bool) (undefined::Int))) (\a -> (\b -> seq b (seq b (seq a (undefined::[] ([] Bool))))) (\b -> (undefined::[] Bool))))
\a -> a
\a -> seq a (\b -> a) (\b -> seq b ((!!) (undefined::[] (([] ([] Int)) -> Bool))) (head ([]::[] Int)) ((!!) (seq b (undefined::[] ([] ([] Int)))) (seq b (seq b (undefined::Int)))))
map ((\a -> seq a (\b -> seq b (id (\c -> b) ((undefined::Int -> Int -> Bool -> Bool) (seq b b))))) ((+1) ((undefined::(([] Bool) -> ([] Int) -> [] (Bool -> Bool)) -> Int) (undefined::([] Bool) -> ([] Int) -> [] (Bool -> Bool)))))
(undefined::([] (Bool -> Bool)) -> ([] Int) -> [] Int) (id (\a -> seq a ((\b -> seq b ([]::[] (Bool -> Bool))) ([]::[] Bool))) ((\a -> id (seq a ([]::[] (([] Int) -> [] Int)))) (undefined::Bool)))
(:) (case1 (undefined::Bool -> ([] Bool) -> Int) ((\a -> seq a a) ((!!) ([]::[] Int) (undefined::Int))) (head (undefined::[] ([] Bool))))
(\a -> \b -> filter ((\c -> seq c (\d -> seq a (undefined::Bool))) (seq b (seq b 2))) (seq a (map (seq a id) (undefined::[] Int)))) (\a -> seq a (undefined::([] Int) -> Int -> ([] Int) -> Bool) (undefined::[] Int))
(undefined::(Int -> Int -> [] Int) -> ([] Int) -> [] Int) (\a -> \b -> id (seq a ((\c -> seq b (seq c head) (seq a (seq c ([]::[] ([] Int))))) (seq a (\c -> seq a a) (undefined::[] ([] ([] ([] Bool))))))))
\a -> (undefined::Int -> [] Int) (undefined::Int)
\a -> a
(\a -> seq a (seq a (\b -> \c -> \d -> ([]::[] Int)) (undefined::[] Int))) (\a -> seq a ((!!) (tail ([]::[] (Int -> Int))) a)) ((!!) ([]::[] ((([] Int) -> Int -> Int) -> Int)) 0 ((\a -> head (seq a ([]::[] (([] Int) -> Int -> Int)))) ((!!) (undefined::[] ([] Bool)) 1)))
\a -> map (\b -> head (seq a ([]::[] (Bool -> Int -> Int))) (seq a b) 1) ((!!) ([]::[] ((([] Int) -> Bool -> Bool) -> [] Bool)) (seq a (seq a (undefined::Int))) (undefined::([] Int) -> Bool -> Bool))
(++) (undefined::[] Int)
take ((\a -> seq a (\b -> 0) (seq a (undefined::Int -> Bool -> Bool))) ((undefined::Bool -> Int -> Int -> Int) (undefined::Bool)))
\a -> case1 (\b -> seq a (seq b (\c -> (\d -> seq b (seq d a)) (seq a (seq c (seq c (undefined::[] ([] ([] Bool))))))))) a (seq a (id (seq a (\b -> ([]::[] (Bool -> Bool)))) (id (seq a (seq a False)))))
(undefined::Int -> (([] Int) -> Int -> Int -> Int) -> ([] Int) -> [] Int) (head (undefined::[] Int)) ((\a -> \b -> id (seq a (undefined::Bool -> Int -> Int -> Int)) (seq b (seq a (seq a (undefined::Bool))))) ((\a -> seq a (seq a (undefined::(Int -> [] Int) -> Int))) (id (undefined::Int))))
\a -> case1 (seq a (\b -> \c -> a)) (seq a (seq a (seq a (id (undefined::(Int -> [] Bool) -> [] Int) (seq a (id (undefined::Int -> [] Bool))))))) (seq a (undefined::[] (([] ([] Int)) -> [] Int)))
(undefined::Bool -> Bool -> ([] Int) -> [] Int) ((undefined::([] Int) -> Bool) ((!!) (undefined::[] ([] Int)) 1)) ((\a -> seq a (seq a (seq a (undefined::([] ([] Int)) -> Bool))) ([]::[] ([] Int))) (\a -> seq a (seq a (seq a (seq a (undefined::([] (Int -> Bool)) -> [] ([] Int)))) (seq a (seq a (seq a (undefined::[] (Int -> Bool))))))))
\a -> take (case1 (\b -> case1 (undefined::Bool -> ([] Bool) -> Int) (undefined::Int)) (seq a (seq a (seq a (seq a 0)))) (seq a (seq a (tail ([]::[] Bool))))) a
\a -> case1 ((\b -> (!!) (seq b ([]::[] (([] Int) -> [] Int)))) (seq a ([]::[] ([] ([] Bool))))) a a
map (undefined::Int -> Int)
(\a -> \b -> seq b (seq b (seq b (seq b (undefined::Bool -> Bool -> [] Int))) (seq a (seq b False)) (undefined::Bool))) ((\a -> (undefined::(Int -> Bool) -> [] ([] Bool)) (seq a (undefined::Int -> Bool))) (undefined::([] Int) -> [] (([] Int) -> [] (Int -> [] Int))))
take ((undefined::((([] ([] Int)) -> [] ([] Int)) -> ([] Int) -> [] (([] ([] Int)) -> [] (([] Int) -> Bool))) -> Int) (id (\a -> \b -> seq b (seq b ((!!) (seq a ([]::[] ([] (([] ([] Int)) -> [] (([] Int) -> Bool))))) (seq a (seq b (seq b (seq b 0)))))))))
filter (\a -> seq a (seq a (seq a ((\b -> (!!) (seq b ([]::[] ((Int -> [] Bool) -> Bool))) (seq b 2)) (seq a (undefined::[] ([] (Int -> Int))))))) (\b -> seq b (seq a ((!!) (map (undefined::Bool -> [] Bool) (seq b (undefined::[] Bool))) b))))
\a -> (!!) (tail (undefined::[] (Bool -> Bool -> [] Int))) (seq a (seq a 2)) ((\b -> seq b False) (\b -> not (undefined::Bool))) ((undefined::(([] Int) -> ([] ([] ([] ([] Bool)))) -> [] (Int -> Bool)) -> Bool) (seq a (\b -> seq b (\c -> seq b (\d -> ([]::[] (Int -> Bool))) (head (undefined::[] Bool))))))
\a -> (\b -> map (seq b (\c -> \d -> seq d c) (seq b (undefined::Int))) (id ((undefined::Int -> [] (Int -> ([] Int) -> Int)) (seq b (seq a 2))))) (id (undefined::Bool))
tail
id
(undefined::Int -> (([] Int) -> [] (Int -> Int)) -> ([] Int) -> [] Int) ((!!) (undefined::[] (Int -> Int)) 0 ((+) (undefined::Int) (undefined::Int))) (\a -> (\b -> seq b (seq a (seq b (seq a (undefined::([] Int) -> [] (Int -> Int))) (seq b (seq a ([]::[] Int)))))) (seq a (seq a (\b -> seq a (undefined::[] ([] (Bool -> Bool)))) (\b -> a))))
case1 (\a -> \b -> \c -> seq a (undefined::[] Int)) (\a -> case1 (undefined::Bool -> ([] Bool) -> [] Int) (seq a a) (seq a (seq a (undefined::[] Bool)))) (undefined::[] ([] Bool))
id
\a -> a
\a -> (undefined::(([] (([] Bool) -> [] (Bool -> Bool))) -> [] ([] (Int -> ([] Int) -> Bool))) -> [] Int) (\b -> tail ([]::[] ([] (Int -> ([] Int) -> Bool))))
\a -> (:) ((\b -> head ((undefined::([] (([] Int) -> Bool)) -> [] Int) (seq b (seq b ([]::[] (([] Int) -> Bool)))))) (\b -> b)) (map (\b -> seq a (undefined::([] Bool) -> Int) (seq a (seq b (undefined::[] Bool)))) (seq a (map (undefined::([] ([] Int)) -> Bool -> [] Bool) (seq a ([]::[] ([] ([] Int)))))))
\a -> map (undefined::(Int -> ([] (([] Int) -> Bool -> Bool)) -> ([] Int) -> [] Bool) -> Int) (seq a (seq a (seq a (seq a (id (seq a (undefined::[] (Int -> ([] (([] Int) -> Bool -> Bool)) -> ([] Int) -> [] Bool))))))))
head (take (id ((\a -> a) 2)) (filter (\a -> (undefined::Bool)) ([]::[] (Bool -> ([] Int) -> [] Int)))) (not ((undefined::Int -> Bool) (id 0)))
(undefined::([] (([] Int) -> Bool)) -> (Bool -> Bool) -> ([] Int) -> [] Int) (id (undefined::(Int -> Int) -> [] (([] Int) -> Bool)) (\a -> seq a a)) ((\a -> id (seq a (\b -> \c -> c) (id (undefined::Int -> [] Bool)))) (not ((undefined::([] ([] Int)) -> Bool) (tail (undefined::[] ([] Int))))))
\a -> seq a (head (id ([]::[] (([] (Int -> [] Int)) -> Bool -> [] Int)))) (undefined::[] (Int -> [] Int)) (seq a (\b -> seq a (\c -> seq b False) (seq b (seq a (seq b (undefined::([] ([] Int)) -> [] Bool))))) (undefined::([] ([] (([] ([] ([] Bool))) -> [] ([] Bool)))) -> [] Bool))
id (\a -> a)
filter (id (\a -> head ((undefined::Bool -> [] Bool) (case1 (\b -> \c -> seq a True) (seq a (seq a (seq a True))) (seq a (seq a (seq a ([]::[] (Int -> Int)))))))))
\a -> (:) (seq a (head a)) (take (seq a ((undefined::([] (([] Int) -> Int)) -> Int) (undefined::[] (([] Int) -> Int)))) a)
\a -> seq a ((undefined::(Int -> ([] Int) -> Bool) -> [] Int) (seq a ((undefined::Int -> Bool -> Int -> ([] Int) -> Bool) (undefined::Int)) ((\b -> b (undefined::Int) ([]::[] Int)) (\b -> \c -> seq a (seq c True)))))
\a -> case1 (\b -> seq b (\c -> a)) (case1 (\b -> \c -> seq a ([]::[] Int)) a (id ([]::[] Bool))) ((\b -> (undefined::Bool -> [] (([] Int) -> Int -> Int)) (seq b (undefined::Bool))) (undefined::Int -> Bool))
\a -> a
\a -> (undefined::[] Int)
tail
\a -> head (take (seq a (seq a (undefined::Bool -> Int)) (seq a (seq a (undefined::Bool)))) (tail ([]::[] ((([] (Int -> Bool)) -> Int -> Bool) -> [] Int)))) (\b -> (\c -> \d -> seq c (seq c (seq c (\e -> e) (undefined::Bool)))) (case1 (\c -> \d -> c) (seq b 1) (seq a a)))
\a -> a
\a -> seq a ((\b -> seq b (undefined::[] Int)) (seq a (id (seq a (seq a (seq a ([]::[] ((([] Int) -> Bool -> Bool -> Bool) -> ([] Int) -> Bool -> Bool -> Bool))))))))
(\a -> \b -> seq b (seq a (\c -> (enumFromTo::Int -> Int -> [Int]) (seq c 1) (seq b 0)) (seq b (seq a ((\c -> seq c (undefined::([] Bool) -> Bool)) (\c -> c)))))) (head (undefined::[] (Bool -> [] (([] ([] (Int -> Bool))) -> Bool -> Bool))) (head (undefined::[] ((([] (Int -> Bool)) -> Int) -> Bool)) (undefined::([] (Int -> Bool)) -> Int)))
(undefined::Int -> (([] Int) -> [] Int) -> ([] Int) -> [] Int) ((!!) (undefined::[] (Bool -> Int)) 0 (odd 0)) tail
(\a -> seq a (undefined::([] (([] (Int -> Bool)) -> Int -> Bool)) -> ([] Int) -> [] Int) (take (seq a a) (seq a (undefined::[] (([] (Int -> Bool)) -> Int -> Bool))))) (case1 (\a -> \b -> a) ((!!) (undefined::[] Int) 2) ((enumFromTo::Int -> Int -> [Int]) 1 1))
\a -> a
id
(\a -> seq a (\b -> seq a (\c -> \d -> d) (id ([]::[] Bool)))) ((!!) (undefined::[] (Int -> Int)) 0 (undefined::Int)) id
(undefined::([] Int) -> [] Int)
\a -> seq a (\b -> seq b ((\c -> map (\d -> d) (seq c (undefined::[] Int))) (seq b (seq b (\c -> ([]::[] ([] (Int -> Bool)))) 2)))) (seq a ((\b -> case1 (\c -> \d -> seq d (undefined::[] ([] Bool))) (seq b (seq a ([]::[] ([] Bool))))) ((\b -> seq a (seq b (undefined::Bool))) (seq a True))))
\a -> ([]::[] Int)
head ([]::[] (([] (Int -> ([] Int) -> Bool -> Bool -> Bool)) -> ([] Int) -> [] Int)) ((undefined::([] Int) -> [] (Int -> ([] Int) -> Bool -> Bool -> Bool)) (map (\a -> seq a (undefined::Int)) ([]::[] ([] (Int -> Int -> Int)))))
\a -> tail (seq a ((\b -> seq b (head ([]::[] ((([] Bool) -> [] Bool) -> [] Int))) (\c -> case1 (\d -> tail) (seq c ([]::[] Bool)) (seq b c))) (seq a (seq a (\b -> seq a (seq a (\c -> c) (seq b (seq b False)))) (\b -> seq b (seq b b))))))
\a -> a
(undefined::([] Int) -> [] Int)
head ((\a -> \b -> head ([]::[] (Bool -> [] (([] Int) -> [] Int))) (seq b (seq a (seq a True)))) ((\a -> seq a ([]::[] ([] ([] Bool)))) ([]::[] ([] Int))) ((\a -> seq a (seq a ((!!) (seq a ([]::[] Int)) (seq a (undefined::Int))))) (undefined::([] ([] Int)) -> [] ([] (Int -> [] Int)))))
head ((undefined::([] Int) -> [] (([] Int) -> [] Int)) ((\a -> seq a (case1 (undefined::Bool -> ([] Bool) -> [] Int) (undefined::[] Int) ([]::[] Bool))) (\a -> seq a (seq a (undefined::[] ([] Int))))))
\a -> a
tail
(undefined::Bool -> ([] Int) -> [] Int) ((undefined::Int -> (Int -> Int -> [] Int) -> Bool) 0 (enumFromTo::Int -> Int -> [Int]))
\a -> a
\a -> a
\a -> map (head ([]::[] ((([] Int) -> Int -> Int -> Bool) -> Bool -> Int)) (seq a (\b -> \c -> \d -> \e -> True) ((-) 2 (undefined::Int)))) ((\b -> seq b ((\c -> seq c (seq a c)) (seq a (seq a (undefined::[] Bool))))) (\b -> seq b (id (undefined::(([] Int) -> Int -> Bool) -> Bool)) (\c -> \d -> b)))
(\a -> (\b -> (\c -> seq c (\d -> seq d (undefined::[] Int))) (seq b (seq a (seq b (undefined::Bool))))) (seq a (\b -> seq b (head (seq a (seq a (undefined::[] (([] Int) -> [] (([] Int) -> Bool))))))))) ((\a -> \b -> (+1) a) (head (undefined::[] Int)) ((undefined::(([] Int) -> Int) -> Bool) (\a -> 0)))
case1 (\a -> (undefined::([] Int) -> ([] Int) -> [] Int)) ((\a -> seq a (head (undefined::[] (([] Int) -> [] Int)))) ((\a -> seq a (undefined::Bool -> Int -> Int -> Bool)) ((+1) (undefined::Int)))) ((\a -> seq a (undefined::Bool -> [] Int)) (odd (undefined::Int)) (id (undefined::Bool -> Bool) (even 2)))
\a -> seq a (seq a (undefined::(([] Int) -> Int -> Int -> Int) -> [] Int) ((\b -> seq a (\c -> \d -> \e -> seq d (undefined::Int -> Int)) (seq b (seq a (seq a (undefined::Int))))) (seq a (\b -> ((==)::[Int] -> [Int] -> Bool) (seq b a) ([]::[] Int)))))
(:) ((undefined::(([] Int) -> [] Int) -> (Int -> Int -> Bool) -> Int) (map (\a -> a)) ((!!) ((\a -> id (undefined::Int -> [] (Int -> Bool)) (seq a (seq a 2))) (case1 (undefined::Bool -> ([] Bool) -> Bool) True ([]::[] Bool)))))
(\a -> case1 (\b -> seq b (\c -> \d -> seq c (undefined::[] Int))) (seq a (seq a (head (undefined::[] (([] Int) -> [] Int))))) (seq a (seq a (undefined::[] Int)))) (undefined::([] Int) -> ([] Bool) -> [] Bool)
\a -> seq a (seq a a)
(undefined::([] Int) -> [] Int)
head (undefined::[] ((([] ([] Int)) -> [] (([] Int) -> Bool)) -> ([] Int) -> [] Int)) (\a -> seq a (map (\b -> seq a (\c -> seq b (seq a True))) (seq a (tail (seq a ([]::[] ([] ([] Bool))))))))
(\a -> \b -> head (seq b (seq a (seq b (seq b (seq a ([]::[] (Int -> [] Int))))))) (seq b ((+1) ((undefined::([] Bool) -> Int) (head ([]::[] ([] Bool))))))) id
\a -> id (\b -> seq a (seq a (undefined::Int -> Int -> [] Int)) (seq a (undefined::Int))) (\b -> ([]::[] (Int -> Bool))) ((undefined::(([] Int) -> (([] Int) -> [] Int) -> ([] Int) -> [] Int) -> Int) (seq a (seq a (\b -> (undefined::(([] Int) -> [] Int) -> ([] Int) -> [] Int)))))
head (undefined::[] ((Bool -> Bool) -> Bool -> ([] Int) -> [] Int)) (\a -> seq a (\b -> a) (seq a 1)) ((undefined::([] (([] (([] ([] Int)) -> [] ([] (Int -> Int)))) -> Bool)) -> Bool) (undefined::[] (([] (([] ([] Int)) -> [] ([] (Int -> Int)))) -> Bool)))
\a -> ([]::[] Int)
(undefined::((([] Int) -> Int -> Int) -> ([] ([] ([] ([] Int)))) -> ([] Int) -> Int -> Int) -> ([] Int) -> [] Int) (\a -> seq a (seq a (seq a (\b -> a))))
(undefined::(([] (([] (Int -> Bool)) -> [] (Int -> Bool))) -> [] (Bool -> Bool)) -> ([] Int) -> [] Int) (\a -> seq a (\b -> map (seq b (&&)) (undefined::[] Bool)) (seq a (\b -> seq b (filter (\c -> seq b False) (undefined::[] Int)))))
(\a -> \b -> seq a (head ([]::[] (Bool -> ([] Int) -> [] Int)) (even a))) ((\a -> seq a (seq a (undefined::Int))) ((:) 2 ([]::[] Int))) ((!!) ((undefined::Int -> [] (Int -> ([] Int) -> [] ([] Int))) (undefined::Int)) ((undefined::([] ([] ([] (Bool -> Bool)))) -> Int) (id (undefined::[] ([] ([] (Bool -> Bool)))))))
\a -> seq a (\b -> id (seq a (undefined::([] (Bool -> Bool)) -> Int -> [] Int) (tail (undefined::[] (Bool -> Bool)))) ((!!) (undefined::[] ((Int -> [] ([] Int)) -> Int)) (undefined::Int) (\c -> tail (seq b (undefined::[] ([] Int)))))) (seq a (seq a ((\b -> id (seq b (undefined::(Int -> Int) -> Int)) (\c -> seq c c)) ((\b -> seq b (seq a even)) (seq a (seq a (seq a 1)))))))
(undefined::([] Int) -> [] Int)
\a -> seq a a
case1 (\a -> \b -> \c -> \d -> d) ((\a -> seq a (undefined::Bool -> ([] Int) -> [] Int)) 0) ([]::[] Int) False
(undefined::([] Int) -> ([] Int) -> [] Int) ((\a -> \b -> seq a (seq a ([]::[] Int))) (\a -> \b -> a) (((==)::Int -> Int -> Bool) 0 (id (undefined::Int))))
\a -> a
(\a -> \b -> seq a (\c -> b) ((!!) (tail ([]::[] Bool)) 0)) (undefined::(Int -> [] Int) -> Int)
(undefined::([] Int) -> [] Int)
\a -> map (\b -> seq b b) a
(\a -> seq a (\b -> seq b (\c -> \d -> seq d (undefined::[] Int)) (seq b (undefined::[] Int))) (seq a (undefined::Bool))) (head (id (id (undefined::[] (([] ([] (([] Bool) -> [] Bool))) -> [] ([] (([] Bool) -> [] Bool)))))))
case1 ((undefined::Int -> Int -> ([] Int) -> ([] Int) -> [] Int) ((+1) (undefined::Int))) (\a -> seq a ([]::[] Int)) (map (\a -> seq a (id 0)) ((++) ([]::[] (([] Bool) -> [] Bool)) ([]::[] (([] Bool) -> [] Bool))))
case1 (\a -> \b -> (undefined::([] Int) -> [] Int)) ((\a -> (\b -> seq b tail) (seq a (seq a (undefined::Bool)))) (head (id ([]::[] ([] (([] Bool) -> [] Bool)))))) (map (undefined::(Bool -> Bool) -> Int) (head ([]::[] ([] (Bool -> Bool)))))
(undefined::(([] ([] Bool)) -> [] ([] (Bool -> Bool))) -> ([] Int) -> [] Int) (map (undefined::([] Bool) -> [] (Bool -> Bool)))
map (case1 (\a -> \b -> (undefined::Bool -> Int -> Int) (not a)) (\a -> (undefined::(Int -> Int) -> Int) (seq a (+) a)) ((:) True ([]::[] Bool)))
\a -> seq a ((\b -> seq b (seq a (\c -> (!!) (seq c (undefined::[] ([] Int))) (seq b b)))) (seq a (seq a (\b -> seq a 1)) (undefined::[] ([] Bool)))) (seq a ((undefined::([] (Int -> Int)) -> ([] Int) -> ([] ([] ([] ([] Bool)))) -> Int) (seq a (undefined::Int -> [] (Int -> Int)) (seq a 0))))
\a -> map (\b -> seq a (\c -> seq c (undefined::Int -> Int)) (\c -> ((==)::Int -> Int -> Bool) 0) (head a)) ([]::[] (([] Int) -> [] (Int -> [] Int)))
\a -> seq a (\b -> \c -> map (\d -> c) (seq b ([]::[] (Int -> Bool)))) (\b -> seq a (seq b (seq b ((!!) a 1)))) (seq a ((\b -> seq a ((+1) (seq a b))) (seq a (seq a (case1 (undefined::Int -> ([] Int) -> Int) (undefined::Int) a)))))
(\a -> \b -> map (seq a (\c -> (undefined::([] (Int -> [] Int)) -> Int)) (seq b ([]::[] Bool))) ([]::[] ([] (Int -> [] Int)))) ((\a -> seq a ([]::[] (([] (([] Int) -> Bool)) -> [] Bool))) ((\a -> seq a (head (undefined::[] ([] ([] (Bool -> Bool)))))) 2))
(undefined::(([] ([] ([] ([] (Bool -> Bool))))) -> [] ([] ([] ([] (Bool -> Bool))))) -> ([] Int) -> [] Int) tail
(\a -> seq a (\b -> (undefined::[] Int))) (((==)::Int -> Int -> Bool) ((!!) ([]::[] Int) ((+1) 0)) ((\a -> seq a a) 1))
\a -> a
(:) ((undefined::((([] Int) -> [] ([] Bool)) -> Bool) -> Bool -> Int) (\a -> (undefined::Bool)) ((undefined::(([] ([] ([] Int))) -> [] ([] ([] Bool))) -> Bool) ((undefined::Bool -> ([] ([] ([] Int))) -> [] ([] ([] Bool))) False)))
\a -> seq a (undefined::((([] ([] ([] (([] Int) -> Bool)))) -> [] Bool) -> Int) -> [] Int) ((undefined::Int -> (([] ([] ([] (([] Int) -> Bool)))) -> [] Bool) -> Int) ((\b -> seq b (id (undefined::Int))) (\b -> (undefined::[] ([] (Int -> Int))))))
\a -> a
\a -> a
case1 (\a -> \b -> (undefined::(([] ([] Bool)) -> [] Bool) -> ([] Int) -> [] Int) (seq b (\c -> head) (undefined::Bool))) (\a -> seq a ([]::[] Int)) ([]::[] ([] ([] ([] Bool))))
head (head ([]::[] ([] (Int -> Int -> ([] Int) -> [] Int)))) (case1 (\a -> seq a (undefined::([] Bool) -> Int)) (undefined::Int) ([]::[] Bool)) (head ((\a -> seq a (seq a ([]::[] (Bool -> Int)))) (id (undefined::[] ([] ([] Bool))))) ((\a -> seq a (not False)) (\a -> \b -> ([]::[] Bool))))
\a -> a
\a -> (undefined::[] Int)
\a -> map (\b -> case1 (\c -> \d -> c) (seq a (seq b (seq a (undefined::Int)))) a) ([]::[] (([] (([] Int) -> Bool -> Bool)) -> Bool -> Bool))
(undefined::(([] (Int -> Bool)) -> [] (Int -> Bool)) -> ([] Int) -> [] Int) (\a -> seq a (\b -> \c -> a) (((==)::Bool -> Bool -> Bool) True (undefined::Bool)) ((\b -> seq b True) (seq a (\b -> seq b (seq a False)))))
id ((\a -> seq a ((++) ((\b -> seq b (undefined::Bool -> [] Int)) (\b -> head b) (seq a ((\b -> seq b False) (id 1)))))) (\a -> seq a (\b -> seq a (seq a (\c -> seq a (seq b (seq b False))))) (undefined::Int)))
(\a -> \b -> seq a (\c -> ([]::[] Int))) ((+1) ((\a -> seq a (seq a 0)) (undefined::Bool))) (case1 (\a -> (undefined::([] Int) -> Int -> Int -> Int)) ((\a -> seq a (undefined::Int -> Int -> Int)) False))
tail
tail
\a -> seq a a
(\a -> seq a ((\b -> seq a (seq b (seq a (:))) (head (seq a ([]::[] Int)))) (seq a ([]::[] (([] Int) -> Bool))))) (\a -> head (seq a (seq a (undefined::[] ((Int -> Int -> Bool) -> [] ([] (Int -> Int)))))) (seq a (undefined::Int -> Int -> Int -> Bool) (id (undefined::Int))))
\a -> a
(undefined::([] Int) -> [] Int)
(\a -> \b -> seq a ((undefined::([] (Int -> [] Int)) -> [] Int) ([]::[] (Int -> [] Int)))) ((undefined::(([] Int) -> Int -> Bool) -> [] (Int -> Bool)) (head ((undefined::Int -> [] (([] Int) -> Int -> Bool)) 0)))
(undefined::(([] (([] Int) -> [] (([] Int) -> Bool))) -> ([] ([] ([] Bool))) -> [] ([] ([] Bool))) -> ([] Int) -> [] Int) (\a -> \b -> b)
(undefined::Int -> (([] Int) -> [] ([] Int)) -> ([] Int) -> [] Int) (undefined::Int) (id (\a -> \b -> head (seq a (seq b (seq a (undefined::[] ([] ([] Int))))))) (head ((\a -> seq a (seq a (undefined::[] (Int -> [] Int)))) (head (undefined::[] ([] (Bool -> Bool)))))))
\a -> a
(\a -> seq a (id (seq a (\b -> \c -> \d -> (undefined::[] Int)) (seq a (seq a (undefined::[] Bool))) (seq a (undefined::(([] Int) -> ([] Int) -> Int) -> Int) (\b -> \c -> seq a (seq a (undefined::Int))))))) (head ((\a -> seq a (seq a (undefined::[] ((Int -> Int -> Bool) -> Int)))) 0) (\a -> seq a ((\b -> seq b (seq b odd)) (seq a (seq a (seq a ([]::[] Int)))))))
\a -> a
head (undefined::[] ((Int -> [] Int) -> Bool -> ([] Int) -> [] Int)) (\a -> seq a (\b -> seq a ([]::[] Int)) (undefined::[] Int)) ((\a -> (\b -> seq a (seq a (seq b True))) ((!!) ([]::[] (Bool -> Bool)) (undefined::Int))) (head ([]::[] (Int -> [] (([] Bool) -> [] Bool))) 1))
head ([]::[] (([] Int) -> [] Int))
\a -> (undefined::[] Int)
\a -> (\b -> (!!) (seq a (seq a ([]::[] (Bool -> [] Int)))) (seq a (seq a 0)) (seq a (seq a (undefined::(([] Int) -> [] (Int -> Bool)) -> Bool)) (seq a (seq b (\c -> ([]::[] (Int -> Bool))))))) (case1 (seq a (\b -> \c -> seq b (seq b (\d -> \e -> e)))) (seq a ((undefined::([] ([] Int)) -> Bool -> Bool -> Bool) (seq a (seq a (undefined::[] ([] Int)))))))
case1 (\a -> (\b -> seq b (seq a (seq b (undefined::Bool -> ([] Int) -> [] Int)) (undefined::Bool))) (seq a (seq a (\b -> a)) (seq a (\b -> b)))) ([]::[] Int)
\a -> seq a (id ((!!) ((undefined::([] ([] Bool)) -> [] ([] Int)) (case1 (undefined::Int -> ([] Int) -> [] ([] Bool)) (seq a ([]::[] ([] Bool))) (seq a a))) ((!!) (seq a (seq a ([]::[] Int))) (seq a ((\b -> seq b b) (seq a (undefined::Int)))))))
(undefined::([] Int) -> [] Int)
\a -> a
\a -> a
(\a -> (\b -> seq b (seq a (undefined::Int -> ([] Int) -> [] Int)) (seq a (seq b (seq b 1)))) (\b -> seq b (seq a (\c -> ([]::[] ([] (Bool -> Bool))))) (seq a (head (undefined::[] ([] ([] Int))))))) ((||) (case1 (\a -> head) (undefined::Bool) (undefined::[] Bool)) ((\a -> a) (undefined::Bool)))
(\a -> \b -> seq b (filter (seq a (undefined::Bool -> Int -> Bool) (seq b True)))) (head (undefined::[] (Bool -> Int)) ((!!) (undefined::[] Bool) 2)) ((\a -> seq a (seq a (\b -> \c -> ([]::[] Bool))) (take (undefined::Int) ([]::[] Int))) ((\a -> \b -> \c -> a) (((==)::[Int] -> [Int] -> Bool) ([]::[] Int) ([]::[] Int))))
(\a -> seq a (undefined::(([] ([] Bool)) -> [] ([] (Bool -> Bool))) -> ([] Int) -> [] Int) (map ((!!) ([]::[] (([] Bool) -> [] (Bool -> Bool))) (seq a (seq a 0))))) ((||) (case1 (\a -> (undefined::([] Int) -> Bool)) (undefined::Bool) ([]::[] Int)) (not (even (undefined::Int))))
(undefined::([] Int) -> [] Int)
head ((undefined::(([] Int) -> Int -> Int -> Bool) -> [] (([] Int) -> [] Int)) ((\a -> \b -> \c -> \d -> seq b a) ((undefined::Bool -> Bool) (((==)::Int -> Int -> Bool) 2 0))))
(\a -> case1 (\b -> \c -> (undefined::([] Int) -> [] Int)) ((++) (id (undefined::[] Int))) ((\b -> seq b (undefined::[] Int)) (seq a False))) (\a -> seq a (seq a (\b -> seq b (undefined::Int -> Bool)) (tail (seq a (undefined::[] Bool)))) (seq a (\b -> seq a 0) (undefined::Int -> [] (([] Bool) -> [] Bool))))
(undefined::([] (Bool -> Bool)) -> Int -> ([] Int) -> [] Int) ([]::[] (Bool -> Bool)) ((undefined::(([] ([] ([] (Bool -> Bool)))) -> [] Bool) -> Int) (map (head ((++) (undefined::[] (([] ([] (Bool -> Bool))) -> Bool)) ([]::[] (([] ([] (Bool -> Bool))) -> Bool))))))
\a -> a
\a -> a
\a -> a
\a -> seq a (seq a ([]::[] Int))
\a -> case1 ((\b -> seq b (seq b (\c -> \d -> a))) (\b -> ((==)::Int -> Int -> Bool) b b)) (seq a (seq a (seq a (\b -> seq b (undefined::[] Int))) (\b -> seq a True))) (undefined::[] Bool)
head ([]::[] ((([] Int) -> ([] (([] ([] ([] Int))) -> [] ([] Bool))) -> Int -> Int) -> ([] Int) -> [] Int)) (\a -> seq a (\b -> (\c -> head (seq c (seq a (undefined::(Int -> Bool) -> [] (Int -> Int))) (\d -> (undefined::Bool)))) (seq a (\c -> seq a (seq a (!!)) (undefined::[] Int)))))
filter ((\a -> seq a (seq a (seq a ((\b -> seq b (undefined::(Int -> Bool) -> Int -> Bool)) (seq a 1))) (\b -> not (even (seq b 2))))) (\a -> seq a (seq a (\b -> (++) (seq a (undefined::[] (Int -> Bool))) ([]::[] (Int -> Bool)))) (\b -> (\c -> seq b (seq c (undefined::[] Bool))) (undefined::[] (Int -> [] Bool)))))
\a -> a
\a -> tail ((\b -> id (\c -> seq b a)) (seq a (\b -> seq b (seq b 2)) a) (seq a (\b -> (!!) ((undefined::([] ([] Bool)) -> [] (([] Int) -> Bool)) (seq a ([]::[] ([] Bool)))) (case1 (undefined::Int -> ([] Int) -> Int) 1 a))))
head (id (id (undefined::[] ((([] Int) -> ([] Int) -> [] Int) -> ([] Int) -> [] Int)))) (\a -> seq a ((\b -> seq a (seq a (\c -> seq c tail) b)) (seq a (head (undefined::[] (Bool -> Int))) (seq a (seq a (seq a (undefined::Bool)))))))
(\a -> (undefined::(Bool -> Int) -> Int -> ([] Int) -> [] Int) (undefined::Bool -> Int) ((\b -> seq b ((+1) 0)) (seq a (seq a ([]::[] ([] ([] (([] Int) -> Bool)))))))) (\a -> seq a (\b -> (undefined::([] ([] (Int -> Int))) -> Bool -> [] Int) ([]::[] ([] (Int -> Int))) (seq a (seq b ((\c -> c) (seq a (seq b True)))))))
\a -> seq a (\b -> seq a (\c -> id) (seq b (seq a (\c -> (undefined::Bool))))) (seq a (seq a ((undefined::Bool -> ([] Int) -> [] (([] Int) -> Bool)) (seq a (undefined::Bool))))) a
(\a -> take (seq a (seq a (undefined::(Int -> Int) -> Int) id))) (\a -> a)
(undefined::Int -> ([] Int) -> [] Int) (head (id (undefined::[] ((([] (Int -> Bool)) -> [] (Int -> Bool)) -> Int))) ((:) (\a -> seq a ((\b -> seq b b) (seq a (seq a False))))))
(\a -> filter (seq a (undefined::Int -> Bool))) (id (\a -> \b -> False) (head (undefined::[] (([] Int) -> Int))) False)
map ((undefined::(([] ([] Int)) -> [] ([] ([] Int))) -> Bool -> Int -> Int) (\a -> seq a (map (undefined::([] Int) -> [] ([] Int)) a)) ((\a -> seq a (\b -> seq b (undefined::Bool))) (\a -> id (seq a (undefined::[] Int))) ((undefined::Bool -> [] Bool) (not False))))
\a -> a
(undefined::Bool -> ([] ([] ([] ([] (Int -> Int))))) -> ([] Int) -> [] Int) (even (case1 (undefined::Int -> ([] Int) -> Int) (undefined::Int) ([]::[] Int))) (undefined::[] ([] ([] ([] (Int -> Int)))))
(\a -> \b -> (\c -> case1 (seq c (:)) b (seq a b)) (\c -> seq c (seq a (seq c (seq c (undefined::Bool -> [] (Bool -> Bool)) (seq c (undefined::Bool))))))) (head ([]::[] ((([] ([] Int)) -> [] Int) -> Bool -> Bool)) (id (map ((undefined::([] ([] Bool)) -> ([] Int) -> Int) ([]::[] ([] Bool))))))
\a -> case1 (undefined::(Int -> Bool) -> ([] (Int -> Bool)) -> [] Int) (map (undefined::Int -> Int) (seq a a)) ((\b -> (\c -> seq c ([]::[] (Int -> Bool))) (\c -> seq b (undefined::[] Bool))) (head ([]::[] (Bool -> Int)) (seq a False)))
(\a -> seq a tail) (head (take (head ([]::[] Int)) ([]::[] (([] ([] Int)) -> [] ([] ([] Int))))))
\a -> a
(undefined::(([] ([] ([] Bool))) -> [] ([] ([] Bool))) -> ([] Int) -> [] Int) ((\a -> seq a (map (take (seq a (seq a (undefined::Int)))))) (\a -> (undefined::(Int -> Bool) -> ([] Int) -> Int) (\b -> seq a (undefined::Bool))))
(\a -> \b -> (\c -> seq c tail) a) ((!!) (undefined::[] Int) 0) (\a -> ((==)::Int -> Int -> Bool) a (head (seq a (undefined::[] (Int -> Int))) (seq a a)))
\a -> seq a ((undefined::(Int -> [] Bool) -> [] Int) (head (seq a (undefined::[] (Int -> [] Bool)))))
case1 (\a -> head ((!!) ([]::[] ([] (Bool -> ([] Int) -> [] Int))) a) False) ([]::[] Int)
(:) ((\a -> (\b -> seq b (\c -> seq a b) (\c -> id not)) (seq a (id ((\b -> seq a b) (seq a (seq a 0)))))) (id (\a -> (\b -> \c -> (undefined::([] Bool) -> [] Int) (seq b (seq c ([]::[] Bool)))) (seq a (seq a (undefined::Bool))))))
(undefined::Bool -> ([] Int) -> [] Int) ((!!) (head (undefined::[] ([] (Int -> Bool)))) (undefined::Int) (head ([]::[] (([] ([] Int)) -> Int)) (undefined::[] ([] Int))))
(\a -> \b -> (\c -> seq c tail) (seq b (seq a (seq b ([]::[] Bool))))) ((\a -> \b -> seq a (seq b (undefined::[] (Int -> [] Int)))) 1) (undefined::Int)
\a -> ([]::[] Int)
(\a -> \b -> seq b (undefined::Bool -> ([] Int) -> [] Int) a) (even (undefined::Int)) ((undefined::(([] ([] (Bool -> Bool))) -> [] ([] (([] Int) -> [] ([] Int)))) -> Int) (\a -> seq a (map (\b -> seq b ([]::[] (([] Int) -> [] ([] Int)))) (seq a ([]::[] Bool)))))
\a -> seq a (seq a a)
\a -> (\b -> seq a (head (seq b (seq a (\c -> (undefined::[] (Int -> [] Int))) (seq b (seq a (undefined::Bool))))) ((\c -> head (seq c a)) ((!!) (undefined::[] ([] ([] (Int -> Int)))))))) ((!!) ((\b -> seq b (seq b (undefined::[] (([] Int) -> [] ([] Int))))) 1) (id (seq a (undefined::(([] Int) -> [] Int) -> Int)) (\b -> seq b (seq a a))))
(\a -> seq a ((\b -> seq b (\c -> seq c id)) (seq a a))) (tail ((\a -> seq a (seq a (undefined::[] ([] Bool)))) (\a -> seq a (seq a ([]::[] Bool))))) (id (head (id ([]::[] (Int -> Bool)))) (undefined::Int))
\a -> a
\a -> a
\a -> a
\a -> seq a (head (seq a (seq a (undefined::[] (Int -> ([] ([] (Bool -> Bool))) -> [] Int)))) ((\b -> seq b 2) even)) ((undefined::([] (([] ([] Int)) -> [] Bool)) -> [] ([] (Bool -> Bool))) (seq a (head (seq a (seq a (seq a (seq a ([]::[] ([] (([] ([] Int)) -> [] Bool))))))))))
(\a -> filter (\b -> seq b (seq b (\c -> \d -> (undefined::Bool)) (seq a (seq b False)) b))) ((\a -> \b -> a) (id (undefined::Int)) ((\a -> \b -> a) (\a -> head (seq a ([]::[] Bool)))))
(!!) ([]::[] ((([] Int) -> Bool -> Bool -> Bool) -> ([] Int) -> [] Int)) 1 (\a -> seq a (case1 (\b -> \c -> seq c (\d -> \e -> (undefined::Bool))) ((==)::Bool -> Bool -> Bool) ((\b -> seq b ([]::[] Bool)) 1)))
\a -> seq a ((undefined::([] ([] (Int -> Int))) -> [] Int) (seq a (seq a (\b -> head ([]::[] (Bool -> [] ([] (Int -> Int)))) (undefined::Bool))) (\b -> (undefined::(Int -> Int) -> [] (Int -> Bool)) (id (seq a (undefined::Int -> Int))))))
\a -> tail (tail (head (seq a (\b -> head (seq a (map (seq b (seq a (seq b (undefined::Int -> [] ([] Int))))) (seq b (tail a))))) (undefined::Int -> Int -> Bool))))
(!!) (undefined::[] (([] Int) -> [] Int)) ((undefined::(([] Int) -> ([] Int) -> [] ([] Int)) -> Int) (\a -> seq a (\b -> (undefined::Bool -> [] ([] Int)) (seq a (undefined::Bool)))))
\a -> a
(undefined::([] Int) -> [] Int)
\a -> a
\a -> seq a (undefined::(([] Int) -> [] (([] Int) -> Bool)) -> [] Int) (seq a ((undefined::Int -> ([] Int) -> [] (([] Int) -> Bool)) (undefined::Int)))
case1 (\a -> seq a (undefined::([] Bool) -> Int -> ([] Int) -> [] Int)) (\a -> seq a (undefined::Bool -> ([] Int) -> [] Int) (seq a (undefined::Bool))) ((undefined::([] ([] Bool)) -> [] Bool) ([]::[] ([] Bool))) (head ([]::[] ((([] Int) -> [] Int) -> Int)) (\a -> seq a (undefined::[] Int)))
\a -> seq a ((\b -> seq b ((undefined::Bool -> ([] (Int -> [] Int)) -> [] Int) (seq a True) (seq b ((\c -> seq c (seq c ([]::[] (Int -> [] Int)))) (\c -> seq a c))))) (\b -> (undefined::([] ([] Int)) -> [] ([] ([] Int)))))
filter (head (tail ([]::[] ((([] Int) -> [] (([] (([] Int) -> Bool)) -> [] (([] Int) -> Bool))) -> Int -> Bool))) (\a -> map (seq a (\b -> (:) (undefined::([] Int) -> Bool))) ((\b -> b (seq b ([]::[] Bool))) (\b -> b))))
\a -> seq a a
(!!) ((\a -> seq a (map (undefined::Int -> ([] Int) -> [] Int)) (undefined::[] Int)) (head (undefined::[] (Int -> Bool)) (id (undefined::Int)))) (undefined::Int)
\a -> a
case1 (undefined::Int -> ([] Int) -> Int -> ([] Int) -> [] Int) (undefined::Int -> ([] Int) -> [] Int) ([]::[] Int) (head (case1 (head ([]::[] (Bool -> ([] Bool) -> [] Int))) ((!!) (undefined::[] ([] Int)) (undefined::Int)) ((!!) (undefined::[] ([] Bool)) 0)))
id (undefined::(([] Int) -> [] (Int -> Int)) -> ([] Int) -> [] Int) (undefined::([] Int) -> [] (Int -> Int))
head ((\a -> seq a ((undefined::Bool -> Bool -> [] (([] Int) -> [] Int)) (a ([]::[] (([] ([] Int)) -> [] ([] Bool))) 2 (undefined::Int))) (a (seq a (undefined::[] (([] ([] Int)) -> [] ([] Bool)))) (seq a 2) (undefined::Int))) (id (\a -> ((==)::Int -> Int -> Bool))))
(undefined::(([] (([] Int) -> Int)) -> ([] ([] (Int -> Int -> Int))) -> [] (([] Int) -> Int)) -> ([] Int) -> [] Int) (\a -> \b -> (\c -> seq b (\d -> seq a a) (seq c (seq b (seq c (undefined::[] ([] Bool)))))) (seq a (\c -> map (\d -> seq d ([]::[] Int)) (seq c (undefined::[] Bool)))))
id (\a -> seq a (\b -> seq b (\c -> c)) ((\b -> \c -> seq b (seq a 0)) (undefined::Bool))) (\a -> \b -> seq a (head (id (seq b ([]::[] ((Int -> ([] Int) -> Int) -> [] Int)))) (seq a (id (undefined::Int -> Int -> ([] Int) -> Int)) b)))
\a -> (undefined::(([] ([] ([] Int))) -> [] ([] ([] Bool))) -> [] Int) (\b -> seq a (\c -> seq b (\d -> ([]::[] ([] ([] Bool))))) (\c -> seq a c) (undefined::Int))
\a -> (undefined::[] Int)
(undefined::Bool -> ([] Int) -> [] Int) ((\a -> seq a (seq a odd) ((+1) (seq a (undefined::Int)))) (\a -> (undefined::([] ([] Int)) -> [] Bool)))
\a -> seq a (map (\b -> seq b (seq b (seq b ((\c -> seq c (\d -> 0)) (seq b (undefined::Int)) (undefined::([] Int) -> [] Bool))))) (seq a (tail (id (seq a ((\b -> seq b ([]::[] (([] Int) -> [] ([] (([] Bool) -> Bool))))) ((+1) ((+1) (undefined::Int)))))))))
\a -> a
(undefined::Int -> Int -> ([] Int) -> [] Int) ((+1) (id ((undefined::Bool -> Int) (undefined::Bool)))) ((\a -> head ([]::[] ((([] ([] Int)) -> [] Int) -> Int)) (\b -> seq a (undefined::[] Int))) ((undefined::Bool -> Int) (head (undefined::[] Bool))))
(undefined::(([] (([] ([] Int)) -> [] Bool)) -> Int -> [] Int) -> ([] Int) -> [] Int) (\a -> \b -> (undefined::[] Int))
\a -> (\b -> map (undefined::(([] Int) -> [] (Bool -> Bool)) -> Int) ((undefined::([] Int) -> [] (([] Int) -> [] (Bool -> Bool))) (head (seq b ([]::[] ([] Int)))))) (case1 (\b -> \c -> 2) 0 (seq a (seq a (seq a (undefined::[] ([] ([] ([] Bool))))))))
id (\a -> \b -> b) (((==)::[Int] -> [Int] -> Bool) (head ((undefined::Bool -> [] ([] Int)) False)) (map (\a -> seq a (undefined::Int)) ([]::[] ([] Int))))
\a -> a
\a -> a
\a -> tail a
\a -> a
\a -> seq a (seq a ((undefined::Bool -> [] Int) (seq a (\b -> (undefined::(([] ([] ([] Bool))) -> Int) -> Bool)) (seq a (seq a (undefined::Int))) ((\b -> seq b (undefined::([] ([] ([] Bool))) -> Int)) (((==)::[Int] -> [Int] -> Bool) a a)))))
\a -> (undefined::Int -> [] Int) (undefined::Int)
\a -> seq a (seq a (seq a (\b -> (\c -> \d -> c) a (id (seq a (\c -> (undefined::[] (Int -> [] Int))) (id (undefined::Bool)))))) (seq a (seq a (seq a (((==)::Int -> Int -> Bool) (seq a (\b -> seq b 1) (undefined::[] ([] Bool))) ((undefined::(([] (Int -> Bool)) -> [] Int) -> Int) (\b -> seq b (seq b a))))))))
\a -> seq a (undefined::[] Int)
(!!) ((\a -> map (seq a (seq a (:))) (seq a (seq a (undefined::[] Int)))) (undefined::Bool)) ((!!) (take (undefined::Int) (undefined::[] Int)) (id ((+1) 1)))
id (\a -> \b -> \c -> ([]::[] Int)) ((\a -> seq a (seq a (undefined::Bool))) (undefined::Int)) (case1 (\a -> seq a (seq a (\b -> \c -> seq c c))) ((undefined::Int -> Bool -> Bool) ((+1) 0)) (undefined::[] ([] ([] Bool))))
id
\a -> a
\a -> take 2 ((undefined::(([] Int) -> [] (Int -> Bool)) -> [] Int) (\b -> (undefined::[] (Int -> Bool))))
\a -> tail a
case1 (\a -> (undefined::([] Int) -> ([] Int) -> [] Int)) (\a -> a) ([]::[] Int)
(:) (undefined::Int)
\a -> a
\a -> seq a (undefined::(([] ([] (([] Int) -> [] Int))) -> Int -> Int -> [] Int) -> [] Int) ((\b -> \c -> seq a (id (undefined::Int -> Int -> Int -> [] Int)) b) (undefined::Int))
(\a -> (\b -> seq b (\c -> id)) (seq a (\b -> seq a False))) (undefined::([] Int) -> [] Bool) ((\a -> seq a ((\b -> seq b (seq b 1)) (seq a (tail ([]::[] Bool))))) (undefined::([] Int) -> Bool))
\a -> a
\a -> map (undefined::(([] ([] Int)) -> [] ([] (Int -> Bool))) -> Int) (undefined::[] (([] ([] Int)) -> [] ([] (Int -> Bool))))
(!!) ((\a -> seq a (seq a (id (undefined::Bool -> [] (([] Int) -> [] Int)) (seq a (seq a (undefined::Bool)))))) ((undefined::(([] Int) -> Int -> Bool) -> [] (Bool -> Bool)) (\a -> \b -> (undefined::Bool)))) ((undefined::([] Bool) -> ([] (Bool -> Bool)) -> Int) ([]::[] Bool) ([]::[] (Bool -> Bool)))
\a -> tail (seq a ((\b -> seq a (seq a (seq a (map (\c -> b))))) (seq a (seq a (seq a (undefined::(Int -> Int) -> Int))) (seq a (\b -> b)))) ((undefined::(Bool -> Int) -> [] ([] (([] ([] Int)) -> [] Int))) (seq a (seq a (seq a (undefined::(Int -> Bool) -> Bool -> Int))) (undefined::Int -> Bool))))
\a -> (undefined::[] Int)
(undefined::(([] Int) -> [] (Int -> Int)) -> Bool -> ([] Int) -> [] Int) (\a -> (++) (seq a (seq a ([]::[] (Int -> Int)))) (id ([]::[] (Int -> Int)))) ((\a -> seq a (case1 (seq a (undefined::Int -> ([] Int) -> Bool)) (seq a (undefined::Bool)) (seq a ([]::[] Int)))) (undefined::[] (([] ([] ([] (Int -> Int)))) -> Bool -> Bool)))
(undefined::Bool -> ([] Int) -> [] Int) ((undefined::(Int -> [] (Int -> [] Int)) -> Int -> Bool) (\a -> ([]::[] (Int -> [] Int))) ((undefined::Int -> Int) 1))
\a -> a
\a -> a
(undefined::([] Int) -> [] Int)
case1 (id (undefined::(Int -> Int) -> ([] (Int -> Int)) -> ([] Int) -> [] Int)) ((\a -> (++) (seq a ([]::[] Int))) (id (undefined::([] Bool) -> [] (Bool -> Bool)) (id (undefined::[] Bool)))) ((\a -> head (undefined::[] (Bool -> [] (Int -> Int))) (seq a (seq a True))) ((\a -> \b -> seq a (undefined::Bool)) (id (undefined::Int))))
id
\a -> seq a (seq a a)
\a -> a
tail
case1 (\a -> head ((\b -> seq a (seq b ([]::[] (([] Int) -> ([] Int) -> [] Int)))) (seq a (seq a (undefined::Int))))) ((\a -> seq a (\b -> (undefined::[] Int))) ((undefined::Int -> Bool -> Bool -> Bool) 2)) ((\a -> seq a (seq a (seq a (seq a ([]::[] Int))))) (undefined::([] (([] Int) -> [] ([] Bool))) -> Bool))
case1 (\a -> \b -> (\c -> seq c (seq c tail)) (seq b (seq a ([]::[] Int)))) ((:) 1) ((undefined::([] ([] (Int -> Bool))) -> [] (Int -> Int)) ([]::[] ([] (Int -> Bool))))
tail
(\a -> \b -> seq b (seq a (\c -> seq c tail) (seq a (seq b ([]::[] Bool))))) ((\a -> seq a (\b -> \c -> c)) ([]::[] ([] Bool))) (id (undefined::(Bool -> ([] ([] ([] Int))) -> [] ([] ([] Int))) -> Bool) (undefined::Bool -> ([] ([] ([] Int))) -> [] ([] ([] Int))))
(\a -> seq a tail) (\a -> seq a (\b -> ([]::[] ([] (Bool -> Bool)))) (seq a (seq a (seq a (seq a (undefined::Bool -> Int)) False))))
case1 ((\a -> seq a ((!!) ([]::[] (Int -> ([] Int) -> [] Int)) a)) 1) ((\a -> a (tail (undefined::[] ([] (([] Int) -> Bool)))) (seq a (seq a (undefined::Int)))) (undefined::([] ([] (([] Int) -> Bool))) -> Int -> [] Int))
id (undefined::(Bool -> Bool -> Bool) -> ([] Bool) -> ([] Int) -> [] Int) (id (\a -> seq a (||)) ([]::[] ([] Int))) ((undefined::(([] (Bool -> Bool)) -> Int -> Int) -> [] Bool) ((\a -> seq a (\b -> \c -> 2)) (((==)::Int -> Int -> Bool) 2 (undefined::Int))))
\a -> a
(undefined::(([] (Int -> Int)) -> ([] (([] Int) -> [] (Bool -> Bool))) -> Bool) -> ([] Int) -> [] Int) (\a -> \b -> case1 (id (\c -> \d -> c)) (seq b (seq b (seq a (seq a (undefined::Bool))))) ((\c -> seq c ([]::[] Bool)) (seq a False)))
\a -> seq a (seq a (\b -> seq a (\c -> seq c (undefined::Bool -> [] Int)) (seq a (seq a True)))) (seq a ((\b -> seq b (\c -> (undefined::[] ([] (Int -> Int))))) (seq a (seq a 0)))) (seq a (case1 (\b -> (!!)) (\b -> False) (seq a (undefined::[] Bool)) 2))
head (map (\a -> head (seq a (undefined::[] ((Int -> Int -> Bool) -> ([] Int) -> [] Int))) (undefined::Int -> Int -> Bool)) ([]::[] (([] (([] Int) -> Int -> Int -> Bool)) -> Int -> [] Int)))
(\a -> \b -> seq a (\c -> b) (case1 (\c -> tail) (undefined::[] ([] Int)))) ((\a -> \b -> seq a (\c -> seq c (undefined::[] ([] (Int -> Int)))) (\c -> tail (undefined::[] Bool))) ((\a -> a) False))
id (head (undefined::[] ((([] (([] Int) -> Int)) -> [] Bool) -> ([] Int) -> [] Int)) (\a -> filter (((==)::Bool -> Bool -> Bool) (id (undefined::([] (Int -> Int)) -> Bool) (seq a (seq a (undefined::[] (Int -> Int)))))) (case1 (\b -> (undefined::([] Int) -> [] Bool)) (seq a ([]::[] Bool)) ([]::[] Int))))
(!!) ((!!) (head (filter (undefined::([] ([] (([] Int) -> [] Int))) -> Bool) ([]::[] ([] ([] (([] Int) -> [] Int)))))) ((!!) (head ([]::[] ([] Int))) ((+1) 2))) ((\a -> \b -> a) ((+1) (undefined::Int)) ((undefined::([] ([] Bool)) -> Bool) ([]::[] ([] Bool))))
\a -> ([]::[] Int)
\a -> a
head (undefined::[] (([] Int) -> [] Int))
\a -> (undefined::(([] (Int -> Bool)) -> [] (([] Int) -> Int -> Bool)) -> [] Int) ((!!) (seq a (seq a ([]::[] (([] (Int -> Bool)) -> [] (([] Int) -> Int -> Bool))))) (case1 (\b -> (undefined::([] Bool) -> Int)) (seq a 0) ([]::[] Bool)))
(undefined::(([] Int) -> [] ((Int -> Int -> [] Int) -> Int -> Int -> [] Int)) -> ([] Int) -> [] Int) (\a -> seq a (seq a (seq a (seq a (seq a ([]::[] ((Int -> Int -> [] Int) -> Int -> Int -> [] Int)))))))
(\a -> case1 (\b -> seq a (seq a (seq a (seq b take) b))) ((\b -> seq b (seq a (undefined::[] Int))) (\b -> seq a (seq a (undefined::[] (Int -> Int)))))) (id (undefined::Int -> ([] ([] ([] Int))) -> ([] ([] Int)) -> [] Bool) 1)
(\a -> seq a (\b -> \c -> seq a (seq b (seq b (undefined::Int -> [] Int) (seq b a)))) (\b -> (undefined::([] Int) -> Bool))) ((+1) ((\a -> case1 (undefined::Bool -> ([] Bool) -> Int) (seq a 0) (undefined::[] Bool)) (\a -> \b -> seq a (seq b id) (undefined::Bool))))
id (\a -> seq a ((!!) ([]::[] (Int -> ([] Int) -> [] Int))) (seq a (seq a (seq a 0))) 2) (id (\a -> \b -> \c -> (undefined::Bool)) (\a -> seq a (seq a (\b -> (undefined::[] ([] Int)))) ((+1) 0)))
\a -> (enumFromTo::Int -> Int -> [Int]) ((undefined::(Int -> [] Bool) -> Int) (seq a (\b -> seq b (seq a (seq b (seq a (seq b (seq a (undefined::[] Bool))))))))) (seq a ((undefined::([] Bool) -> ([] ([] (Int -> Int))) -> Int) (seq a (seq a (undefined::[] Bool))) (head ((undefined::(Int -> Int) -> [] ([] ([] (Int -> Int)))) (seq a (\b -> b))))))
\a -> a
\a -> seq a (map (seq a (\b -> seq a (\c -> (+1) (undefined::Int)) (head ([]::[] (Bool -> Int)) (seq b (id (undefined::Bool)))))) (seq a (seq a (undefined::[] (([] (([] ([] Int)) -> [] ([] Int))) -> ([] Int) -> [] Bool)))))
(\a -> \b -> seq a b) ((undefined::Bool -> ([] ([] ([] (Int -> Bool)))) -> ([] ([] Int)) -> [] Bool) ((\a -> seq a (seq a True)) ((:) 0 (undefined::[] Int))))
\a -> a
id (\a -> \b -> (undefined::[] Int)) ((\a -> seq a (undefined::Int)) (undefined::[] (([] (([] Bool) -> [] Bool)) -> [] (([] Bool) -> [] Bool))))
map ((\a -> seq a (seq a (\b -> \c -> id) (undefined::[] Bool)) (undefined::Int)) (case1 (\a -> seq a (seq a (undefined::([] ([] Int)) -> Int))) 1 ((\a -> seq a (undefined::[] ([] Int))) False)))
\a -> map ((!!) (undefined::[] ((Bool -> ([] ([] Int)) -> [] ([] (Int -> Int))) -> Int)) (head (seq a (head (seq a (undefined::[] ([] Int))))))) (seq a ((!!) ([]::[] ([] (Bool -> ([] ([] Int)) -> [] ([] (Int -> Int))))) (id (seq a (\b -> (undefined::Int)) (seq a (seq a (undefined::[] ([] Int))))))))
\a -> seq a (seq a (seq a (seq a (\b -> (\c -> seq c (seq b a)) (seq a (undefined::[] ([] ([] ([] Bool))))))))) ((\b -> \c -> seq b (id (undefined::Bool -> Int)) (seq a (seq c (seq b False)))) (seq a ((undefined::Bool -> [] (Int -> Int)) (seq a (seq a (seq a False))))))
(undefined::([] Int) -> [] Int)
id (head (undefined::[] ((([] Int) -> ([] ([] (Int -> Bool))) -> Bool -> Bool) -> ([] Int) -> [] Int))) (undefined::([] Int) -> ([] ([] (Int -> Bool))) -> Bool -> Bool)
head (undefined::[] (([] Int) -> [] Int))
\a -> a
(undefined::(([] Int) -> [] Int) -> ([] Int) -> [] Int) (\a -> (\b -> map (seq b (\c -> 2)) (seq a (seq a (undefined::[] Bool)))) (seq a (seq a ((\b -> seq b (seq b True)) (seq a ([]::[] (Bool -> Bool)))))))
(\a -> \b -> seq b (\c -> seq c tail) a) ((!!) ([]::[] ((Bool -> [] Int) -> Bool)) (undefined::Int) (undefined::Bool -> [] Int)) (id (undefined::([] (Int -> Int -> Int)) -> ([] Int) -> [] (Int -> Bool)) (map (\a -> \b -> \c -> seq c 2) ([]::[] Int)))
(\a -> seq a (undefined::Bool -> ([] Int) -> [] Int) (undefined::Bool)) (\a -> seq a ((\b -> seq b (seq b (\c -> \d -> \e -> seq e (seq b c)))) (head ((\b -> seq b (seq b (undefined::[] (Int -> Bool)))) True))))
\a -> seq a (case1 (\b -> seq a (undefined::Int -> ([] (Int -> Int -> Bool)) -> [] Int) 1) a ((undefined::Bool -> [] (Int -> Int -> Bool)) (seq a (((==)::Int -> Int -> Bool) 0 (undefined::Int)))))
\a -> a
(undefined::(Int -> ([] Int) -> Bool) -> ([] Int) -> [] Int) ((\a -> (undefined::Bool -> Int -> ([] Int) -> Bool) (seq a (a 0 True))) (id (undefined::Int -> Bool -> Bool)))
\a -> seq a ((\b -> seq b (seq a (seq b (\c -> ([]::[] Int))))) (even ((\b -> b) 2)) ((\b -> seq b (id (seq b (seq a (seq a (\c -> seq a (undefined::[] ([] (Int -> Bool))))))))) ((\b -> seq b (seq a (\c -> c))) a)))
id
\a -> (undefined::(([] Int) -> ([] (Bool -> Bool)) -> Int -> Int) -> [] Int) (case1 (id (undefined::Int -> ([] Int) -> ([] (Bool -> Bool)) -> Int -> Int)) ((\b -> seq b (seq a (undefined::([] (Bool -> Bool)) -> Int -> Int))) (seq a (seq a (seq a (undefined::Bool))))))
tail
(\a -> seq a (\b -> head (seq b ([]::[] (Int -> ([] Int) -> [] Int))) (head (seq a ([]::[] Int)))) (seq a (((==)::[Int] -> [Int] -> Bool) (seq a (seq a (undefined::[] Int))) ([]::[] Int)))) ((\a -> (\b -> seq b (a (seq a (undefined::Bool)))) a) id)
\a -> map (undefined::(Int -> Int -> [] Int) -> Int) ((\b -> (!!) (seq a (seq a (undefined::[] ([] (Int -> Int -> [] Int))))) b) ((\b -> seq b (head a)) (take (undefined::Int) ([]::[] ([] Int)))))
(undefined::(([] ([] Bool)) -> [] ([] (Bool -> Bool))) -> ([] Int) -> [] Int) (\a -> (\b -> seq b (head ((undefined::([] ([] Int)) -> [] ([] ([] (Bool -> Bool)))) (head ([]::[] ([] ([] Int))))))) (seq a ((undefined::Bool -> ([] Bool) -> Bool) (seq a (odd 0)))))
id (\a -> seq a tail) (case1 (undefined::Int -> ([] Int) -> [] Bool) (map head (undefined::[] ([] Bool))) ((++) (undefined::[] Int) (undefined::[] Int)))
\a -> id (\b -> seq a (seq b (\c -> (undefined::[] Int)))) (\b -> \c -> (undefined::([] Bool) -> Int) (seq c (seq a (seq b (undefined::[] Bool))))) (undefined::[] Int)
\a -> a
(\a -> id (seq a (\b -> (:) (seq a 2)))) ((\a -> \b -> seq a (seq a (undefined::Int -> Bool))) (undefined::[] Int)) (undefined::Bool)
(\a -> (!!) (id ((!!) (undefined::[] ([] (([] Int) -> [] Int))) (seq a (seq a (undefined::Int))))) (head (take (seq a (undefined::Int)) (seq a ([]::[] Int))))) ((\a -> (!!) (seq a (undefined::[] Bool))) (undefined::([] Int) -> [] (Int -> ([] Bool) -> Bool)))
(undefined::([] Int) -> [] Int)
\a -> case1 (\b -> \c -> a) (seq a (seq a (\b -> id ([]::[] Int))) (id (seq a (\b -> \c -> (undefined::Bool))))) (seq a (seq a (undefined::(Int -> Bool) -> [] ([] ([] ([] Bool))))) (seq a (\b -> seq b (not (undefined::Bool)))))
(\a -> seq a (seq a (seq a (seq a (\b -> \c -> seq a (seq a c)))) (((==)::Int -> Int -> Bool) (seq a (id 2))))) (\a -> map (\b -> seq b (\c -> c)) ([]::[] ((([] Int) -> Int) -> [] Int)))
id
tail
(:) (case1 ((\a -> \b -> seq a (seq b (seq a (undefined::([] Bool) -> Int)))) (\a -> \b -> a)) (case1 (\a -> \b -> a) (undefined::Int) ([]::[] Int)) (undefined::[] Bool))
\a -> map (\b -> case1 (undefined::Int -> ([] Int) -> Bool -> Int) (\c -> (undefined::Int)) a (id (\c -> (undefined::Bool)) (\c -> seq b (seq a (undefined::Bool))))) (id (take ((\b -> b) (seq a 1)) (tail ([]::[] (Int -> Int -> [] (([] Int) -> [] Int))))))
id ((\a -> seq a (seq a (\b -> \c -> c))) ((\a -> seq a (seq a (undefined::Bool))) (id (undefined::([] Int) -> Int)))) (\a -> seq a (map (seq a (seq a (\b -> seq a (tail a)))) (seq a (undefined::Int -> [] (([] ([] Bool)) -> [] Bool)) (seq a (seq a 2)))))
head (case1 (\a -> \b -> seq b (seq a (\c -> ([]::[] (([] Int) -> [] Int))) (seq b (seq b (seq a ([]::[] ([] Int))))))) ((\a -> \b -> seq a (undefined::[] (([] Int) -> [] Int))) (head (undefined::[] Bool)) ((+) (undefined::Int) ((+1) (undefined::Int)))) ((\a -> seq a (undefined::Bool -> [] ([] ([] Bool))) (seq a False)) (id (undefined::Bool -> [] (Bool -> Bool)) (undefined::Bool))))
(\a -> \b -> (!!) (seq a (\c -> seq c ([]::[] ([] Int))) (head ([]::[] Int))) 1) (\a -> seq a (undefined::([] (([] (([] Int) -> ([] ([] Int)) -> [] Bool)) -> Int)) -> Bool) (head ([]::[] ([] (([] (([] Int) -> ([] ([] Int)) -> [] Bool)) -> Int)))))
id
(undefined::(([] Bool) -> Int) -> (Bool -> Int) -> ([] Int) -> [] Int) (undefined::([] Bool) -> Int) (id (\a -> \b -> seq a (seq a (seq a (seq b (seq a (undefined::Int)))))) (\a -> seq a (\b -> seq a (seq a True)) ((+) (undefined::Int) (undefined::Int))))
(undefined::(([] ([] Int)) -> [] Bool) -> ([] Int) -> [] Int) ((\a -> \b -> (++) (seq b (undefined::[] Bool)) (seq a (undefined::[] Bool))) (map (head ([]::[] (Bool -> ([] Bool) -> [] Bool))) (tail ([]::[] Bool))))
\a -> a
(undefined::([] Int) -> [] Int)
\a -> a
\a -> a
\a -> seq a (id (\b -> (undefined::([] (([] Bool) -> [] Bool)) -> [] Int)) ((+1) ((\b -> b) (seq a 1))) ((undefined::Int -> [] (([] Bool) -> [] Bool)) ((\b -> seq b (undefined::Int)) (seq a (seq a (seq a (undefined::[] ([] Bool))))))))
(\a -> \b -> \c -> \d -> seq a (undefined::[] Int)) 1 ((undefined::Bool -> Bool) True) ((\a -> seq a (seq a ((!!) ([]::[] Int)) a)) (undefined::Int))
\a -> map (undefined::([] ([] (Int -> Bool))) -> Int) ((undefined::Bool -> [] ([] ([] (Int -> Bool)))) (seq a (seq a (seq a (seq a (undefined::Int -> Bool))) 2)))
map (case1 (head ([]::[] (([] ([] Bool)) -> ([] ([] ([] Bool))) -> Int -> Int))) (\a -> (undefined::Int)) ((undefined::Int -> (Int -> Bool) -> [] ([] ([] Bool))) (undefined::Int) ((!!) (id (undefined::[] Bool)))))
(\a -> (undefined::Bool -> Int -> ([] Int) -> [] Int) (((==)::Int -> Int -> Bool) 2 (undefined::Int)) (seq a (seq a (seq a (seq a (seq a (undefined::Bool -> Int)) (seq a (seq a (undefined::Bool)))))))) (\a -> seq a (seq a (\b -> (undefined::Bool -> Int -> Int -> [] Int) (seq b b))) (seq a (seq a (\b -> False)) (undefined::Bool -> Bool)))
id ((\a -> seq a (\b -> seq a (\c -> seq a (\d -> c) b)) ((!!) ([]::[] ((Bool -> Bool -> Bool) -> Bool)) (undefined::Int) (seq a (\b -> \c -> b)))) (\a -> (\b -> map (\c -> \d -> seq c d) (seq b (seq b (undefined::[] (([] Int) -> Bool))))) ((!!) (seq a ([]::[] ([] ([] (Int -> Int))))) (seq a ((+1) (undefined::Int))))))
\a -> (undefined::[] Int)
\a -> id ((undefined::(([] (([] ([] Int)) -> [] Bool)) -> [] (Bool -> Bool)) -> [] Int) ((\b -> seq b (seq b (\c -> seq a (seq b (seq c (seq a ([]::[] (Bool -> Bool)))))))) (id (\b -> seq b (undefined::Int)) (seq a (seq a (seq a ([]::[] Bool)))))))
(undefined::(([] (Int -> Int)) -> Int -> Int) -> ([] Int) -> [] Int) head
(undefined::((Int -> ([] Int) -> Bool) -> ([] Int) -> Int -> ([] Int) -> Bool) -> ([] Int) -> [] Int) (\a -> \b -> (undefined::Int -> ([] Int) -> Bool))
\a -> seq a ((!!) ((++) (seq a (seq a (undefined::[] ((Bool -> Bool) -> [] Int)))) (tail (undefined::[] ((Bool -> Bool) -> [] Int)))) (seq a ((\b -> seq b (seq a (undefined::Int))) (seq a ([]::[] Int))))) (seq a (seq a (\b -> seq a ((undefined::Bool -> Bool -> Bool) b))) (seq a (seq a (seq a (seq a (seq a even) (id (undefined::Int)))))))
\a -> (undefined::(([] ([] ([] Int))) -> [] ([] ([] Bool))) -> [] Int) ((undefined::(([] Int) -> [] Int) -> ([] ([] ([] Int))) -> [] ([] ([] Bool))) id)
\a -> (++) a (seq a (\b -> a) (seq a (seq a (id (undefined::Bool -> (Bool -> [] Bool) -> Int)) (seq a (seq a (seq a (undefined::Bool)))))))
\a -> a
(\a -> seq a (\b -> \c -> (enumFromTo::Int -> Int -> [Int]) a a)) ((!!) (undefined::[] Int) 2) (\a -> (!!) (undefined::[] (Bool -> ([] Int) -> Int)) (undefined::Int) (undefined::Bool))
(!!) ([]::[] (([] Int) -> [] Int)) 1
id (\a -> seq a (\b -> \c -> tail) (seq a (undefined::Int))) ((\a -> seq a ([]::[] ([] (Int -> Int)))) (\a -> a)) ((\a -> \b -> seq a (seq a 0)) (undefined::[] ([] Bool)) (map (\a -> even) (head ([]::[] ([] Bool)))))
(++) ((!!) ([]::[] (([] (Bool -> Bool)) -> Bool -> [] Int)) (head ([]::[] Int)) (id (\a -> ([]::[] (Bool -> Bool))) (\a -> id (seq a (undefined::Bool)))) ((\a -> seq a (id (seq a (undefined::([] Int) -> Bool) (undefined::[] Int)))) ((!!) ([]::[] (Int -> ([] Int) -> Bool)) (id (undefined::Int)))))
\a -> (undefined::[] Int)
\a -> a
tail
\a -> seq a (\b -> (undefined::[] Int)) ((\b -> id (seq b (head a))) ((undefined::Int -> [] (([] ([] Int)) -> [] ([] ([] Int)))) (seq a (seq a (seq a 0)))))
(\a -> \b -> head (seq a (seq b (undefined::Int -> [] (([] Int) -> [] Int)) (seq a (undefined::Int))))) ((\a -> a) (((==)::Int -> Int -> Bool) 2 0)) (id (\a -> \b -> seq b (undefined::Int -> Bool)) (case1 (\a -> \b -> (undefined::[] ([] ([] Bool)))) ([]::[] ([] ([] Bool))) ([]::[] Int)))
(\a -> map (\b -> (\c -> c (c (undefined::Int) b) (c b (undefined::Int))) (seq a (+)))) (\a -> filter (\b -> id (\c -> (undefined::Bool)) (seq a (seq b (seq a 1)))) (seq a (map (undefined::(Int -> Int) -> ([] Int) -> Bool)) (seq a (seq a (seq a ([]::[] (Int -> Int)))))))
\a -> seq a (seq a a)
\a -> a
take ((\a -> (!!) (seq a (map (undefined::([] ([] (Bool -> Bool))) -> Int)) (head (seq a ([]::[] ([] ([] ([] (Bool -> Bool)))))))) a) (case1 (\a -> case1 (undefined::Bool -> ([] Bool) -> Int) (undefined::Int)) ((undefined::([] Bool) -> Int) (undefined::[] Bool)) (undefined::[] Bool)))
(undefined::(Bool -> Bool) -> ([] Int) -> [] Int) ((\a -> seq a (id (seq a (\b -> a)))) (((==)::Int -> Int -> Bool) 0 ((+1) (undefined::Int))))
\a -> a
\a -> seq a (take (seq a (seq a (\b -> (+) (seq b (undefined::Int)) (seq a (undefined::Int))) (head (seq a (undefined::[] (([] Int) -> Int -> Bool)))))) ((\b -> seq b (\c -> a) (seq b (\c -> seq a ([]::[] (Int -> Bool))))) (id (\b -> seq a odd) (\b -> id (undefined::Bool)))))
(!!) (head (head (undefined::[] (Bool -> [] ([] (([] Int) -> [] Int)))) (not (id (odd 2))))) (head ((\a -> seq a (seq a (undefined::[] Int))) 0))
\a -> (undefined::([] (([] (([] ([] Int)) -> [] ([] (Int -> Bool)))) -> Int -> Bool)) -> [] Int) ([]::[] (([] (([] ([] Int)) -> [] ([] (Int -> Bool)))) -> Int -> Bool))
id ((\a -> (\b -> \c -> \d -> seq b ([]::[] Int)) (head (seq a (undefined::[] ([] Int))))) (map (\a -> \b -> seq b b) (head (undefined::[] ([] Bool))))) ((\a -> seq a (seq a (a 1 (seq a (seq a ([]::[] Int)))))) ((undefined::Bool -> Int -> ([] Int) -> Int) (even 0)))
\a -> (\b -> head ((++) (seq b (undefined::[] (Int -> [] Int))) ([]::[] (Int -> [] Int)))) (seq a (seq a (seq a (\b -> odd)) (seq a (undefined::Bool)))) (seq a (seq a (seq a (undefined::Int -> Int) ((-) (head a) (seq a (seq a 2))))))
(undefined::Bool -> ([] Int) -> [] Int) (head (undefined::[] ((Bool -> [] Int) -> Bool -> Bool)) (\a -> ([]::[] Int)) (id (undefined::(([] ([] Bool)) -> [] Bool) -> Bool) (id (\a -> seq a ([]::[] Bool)))))
(\a -> \b -> seq b (\c -> \d -> d) a) (head (undefined::[] ((Int -> Int) -> Int)) (\a -> a)) (id (head ((\a -> head (seq a (undefined::[] ([] (([] ([] ([] Bool))) -> [] ([] Bool)))))) (id ((\a -> seq a (undefined::([] Int) -> Int)) True)))))
id
case1 (\a -> (\b -> seq b (\c -> ([]::[] Int))) (seq a (seq a (\b -> seq b (undefined::Bool)) (seq a (id ([]::[] Bool)))))) (undefined::[] Int)
\a -> map (\b -> case1 (seq a (\c -> \d -> (undefined::Int))) (id (seq a (undefined::Int))) (seq a (seq a (undefined::[] ([] ([] Bool)))))) (id (seq a (undefined::Bool -> [] Bool)) (case1 (seq a (undefined::Int -> ([] Int) -> Bool)) (seq a True) (seq a a)))
filter (\a -> (\b -> id (\c -> b) ([]::[] (([] Bool) -> [] Bool))) (seq a (seq a ((undefined::([] ([] (Int -> Int))) -> Bool) (seq a (undefined::Int -> [] ([] (Int -> Int))) (undefined::Int))))))
\a -> seq a ((undefined::(([] Int) -> [] Bool) -> (([] Int) -> [] ([] Int)) -> [] Int) ((\b -> seq b (\c -> seq c ([]::[] Bool))) (seq a (seq a (undefined::Bool)))) (\b -> seq a (head ((undefined::Int -> [] ([] ([] Int))) (seq a (undefined::Int))))))
\a -> map (undefined::(([] ([] ([] Int))) -> [] ([] Bool)) -> Int) (seq a ((undefined::(Int -> Int -> Bool) -> [] (([] ([] ([] Int))) -> [] ([] Bool))) (seq a (\b -> \c -> seq a (undefined::Int -> Bool)) (undefined::[] Bool))))
map (id (\a -> head (seq a (id ([]::[] (Bool -> Int -> Int))))) (\a -> seq a (seq a (seq a (\b -> (undefined::Bool)) (\b -> seq b (undefined::Bool))))) (((==)::[Int] -> [Int] -> Bool) (case1 (\a -> tail) ([]::[] Int) ([]::[] Int)) ((\a -> seq a (seq a (undefined::[] Int))) (head ([]::[] Int)))))
(undefined::([] ([] (Bool -> Bool))) -> ([] Int) -> [] Int) ((\a -> seq a (undefined::[] ([] (Bool -> Bool)))) (\a -> (\b -> \c -> b) (seq a (a (seq a 2)))))
(undefined::(([] Int) -> ([] Int) -> [] Bool) -> Int -> ([] Int) -> [] Int) (\a -> seq a (\b -> seq a (seq b (seq b (undefined::[] Bool))))) ((\a -> case1 (undefined::Int -> ([] Int) -> Int) (seq a (undefined::Int)) (seq a (undefined::[] Int))) (\a -> seq a (seq a (\b -> seq a (undefined::([] Int) -> [] (Int -> Int))) False)))
(:) ((\a -> (\b -> seq a (seq a (\c -> 1)) (seq b (undefined::[] ([] (Int -> Bool))))) (seq a a)) ((undefined::(Int -> ([] ([] ([] Bool))) -> [] ([] ([] Bool))) -> Bool) (undefined::Int -> ([] ([] ([] Bool))) -> [] ([] ([] Bool)))))
\a -> seq a (seq a (\b -> seq a (id ((++) (seq b (seq b (undefined::Bool -> [] Int)) (seq b (seq b (undefined::Bool)))) ((undefined::Int -> [] Int) (head a))))) (seq a ((\b -> seq b (\c -> \d -> seq c (undefined::([] ([] Int)) -> [] Int) (seq a (seq d ([]::[] ([] Int)))))) (seq a (map (\b -> seq a ([]::[] (Bool -> Bool))) (seq a a))))))
id
(\a -> seq a ((\b -> \c -> filter (\d -> b (undefined::[] (Bool -> Bool)) True) c) (seq a (\b -> seq a (undefined::Int -> Bool -> Bool) (seq a (seq a (undefined::Int))))))) ([]::[] (([] ([] (([] Int) -> Int -> Int))) -> [] ([] (([] Int) -> Int -> Int))))
(\a -> \b -> seq a (head (undefined::[] (([] Int) -> [] Int)))) (case1 (undefined::Int -> ([] Int) -> Int) (undefined::Int) (undefined::[] Int)) (\a -> map (seq a (seq a (seq a (seq a ((undefined::([] ([] Bool)) -> Int -> Bool) (id (undefined::Bool -> [] ([] Bool)) (undefined::Bool))))))))
case1 (undefined::Int -> ([] Int) -> ([] Int) -> [] Int) (\a -> tail a) (head ([]::[] (Int -> [] Int)) ((\a -> seq a 1) ([]::[] Bool)))
\a -> a
\a -> map ((\b -> seq b (seq b (undefined::Int -> Bool -> Int))) (undefined::Bool) (seq a (seq a (seq a ((\b -> seq b 0) (seq a (seq a ([]::[] Bool)))))))) (seq a (case1 (\b -> \c -> (undefined::[] Bool)) (seq a (head ([]::[] ([] Bool)))) (undefined::[] ([] ([] Bool)))))
(undefined::Bool -> Bool -> ([] Int) -> [] Int) True ((\a -> case1 (seq a (undefined::Int -> ([] Int) -> Bool)) (seq a True) (seq a ([]::[] Int))) ((undefined::Bool -> ([] Int) -> ([] Bool) -> [] Bool) ((!!) ([]::[] Bool) (undefined::Int))))
\a -> id (\b -> seq a (undefined::Bool -> (([] Bool) -> [] Bool) -> [] Int) (seq a True) (seq a (head (seq b (undefined::Bool -> [] (([] Bool) -> [] Bool)) (seq b (undefined::Bool)))))) (seq a (seq a (seq a (\b -> ([]::[] (([] Int) -> Int -> Int -> Int))))))
case1 ((\a -> seq a (\b -> \c -> seq c (\d -> (undefined::[] Int)))) ((-) 0 1)) (\a -> a) ((\a -> (undefined::Int -> [] Bool) (seq a (seq a 0))) ([]::[] Int))
\a -> seq a (seq a (seq a a))
(!!) (undefined::[] ((([] ([] Int)) -> Int) -> ([] Int) -> [] Int)) ((\a -> seq a (seq a (undefined::Int))) (id (undefined::Bool))) (\a -> (undefined::Int))
(\a -> (!!) (seq a (undefined::[] (Bool -> ([] Int) -> [] Int))) a ((\b -> b) (id (seq a False)))) ((\a -> seq a (seq a 2)) (\a -> (undefined::Int -> Bool)))
\a -> a
\a -> a
(\a -> (\b -> \c -> seq a (seq b (undefined::([] Int) -> [] Int))) (\b -> seq b (undefined::Bool)) ((\b -> seq b (seq b (undefined::Bool))) (seq a (id (undefined::Int))))) (undefined::[] (Int -> [] Int))
(undefined::([] Int) -> [] Int)
(\a -> \b -> seq a (seq b (seq b (seq b (seq a ((\c -> seq c (undefined::(([] Int) -> Bool) -> [] Int)) (seq b False))) ((undefined::(Int -> Int -> Int) -> ([] Int) -> Bool) (+)))))) (\a -> seq a (undefined::[] ([] Bool)))
\a -> seq a (\b -> head ((!!) (map (\c -> (undefined::[] ([] Int))) (seq a (undefined::[] (([] Int) -> Int)))) ((+1) (seq a (undefined::Int))))) (\b -> \c -> seq b (\d -> head (undefined::[] (Int -> [] Bool))) (undefined::Int) (id ((!!) c 2)))
\a -> (undefined::([] ([] Bool)) -> [] Int) (filter head (seq a (seq a (\b -> ([]::[] ([] Bool)))) (seq a (seq a (undefined::Int)))))
tail
\a -> (!!) (seq a (seq a ((\b -> seq b (undefined::[] (Int -> [] Int))) a))) (seq a (seq a (seq a (\b -> b) (head ([]::[] Int))))) ((+1) (head (seq a a)))
(\a -> \b -> seq a (id ((\c -> seq c (undefined::Bool -> [] Int)) ([]::[] Int)) (head ((undefined::Bool -> [] Bool) (seq a (seq b False)))))) (\a -> seq a (\b -> seq a (seq b (undefined::[] ((([] Int) -> [] Int) -> ([] Int) -> [] Int)))) ((\b -> seq a (seq b (seq a 1))) (id (seq a (undefined::Int)))))
\a -> a
(\a -> seq a (\b -> \c -> head ((\d -> seq d ([]::[] ([] Int))) (\d -> seq c a))) (undefined::([] Int) -> ([] Int) -> [] ([] Int))) ((\a -> seq a (seq a (\b -> ([]::[] Int)) a)) ((-) 1 ((+) (undefined::Int) (undefined::Int))))
(:) ((\a -> seq a a) ((\a -> (\b -> seq b a) False) ((\a -> seq a (seq a 1)) (\a -> not (seq a False)))))
\a -> a
(\a -> seq a (seq a (\b -> id) (\b -> b))) (\a -> head (seq a (seq a ([]::[] ([] (Bool -> Bool))))))
head (undefined::[] (Bool -> Bool -> ([] Int) -> [] Int)) (head (undefined::[] ((([] Int) -> Bool) -> Bool)) (\a -> seq a (seq a (seq a (undefined::Bool))))) (case1 (\a -> seq a (undefined::Int -> ([] (Int -> Bool)) -> Bool) (seq a 2)) False (id (undefined::Bool -> [] (Int -> Bool)) (undefined::Bool)))
\a -> seq a (seq a (seq a ([]::[] Int)))
(\a -> \b -> seq b (seq a (head (undefined::[] (Int -> Bool -> [] Int))) 2 (even (seq b 0)))) (\a -> (\b -> seq a ((\c -> seq c (\d -> \e -> e)) (seq b (undefined::[] Bool)))) ((\b -> seq b (\c -> seq c ([]::[] ([] Bool)))) (seq a ([]::[] ([] Int)))))
take ((undefined::(([] ([] (([] ([] Int)) -> [] Bool))) -> [] Bool) -> Int) (undefined::([] ([] (([] ([] Int)) -> [] Bool))) -> [] Bool))
id
(\a -> seq a (\b -> seq a (seq b (\c -> seq c (id c))))) (id ((undefined::(([] Bool) -> Bool) -> Int) (head (undefined::[] (([] Bool) -> Bool))))) (head ((undefined::(([] Int) -> [] Int) -> [] (([] Int) -> ([] Int) -> [] Int)) ((\a -> \b -> seq b (seq a b)) 0)))
\a -> seq a (\b -> case1 (\c -> (undefined::([] Int) -> Bool -> [] Int)) (undefined::Bool -> [] Int) (seq b ([]::[] Int)) (undefined::Bool)) (seq a ((++) (seq a (id (seq a ([]::[] ((([] Bool) -> Bool) -> ([] Bool) -> Bool))))) (seq a (seq a (seq a (seq a ([]::[] ((([] Bool) -> Bool) -> ([] Bool) -> Bool))))))))
(undefined::([] ((Int -> ([] Int) -> Int) -> Int -> ([] Int) -> Int)) -> ([] Int) -> [] Int) (map (undefined::Bool -> (Int -> ([] Int) -> Int) -> Int -> ([] Int) -> Int) (map (\a -> seq a False) ([]::[] Int)))
head ([]::[] ((([] (([] Int) -> [] (Int -> Bool))) -> Int -> Int -> [] Int) -> ([] Int) -> [] Int)) (undefined::([] (([] Int) -> [] (Int -> Bool))) -> Int -> Int -> [] Int)
\a -> seq a a
(\a -> \b -> seq a (seq a (seq a b))) ((!!) (undefined::[] (([] (Int -> ([] Int) -> Bool)) -> ([] Int) -> Bool)) ((-) (undefined::Int) (head ([]::[] Int))))
\a -> a
(:) ((\a -> seq a (seq a (seq a (\b -> (\c -> seq b c) (undefined::Int)))) (seq a (seq a (\b -> seq b (undefined::([] Int) -> [] Bool))) (\b -> b))) (\a -> \b -> seq b ((\c -> seq a (seq a (id (\d -> seq c ([]::[] Int))))) (seq b (undefined::([] Int) -> [] Int)))))
(\a -> \b -> seq b (\c -> (undefined::Bool -> [] Int)) ((++) (seq a (undefined::[] Bool))) (seq b (seq a (odd (seq b (seq b (seq b 1))))))) (\a -> \b -> seq a (undefined::(([] ([] Int)) -> [] Int) -> Bool) (seq a (\c -> ([]::[] Int))))
\a -> (enumFromTo'::Int -> Int -> [Int]) (seq a (undefined::Int)) ((\b -> (\c -> seq c (seq b 1)) (b (undefined::Int) a)) (seq a ((\b -> seq b (\c -> (undefined::([] Int) -> Bool))) (seq a (seq a (seq a (undefined::Int)))))))
take ((+) (id (\a -> (+1)) (\a -> even 0) ((\a -> id a) (id (undefined::Int)))) 0)
(\a -> seq a (seq a (seq a (\b -> (!!) ([]::[] (([] Int) -> [] Int)) (seq b 1))) (\b -> (undefined::Bool -> [] (Bool -> Bool)) (seq a (seq b (seq a (undefined::Bool))))))) (case1 ((undefined::Bool -> ([] Bool) -> ([] ([] Bool)) -> Int) False) ((+1) (id 0)) (head (undefined::[] (Bool -> [] ([] Bool))) (head ([]::[] Bool))))
\a -> (undefined::(Int -> ([] Int) -> Int) -> [] Int) (\b -> id (\c -> b))
\a -> seq a (\b -> a) (\b -> seq b (case1 (seq b (id (\c -> (undefined::([] Int) -> [] Bool)))) (undefined::[] Bool) (undefined::[] Int)))
tail
(\a -> (undefined::Int -> ([] Int) -> [] Int) (seq a (seq a (seq a ((undefined::Int -> Int) (seq a (seq a (undefined::Int)))))))) (\a -> map (id (seq a (\b -> (undefined::Int)))) ([]::[] (([] (Int -> [] Bool)) -> Int -> Bool)))
id (\a -> (\b -> \c -> \d -> b) a) ((\a -> seq a (tail ([]::[] Int))) 1) ((\a -> ((==)::Int -> Int -> Bool) (id (undefined::Int)) (seq a 2)) ((\a -> \b -> seq a (seq b (undefined::[] Bool))) ((:) (undefined::Bool -> Bool) (undefined::[] (Bool -> Bool)))))
tail
(undefined::(Int -> Int -> Int) -> ([] Int) -> [] Int) ((!!) ((\a -> seq a (seq a ([]::[] (Int -> Int -> Int)))) (\a -> even 0)) ((\a -> a (undefined::Int)) (\a -> a)))
tail
tail
\a -> a
\a -> seq a (seq a ((undefined::Int -> (([] (Bool -> Bool)) -> Bool -> Bool) -> [] Int) ((!!) a (seq a (seq a (undefined::Int))))) (seq a ((\b -> \c -> id (seq a (&&)) (seq b (head ([]::[] Bool)))) (case1 (seq a (undefined::([] Bool) -> ([] ([] Bool)) -> Int)) (seq a (undefined::Int)) (seq a ([]::[] ([] Bool)))))))
\a -> a
\a -> ([]::[] Int)
case1 (undefined::Bool -> ([] Bool) -> ([] Int) -> [] Int) (\a -> seq a (\b -> a) ((undefined::Int -> ([] Int) -> Int -> Int -> Bool) (head a))) (map (\a -> seq a (seq a (undefined::Bool))) ((++) (undefined::[] Int) ([]::[] Int)))
(\a -> case1 (\b -> seq b (\c -> \d -> d)) ((\b -> seq b id) (seq a (undefined::Int))) ([]::[] Int)) (\a -> ([]::[] (([] Int) -> [] Int)))
case1 (\a -> (\b -> seq b (\c -> tail)) (seq a (undefined::Int))) (\a -> seq a ((undefined::Int -> [] Int) (seq a id (undefined::Int)))) ((undefined::Int -> Int -> [] Int) (undefined::Int) ((\a -> seq a 0) 0))
id
head (undefined::[] ((([] ([] Int)) -> [] Int) -> ([] Int) -> [] Int)) ((\a -> \b -> (\c -> seq b (seq c (undefined::[] Int))) (seq a 0)) (even ((\a -> seq a (seq a 2)) (\a -> (undefined::[] Int)))))
\a -> (undefined::[] Int)
(++) ((\a -> map (seq a (seq a (seq a (\b -> seq b (b (undefined::[] ([] ([] (Bool -> Bool))))))))) ([]::[] (([] ([] ([] (Bool -> Bool)))) -> Int))) (\a -> ([]::[] (([] Int) -> [] (Int -> Int)))))
tail
id ((\a -> filter (seq a (id (undefined::Bool -> Bool -> Int -> Bool) (seq a (seq a (undefined::Bool)))) (seq a (id id) (even (seq a (undefined::Int)))))) (\a -> \b -> (undefined::[] Int)))
\a -> a
(\a -> id (\b -> seq a (\c -> tail) (seq a (seq a ([]::[] ([] Bool))))) ((\b -> seq b (seq b (seq b ([]::[] (([] ([] Bool)) -> [] ([] Bool)))))) (seq a (seq a (seq a ([]::[] Int)))))) (\a -> \b -> (\c -> seq c (seq c (seq b (head (undefined::[] ([] (([] Int) -> [] (([] Int) -> Bool)))))))) ((\c -> c) (seq b (seq a (seq b (undefined::Bool))))))
id ((\a -> \b -> seq b (head ([]::[] (Int -> ([] Int) -> [] Int)) (seq a (undefined::Int)))) ((\a -> seq a (seq a ([]::[] Bool))) (id 1))) (head (take 2 ([]::[] ((([] Int) -> [] ([] Bool)) -> Int))) ((\a -> seq a (\b -> seq a ([]::[] ([] Bool)))) (undefined::[] ([] Int))))
(undefined::([] (([] (([] ([] Int)) -> [] Int)) -> Int -> Int)) -> ([] Int) -> [] Int) ((\a -> seq a (tail (undefined::[] (([] (([] ([] Int)) -> [] Int)) -> Int -> Int)))) ((\a -> a) (head ([]::[] Bool))))
tail
\a -> a
(\a -> \b -> map ((+) (seq a ((+1) 0))) b) (id (\a -> seq a (undefined::[] ((([] ([] Int)) -> [] ([] Bool)) -> ([] ([] Int)) -> [] ([] Bool)))))
(undefined::Int -> Int -> Int -> ([] Int) -> [] Int) (undefined::Int) ((\a -> seq a (seq a (seq a (undefined::Int)))) (\a -> seq a ((!!) (undefined::[] ([] Int))))) ((undefined::(([] (Int -> Int)) -> ([] Int) -> ([] Int) -> Bool -> Bool) -> Int) (\a -> \b -> \c -> \d -> seq a (id (undefined::Bool))))
tail
\a -> a
\a -> seq a (seq a a)
(\a -> id (seq a (\b -> seq b (map (seq b (\c -> 1)) ((undefined::Bool -> [] (([] ([] (Int -> Int))) -> Bool)) (seq a (seq b False))))))) (undefined::([] ([] ([] (Int -> Int)))) -> [] (Bool -> Bool))
(undefined::([] Int) -> ([] Int) -> [] Int) ((\a -> seq a (undefined::([] (([] Bool) -> [] Bool)) -> [] Int)) ((-) (undefined::Int) (undefined::Int)) (undefined::[] (([] Bool) -> [] Bool)))
head (tail (undefined::[] ((([] ([] (([] Int) -> Int -> [] Int))) -> [] (Bool -> Bool)) -> ([] Int) -> [] Int))) (\a -> seq a ([]::[] (Bool -> Bool)))
\a -> case1 (\b -> seq a (\c -> seq c (\d -> ([]::[] Int))) ((\c -> seq a c) 0)) (head (tail ([]::[] ((Bool -> Bool) -> [] Int))) (\b -> b)) (seq a (\b -> seq b (seq b (seq b (undefined::[] Bool)))) ((undefined::Int -> Int) (seq a (undefined::Int))))
(\a -> seq a (seq a (seq a (\b -> (undefined::([] Int) -> ([] Int) -> [] Int) (id (undefined::[] Int)))) (\b -> seq b 1))) ((\a -> \b -> (!!) (seq a (seq a (undefined::[] (([] Int) -> [] Bool)))) (seq a a)) ((undefined::([] ([] ([] Bool))) -> Int) (id ([]::[] ([] ([] Bool))))))
(\a -> seq a (\b -> seq b (\c -> id (undefined::(Bool -> Bool) -> [] Int) (\d -> seq c (undefined::Bool)))) ((!!) (seq a (undefined::[] ([] (([] Int) -> Bool)))) (seq a (id 1)))) ((\a -> \b -> seq a (seq a (seq a (undefined::(Int -> [] Int) -> [] Int)) (\c -> seq a (seq a ([]::[] Int))))) (\a -> head (seq a (undefined::[] (Bool -> [] ([] ([] Int))))) (seq a (seq a (seq a True)))))
\a -> tail a
head ((\a -> seq a ((undefined::((Int -> Bool) -> ([] Bool) -> Int) -> [] (([] Int) -> [] Int)) (seq a ((!!) ([]::[] ((Int -> Bool) -> ([] Bool) -> Int)) (seq a (undefined::Int)))))) (\a -> seq a (id (\b -> map (undefined::(Int -> Int) -> ([] Int) -> Bool) (seq a (seq b (undefined::[] (Int -> Int))))) ((!!) (tail ([]::[] ((Int -> Bool) -> Int -> Int))) 0))))
\a -> a
\a -> (undefined::Bool -> [] Int) (seq a ((!!) (tail ([]::[] (Int -> Bool))) (id 2) (seq a ((\b -> seq a (seq b (undefined::Int))) (seq a (head (undefined::[] Bool)))))))
id (\a -> (:) (id (\b -> (undefined::Int)) (seq a (\b -> seq b ([]::[] (Int -> Bool))) (seq a (seq a (seq a 2))))) a)
(\a -> map (seq a (\b -> seq a b))) (case1 (\a -> (\b -> seq b (undefined::([] (([] Bool) -> Bool)) -> Bool)) (a (undefined::[] Bool))) (not (undefined::Bool)) ((\a -> seq a (undefined::[] (([] Bool) -> Bool))) (undefined::Bool)))
tail
(++) (case1 (\a -> (undefined::([] Bool) -> [] Int)) (map (\a -> seq a 2) (id ([]::[] Bool))) (head ((\a -> head (seq a (undefined::[] ([] ([] Bool))))) (undefined::Bool))))
(\a -> seq a (seq a (seq a (map (seq a ((undefined::Bool -> (Int -> Int) -> Int -> Int) (odd a) (seq a (\b -> seq b (seq a a))))))))) ((\a -> seq a (\b -> seq b (seq b 0)) (seq a (seq a (seq a 2)))) (\a -> seq a (map (seq a (undefined::Int -> Bool -> Bool)) (seq a (undefined::[] Int)))))
tail
map (\a -> a)
\a -> seq a ((undefined::(([] ([] Int)) -> [] Bool) -> [] Int) (\b -> seq b (map (\c -> seq c (\d -> seq c (undefined::Bool)) (seq c (\d -> a))) ([]::[] (Int -> Int -> [] Int)))))
\a -> id (undefined::(([] Int) -> ([] (([] ([] Int)) -> [] ([] Int))) -> Int) -> [] Int) (\b -> seq a (id (seq a (\c -> seq a (undefined::([] (([] ([] Int)) -> [] ([] Int))) -> Int))) (seq b (seq a (seq b (\c -> c) (undefined::Bool))))))
id (undefined::Bool -> (([] ([] Bool)) -> [] Bool) -> ([] Int) -> [] Int) True (case1 (\a -> \b -> id (undefined::Int -> [] Bool) (undefined::Int)) (map ((!!) (undefined::[] Bool)) ([]::[] Int)))
(undefined::([] Int) -> [] Int)
(\a -> \b -> (undefined::(([] (([] ([] Int)) -> [] Bool)) -> Int -> Int) -> [] Int) (seq a (\c -> case1 (undefined::Int -> ([] Int) -> Int -> Int) (undefined::Int -> Int) b))) (\a -> take (seq a 2) ((\b -> seq a (seq b (undefined::[] ([] (Int -> Bool))))) (\b -> head b)))
(\a -> (undefined::(([] ([] Int)) -> [] Int) -> ([] Int) -> [] Int) ((undefined::([] (Int -> Bool)) -> ([] ([] Int)) -> [] Int) (seq a (tail (undefined::[] (Int -> Bool)))))) (filter (\a -> seq a a) ((undefined::Bool -> [] Bool) False))
\a -> a
\a -> map (\b -> seq b ((!!) (seq a (undefined::[] ((Int -> Int) -> Int))) 0) (seq b ((\c -> seq c (undefined::Int -> Int)) (seq a (seq b (undefined::Int)))))) (seq a (seq a (undefined::[] (([] ([] (([] Int) -> ([] Int) -> [] Bool))) -> [] Int))))
\a -> a
id (\a -> \b -> map (\c -> seq c (seq a (+1) (seq c 0))) ([]::[] (([] Int) -> Bool))) (\a -> \b -> b)
\a -> (\b -> \c -> (enumFromTo'::Int -> Int -> [Int]) (id 0) (seq b 0)) (head (seq a (undefined::[] (Int -> Bool))) (undefined::Int)) (seq a (\b -> seq a ((undefined::(Int -> ([] Int) -> Int) -> Int -> ([] Int) -> Bool -> Bool) (\c -> case1 (\d -> seq a head) b))))
\a -> seq a (\b -> a) (tail (id (undefined::[] (([] (([] ([] ([] Int))) -> [] ([] ([] Int)))) -> ([] (Bool -> Bool)) -> [] (Bool -> Bool)))))
(undefined::(Bool -> Int -> ([] Int) -> Bool) -> Int -> ([] Int) -> [] Int) (\a -> seq a ((undefined::Int -> Int -> ([] Int) -> Bool) (undefined::Int))) ((+) ((\a -> seq a (seq a (undefined::Int))) (\a -> seq a (seq a (undefined::[] ([] ([] ([] Int))))))) ((undefined::(([] ([] ([] Bool))) -> [] ([] Bool)) -> Int) head))
(\a -> (\b -> seq b (undefined::(Bool -> Bool) -> ([] Int) -> [] Int)) (seq a (seq a (seq a False)))) ((undefined::(Int -> Int) -> Int) (\a -> 1)) (\a -> even (case1 (id (\b -> seq a (undefined::([] Int) -> Int))) (id (seq a (undefined::Int))) (seq a ([]::[] Int))))
(undefined::(([] ([] ([] Bool))) -> [] ([] ([] Bool))) -> ([] Int) -> [] Int) ((undefined::([] (([] Bool) -> [] Bool)) -> ([] ([] ([] Bool))) -> [] ([] ([] Bool))) ((\a -> id (seq a (undefined::[] (([] Bool) -> [] Bool)))) (not (undefined::Bool))))
(:) 1
(\a -> seq a (\b -> b)) ((undefined::Bool -> ([] ([] Int)) -> [] ([] (Int -> Bool))) ((\a -> seq a (seq a (undefined::Bool))) ([]::[] ([] Int))))
\a -> a
\a -> a
\a -> seq a (map ((\b -> seq b (\c -> seq c (\d -> (undefined::Int)) (map id))) (seq a (undefined::Bool -> Int -> Bool) (head (seq a (undefined::[] Bool))))) ([]::[] (([] ([] Bool)) -> [] ([] Bool))))
(\a -> seq a ((undefined::Bool -> Int -> ([] Int) -> [] Int) (id (seq a False)) (seq a ((undefined::([] (Bool -> Bool)) -> Int) (seq a ([]::[] (Bool -> Bool))))))) (undefined::([] ([] (([] Int) -> [] Int))) -> [] ([] (([] Int) -> ([] Int) -> [] ([] Int))))
(undefined::(([] (Int -> Bool)) -> [] (Int -> Bool)) -> ([] Int) -> [] Int) (\a -> a)
\a -> case1 (undefined::Bool -> ([] Bool) -> [] Int) a (seq a (seq a (seq a (seq a (seq a (undefined::(Bool -> Bool -> Bool) -> [] Bool))) ((!!) (undefined::[] (Bool -> Bool -> Bool)) 1))))
(undefined::([] Int) -> [] Int)
(\a -> take ((\b -> case1 (\c -> (undefined::([] Bool) -> Int)) (seq b b) (seq b (undefined::[] Bool))) (seq a ((\b -> seq a (seq b (undefined::Int))) (id (undefined::[] (Bool -> Bool))))))) (undefined::([] (([] ([] Int)) -> [] (([] Int) -> Bool))) -> ([] Int) -> [] Int)
head (undefined::[] (([] (Int -> Int)) -> ([] Int) -> [] Int)) ((\a -> seq a (\b -> seq b (undefined::[] (Int -> Int))) (\b -> b)) (undefined::([] Int) -> [] ([] Bool)))
id
\a -> a
(\a -> take (id (id (case1 (seq a (seq a (undefined::Bool -> ([] Bool) -> Int))) a (undefined::[] Bool))))) (head ((\a -> seq a (seq a (undefined::[] (([] Bool) -> Int)))) False) ((undefined::Bool -> [] Bool) (head (undefined::[] Bool))))
(:) ((\a -> seq a a) ((\a -> case1 (undefined::([] Int) -> ([] ([] Int)) -> Int) (seq a 1) (seq a ([]::[] ([] Int)))) (undefined::(Int -> Int -> [] Int) -> Bool)))
head (undefined::[] ((([] (([] Int) -> ([] Int) -> Bool)) -> [] (Int -> Int -> Bool)) -> ([] Int) -> [] Int)) (\a -> (\b -> (:) (seq a (\c -> \d -> False)) (seq a (seq b (undefined::[] (Int -> Int -> Bool))))) (seq a (\b -> ([]::[] ([] ([] Int))))))
(:) ((+1) 0)
id (head (tail (id (id ([]::[] (([] (([] ([] Bool)) -> [] ([] Bool))) -> ([] Int) -> [] Int)))))) (id (undefined::Bool -> [] (([] ([] Bool)) -> [] ([] Bool))) (undefined::Bool))
\a -> (!!) ((!!) (undefined::[] ([] ((([] Bool) -> Bool) -> [] Int))) (seq a (seq a (seq a 1)))) ((undefined::([] Bool) -> Int) (head (seq a ([]::[] ([] Bool))))) (case1 (seq a (seq a (\b -> (undefined::([] Bool) -> Bool)))) ((!!) (undefined::[] Bool) (seq a (seq a (undefined::Int)))))
(\a -> \b -> case1 (seq a (seq a (undefined::Bool -> ([] Bool) -> [] Int))) ((undefined::Bool -> [] Int) a) (seq b (tail (seq a ([]::[] Bool))))) (head ([]::[] Bool))
(\a -> \b -> seq b (seq a (\c -> seq b c))) (id (\a -> seq a ([]::[] (Int -> Int))) (id (undefined::[] ([] Int)))) (id (case1 (undefined::Bool -> ([] Bool) -> Int -> Bool) even (undefined::[] Bool)) ((!!) ([]::[] (Bool -> Int)) 1 (head (undefined::[] Bool))))
\a -> a
(\a -> seq a (head (seq a (map (undefined::([] Int) -> ([] Int) -> [] Int) (undefined::[] ([] Int)))))) ((undefined::([] (([] (([] (Bool -> Bool)) -> Bool -> Bool)) -> Int)) -> Int) (undefined::[] (([] (([] (Bool -> Bool)) -> Bool -> Bool)) -> Int)))
(\a -> seq a ((undefined::Bool -> Bool -> ([] Int) -> [] Int) (a (seq a ([]::[] ([] (Int -> Bool)))) (undefined::Int)) (odd (seq a (\b -> (undefined::Int)) (undefined::[] Bool))))) (\a -> seq a (seq a (\b -> (undefined::Int -> Bool)) (seq a (seq a (\b -> seq a (undefined::Bool))) (undefined::[] Int))))
\a -> seq a (head (head ([]::[] ([] ((([] (([] (([] Int) -> [] (Bool -> Bool))) -> Int -> Bool)) -> Bool) -> [] Int))))) (\b -> (undefined::(([] Int) -> [] (Int -> Bool)) -> Bool) (\c -> (!!) (seq c (undefined::[] ([] (Int -> Bool)))) (seq c (seq c (seq b 1)))))
id
\a -> (\b -> seq a ((undefined::Int -> (Int -> Int -> [] Int) -> [] Int) ((+1) (seq b (undefined::Int)))) (\c -> \d -> (undefined::[] Int))) ((undefined::Int -> [] (([] (([] Int) -> [] (Int -> Bool))) -> Int -> Bool)) (seq a (id (undefined::([] ([] (Int -> [] Int))) -> Int) (seq a (seq a (undefined::[] ([] (Int -> [] Int))))))))
\a -> seq a ((undefined::Bool -> Bool -> (Int -> Int) -> [] Int) (seq a (not True))) (seq a (seq a ((\b -> seq b (undefined::Bool)) (seq a (seq a (undefined::Bool)))))) (\b -> b)
case1 (\a -> seq a ((\b -> seq b (\c -> filter (undefined::Int -> Bool))) ((\b -> seq b (undefined::[] Int)) (seq a ([]::[] Bool))))) id (tail (case1 (\a -> seq a (undefined::([] Int) -> [] Int)) ([]::[] Int) ([]::[] Int)))
\a -> a
map (\a -> (+) ((-) (seq a (\b -> a) False) (seq a (seq a (seq a a)))) (seq a (seq a (\b -> \c -> seq b a) True (seq a (\b -> (undefined::[] (Int -> [] Int))) a))))
filter ((\a -> head (take (seq a (undefined::Int)) ([]::[] ((Int -> [] Int) -> Int -> Bool))) (seq a ((!!) ((++) ([]::[] ([] Int)) ([]::[] ([] Int)))))) (undefined::[] (([] (([] ([] ([] Bool))) -> [] ([] Bool))) -> (Bool -> Bool) -> Bool -> Bool)))
(undefined::([] Int) -> [] Int)
\a -> a
head (id (tail ([]::[] (Bool -> Bool -> ([] Int) -> [] Int)))) ((\a -> seq a (a (seq a True))) (\a -> a)) ((undefined::(([] Int) -> ([] Int) -> [] Bool) -> Bool) (head (head (id (undefined::[] ([] (([] Int) -> ([] Int) -> [] Bool)))))))
head ([]::[] (Int -> ([] Int) -> [] Int)) (head ((\a -> seq a (\b -> seq b (undefined::[] Int))) (undefined::Int) ((\a -> seq a (seq a (undefined::([] Int) -> [] ([] Int)))) ((+1) (undefined::Int)))))
\a -> seq a ((\b -> (enumFromTo'::Int -> Int -> [Int]) (seq a (\c -> seq b 1) (undefined::[] Int)) (seq b (\c -> c) ((+1) 0))) (\b -> (\c -> case1 (seq a (seq c (undefined::Int -> ([] Int) -> Bool))) (seq b (seq c True))) ((undefined::(Bool -> Int -> Bool) -> ([] Int) -> Bool) (\c -> seq c (\d -> c)))))
(\a -> seq a (\b -> (undefined::Int -> ([] Int) -> [] Int) b) (seq a 1)) ((undefined::(Int -> [] (Int -> Int)) -> ([] Int) -> ([] Int) -> [] Bool) (\a -> seq a (map (undefined::Bool -> Int -> Int) (seq a ([]::[] Bool)))))
\a -> ([]::[] Int)
\a -> a
(\a -> map (case1 (undefined::Int -> ([] Int) -> Int -> Int) (\b -> seq b (seq b b)) (seq a (seq a ([]::[] Int))))) (undefined::([] ([] (([] Int) -> Int -> Int -> Bool))) -> [] (Int -> Int))
(\a -> a (case1 (undefined::Bool -> ([] Bool) -> [] Int) (seq a (undefined::([] Bool) -> [] Int) (undefined::[] Bool)) (seq a ([]::[] Bool)))) ((!!) (undefined::[] (([] Int) -> ([] Int) -> [] Int)) ((\a -> seq a a) (head (undefined::[] Int))))
\a -> a
\a -> a
\a -> a
\a -> a
\a -> a
tail
(undefined::([] Int) -> [] Int)
(undefined::(([] Int) -> ([] (([] ([] Int)) -> [] ([] (Int -> Bool)))) -> Bool -> Bool) -> ([] Int) -> [] Int) (head (tail (id (undefined::[] (([] Int) -> ([] (([] ([] Int)) -> [] ([] (Int -> Bool)))) -> Bool -> Bool)))))
(\a -> (\b -> seq b ((++) (seq b (seq a (seq a (seq b (undefined::[] Int))))))) (seq a ((\b -> \c -> b) (seq a (not False))))) ((\a -> \b -> seq a b) (case1 (\a -> \b -> (undefined::Int)) 1 (undefined::[] ([] Int))))
\a -> map (seq a (undefined::Bool -> (([] ([] Bool)) -> [] ([] (Bool -> Bool))) -> Int) (seq a (seq a (seq a (undefined::([] (Int -> Int -> Int)) -> Bool)) (seq a ([]::[] (Int -> Int -> Int)))))) (take 0 (seq a (seq a (undefined::[] (([] ([] Bool)) -> [] ([] (Bool -> Bool)))))))
(\a -> seq a (seq a (seq a (undefined::(([] Int) -> [] ([] Int)) -> ([] Int) -> [] Int))) (seq a (\b -> map (\c -> seq a b) (seq a ([]::[] (Int -> Int)))))) (head (undefined::[] Int))
(undefined::([] Int) -> [] Int)
filter ((\a -> seq a (seq a (\b -> (undefined::Int -> Bool)))) ((undefined::(([] Bool) -> [] (Bool -> Bool)) -> Int -> Bool) (\a -> seq a (undefined::[] (Bool -> Bool)))) (map ((undefined::Int -> (Bool -> Bool) -> Int -> Int -> Bool) ((+1) 2) (id (\a -> (\b -> seq b (undefined::Bool)) (seq a 2))))))
\a -> map (\b -> (undefined::(([] (([] Int) -> [] ([] Int))) -> Bool -> Bool) -> Int) (undefined::([] (([] Int) -> [] ([] Int))) -> Bool -> Bool)) (filter (\b -> seq a (\c -> seq b True) (undefined::Bool)) (id ((\b -> seq b ([]::[] Bool)) id)))
\a -> a
(undefined::([] Int) -> [] Int)
(\a -> (\b -> \c -> a (seq b (seq b c)) (seq c (undefined::Int))) (seq a (take 1 (seq a (undefined::[] (([] Int) -> Bool)))))) (\a -> \b -> map (+1) a)
(!!) ((\a -> seq a ([]::[] (([] Int) -> [] Int))) (id (\a -> \b -> (undefined::[] Bool)) (((==)::Int -> Int -> Bool) 1 (undefined::Int)))) ((!!) ([]::[] (Bool -> Int)) ((+1) 0) False)
\a -> seq a (undefined::[] Int)
(\a -> seq a (\b -> (undefined::Bool -> ([] Int) -> [] Int) (b (seq b 1))) (seq a (case1 (undefined::Int -> ([] Int) -> Int -> Bool) (\b -> a) (undefined::[] Int)))) False
\a -> a
id ((\a -> seq a ((\b -> seq b (take (seq b (b (\c -> seq c (undefined::[] (Bool -> Bool))))))) ((\b -> seq a (\c -> seq b b)) (seq a (seq a (seq a (undefined::Int))))))) ((\a -> seq a ([]::[] (([] (([] Int) -> ([] Int) -> [] Bool)) -> Bool))) ((!!) ([]::[] ((([] ([] Int)) -> Bool) -> Bool)) 1 (case1 (undefined::([] Int) -> ([] ([] Int)) -> Bool) (undefined::Bool)))))
(\a -> (undefined::(([] Int) -> Int -> Bool) -> ([] Int) -> [] Int) (seq a ((!!) (tail (undefined::[] (([] Int) -> Int -> Bool))) (seq a (seq a 0))))) ((++) ((\a -> seq a (seq a ([]::[] ([] ([] Bool))))) (\a -> a)) ((\a -> seq a (seq a ([]::[] ([] ([] Bool))))) (undefined::[] (Int -> Int))))
\a -> (enumFromTo::Int -> Int -> [Int]) ((\b -> b) (undefined::Int)) ((\b -> seq b (seq a (\c -> c) (head (undefined::[] Int)))) (\b -> (\c -> \d -> c) (seq b (seq a (seq b False)))))
\a -> a
(\a -> take (seq a (seq a (seq a (undefined::Int -> (([] Int) -> Bool) -> Int))) a (\b -> case1 (\c -> (undefined::([] Bool) -> Bool)) (seq a False) (seq a (undefined::[] Bool))))) ((\a -> \b -> seq a (seq a b)) (id ([]::[] ([] Int))) 2)
\a -> seq a (\b -> (\c -> (undefined::Bool -> [] Int) (seq c (seq c (seq c (undefined::Bool))))) (seq b (case1 (\c -> head) 0 a))) (seq a (id (seq a (seq a (seq a (\b -> head (undefined::[] (([] (([] ([] Bool)) -> [] ([] (Bool -> Bool)))) -> Bool))))))))
(undefined::Int -> (([] ([] Int)) -> [] Bool) -> ([] Int) -> [] Int) (undefined::Int) ((\a -> seq a (\b -> id (undefined::Int -> [] Bool) (seq b 1))) (id (\a -> seq a (undefined::([] Int) -> [] (Int -> Int))) 0))
head ((undefined::(([] ([] ([] ([] (Int -> Bool))))) -> [] ([] ([] ([] (Int -> Bool))))) -> [] (([] Int) -> [] Int)) ((++) ((undefined::(Bool -> Bool -> Bool) -> [] ([] ([] ([] (Int -> Bool))))) ((undefined::([] Bool) -> Bool -> Bool -> Bool) (id ([]::[] Bool))))))
\a -> a
\a -> (++) a a
\a -> seq a (id ((undefined::Int -> (Int -> [] (Bool -> Bool)) -> [] Int) (seq a (\b -> b) 0)) (undefined::Int -> [] (Bool -> Bool)))
(\a -> seq a (undefined::Int -> ([] Int) -> [] Int)) (undefined::([] Bool) -> ([] Int) -> Int) ((-) ((\a -> seq a (seq a 1)) (id ([]::[] Bool))) ((undefined::(([] Int) -> Int -> Int -> [] Bool) -> Int) (id (undefined::([] Int) -> Int -> Int -> [] Bool))))
(\a -> seq a (\b -> b)) ((\a -> a) ((\a -> seq a (case1 (undefined::Int -> ([] Int) -> Int))) False))
(undefined::Int -> ([] Int) -> [] Int) 2
id
(\a -> \b -> (\c -> \d -> seq c (seq c d)) (seq a (id a))) (head (undefined::[] (Bool -> Bool)) (odd (undefined::Int))) (undefined::Bool)
\a -> head (case1 (seq a (undefined::Bool -> ([] Bool) -> Int -> [] ([] Int))) (\b -> seq a (seq b (seq b ([]::[] ([] Int))))) ([]::[] Bool) (seq a (undefined::Int)))
case1 (head ((\a -> seq a (undefined::[] (Int -> ([] Int) -> [] Int))) (\a -> (undefined::([] Bool) -> [] Bool) (seq a (seq a ([]::[] Bool)))))) ((\a -> \b -> seq a (undefined::[] Int)) 1 (\a -> (\b -> seq b (seq b (undefined::Int))) (even (seq a 0))))
(:) (head (id (head (undefined::[] ([] ((([] ([] (Int -> Int))) -> ([] Int) -> Bool -> Bool) -> Int))))) ((\a -> id (\b -> \c -> (!!) ([]::[] (Bool -> Bool)) a)) 2))
\a -> map (seq a (undefined::([] (([] (([] Int) -> Int -> [] Int)) -> [] (([] Int) -> Int -> [] Int))) -> Int)) (seq a (seq a (seq a (seq a ([]::[] ([] (([] (([] Int) -> Int -> [] Int)) -> [] (([] Int) -> Int -> [] Int))))))))
(\a -> \b -> seq b (seq b (undefined::([] Bool) -> [] Int) (seq b (seq b (seq b (seq a (undefined::(([] ([] Int)) -> Int) -> [] Bool) (undefined::([] ([] Int)) -> Int))))))) (id (head (undefined::[] (Bool -> ([] ([] ([] Bool))) -> [] ([] ([] Bool)))) ((\a -> seq a a) (even (undefined::Int)))))
\a -> head (seq a ((\b -> (undefined::(([] ([] Bool)) -> [] Bool) -> [] ([] Int)) ((undefined::Int -> ([] ([] Bool)) -> [] Bool) (seq b ((+1) (undefined::Int))))) (seq a (seq a (\b -> \c -> (!!) ([]::[] ([] Bool)) (seq a (seq a 2))) odd))))
(undefined::(([] ([] Int)) -> [] Int) -> ([] Int) -> [] Int) (\a -> (undefined::(([] Int) -> [] (Int -> Bool)) -> [] Int) ((\b -> seq b (\c -> seq a (undefined::[] (Int -> Bool)))) (\b -> (+1) (seq a b))))
\a -> seq a (id (undefined::(([] (([] Int) -> ([] Bool) -> [] Bool)) -> ([] Int) -> [] (([] Int) -> [] Int)) -> [] Int) (seq a (\b -> \c -> seq b (seq c (head ([]::[] (Int -> [] (([] Int) -> [] Int))))) (undefined::Int))))
\a -> a
tail
\a -> a
(\a -> \b -> seq b (seq a (seq a (seq b (\c -> (undefined::Int -> [] Int)) (head b))) (seq b (head ([]::[] (Bool -> Int)) (seq b (undefined::Bool)))))) (undefined::([] Bool) -> [] (Bool -> Bool))
\a -> seq a (seq a (undefined::(([] ([] ([] Bool))) -> Int -> [] ([] Bool)) -> [] Int) (!!))
case1 (undefined::(Bool -> Bool) -> ([] (Bool -> Bool)) -> ([] Int) -> [] Int) (head (undefined::[] (Bool -> ([] Int) -> [] Int)) True) (undefined::[] (Bool -> Bool))
\a -> a
id
\a -> seq a ((undefined::([] (Int -> Int)) -> [] Int) (seq a ((\b -> (\c -> seq c (seq b (undefined::[] (Int -> Int)))) ([]::[] (Int -> Bool))) (\b -> ([]::[] ([] Bool))))))
\a -> (\b -> seq a (seq b ((\c -> \d -> seq c (seq d ([]::[] Int))) (seq a (seq b True)) (seq a ((undefined::Int -> Int) (undefined::Int)))))) ((\b -> head (seq b ([]::[] (Int -> Bool))) (seq b (seq b (undefined::Int)))) (seq a (case1 (\b -> (undefined::([] ([] Bool)) -> Int)) 0 (seq a (undefined::[] ([] Bool))))))
(!!) (undefined::[] ((Int -> Int -> [] Int) -> ([] Int) -> [] Int)) ((+) (head (undefined::[] Int)) (undefined::Int)) (\a -> \b -> ([]::[] Int))
head (map (\a -> (\b -> seq b (seq b (undefined::Bool -> ([] Int) -> [] Int))) (seq a ([]::[] Int))) ((\a -> seq a (undefined::[] ([] ([] (Int -> Int))))) False)) (id (\a -> seq a (undefined::Bool -> Bool)) ([]::[] ([] ([] Bool))) (undefined::Bool))
\a -> a
(\a -> \b -> seq a (\c -> c)) (undefined::Bool) ((\a -> seq a ((+1) (seq a (undefined::(Int -> Bool) -> Int) (undefined::Int -> Bool)))) ((\a -> a) ([]::[] Bool)))
case1 (\a -> (undefined::([] Bool) -> ([] Int) -> [] Int)) (take 2) ((\a -> seq a (seq a (seq a (undefined::[] Bool)))) ((!!) (undefined::[] (([] ([] Int)) -> [] ([] Int))) (undefined::Int)))
\a -> a
take (head ([]::[] (((([] Int) -> [] (Int -> Bool)) -> Bool -> [] (Int -> ([] Bool) -> [] Bool)) -> Int)) (\a -> seq a (undefined::Bool -> [] (Int -> ([] Bool) -> [] Bool))))
(\a -> seq a (\b -> take (seq b (undefined::(Bool -> Bool) -> Int) (seq b id)))) (undefined::([] Int) -> Int) False
(\a -> seq a (seq a (seq a (seq a (seq a (\b -> \c -> seq c ([]::[] Int)))) (seq a (id (undefined::Bool -> Int -> Int -> Int) a))))) ((undefined::([] (([] (Int -> Int)) -> Int -> Bool)) -> Bool) ((\a -> seq a (seq a (undefined::[] (([] (Int -> Int)) -> Int -> Bool)))) (undefined::Bool)))
(\a -> (!!) (undefined::[] (Bool -> ([] Int) -> [] Int)) (seq a 1)) ((\a -> seq a (seq a (seq a ([]::[] ([] (Bool -> Bool)))))) ([]::[] (Int -> [] Int))) ((\a -> (undefined::(Int -> [] Bool) -> Bool) (id (seq a (undefined::Int -> [] Bool)))) ((\a -> not (seq a (undefined::Bool))) (\a -> seq a (\b -> seq b (undefined::Bool)))))
\a -> a
\a -> id (\b -> seq b (\c -> a)) (seq a (seq a (seq a (\b -> ((==)::Int -> Int -> Bool))) (head ([]::[] Bool)))) (seq a ((\b -> map (id (undefined::Int -> [] (Bool -> Bool))) (seq b a)) (((==)::[Int] -> [Int] -> Bool) a a)))
\a -> (enumFromTo'::Int -> Int -> [Int]) (seq a (seq a (seq a (seq a (id (\b -> seq b (seq b 2)))) (\b -> map (undefined::(Bool -> Bool) -> [] ([] ([] Int))) (head (undefined::[] ([] (Bool -> Bool)))))))) (undefined::Int)
id (undefined::(([] ([] Int)) -> [] ([] Bool)) -> ([] Int) -> [] Int) (\a -> seq a ((\b -> seq b (seq b (\c -> (undefined::[] ([] Bool))))) (\b -> b) ((\b -> id (seq b 2)) (\b -> \c -> seq c (b c)))))
id (\a -> (\b -> \c -> seq b tail) False) ((!!) (map (\a -> seq a ([]::[] Int)) (undefined::[] ([] ([] Bool))))) ((\a -> seq a ((\b -> seq b (seq b 0)) (seq a (seq a (seq a 0))))) ([]::[] (([] ([] Bool)) -> [] ([] Bool))))
\a -> a
\a -> seq a a
(\a -> seq a (seq a (\b -> (:) (seq a (seq a (seq a a)))))) ((\a -> seq a (seq a (seq a 2))) (undefined::([] Bool) -> Bool)) (\a -> seq a (seq a (seq a (\b -> seq b ((undefined::(([] Int) -> Int) -> Int) (undefined::([] Int) -> Int)))) ((\b -> tail (seq b ([]::[] (([] Bool) -> [] Bool)))) (seq a (seq a (seq a (undefined::Int)))))))
\a -> case1 (\b -> seq b (seq a (undefined::([] ([] Int)) -> ([] Int) -> [] Int) (seq b (seq b (seq b (seq b (undefined::[] ([] Int)))))))) (seq a (\b -> (undefined::(([] Bool) -> Bool) -> [] Int)) (head ([]::[] Bool)) (\b -> seq a (undefined::Bool))) (seq a (take ((+1) (undefined::Int)) (undefined::[] Int)))
\a -> (\b -> seq b ((:) (seq b (\c -> seq b 1) (not (seq a True))) (id (seq b (undefined::Bool -> [] Int)) (seq a (seq b (seq a False)))))) ((\b -> \c -> \d -> b) (undefined::Bool))
take 0
(\a -> seq a (\b -> \c -> (\d -> d) (seq a (seq c (undefined::[] Int)))) (seq a (\b -> seq a (undefined::Int)) a)) ((\a -> seq a (undefined::[] ([] ([] Bool)))) (case1 (undefined::Bool -> ([] Bool) -> Int) (undefined::Int) ([]::[] Bool)))
\a -> a
(!!) ((\a -> seq a (seq a ([]::[] (([] Int) -> [] Int)))) (\a -> seq a ([]::[] Bool))) (id ((undefined::(([] ([] ([] Bool))) -> Bool) -> Int) (undefined::([] ([] ([] Bool))) -> Bool)))
\a -> (undefined::[] Int)
case1 (\a -> id (\b -> \c -> seq b id)) (undefined::Bool -> ([] Int) -> [] Int) ((\a -> a) (undefined::[] Bool)) ((undefined::([] ([] Bool)) -> Bool -> Bool) (id ([]::[] ([] Bool))) (id (\a -> seq a True) (undefined::Int)))
(\a -> \b -> seq a (seq a (seq b (\c -> (undefined::([] (Int -> Int)) -> [] Int))) (undefined::Bool)) ((!!) ([]::[] (Int -> [] (Int -> Int))) 0 (undefined::Int))) ((undefined::Bool -> [] (Int -> Bool)) (case1 (\a -> \b -> (undefined::Bool)) True (undefined::[] Int)))
id
\a -> case1 (undefined::(([] ([] Int)) -> [] Bool) -> ([] (([] ([] Int)) -> [] Bool)) -> [] Int) ((\b -> seq b a) (\b -> (+1) (seq a (undefined::Int)))) ((++) ((++) ([]::[] (([] ([] Int)) -> [] Bool)) ([]::[] (([] ([] Int)) -> [] Bool))) (seq a (tail (undefined::[] (([] ([] Int)) -> [] Bool)))))
\a -> filter (\b -> (\c -> c) (seq a (id (undefined::([] ([] Bool)) -> Bool)) (seq a (seq b (seq a (undefined::[] ([] Bool))))))) a
\a -> (undefined::[] Int)
\a -> seq a (seq a (\b -> seq a (seq a (seq a (\c -> filter odd ([]::[] Int)))) ((undefined::Int -> ([] (Int -> Int)) -> Int -> Int) b)) (seq a (seq a ((\b -> \c -> (+1) b) (undefined::Int)) (undefined::([] Int) -> Int -> [] Int))))
(\a -> (\b -> filter ((!!) (seq b (seq b (seq b (undefined::[] Bool)))))) ((!!) (seq a ([]::[] (Bool -> [] (Bool -> Bool)))) (seq a (seq a (seq a 1))))) (id ((\a -> seq a (\b -> (undefined::Int -> ([] Int) -> Bool -> Bool) (seq b (seq b (undefined::Int))))) False))
\a -> case1 (id (\b -> seq a ((undefined::Bool -> ([] Int) -> [] Int) (seq b (head ([]::[] Bool)))))) (map (\b -> seq a ((+1) (undefined::Int))) (seq a (seq a (seq a ([]::[] ([] ([] Int))))))) (seq a (map (undefined::Int -> Int) a))
\a -> seq a a
\a -> a
case1 (\a -> seq a (id (undefined::([] (Int -> [] Int)) -> ([] Int) -> [] Int)) (map (\b -> seq b b) (seq a ([]::[] (Int -> [] Int))))) (head (undefined::[] (([] ([] Bool)) -> Bool -> [] Int)) (undefined::[] ([] Bool)) ((\a -> a) (undefined::Bool)))
(:) 0
(undefined::(([] Int) -> ([] ([] Int)) -> [] Bool) -> ([] Int) -> [] Int) (\a -> case1 (undefined::Int -> ([] Int) -> ([] ([] Int)) -> [] Bool) (undefined::([] ([] Int)) -> [] Bool) ((undefined::Int -> [] Int) (undefined::Int)))
\a -> a
\a -> a
case1 (\a -> \b -> (undefined::Bool -> ([] Int) -> [] Int)) ((!!) ([]::[] (Bool -> ([] Int) -> [] Int)) 1) ((\a -> seq a ([]::[] Int)) (undefined::Int)) ((\a -> seq a (id (undefined::([] ([] ([] Bool))) -> Bool)) (seq a (head ([]::[] ([] ([] ([] Bool))))))) (case1 (\a -> (undefined::([] Int) -> [] Bool)) (undefined::[] Bool) ([]::[] Int)))
case1 (\a -> id (seq a (\b -> case1 (:) ([]::[] Int))) (seq a ((\b -> seq b (seq a (undefined::[] (([] Bool) -> [] Bool)))) a))) ((\a -> \b -> seq a (seq a (undefined::[] Int))) (\a -> seq a a) ((:) (not True) (id ([]::[] Bool))))
\a -> seq a a
(undefined::Bool -> (([] Int) -> [] Int) -> ([] Int) -> [] Int) ((!!) (tail (undefined::[] Bool)) (head ([]::[] Int))) ((undefined::Bool -> ([] Int) -> [] Int) ((\a -> seq a (seq a True)) (id ([]::[] ([] Bool)))))
\a -> (undefined::[] Int)
(\a -> (\b -> seq b (\c -> \d -> seq d d) (a (seq b (undefined::[] Int)) (seq b ([]::[] ([] Int))))) (seq a (\b -> map (\c -> seq a ([]::[] ([] Bool))) (undefined::[] (Int -> Bool))))) ((undefined::(([] ([] Int)) -> [] Int) -> ([] Int) -> ([] ([] Int)) -> [] Int) (undefined::([] ([] Int)) -> [] Int))
\a -> take (seq a (seq a (seq a (-))) 2 (seq a (seq a (undefined::Int)))) (seq a a)
(\a -> \b -> map (seq b (seq b (\c -> (\d -> d) (seq a (undefined::Int))))) (seq a (map (undefined::Int -> ([] Int) -> Int -> Bool) ([]::[] Int)))) (\a -> seq a (\b -> seq a (seq a (undefined::[] (([] Int) -> [] (([] Bool) -> [] Bool))))) (undefined::([] Int) -> Int))
(undefined::(([] (([] Int) -> Bool)) -> [] (([] (([] Int) -> Bool)) -> [] (([] Int) -> Bool))) -> ([] Int) -> [] Int) (\a -> (\b -> seq b (seq b ([]::[] (([] (([] Int) -> Bool)) -> [] (([] Int) -> Bool))))) ((-) (seq a 2)))
(!!) ((!!) ([]::[] ([] (Int -> ([] Int) -> [] Int))) (head (undefined::[] Int))) ((undefined::Bool -> Int) (id True)) ((!!) (id (undefined::[] Int)) ((-) (id (undefined::Int)) (head ([]::[] Int))))
(\a -> seq a (seq a (seq a ((!!) ([]::[] (Bool -> ([] Int) -> [] Int)) (undefined::Int)))) (seq a a)) ((\a -> (undefined::([] ([] Int)) -> Bool) (seq a (undefined::[] ([] Int)))) (head (tail (undefined::[] (([] Int) -> ([] ([] Int)) -> [] Bool)))))
\a -> a
filter (\a -> (\b -> (&&) (((==)::[Int] -> [Int] -> Bool) ([]::[] Int) (seq a (undefined::[] Int))) (seq a (\c -> seq a (seq a (undefined::Bool))) (seq b ([]::[] ([] (Bool -> Bool)))))) (\b -> (undefined::Int -> Int -> Int)))
(undefined::Bool -> Bool -> ([] Int) -> [] Int) ((\a -> seq a (not False)) ((!!) ([]::[] ([] ([] (Bool -> Bool)))) 0)) (case1 (\a -> \b -> odd (seq b (undefined::Int))) (head ([]::[] Bool)) ([]::[] (Int -> [] Int)))
\a -> a
case1 ((undefined::(([] Bool) -> Bool) -> Int -> ([] Int) -> [] Int) head) ([]::[] Int)
id (\a -> \b -> (undefined::(([] Bool) -> [] Bool) -> [] Int) id) ((\a -> seq a (\b -> (undefined::([] Int) -> [] (([] Int) -> Bool)))) ((undefined::(Int -> Int) -> Bool) (undefined::Int -> Int)))
(undefined::(([] (([] ([] ([] Bool))) -> [] ([] Bool))) -> Int) -> ([] Int) -> [] Int) (undefined::([] (([] ([] ([] Bool))) -> [] ([] Bool))) -> Int)
map (\a -> seq a a)
map ((\a -> \b -> case1 (\c -> seq c (\d -> a)) b (undefined::[] Int)) ((\a -> a) ((\a -> seq a (seq a (seq a (undefined::Int)))) ((!!) (undefined::[] (Int -> ([] Int) -> Bool)) 0))))
\a -> seq a (seq a (\b -> a) ((\b -> seq b (\c -> \d -> seq c (\e -> \f -> ([]::[] ([] Bool))) (seq c (seq c 1)))) (seq a (seq a (seq a ((\b -> b (undefined::Bool)) ((||) (undefined::Bool))))))))
(\a -> seq a (\b -> seq a (\c -> c))) (undefined::Int) (undefined::[] Int)
(undefined::([] Int) -> [] Int)
head ((\a -> \b -> seq a (seq a (id (undefined::Int -> [] (([] Int) -> [] Int)) a))) ((\a -> seq a (seq a (undefined::Int))) (head ([]::[] ([] ([] Int))))) ((\a -> seq a (seq a ((\b -> seq b (undefined::Bool)) (tail (undefined::[] (([] Int) -> Int)))))) ((undefined::Bool -> ([] Bool) -> [] (Bool -> Bool)) (undefined::Bool))))
tail
take (head (map (\a -> a) (head (undefined::[] (Bool -> [] Int)) (not (undefined::Bool)))))
\a -> map (\b -> 1) (seq a (seq a ((!!) (head (undefined::[] ([] ([] (Int -> Bool)))))) (case1 (seq a (undefined::Bool -> ([] Bool) -> Int)) (seq a 2) (seq a ([]::[] Bool)))))
\a -> seq a (seq a (\b -> seq b (\c -> seq c (undefined::Int -> [] Int) (seq b (seq c 1))) (seq a (undefined::[] ([] (([] ([] ([] Bool))) -> [] ([] Bool)))))) (seq a (\b -> seq b (\c -> \d -> c))))
\a -> (++) (map (\b -> seq b (\c -> seq a 2) (seq b (\c -> 0))) (seq a (undefined::[] (([] ([] ([] Int))) -> [] ([] ([] Int)))))) ((\b -> seq b (seq b (\c -> a)) (head (seq a ([]::[] (Int -> Int -> Int))))) (\b -> seq a (seq a (seq b (\c -> seq c (\d -> a))))))
\a -> a
\a -> map (\b -> (undefined::Int)) (map (seq a (id (undefined::([] ([] Bool)) -> Int -> Int) (undefined::[] ([] Bool)))) a)
\a -> a
tail
\a -> (++) ([]::[] Int) ((\b -> seq b (\c -> seq a ([]::[] Int))) 2 (undefined::[] ([] (Int -> Bool))))
\a -> id (seq a (\b -> a)) (map (\b -> (\c -> seq b (\d -> seq c d)) ((+1) (undefined::Int))) (seq a (seq a (\b -> seq b (undefined::[] ([] ([] Bool)))) (undefined::[] (Bool -> Bool)))))
(undefined::([] Int) -> [] Int)
case1 (\a -> seq a (\b -> id)) (\a -> a) ((undefined::Bool -> [] (Int -> Int -> Int)) ((\a -> seq a (undefined::Bool)) (head (undefined::[] Int))))
case1 (\a -> seq a (seq a (\b -> seq a (seq a (seq b (seq b (++))) (seq b (seq a (seq a ([]::[] Int)))))))) (\a -> (\b -> seq b (undefined::Int -> [] Int)) (undefined::[] Int) ((undefined::Int -> Int) (undefined::Int))) (undefined::[] ([] (Int -> Bool)))
\a -> (:) (case1 (\b -> (!!) ([]::[] (([] Int) -> Int)) b) (id (seq a (seq a (undefined::Int)))) a) (seq a a)
(\a -> seq a (seq a (seq a ((!!) ([]::[] (Int -> ([] Int) -> [] Int)) (seq a (undefined::Int)))))) (case1 (\a -> seq a (undefined::([] Bool) -> [] (Int -> Bool))) (undefined::[] (Int -> Bool)) (undefined::[] Bool)) ((\a -> seq a (a (seq a ([]::[] Int)) 1 (seq a (undefined::[] Int)) (seq a (undefined::Int)))) (\a -> seq a (undefined::Int -> ([] Int) -> Int -> Int)))
id (\a -> seq a (seq a (\b -> a)) (seq a (seq a ((\b -> seq b (seq a (undefined::Bool -> ([] (Bool -> Bool)) -> Bool)) b) (undefined::Bool)))))
head ((undefined::([] (([] Bool) -> Int -> Bool)) -> [] (([] Int) -> [] Int)) ((\a -> seq a (undefined::[] (([] Bool) -> Int -> Bool))) (\a -> (:) id (head (undefined::[] ([] (Int -> Int)))))))
(\a -> (\b -> seq b (seq b (\c -> (undefined::([] Int) -> [] Int)))) (seq a 0)) (undefined::[] ([] Bool)) 1
\a -> ([]::[] Int)
\a -> a
id
(undefined::([] Int) -> [] Int)
(\a -> seq a (seq a (seq a (head (seq a (undefined::[] ((Int -> [] Bool) -> ([] Int) -> [] Int)))) (\b -> seq a ((undefined::([] Int) -> [] Bool) (seq b (undefined::[] Int))))))) (\a -> case1 (\b -> seq b (\c -> a)) a (seq a (\b -> ([]::[] ([] Bool))) ([]::[] Int)))
filter (\a -> seq a (seq a odd a))
\a -> (undefined::(Int -> ([] Int) -> Bool) -> [] Int) ((\b -> seq a (seq a (seq b (\c -> (undefined::Int -> ([] Int) -> Bool))) (seq a (seq a (seq b (undefined::[] Bool)))))) (undefined::Int))
\a -> a
(\a -> \b -> (undefined::([] Int) -> ([] Int) -> [] Int) (seq a (seq a ([]::[] Int)))) ((\a -> seq a (undefined::Int)) (\a -> \b -> seq a b)) (id (\a -> seq a (seq a (undefined::Int -> Int -> ([] Int) -> Int) (seq a (seq a 0)))) ((\a -> seq a (head ([]::[] ([] (([] Int) -> [] Int))))) id))
case1 (\a -> seq a (\b -> seq b (\c -> (undefined::([] Int) -> [] Int)) a) ((undefined::([] ([] (Int -> Int))) -> ([] Int) -> [] Int) ([]::[] ([] (Int -> Int))))) ((\a -> case1 (\b -> (undefined::([] Int) -> [] Int)) (seq a ([]::[] Int)) (seq a (undefined::[] Int))) ((\a -> id (seq a ([]::[] (Int -> [] Int)))) 2))
(:) (case1 (\a -> (undefined::([] (([] Int) -> [] ([] Bool))) -> Int)) ((\a -> seq a (seq a ((+1) (undefined::Int)))) (\a -> seq a (undefined::Bool -> ([] Int) -> Bool) (seq a False))) ((\a -> (undefined::Int -> [] (([] Int) -> [] ([] Bool))) (seq a 2)) ((!!) ([]::[] (Int -> Bool)) ((+1) 2))))
(:) ((undefined::(Int -> [] Int) -> (([] Int) -> Int -> Bool) -> Int) ((enumFromTo'::Int -> Int -> [Int]) (head ([]::[] (([] Bool) -> Int)) (head ([]::[] ([] Bool))))) (\a -> \b -> (undefined::Bool -> Bool) ((\c -> seq c (seq a (undefined::Bool))) (seq a (\c -> b)))))
(\a -> \b -> (\c -> seq c b) (map (\c -> (undefined::Bool -> Int -> Int -> Int -> [] Int) (seq c (seq c a))))) (case1 (\a -> (undefined::([] ([] (Int -> Bool))) -> Bool)) ((\a -> seq a a) (id False)) ((\a -> seq a ([]::[] ([] (Int -> Bool)))) (undefined::Int)))
(undefined::(([] Int) -> [] ([] Int)) -> ([] Int) -> [] Int) (\a -> map (id (\b -> seq a (undefined::Int -> [] Int) (seq b (undefined::Int)))) (seq a (seq a (\b -> seq b ([]::[] (([] Bool) -> [] Bool))) (seq a (seq a (undefined::Bool))))))
\a -> seq a (head (seq a (seq a (seq a (seq a (\b -> seq a ([]::[] ([] Int))))) (seq a (seq a (\b -> seq a (head (seq b (seq a (seq a ([]::[] (Bool -> [] ([] Bool))))))) (undefined::Bool)))))))
(undefined::Bool -> (([] Int) -> [] ([] Bool)) -> ([] Int) -> [] Int) (id (\a -> seq a False) (\a -> seq a ([]::[] ([] Int)))) ((\a -> seq a (\b -> seq a (\c -> ([]::[] ([] Bool)))) odd) ((undefined::((([] Int) -> Int) -> Bool) -> Int) (\a -> odd (undefined::Int))))
id
(undefined::(([] Int) -> [] Bool) -> ([] Int) -> [] Int) (\a -> map (seq a (seq a ((\b -> \c -> seq b False) (id (undefined::[] ([] Int)))))) ((\b -> seq b (seq b (undefined::[] ([] (Int -> Bool))))) (seq a (head ([]::[] (Int -> Bool -> Bool))))))
id ((!!) (map (undefined::Bool -> Int -> ([] Int) -> [] Int) (undefined::[] Bool)) (case1 (\a -> (undefined::([] ([] Bool)) -> Int)) 2 ([]::[] ([] Bool))) (head (case1 (\a -> seq a (seq a (\b -> b))) (undefined::[] Int) (undefined::[] Int))))
id
tail
\a -> a
\a -> a
\a -> (\b -> seq b (\c -> a) (\c -> \d -> (\e -> seq a (seq e (undefined::Bool))) (seq a (\e -> ([]::[] Bool))))) (id (seq a (seq a (seq a (seq a (seq a (undefined::[] (([] (Int -> ([] Int) -> Bool)) -> [] (Int -> ([] Int) -> Bool)))))))))
\a -> seq a ([]::[] Int)
\a -> case1 ((undefined::([] ([] ([] Bool))) -> Int -> ([] Int) -> [] Int) (seq a (\b -> (undefined::[] ([] ([] Bool)))) (undefined::[] Bool))) (seq a (seq a (id (undefined::([] ([] ([] (Bool -> Bool)))) -> [] Int) (seq a (seq a (seq a (undefined::[] ([] ([] (Bool -> Bool)))))))))) (seq a (id (\b -> ([]::[] Int))) ((\b -> seq b ([]::[] (Bool -> Bool))) True))
head ([]::[] (([] (([] (([] Int) -> ([] ([] Int)) -> [] Bool)) -> [] Bool)) -> ([] Int) -> [] Int)) ((\a -> seq a ([]::[] (([] (([] Int) -> ([] ([] Int)) -> [] Bool)) -> [] Bool))) False)
(undefined::Bool -> ([] Int) -> [] Int) (case1 (head (tail ([]::[] (Int -> ([] Int) -> Bool)))) ((\a -> seq a a) (undefined::Bool)) ((\a -> seq a (undefined::[] Int)) (head (undefined::[] (Int -> Int)))))
(\a -> \b -> head (seq a ([]::[] (([] Bool) -> Bool -> [] Int))) (seq b (seq a (seq b ([]::[] Bool)))) (seq a (case1 (\c -> (undefined::([] Int) -> Bool)) (seq b (undefined::Bool)) b))) (\a -> seq a (seq a (seq a (seq a (seq a (seq a (seq a (\b -> seq b (seq b (seq b (head ((++) (undefined::[] ([] ([] (([] Int) -> [] Int)))) ([]::[] ([] ([] (([] Int) -> [] Int))))))))))))))))
(undefined::Bool -> ([] Int) -> [] Int) ((\a -> case1 (seq a (undefined::Int -> ([] Int) -> Bool)) False (seq a (undefined::[] Int))) ((\a -> id (seq a (undefined::Int))) (\a -> seq a (\b -> seq b True))))
(\a -> seq a tail) (case1 (\a -> seq a (undefined::Int -> ([] Bool) -> Int) (seq a (undefined::Int))) (undefined::Int) ((undefined::Int -> [] Bool) (undefined::Int)))
tail
case1 (\a -> \b -> \c -> (++) b) (\a -> seq a (\b -> seq b (undefined::[] Int))) ((undefined::Bool -> [] Int) (undefined::Bool)) ((undefined::(([] (([] Int) -> [] ([] Int))) -> [] (Int -> Bool)) -> Int) (\a -> (\b -> head (seq b (undefined::[] ([] (Int -> Bool))))) (seq a (seq a (seq a ([]::[] (([] Int) -> Bool)))))))
\a -> (:) 0 (undefined::[] Int)
id
\a -> (++) (seq a (\b -> seq b a) ((undefined::Bool -> ([] ([] Int)) -> [] ([] Int)) (id (seq a True)))) a
id (undefined::((([] Int) -> Int -> Bool) -> Int -> Int -> [] Int) -> ([] Int) -> [] Int) (undefined::(([] Int) -> Int -> Bool) -> Int -> Int -> [] Int)
(\a -> seq a (seq a (head (tail (seq a ([]::[] (Bool -> ([] Int) -> [] Int))))))) ((\a -> seq a (undefined::([] Bool) -> [] (Bool -> Bool))) False) (case1 (undefined::Bool -> ([] Bool) -> Bool) ((&&) (undefined::Bool) True) (tail (undefined::[] Bool)))
\a -> case1 (seq a (seq a (head (tail ([]::[] ((Int -> Bool) -> ([] (Int -> Bool)) -> [] Int)))))) a (seq a (head (undefined::[] ([] (Int -> Bool)))))
\a -> seq a (seq a (seq a (\b -> a)) (seq a (undefined::Int -> ([] Int) -> Bool)))
(\a -> seq a (\b -> filter (seq a (\c -> False)))) (\a -> map (undefined::Int -> [] Bool) (seq a (undefined::[] Int))) ((\a -> seq a (a ((\b -> a (seq b (undefined::Int))) (seq a (seq a False))))) ((\a -> \b -> seq a b) (take 2 (undefined::[] Int))))
(\a -> (undefined::Bool -> ([] Int) -> [] Int) (seq a ((\b -> b) (seq a (seq a (seq a (undefined::Bool))))))) ((\a -> (!!) (seq a (undefined::[] Int)) (id 0)) (\a -> seq a (\b -> \c -> seq c (undefined::Int)) a))
(\a -> take (seq a (seq a (seq a (seq a (undefined::Bool -> Int))) (undefined::Bool)))) ((undefined::Int -> Bool) ((\a -> a) ((+1) 1)))
(\a -> seq a (seq a (\b -> seq a ((undefined::Bool -> ([] Int) -> [] Int) (not (undefined::Bool)))) ((\b -> head (seq b (undefined::[] ([] ([] (Int -> Int)))))) not))) (\a -> seq a (\b -> \c -> seq b (\d -> seq a (undefined::([] Int) -> [] ([] Int))) (undefined::[] Int)) (\b -> map (head ([]::[] (Int -> [] Bool))) ([]::[] Int)))
(\a -> seq a (id (head (seq a (seq a ([]::[] (Bool -> ([] Int) -> [] Int))))))) ((undefined::([] ([] (Int -> [] Int))) -> Int) ([]::[] ([] (Int -> [] Int)))) (((==)::[Int] -> [Int] -> Bool) ((!!) (id ([]::[] ([] Int))) (head (undefined::[] Int))) ([]::[] Int))
tail
(\a -> seq a (\b -> \c -> seq b (seq c (seq a c)))) (undefined::Int) (head ([]::[] (([] Int) -> Int -> Int -> Int)))
(\a -> id ((\b -> seq a (seq b (undefined::Bool -> ([] Int) -> [] Int))) (id (undefined::Bool)))) ((\a -> seq a (\b -> \c -> seq a (undefined::Bool))) (\a -> a)) (not (head ((\a -> a) (undefined::[] Bool))))
\a -> (undefined::[] Int)
\a -> seq a a
(undefined::([] Int) -> [] Int)
\a -> a
\a -> seq a (undefined::[] Int)
(undefined::([] Int) -> [] Int)
(\a -> id (seq a (\b -> \c -> id) (seq a (seq a False)))) ((\a -> seq a (seq a (undefined::([] ([] Int)) -> [] ([] Bool)))) (id True)) ((\a -> seq a (seq a (\b -> (undefined::Int))) (undefined::([] Int) -> Bool -> Bool)) (id (\a -> map (seq a (undefined::Int -> Bool -> Bool)) (undefined::[] Int))))
take ((undefined::Bool -> Int) (head (undefined::[] ((Int -> Int) -> Bool)) (\a -> head (seq a ([]::[] Int)))))
head (head ((undefined::(([] Int) -> Bool -> Bool -> Bool) -> [] ([] (([] Int) -> [] Int))) (undefined::([] Int) -> Bool -> Bool -> Bool)))
(\a -> id (\b -> \c -> seq c (seq a (undefined::Bool -> [] Int)) (seq b (seq c (undefined::Bool))))) ((\a -> seq a (seq a (seq a 0))) (\a -> even (seq a (undefined::Int)))) ((\a -> seq a (seq a (undefined::Int -> Bool -> Bool -> Bool) 1)) ((\a -> tail (seq a ([]::[] Int))) False))
\a -> a
\a -> (undefined::Bool -> [] Int) ((undefined::(([] ([] ([] Int))) -> [] ([] ([] Int))) -> Bool) ((++) (seq a ((\b -> seq b ([]::[] ([] ([] Int)))) (\b -> \c -> (undefined::Bool))))))
\a -> (enumFromTo'::Int -> Int -> [Int]) (seq a (\b -> (undefined::Bool -> Int) (odd (undefined::Int))) (seq a (seq a (seq a (undefined::[] (Int -> ([] ([] Int)) -> [] ([] (Int -> Bool)))))))) (case1 (undefined::Bool -> ([] Bool) -> Int) (seq a (seq a (seq a (seq a 1)))) (seq a (take (undefined::Int) ([]::[] Bool))))
\a -> seq a (undefined::[] Int)
head ((\a -> (!!) (undefined::[] ([] (Bool -> ([] Int) -> [] Int))) (seq a (seq a a))) ((\a -> seq a (a (undefined::[] Int) 0)) (\a -> \b -> 2))) False
case1 (\a -> seq a ((!!) ((!!) (undefined::[] ([] (([] Int) -> [] Int))) (head ([]::[] Int))) ((!!) (seq a ([]::[] Int)) a))) (map (undefined::(Int -> ([] Int) -> Bool) -> Int) (map (\a -> (undefined::Int -> ([] Int) -> Bool)) ([]::[] Bool)))
id (\a -> \b -> (undefined::[] Int)) (undefined::([] (([] Int) -> ([] Int) -> [] Int)) -> Int -> Int -> Int)
\a -> tail a
\a -> map (id (seq a (\b -> seq a (undefined::Int -> ([] (Int -> Bool)) -> Int) (seq b (undefined::Int)))) True) ((:) (id (\b -> ([]::[] (Int -> Bool))) (head (seq a ([]::[] ([] Bool))))) ((undefined::([] Int) -> [] ([] (Int -> Bool))) ([]::[] Int)))
case1 (\a -> (\b -> seq b (head ([]::[] (([] Int) -> ([] Int) -> [] Int)))) a) ((\a -> seq a (seq a take) (seq a (seq a (undefined::Int)))) head) ((\a -> seq a (\b -> (undefined::[] Int)) (seq a (seq a False))) (\a -> id (\b -> odd 0)))
\a -> tail a
(\a -> seq a (id (id (undefined::([] (Int -> Bool)) -> ([] Int) -> [] Int))) (map (undefined::Bool -> Int -> Bool) (undefined::[] Bool))) (\a -> head (seq a (undefined::[] (Bool -> [] ([] ([] Bool))))) (seq a (\b -> seq b (seq b False)) (\b -> b)))
case1 ((\a -> seq a (\b -> \c -> seq b (\d -> (undefined::[] Int)) (seq a (seq c ([]::[] ([] Bool)))))) (\a -> seq a (take a (seq a (undefined::[] Bool))))) (map (id (\a -> (!!) ([]::[] Int) 1)) (undefined::[] (([] Int) -> [] ([] Int))))
(\a -> seq a (seq a (\b -> \c -> seq c c)) (\b -> \c -> seq c (\d -> c) b)) (undefined::([] (Bool -> Bool)) -> Bool -> Bool)
\a -> a
id
(\a -> seq a ((\b -> seq b (seq a (\c -> tail)) (b (seq b (undefined::[] ([] Int))))) (seq a (\b -> seq a ((undefined::Bool -> [] Bool) False))))) ((\a -> seq a (seq a (\b -> (undefined::Bool -> ([] ([] Int)) -> [] Int) (seq a (seq a (undefined::Bool)))))) ([]::[] (([] Int) -> Bool)))
(undefined::([] Int) -> [] Int)
take ((\a -> seq a (id (seq a (id (\b -> seq b 0))) ((\b -> seq b (seq a ([]::[] ([] ([] Bool))))) (seq a (seq a (seq a ([]::[] (Int -> Int)))))))) (undefined::([] ([] Bool)) -> [] ([] Bool)))
\a -> seq a a
(undefined::(([] Int) -> Bool) -> ([] Int) -> [] Int) (\a -> case1 (\b -> seq a (\c -> seq a (seq c (undefined::Bool)))) (seq a (not True)) ([]::[] ([] (Bool -> Bool))))
\a -> (undefined::Bool -> [] Int) (undefined::Bool)
\a -> (!!) ([]::[] ((Int -> ([] Bool) -> Int -> Int -> Bool) -> [] Int)) (seq a (seq a (\b -> b) 0)) (id ((!!) (seq a (tail (undefined::[] (Int -> ([] Bool) -> Int -> Int -> Bool)))) (case1 (undefined::([] Int) -> ([] ([] Int)) -> Int) 0 (undefined::[] ([] Int)))))
(\a -> seq a (\b -> b)) ((\a -> seq a (undefined::([] ([] Bool)) -> [] ([] (Bool -> Bool)))) (undefined::Int))
(undefined::([] Int) -> [] Int)
(\a -> seq a (seq a (seq a (\b -> (:))) (seq a (seq a (undefined::Int))))) (\a -> take ((+1) 2) (undefined::[] ([] Bool))) (undefined::Int)
\a -> seq a (seq a a)
\a -> seq a (seq a (map (\b -> (-) ((\c -> seq c c) (seq b (seq a 2))) (seq b (seq a (undefined::Bool -> Int) (seq a False))))) (seq a (seq a (undefined::[] (([] (([] Int) -> Int -> Bool)) -> [] (([] Int) -> Int -> Bool))))))
tail
(\a -> seq a (\b -> seq b (\c -> (undefined::([] (Bool -> Bool)) -> [] Int) (seq c (seq c ([]::[] (Bool -> Bool))))) (case1 (undefined::Bool -> ([] Bool) -> [] ([] Bool)) (seq a ([]::[] ([] Bool))) (seq a ([]::[] Bool))))) (\a -> id (\b -> seq b (\c -> ([]::[] (([] Int) -> [] ([] Bool)))) (seq b b)) (seq a (seq a (seq a even)) (seq a (undefined::Int))))
case1 (undefined::([] ([] (Bool -> Bool))) -> ([] ([] ([] (Bool -> Bool)))) -> ([] Int) -> [] Int) ((!!) ([]::[] (([] Int) -> [] Int)) (id (undefined::Int))) ((\a -> seq a ([]::[] ([] ([] (Bool -> Bool))))) ((\a -> seq a (undefined::[] ([] (Int -> Int)))) ((+1) 1)))
\a -> (enumFromTo'::Int -> Int -> [Int]) (case1 (seq a (undefined::Int -> Int -> ([] Int) -> Int) (seq a (undefined::Int))) (seq a (seq a (seq a (seq a 0)))) a) (seq a (seq a 2))
\a -> seq a a
id (undefined::(Int -> ([] Int) -> Int) -> ([] Int) -> [] Int) (\a -> (undefined::(([] (([] Bool) -> Bool)) -> Int -> Bool) -> ([] Int) -> Int) (\b -> head (seq b ([]::[] ((Bool -> Bool) -> Int -> Bool))) (head (undefined::[] (Bool -> Bool)))))
(\a -> seq a (\b -> id) (seq a (head ([]::[] Int)))) (\a -> (\b -> (\c -> seq c (seq c (seq a ([]::[] ([] Bool))))) (seq b (seq b (seq b (undefined::Bool))))) (seq a (seq a ((+1) (seq a (undefined::([] Bool) -> Int) (seq a ([]::[] Bool)))))))
\a -> seq a (\b -> (\c -> seq a (\d -> a) c) (seq b (id (seq a (undefined::Bool))))) (seq a 2)
(\a -> \b -> a) (\a -> map (\b -> b) a) (map (\a -> head (seq a ([]::[] (([] Int) -> Int -> Int))) (seq a (head ([]::[] ([] Int))))) (tail ([]::[] (([] ([] (([] Bool) -> [] Bool))) -> [] Bool))))
id
\a -> a
\a -> a
\a -> seq a ((!!) (id (undefined::[] (Bool -> Bool -> [] Int))) (seq a (seq a 0)) (seq a ((\b -> seq b (undefined::Bool)) (undefined::[] (Int -> Int)))) (id (seq a ((\b -> \c -> seq b (undefined::Bool)) (seq a (seq a (undefined::Int)))) (undefined::(Int -> Int) -> Int))))
(!!) ((\a -> (:) (take (undefined::Int)) (seq a (seq a (undefined::[] (([] Int) -> [] Int))))) ((\a -> seq a (seq a (undefined::([] ([] ([] Int))) -> [] ([] Bool)))) (undefined::Bool))) ((undefined::(([] Int) -> Int -> Bool) -> Int) (\a -> ((==)::Int -> Int -> Bool) (seq a (seq a (seq a 2)))))
(++) ((\a -> seq a ((\b -> seq a (seq a (\c -> seq b (undefined::[] Int)) (seq a ([]::[] (([] Int) -> Bool))))) (seq a (\b -> seq b 1)))) ((!!) (id (\a -> ([]::[] (([] Int) -> Bool))) True) (id (undefined::Int))))
\a -> seq a (id (\b -> seq b (\c -> a) (case1 (\c -> head) (seq b (undefined::Bool)) (seq a ([]::[] Bool))))) (undefined::([] (([] (Bool -> Bool)) -> [] (Bool -> Bool))) -> [] (Int -> [] Int))
(undefined::(Int -> ([] Int) -> Bool) -> Int -> ([] Int) -> [] Int) (\a -> \b -> seq a (case1 (undefined::Bool -> ([] Bool) -> Bool) True ([]::[] Bool))) (case1 (\a -> (undefined::([] Bool) -> Int)) ((-) 0 (undefined::Int)) (map (undefined::(([] ([] ([] Bool))) -> Bool) -> Bool) ([]::[] (([] ([] ([] Bool))) -> Bool))))
(:) (undefined::Int)
\a -> a
(\a -> seq a (seq a (\b -> (undefined::Bool -> ([] Int) -> [] Int)) (seq a (a ([]::[] Int) False)))) (\a -> seq a (\b -> id even (seq b (seq b (undefined::Int))))) (odd ((\a -> a (undefined::[] (Int -> Bool)) 1) (\a -> \b -> b)))
(\a -> \b -> (++) (head (filter (seq b (undefined::([] Int) -> Bool)) (undefined::[] ([] Int)))) ((undefined::Int -> [] Int) (seq a ((+1) 2)))) (\a -> seq a (\b -> \c -> seq a (undefined::(([] Int) -> [] ([] Int)) -> Int) (a ((\d -> seq d (seq c ([]::[] Int))) (seq a (undefined::[] ([] Bool)))))))
id (\a -> seq a ((\b -> seq b a) (\b -> (undefined::([] (Int -> Int)) -> Bool -> Bool))))
\a -> a
(!!) ((\a -> seq a (seq a (undefined::([] Bool) -> [] (([] Int) -> [] Int)) (seq a ([]::[] Bool)))) (head ([]::[] ([] ([] Bool))))) (id (head ((\a -> seq a (seq a (undefined::Bool -> [] Int))) (tail (undefined::[] Bool)) (undefined::Bool))))
(\a -> seq a (\b -> seq b (seq b (\c -> seq b c)))) ((\a -> seq a (seq a (seq a (undefined::Bool)))) (undefined::[] ([] Int))) (undefined::Int)
tail
\a -> (!!) ((undefined::(Int -> Int -> Int -> Bool) -> [] ([] Int)) (seq a (\b -> seq b (seq b (undefined::Int -> Int -> Int -> Bool))) (seq a (seq a ([]::[] Bool))))) ((-) ((undefined::Int -> Int) (seq a (seq a (seq a (undefined::Int))))) (seq a (seq a (seq a (undefined::Int -> Int)) (seq a (seq a (undefined::Int))))))
(\a -> (undefined::((Int -> Int) -> Int -> Int -> Int) -> ([] Int) -> [] Int) ((undefined::Bool -> (Int -> Int) -> Int -> Int -> Int) (seq a (seq a (seq a False))))) ((\a -> seq a (seq a (seq a ([]::[] (([] (([] Int) -> ([] Int) -> [] Bool)) -> Int))))) (odd (undefined::Int)))
(undefined::([] Int) -> [] Int)
\a -> seq a a
filter (\a -> ((==)::[Int] -> [Int] -> Bool) (undefined::[] Int) (seq a (map (case1 (undefined::Bool -> ([] Bool) -> Bool -> Int) (undefined::Bool -> Int) ([]::[] Bool)) (id (undefined::([] (Bool -> Bool)) -> [] Bool) (seq a (undefined::[] (Bool -> Bool)))))))
\a -> (enumFromTo'::Int -> Int -> [Int]) ((undefined::(([] (([] Int) -> [] ([] Int))) -> Int -> Bool) -> Int) (seq a (undefined::([] (([] Int) -> [] ([] Int))) -> Int -> Bool))) 2
id
\a -> seq a (seq a (map (head (head (seq a (id ([]::[] ([] (([] (([] ([] (Int -> Bool))) -> Int -> [] Int)) -> Int))))))) (seq a (seq a (undefined::[] ([] (([] ([] (Int -> Bool))) -> Int -> [] Int)))))))
take (head ((\a -> (:) (seq a (seq a (undefined::Bool -> Int)) (seq a (seq a True))) (seq a (seq a ((\b -> seq b ([]::[] Int)) (seq a True))))) (undefined::([] Int) -> [] (([] Bool) -> [] Bool))))
\a -> a
head (undefined::[] ((Int -> ([] Int) -> [] (Int -> ([] Int) -> Int -> [] Int)) -> ([] Int) -> [] Int)) (id (\a -> id (\b -> seq b (id (id (seq a (tail (seq b (undefined::[] (Int -> ([] Int) -> Int -> [] Int))))))))))
tail
\a -> (++) (seq a ((undefined::Int -> [] Int) (seq a (\b -> (undefined::Int)) (\b -> \c -> c)))) (seq a a)
(\a -> seq a (case1 (\b -> \c -> id) (\b -> b) (seq a ([]::[] Bool)))) (undefined::[] Int)
(:) ((\a -> seq a id (seq a (seq a (seq a 0)))) ((\a -> seq a (\b -> (undefined::[] ([] Bool)))) ((+1) 1)))
(\a -> seq a (seq a (seq a (\b -> \c -> (++) (seq a c) c)) (undefined::Int))) (\a -> seq a (filter (seq a (seq a (\b -> seq a (seq a (seq b (seq b (undefined::Bool))))))) (id ((++) (undefined::[] ([] ([] Int))) ([]::[] ([] ([] Int)))))))
\a -> a
(undefined::([] ([] (Int -> Int))) -> ([] Int) -> [] Int) ((undefined::(([] Int) -> ([] Int) -> Bool) -> [] ([] (Int -> Int))) (\a -> seq a (seq a (undefined::([] ([] Int)) -> ([] Int) -> Bool)) (take 2 ([]::[] ([] Int)))))
\a -> (undefined::([] ([] Bool)) -> Int -> [] Int) (undefined::[] ([] Bool)) ((\b -> seq a (seq a (\c -> seq b (undefined::Int))) (seq b (\c -> b))) False)
(\a -> seq a (seq a ((!!) ((++) ([]::[] (([] Int) -> [] Int)) (undefined::[] (([] Int) -> [] Int)))))) ((!!) (undefined::[] (Bool -> Int)) (undefined::Int) True) ((\a -> seq a (seq a (seq a (\b -> 0)) (undefined::[] Bool))) ([]::[] (([] (([] Int) -> ([] Bool) -> [] Bool)) -> [] Bool)))
(\a -> seq a (seq a (\b -> \c -> ([]::[] Int))) ((undefined::Bool -> ([] ([] (Int -> Int))) -> [] Int) (seq a (undefined::Bool)))) (\a -> case1 (undefined::Bool -> ([] Bool) -> [] (Int -> [] Int)) (seq a (tail (seq a ([]::[] (Int -> [] Int))))) (seq a (undefined::Int -> [] Bool) (seq a 1)))
\a -> a
\a -> (undefined::[] Int)
case1 (\a -> \b -> seq a (\c -> \d -> d)) ((\a -> \b -> seq a tail) (id True)) ([]::[] Bool) ((undefined::Bool -> Int) ((undefined::(Bool -> Bool) -> Bool) (\a -> a)))
\a -> (\b -> seq a (seq a (undefined::(Int -> Int -> Int) -> Bool -> [] Int) (\c -> \d -> d)) (seq b (not (head (undefined::[] (Bool -> Bool)) False)))) (map (seq a (seq a (seq a (seq a (seq a (\b -> seq a (undefined::[] (Bool -> Bool)))))))) ((undefined::([] Bool) -> [] (Int -> [] Int)) (seq a (seq a (seq a ([]::[] Bool))))))
id
\a -> a
(!!) (id ([]::[] ((([] ([] Bool)) -> [] Bool) -> ([] Int) -> [] Int))) 0 (\a -> seq a (seq a (\b -> map (\c -> (undefined::Bool)) ([]::[] ([] ([] Bool))))) (undefined::([] Int) -> ([] Int) -> [] ([] Int)))
(!!) ((\a -> id (undefined::Bool -> [] (([] Int) -> [] Int)) (even (seq a 1))) (undefined::([] Int) -> Bool)) ((undefined::Bool -> (Int -> Int -> Int) -> Int) (((==)::Int -> Int -> Bool) (undefined::Int) 2) (\a -> seq a (\b -> case1 (undefined::Bool -> ([] Bool) -> Int) 0 ([]::[] Bool))))
\a -> (undefined::[] Int)
(undefined::(Bool -> Bool) -> Int -> ([] Int) -> [] Int) (undefined::Bool -> Bool) ((\a -> \b -> seq a (seq a 1)) True ((\a -> seq a (seq a (seq a (undefined::Bool)))) ((!!) (undefined::[] ([] (([] Int) -> Int))) 0)))
\a -> (\b -> map (undefined::([] (([] ([] Bool)) -> [] ([] Bool))) -> Int) (filter (\c -> b) ([]::[] ([] (([] ([] Bool)) -> [] ([] Bool)))))) False
case1 (undefined::Bool -> ([] Bool) -> ([] Int) -> [] Int) ((\a -> \b -> seq b (a (seq b (undefined::Int)))) ((!!) (tail (undefined::[] ([] Int))))) ((\a -> seq a (\b -> (undefined::[] Bool)) (seq a (seq a (undefined::Int)))) (undefined::([] ([] Int)) -> [] Bool))
id (\a -> \b -> b) (undefined::([] Int) -> [] ((Int -> ([] Int) -> Bool) -> Int -> ([] Int) -> Bool))
\a -> (enumFromTo::Int -> Int -> [Int]) (seq a (seq a (\b -> seq b (+1)) ((!!) (seq a ([]::[] (Int -> Int)))) (seq a (head a)))) (undefined::Int)
tail
\a -> (:) (seq a ((undefined::(([] (Int -> Int)) -> [] (Int -> Int)) -> Int) (undefined::([] (Int -> Int)) -> [] (Int -> Int)))) (seq a (\b -> a) (seq a (\b -> take (seq b (undefined::Int)) (seq a ([]::[] ((Bool -> Bool) -> Bool -> Bool))))))
(\a -> seq a ((undefined::Int -> Int -> ([] Int) -> [] Int) 1 ((undefined::(Int -> Int -> ([] Int) -> Int) -> Int) (head ([]::[] (Int -> Int -> ([] Int) -> Int)))))) (case1 ((!!) ([]::[] (([] Int) -> ([] ([] Int)) -> [] Bool)) 1) (id (take (undefined::Int) ([]::[] Bool))))
\a -> seq a ((\b -> seq b (seq a (\c -> seq b a)) (head ((undefined::Int -> [] (([] ([] Int)) -> [] ([] Bool))) (seq a (undefined::Int))))) (undefined::([] Int) -> Bool -> Bool))
\a -> head ((\b -> map (undefined::(Int -> Int -> [] Int) -> [] Int) (tail (seq a (seq b (seq a (undefined::[] (Int -> Int -> [] Int))))))) (case1 (\b -> \c -> b) (seq a id 2) (seq a (seq a a))))
(\a -> \b -> id (seq a (undefined::Bool -> ([] Int) -> [] Int)) (seq a (seq b (seq a True)))) ((!!) (undefined::[] (([] Int) -> Int)) 1 ([]::[] Int)) (\a -> (\b -> seq b (\c -> seq c (seq b (undefined::[] (Bool -> Bool)))) (seq a (\c -> head ([]::[] (Int -> Bool))))) (case1 (\b -> seq b (undefined::([] Int) -> Bool -> Bool)) (seq a (seq a (undefined::Bool -> Bool)))))
\a -> seq a (seq a (\b -> seq b (\c -> map (+1) (seq b (seq a a))) (\c -> seq b (head (undefined::[] (Int -> [] ([] ([] Int))))) b))) ((undefined::(([] Int) -> Bool) -> (Bool -> Bool) -> Int) (undefined::([] Int) -> Bool) (\b -> seq a (id (undefined::((Int -> Bool) -> Int) -> Bool)) (\c -> seq a (id 1))))
(undefined::([] Int) -> [] Int)
(++) ((undefined::Int -> ([] ([] (Bool -> Bool))) -> [] Int) ((\a -> a (seq a (seq a 1))) (\a -> a)) (map ((undefined::Int -> Int -> [] (Bool -> Bool)) (id (undefined::Int))) ((\a -> seq a (seq a ([]::[] Int))) (undefined::Bool))))
\a -> a
\a -> (:) ((+1) ((-) ((!!) (seq a a) (seq a (undefined::Int))) (seq a (id (seq a 0))))) a
filter (((==)::Int -> Int -> Bool) ((!!) (undefined::[] (Bool -> Int)) 2 ((undefined::(Int -> Int) -> Int -> Bool) (\a -> a) ((undefined::Bool -> Int) (undefined::Bool)))))
(\a -> (\b -> \c -> seq a (seq b id)) True ((\b -> seq b (seq b (seq b (undefined::[] Int)))) (seq a (head ([]::[] Bool))))) ((\a -> (undefined::(Int -> Int) -> ([] ([] (Int -> Int))) -> Int) (seq a (\b -> b))) ((\a -> seq a (undefined::([] Int) -> Int -> Int -> Bool)) (undefined::Int)))
(\a -> (\b -> \c -> filter (seq b (seq b even)) (seq c c)) ((\b -> head (seq b (undefined::[] (Int -> Int -> Int)))) (seq a (seq a True)))) (undefined::[] ([] (([] Int) -> [] (Int -> Bool))))
(undefined::(Int -> Int -> Bool) -> (Int -> [] Bool) -> ([] Int) -> [] Int) (\a -> odd) (\a -> ([]::[] Bool))
case1 ((!!) (undefined::[] (Bool -> ([] Bool) -> ([] Int) -> [] Int)) (id (undefined::Int))) (\a -> head (map (\b -> a) a)) (map (\a -> seq a a) ([]::[] Bool))
\a -> take (id (\b -> seq b ((\c -> seq a c) (seq b 0))) (id (seq a (seq a (undefined::[] (([] (Bool -> Bool -> Bool)) -> Bool -> Bool)))))) (seq a (\b -> case1 (:) a a) (seq a (\b -> case1 (:)) False))
(undefined::([] Int) -> [] Int)
(\a -> seq a (\b -> \c -> seq c (\d -> c) (seq a (undefined::Int -> ([] Int) -> Int))) (\b -> seq a (\c -> \d -> b) (seq a (seq b (seq b head))))) (\a -> \b -> head ([]::[] (([] ([] Bool)) -> Bool -> [] Bool)) ((!!) (undefined::[] ([] ([] Bool))) (undefined::Int)) (seq b (\c -> seq b (undefined::Bool)) (\c -> seq c (\d -> seq b ([]::[] Int)))))
\a -> a
id
\a -> a
(undefined::(Int -> [] Int) -> ([] Int) -> [] Int) (\a -> map (seq a ((\b -> seq a (seq b (undefined::Bool -> Int))) (seq a (seq a ([]::[] (([] Int) -> [] Int)))))) ((++) (seq a (seq a (undefined::[] Bool))) (seq a (seq a ([]::[] Bool)))))
\a -> a
take (undefined::Int)
id
(\a -> (undefined::(Int -> Int) -> ([] Int) -> [] Int) ((undefined::(([] Int) -> Int -> Int) -> Int -> Int) (seq a (head (undefined::[] (([] Int) -> Int -> Int)))))) ((!!) ((++) (undefined::[] Bool) (undefined::[] Bool)) ((\a -> seq a (seq a a)) (id (undefined::Int))))
(\a -> seq a (\b -> id (undefined::Bool -> Int -> [] Int) (id (seq a (undefined::Bool))) (seq a (head (undefined::[] (([] Bool) -> Int))) (seq a (tail ([]::[] Bool)))))) (id (\a -> \b -> (:) (seq a b) (seq a ([]::[] ([] ([] Int))))) (case1 (\a -> seq a (undefined::([] Int) -> [] Bool)) ([]::[] Bool) (undefined::[] Int)))
id
(:) ((\a -> seq a ((\b -> seq b (\c -> a)) (seq a (not False))) ((!!) (undefined::[] (([] ([] Int)) -> [] ([] Bool))) a)) ((\a -> (-) (seq a (undefined::Int)) (seq a (seq a 1))) ((\a -> (!!) (seq a ([]::[] (Bool -> Bool)))) (\a -> seq a (undefined::Bool)))))
\a -> ([]::[] Int)
\a -> seq a ((undefined::(Int -> Int) -> (([] Int) -> [] ([] Int)) -> [] Int) (seq a ((\b -> seq b id) ([]::[] Bool)))) ((\b -> case1 (seq a (seq b (undefined::Int -> ([] Int) -> [] ([] Int)))) (undefined::[] ([] Int))) (\b -> \c -> a))
map (\a -> a)
\a -> seq a (seq a (seq a (undefined::(([] ([] (([] Int) -> ([] ([] Int)) -> [] Bool))) -> [] (Int -> Bool)) -> [] Int))) (seq a (\b -> (\c -> seq b (seq b (seq c (seq a (tail (undefined::[] (Int -> Bool))))))) (seq a (\c -> (undefined::(Bool -> Bool) -> [] (Bool -> Bool)) (id (undefined::Bool -> Bool))))))
(\a -> (!!) ((\b -> seq b (seq a (undefined::[] (([] Int) -> [] Int)))) (seq a (seq a False)))) (head ([]::[] ((([] Int) -> Int -> Bool) -> Int)) (undefined::([] Int) -> Int -> Bool)) ((!!) (undefined::[] Int) ((\a -> seq a (undefined::Int)) (undefined::[] Bool)))
(\a -> \b -> seq a (seq b (\c -> seq a (undefined::(Int -> Int -> Int) -> [] Int)) (seq a (seq a (seq a 1)))) (seq a (\c -> (undefined::(([] Bool) -> Bool) -> Int -> Int) (seq b (\d -> seq c True))))) (head (take (id ((\a -> seq a (undefined::Int)) (undefined::Bool))) ([]::[] Int)))
\a -> (undefined::Bool -> (([] ([] Int)) -> [] Int) -> [] Int) (seq a (seq a (((==)::Int -> Int -> Bool) (undefined::Int) (seq a (seq a (undefined::Int)))))) (\b -> id (id (seq a (\c -> ([]::[] Int)))) (\c -> seq a ((!!) (undefined::[] ([] (Int -> Int)))) (seq c (seq a (seq b 2)))))
\a -> a
(\a -> take ((undefined::Bool -> Int -> Int) (head ([]::[] Bool)) (seq a ((\b -> seq b (undefined::Int)) ([]::[] ([] Bool)))))) ((\a -> seq a ((!!) (id (undefined::[] ([] (([] Int) -> Bool)))) (undefined::Int))) ((undefined::([] Int) -> ([] ([] Int)) -> [] ([] ([] Int))) ((!!) ([]::[] ([] Int)) (undefined::Int))))
(!!) ([]::[] (Bool -> ([] Int) -> [] Int)) ((-) 1 0) (case1 (\a -> \b -> seq a False) (undefined::Bool) ((\a -> seq a ([]::[] Int)) (undefined::Int)))
\a -> case1 (seq a (\b -> \c -> a)) (map (\b -> seq a (id (undefined::Int))) (seq a (seq a (seq a (undefined::[] (Bool -> [] Bool)))))) (seq a ((:) (id (seq a (undefined::([] Int) -> [] ([] Bool)))) ([]::[] (([] Int) -> [] ([] Bool)))))
id
(!!) ([]::[] ((Int -> Int -> Bool) -> ([] Int) -> [] Int)) (head ([]::[] (Int -> Int)) (head (undefined::[] Int))) (\a -> (undefined::(([] (([] Int) -> Int -> Int -> Int)) -> [] Bool) -> Int -> Bool) (\b -> seq b (map (\c -> seq a True) (seq b ([]::[] (([] Int) -> [] Int))))))
case1 ((undefined::([] Bool) -> Bool -> ([] Bool) -> ([] Int) -> [] Int) (undefined::[] Bool)) tail (undefined::[] Bool)
head ([]::[] ((([] Int) -> Int -> Int) -> ([] Int) -> [] Int)) ((!!) ((\a -> seq a (seq a ([]::[] (([] Int) -> Int -> Int)))) (head (undefined::[] Int))) ((\a -> seq a a) ((+1) (undefined::Int))))
(\a -> seq a (seq a (\b -> \c -> seq c c))) ((\a -> seq a (\b -> seq a (undefined::[] (Bool -> Bool)))) (id (undefined::Int))) (case1 ((\a -> seq a (undefined::Bool -> ([] Bool) -> Bool)) False) (undefined::Bool) ((\a -> seq a (undefined::[] Bool)) False))
take (head (undefined::[] ((([] (([] (Int -> Int)) -> Int -> Int)) -> Bool -> Bool -> Bool) -> Int)) (id (undefined::([] (([] (Int -> Int)) -> Int -> Int)) -> Bool -> Bool -> Bool)))
\a -> a
id
\a -> head ((\b -> seq a (id (\c -> seq b (seq b (seq c (seq b ([]::[] ([] Int)))))) ((\c -> seq b (\d -> seq c (undefined::[] (Bool -> Bool)))) (seq b (head (undefined::[] Bool)))))) (id (\b -> head ([]::[] (([] Bool) -> Int)) (id ([]::[] Bool))) (seq a ([]::[] (([] ([] ([] (Int -> Int)))) -> Int -> Int)))))
\a -> a
case1 (\a -> seq a (\b -> \c -> c)) (\a -> ([]::[] Int)) (head (undefined::[] ((Int -> Int) -> [] (Bool -> Bool -> Bool))) (\a -> 1))
(\a -> \b -> seq b (map (\c -> seq a (head (seq b b))) (seq a (\c -> seq b ([]::[] ([] ([] ([] Bool))))) (\c -> c)))) (filter (\a -> a ((!!) (seq a (seq a ([]::[] Bool))) (head ([]::[] Int)))))
(:) 0
(\a -> \b -> (\c -> seq c (map (undefined::([] ([] ([] ([] ([] Bool))))) -> Int)) (id (undefined::[] ([] ([] ([] ([] ([] Bool)))))))) (id (seq b (seq a (seq a (\c -> ([]::[] (Int -> [] Int)))))))) (\a -> (:) (seq a (seq a ((undefined::Bool -> [] (Bool -> Bool)) (seq a (seq a (undefined::Bool)))))) (seq a (\b -> seq b (undefined::[] ([] (Bool -> Bool)))) (seq a (seq a (seq a 1)))))
\a -> case1 (\b -> \c -> map (undefined::(Int -> ([] Int) -> Int) -> Int) (seq c (seq c (seq b (undefined::[] (Int -> ([] Int) -> Int)))))) a (seq a (\b -> seq b (seq b (seq a ([]::[] ([] (Int -> [] Int)))))) (id (undefined::Bool)))
(\a -> \b -> seq b (map (\c -> seq a (+1) a) (seq b (undefined::[] ((Int -> Bool) -> Int -> ([] Int) -> Int))))) (head (undefined::[] ((([] Bool) -> [] (Bool -> Bool)) -> Int)) (map (\a -> seq a ((||) a))))
\a -> a
\a -> tail (seq a a)
\a -> seq a a
\a -> a
head (undefined::[] (([] (([] (([] ([] ([] Int))) -> [] ([] Bool))) -> Int -> [] Int)) -> ([] Int) -> [] Int)) (undefined::[] (([] (([] ([] ([] Int))) -> [] ([] Bool))) -> Int -> [] Int))
case1 ((\a -> \b -> seq a (seq a (undefined::([] Int) -> ([] Int) -> [] Int))) ((\a -> seq a True) (\a -> seq a True))) ((!!) ([]::[] (Int -> ([] Int) -> [] Int)) ((+1) (undefined::Int)) ((\a -> seq a 2) False)) (map (\a -> 1) (undefined::[] ([] ([] Int))))
\a -> a
\a -> a
id (\a -> seq a a)
\a -> seq a a
(\a -> seq a (\b -> id (seq a ((:) (seq a 2)))) (seq a (a (undefined::([] ([] Int)) -> [] ([] ([] Int))) (id 0)))) (\a -> (undefined::Int -> ([] Int) -> Int))
\a -> a
id
case1 (\a -> \b -> \c -> ([]::[] Int)) (\a -> a) ((\a -> seq a (\b -> ([]::[] Bool)) (seq a (seq a False))) ([]::[] ([] (Int -> Bool -> Bool))))
id
(\a -> \b -> map (\c -> (!!) b (undefined::Int)) (seq a (seq a (undefined::Bool -> [] ([] ([] (Int -> Bool))))) (odd (seq a (undefined::Int))))) (\a -> (:) (take (seq a 1) (seq a (seq a ([]::[] (([] Bool) -> [] Bool))))) (seq a (take (seq a (undefined::Int)) (seq a (undefined::[] ([] (([] Bool) -> [] Bool)))))))
\a -> seq a a
take (id 0)
\a -> a
id (\a -> seq a (undefined::(Int -> Int -> Int) -> ([] Int) -> [] Int)) ((undefined::([] ([] (([] Bool) -> [] Bool))) -> Int) ([]::[] ([] (([] Bool) -> [] Bool)))) ((undefined::(([] ([] Bool)) -> [] Bool) -> Int -> Int -> Int) ((undefined::Int -> ([] ([] Bool)) -> [] Bool) 1))
\a -> seq a (\b -> seq a ([]::[] Int)) (seq a (filter (\b -> seq a (id (seq a (undefined::Bool))))) (head (seq a (undefined::[] ([] Int)))))
(undefined::([] Int) -> [] Int)
(\a -> seq a (\b -> seq b (\c -> take (seq a (undefined::Int)) ([]::[] Int)))) ((\a -> id (seq a True)) (\a -> (+1) (seq a a))) (\a -> seq a ([]::[] ([] Int)))
\a -> seq a (case1 (seq a (undefined::([] (([] Int) -> [] Int)) -> ([] ([] (([] Int) -> [] Int))) -> [] Int)) a (undefined::[] ([] (([] Int) -> [] Int))))
(\a -> seq a (seq a (seq a (\b -> (undefined::Bool -> ([] Int) -> [] Int))) (seq a 1))) ((undefined::Bool -> [] (([] Bool) -> [] Bool)) ((&&) (undefined::Bool) (undefined::Bool))) (head ([]::[] ((([] Int) -> [] (Int -> Int)) -> Bool)) (map (\a -> head (undefined::[] (Bool -> Int -> Int)) (id False))))
(\a -> seq a (\b -> \c -> ([]::[] Int)) (seq a (\b -> b))) ((undefined::(([] Bool) -> [] (Bool -> Bool)) -> [] ([] (Bool -> Bool))) (map (||)))
(undefined::Bool -> ([] Int) -> [] Int) (odd ((undefined::(([] ([] Int)) -> [] Bool) -> Int) (\a -> seq a (seq a (seq a ([]::[] Bool))))))
\a -> (undefined::(([] ([] (([] Int) -> Bool -> Bool))) -> [] Bool) -> [] Int) (seq a (seq a (head (seq a (seq a (seq a (id (undefined::[] (([] ([] (([] Int) -> Bool -> Bool))) -> [] Bool)))))))))
(\a -> \b -> seq a b) (undefined::([] Bool) -> [] Bool)
map (\a -> seq a (seq a (seq a (\b -> \c -> a)) (tail (id (undefined::Bool -> [] ([] Int)) (seq a False)))) ((\b -> id (seq b (undefined::Bool -> Int -> Int -> [] Int))) (undefined::Int) ((\b -> b) (seq a (seq a (seq a (undefined::Bool)))))))
(\a -> \b -> seq b ((!!) (seq a (seq a (undefined::[] ((Int -> [] Bool) -> [] Int)))) (seq a (seq a (undefined::Int))) (\c -> map (seq b (undefined::(Bool -> Bool) -> Bool)) ([]::[] (Bool -> Bool))))) (\a -> id)
(\a -> \b -> seq a (seq b (\c -> \d -> seq b (undefined::[] Int)) (seq b (seq b (seq b 2)))) (case1 (seq a (undefined::([] Bool) -> ([] ([] Bool)) -> Bool)) True (undefined::[] ([] Bool)))) (\a -> seq a (tail (head (seq a (seq a (undefined::[] ([] (([] (([] ([] Int)) -> [] Bool)) -> [] (([] ([] Int)) -> [] Bool)))))))))
\a -> a
\a -> map ((!!) (undefined::[] (([] (([] Int) -> Int -> Int -> [] Int)) -> Int)) ((\b -> seq b (seq b (seq a (undefined::Int)))) (\b -> seq b (seq a (seq b (undefined::([] Bool) -> Bool)))))) (undefined::[] ([] (([] Int) -> Int -> Int -> [] Int)))
(\a -> seq a (\b -> b)) (\a -> (++) (seq a (seq a (seq a (undefined::Int -> [] (([] Bool) -> Bool))) ((+1) (undefined::Int)))) (head (undefined::[] ([] (([] Bool) -> Bool)))))
\a -> seq a (seq a a)
(undefined::Bool -> Bool -> ([] Int) -> [] Int) False ((\a -> seq a (seq a (seq a (seq a (seq a (undefined::Bool -> Bool)) (seq a (seq a (undefined::Bool))))))) (id (head ([]::[] ((Bool -> Bool) -> Int)) ((||) (undefined::Bool)))))
(\a -> seq a (id (\b -> (!!) (undefined::[] (([] Int) -> [] Int)) (seq a (seq a 1)))) (id (seq a (\b -> (undefined::[] (Int -> Bool)))))) (\a -> (!!) (id (seq a (tail (undefined::[] ([] Int))))) 2)
\a -> a
take (undefined::Int)
id (\a -> (\b -> \c -> seq b ((undefined::Int -> [] Int) (undefined::Int))) (seq a ((:) (seq a ([]::[] (Int -> Int))) (seq a (undefined::[] ([] (Int -> Int))))))) (\a -> (undefined::[] (Bool -> Bool)))
\a -> (undefined::(([] Int) -> ([] ([] (Int -> Int))) -> [] ([] (Int -> Int))) -> [] Int) (id (id (seq a (undefined::([] Int) -> ([] ([] (Int -> Int))) -> [] ([] (Int -> Int))))))
\a -> map (\b -> seq b ((\c -> seq c (seq b (\d -> (undefined::Int)) (seq c 1))) (\c -> (\d -> seq d d) (seq c (undefined::Int))))) (undefined::[] Bool)
\a -> (\b -> (:) (seq a (id id) (seq b (seq b 1))) (seq a (id (undefined::([] (Int -> Bool)) -> [] Int)) (undefined::[] (Int -> Bool)))) True
\a -> a
id
id ((\a -> \b -> seq a (\c -> (!!) (undefined::[] ([] Int)) (seq b (c b (undefined::Int) (undefined::Int)))) (\c -> (!!) (seq b ([]::[] (Int -> Int -> Int))) 2)) (\a -> \b -> head (seq b ([]::[] ((([] (Bool -> Bool)) -> [] (Bool -> Bool)) -> Bool))) (seq b (seq a (seq b (take (seq b (seq b b))))))))
case1 (\a -> \b -> \c -> seq b c) (id (\a -> \b -> ([]::[] Int)) (\a -> (\b -> b) a)) ((\a -> seq a (undefined::([] Bool) -> [] ([] (Int -> Int))) (undefined::[] Bool)) ((\a -> seq a False) (tail (undefined::[] (([] Int) -> Bool)))))
\a -> seq a (seq a a)
(\a -> \b -> seq a (\c -> seq c (\d -> (undefined::[] Int))) True ((\c -> seq c (seq b (seq c True))) (\c -> a))) ((+1) (case1 (undefined::Bool -> ([] Bool) -> Int) 1 ([]::[] Bool)))
(!!) ((undefined::([] ([] ([] Bool))) -> [] (([] Int) -> [] Int)) ((\a -> seq a (id (undefined::[] ([] ([] Bool))))) (tail (undefined::[] Bool)))) ((\a -> head (undefined::[] (Bool -> Int)) (seq a True)) (\a -> id (seq a (\b -> (undefined::Int -> Int)) (seq a (seq a True)))))
\a -> (++) ([]::[] Int) ((\b -> map (\c -> 2) (seq b (seq b (undefined::[] (([] Bool) -> Bool))))) ((\b -> seq b False) (id (seq a (undefined::Int)))))
(!!) ((:) (\a -> \b -> b) ([]::[] (([] ([] Int)) -> ([] Int) -> [] Int))) 0 (map (undefined::Int -> [] Int) (map (\a -> seq a 0) (undefined::[] Bool)))
(\a -> seq a (head ((++) (seq a (seq a (undefined::Int -> [] (([] Int) -> [] Int))) (head (undefined::[] Int))) (seq a (take (seq a (undefined::Int)) (seq a ([]::[] (([] Int) -> [] Int)))))))) (\a -> seq a ((\b -> seq b (seq a (undefined::Int -> Bool -> Bool))) (seq a (seq a (seq a ([]::[] ([] Bool)))))) (seq a ((\b -> seq b b) (seq a (seq a (seq a 1))))))
\a -> seq a (seq a (seq a (seq a (\b -> ([]::[] Int))))) (id (\b -> False) (seq a (\b -> seq a (undefined::Bool -> [] ([] ([] Bool)))) (\b -> seq b 0)))
\a -> a
(\a -> \b -> seq a ((undefined::(Int -> [] Bool) -> [] Int) (head (seq a (seq a (undefined::Bool -> [] (Int -> [] Bool)) (seq a False)))))) ((\a -> \b -> \c -> (+) (seq a (undefined::Int)) (seq c (seq a 2))) ((\a -> seq a (seq a (undefined::Bool))) (\a -> seq a (seq a (seq a (undefined::[] ([] Bool)))))))
\a -> map (seq a (case1 (head (undefined::[] (Bool -> ([] Bool) -> Int -> Int))) (seq a (seq a (\b -> seq b 2))) (seq a (seq a (seq a ([]::[] Bool)))))) (undefined::[] Int)
tail
\a -> case1 (undefined::([] ([] Int)) -> ([] ([] ([] Int))) -> [] Int) (case1 (\b -> seq a tail) (seq a (seq a a)) a) ((:) ([]::[] ([] Int)) ((:) ([]::[] ([] Int)) ([]::[] ([] ([] Int)))))
(undefined::(([] Int) -> Int) -> Bool -> ([] Int) -> [] Int) (\a -> (\b -> seq b (seq b (seq a 1))) ((:) ([]::[] (Int -> [] Bool)) ([]::[] ([] (Int -> [] Bool))))) (undefined::Bool)
(undefined::Int -> ([] Int) -> [] Int) ((\a -> seq a (\b -> seq b a) (seq a (id (undefined::([] Bool) -> Int)))) (undefined::Int))
(\a -> \b -> seq a (\c -> (undefined::Bool -> [] Int)) (seq a (seq b (undefined::Int))) (seq a (((==)::[Int] -> [Int] -> Bool) ([]::[] Int) b))) (\a -> \b -> case1 (seq a (undefined::Bool -> Int -> ([] Int) -> Bool) True) (undefined::Bool) (seq b (undefined::Bool -> [] Int) True))
\a -> seq a ((\b -> seq b (head (seq b (undefined::[] ((Int -> Bool -> Bool -> Bool) -> [] Int))))) (head (seq a ([]::[] (Int -> Bool))) (head a)) (case1 (\b -> seq b (undefined::([] Int) -> Int -> Bool -> Bool -> Bool)) (seq a (seq a (seq a (\b -> ((==)::Bool -> Bool -> Bool))))) a))
(\a -> head (seq a (undefined::[] ((Int -> Bool -> Bool) -> ([] Int) -> [] Int)))) ((undefined::(Bool -> Bool) -> Bool) ((!!) (undefined::[] (Bool -> Bool)) (undefined::Int))) ((undefined::Int -> ([] Bool) -> Int -> Bool -> Bool) ((-) 0 0) ((!!) ([]::[] (Int -> [] Bool)) (undefined::Int) (head ([]::[] Int))))
tail
\a -> seq a (case1 (head (undefined::[] (Bool -> ([] Bool) -> Bool -> [] Int))) (undefined::Bool -> [] Int) (seq a ([]::[] Bool)) (seq a (\b -> b) (seq a (seq a (\b -> seq b True)) (seq a (head a)))))
(undefined::([] Int) -> [] Int)
\a -> seq a (\b -> a) (seq a ((\b -> seq b (seq a ([]::[] (([] (([] ([] Int)) -> [] Int)) -> Int -> [] Int)))) (undefined::Int)))
\a -> map (\b -> seq b ((!!) a (case1 (undefined::([] Bool) -> ([] ([] Bool)) -> Int) (undefined::Int) (undefined::[] ([] Bool))))) (seq a (seq a (seq a (seq a (seq a (seq a (undefined::[] (([] ([] (([] ([] ([] Bool))) -> [] ([] ([] Bool))))) -> [] (Int -> Int)))))))))
(\a -> (undefined::(Int -> [] Bool) -> ([] Int) -> [] Int) ((undefined::Bool -> Int -> [] Bool) a)) (id (\a -> seq a (undefined::([] (([] Int) -> Bool)) -> Bool)) (even 0) (map (\a -> head ([]::[] (([] Int) -> Bool))) (undefined::[] (Bool -> Bool))))
(\a -> seq a (\b -> \c -> map (+1) (seq b c))) ((\a -> seq a (a (undefined::Int) (undefined::[] Int))) (\a -> head (seq a ([]::[] (([] Int) -> Int))))) ((:) ((undefined::(Bool -> Bool) -> [] ([] Bool)) (\a -> a)) (map (undefined::(Int -> Int -> Int) -> [] ([] Bool)) (undefined::[] (Int -> Int -> Int))))
(undefined::(([] ([] (Int -> Int))) -> ([] Bool) -> [] Bool) -> ([] Int) -> [] Int) (\a -> case1 (\b -> head (undefined::[] (([] Int) -> ([] Bool) -> [] Bool))) (seq a (undefined::Int -> ([] Bool) -> [] Bool) (seq a 1)) (seq a (seq a (head ([]::[] ([] Int))))))
head ([]::[] ((Int -> [] Int) -> ([] Int) -> [] Int)) (\a -> seq a (seq a (head (seq a ([]::[] ((([] (Int -> Bool)) -> Int -> Bool) -> [] Int))) (\b -> seq b (\c -> (\d -> d) (seq c False))))))
(\a -> seq a (\b -> b)) (\a -> seq a (\b -> seq b (\c -> ([]::[] (([] Int) -> Bool)))) (seq a (head ([]::[] Int))) (id False))
\a -> (undefined::(([] (([] ([] Int)) -> [] ([] ([] Int)))) -> ([] Int) -> [] Int) -> [] Int) (undefined::([] (([] ([] Int)) -> [] ([] ([] Int)))) -> ([] Int) -> [] Int)
case1 ((!!) ((\a -> seq a (seq a ([]::[] (Int -> ([] Int) -> [] Int)))) 1) ((undefined::(([] Bool) -> [] (Bool -> Bool)) -> Int) (\a -> head (seq a ([]::[] ([] (Bool -> Bool))))))) ((\a -> seq a (undefined::Int -> [] Int) 1) ((\a -> seq a (\b -> (undefined::[] ([] ([] Bool))))) (head (undefined::[] Int))))
(\a -> id (seq a (\b -> seq b b))) ((!!) ((undefined::(Int -> Int) -> [] (([] Int) -> [] ([] Bool))) (\a -> (+1) a)) (head ([]::[] (Bool -> Int)) (even 2)))
\a -> a
id (undefined::(([] Int) -> Int) -> (Bool -> Bool) -> ([] Int) -> [] Int) (\a -> case1 (seq a (undefined::Int -> ([] Int) -> Int)) (seq a (undefined::Int)) a) (\a -> False)
\a -> a
head ((\a -> seq a (seq a (seq a (undefined::[] ((([] Int) -> Int) -> ([] Int) -> [] Int))))) False) ((\a -> seq a (\b -> seq b head)) (not False) ((!!) (undefined::[] Int) 2))
\a -> (\b -> seq b (map (\c -> 0) (seq b (seq a ((++) ([]::[] (([] Int) -> [] (Int -> Bool))) ([]::[] (([] Int) -> [] (Int -> Bool)))))))) ((\b -> head (seq b (seq b (\c -> ([]::[] Bool)) ([]::[] ([] Bool))))) (seq a (\b -> (\c -> seq a (seq c 2)) (seq b (seq b (seq b ([]::[] (Int -> Int))))))))
(undefined::(([] ([] Bool)) -> [] ([] (Bool -> Bool))) -> ([] Int) -> [] Int) (id (\a -> \b -> (undefined::([] ([] Int)) -> [] ([] (Bool -> Bool))) (seq a ([]::[] ([] Int)))) (map (\a -> seq a (seq a (undefined::[] ([] Bool)))) (tail ([]::[] ([] (Int -> Bool))))))
(\a -> seq a (seq a (\b -> (undefined::([] Bool) -> ([] Int) -> [] Int) (seq b (seq a (undefined::[] Bool)))) (seq a (seq a (seq a (seq a (undefined::Bool -> [] (([] Bool) -> [] Bool))) (seq a (undefined::Bool))))))) ((!!) (undefined::[] (([] Int) -> ([] (Int -> Int)) -> Bool)) (id (undefined::Bool -> Int) (id False)))
(\a -> (undefined::(([] Int) -> [] (Int -> Bool)) -> ([] Int) -> [] Int) (\b -> seq a (undefined::[] (Int -> Bool)))) ((\a -> \b -> id (seq a (seq b (\c -> a (undefined::[] (Bool -> Bool)) (undefined::Bool))))) (\a -> (undefined::([] (Int -> Bool)) -> Bool -> Bool) (seq a (seq a (seq a (undefined::[] (Int -> Bool)))))))
\a -> map ((undefined::(Bool -> Bool) -> ([] ([] (Int -> Int))) -> Int) (id (\b -> seq a not) (seq a (seq a (seq a (undefined::Int)))))) ((\b -> seq b (map (\c -> seq c ([]::[] ([] (Int -> Int)))) (seq a (undefined::[] ([] ([] Bool)))))) ((!!) ([]::[] (([] (Bool -> Bool)) -> Bool -> Bool)) ((+1) 1)))
(\a -> seq a (\b -> tail)) (\a -> \b -> False) ((\a -> seq a (\b -> \c -> seq b b)) (\a -> not (seq a False)) ((+1) ((-) 1 1)))
(\a -> \b -> seq b (\c -> \d -> seq c b) (head b) (seq a (seq a (\c -> \d -> \e -> (undefined::Bool)) (seq a (tail (undefined::[] Bool)))))) (undefined::Int -> ([] ([] Int)) -> [] Int)
\a -> seq a (case1 (\b -> (undefined::([] (([] Int) -> Int -> Int)) -> [] Int)) a (undefined::[] (([] Int) -> Int -> Int)))
\a -> seq a (seq a a)
(\a -> \b -> seq a (map ((!!) (seq b (undefined::[] (Int -> Int))) (seq a 0)) b)) ((\a -> \b -> case1 (\c -> (undefined::([] Int) -> [] ([] Bool))) (seq a ([]::[] ([] Bool))) b) (\a -> case1 (undefined::Int -> ([] Int) -> [] (Bool -> Bool)) (seq a (undefined::[] (Bool -> Bool))) (seq a (undefined::[] Int))))
(\a -> id (seq a (\b -> (undefined::(([] (([] (Bool -> Bool)) -> Bool -> Bool)) -> Bool) -> [] Int) (undefined::([] (([] (Bool -> Bool)) -> Bool -> Bool)) -> Bool)))) (undefined::Int -> Bool)
\a -> (undefined::[] Int)
\a -> (undefined::[] Int)
\a -> tail ((\b -> seq a (\c -> map (\d -> b) ([]::[] Bool))) ((+) (seq a (seq a (undefined::Int))) 1) (case1 (seq a (\b -> \c -> b)) (id (seq a (undefined::([] Bool) -> Bool -> Bool)) (undefined::[] Bool))))
\a -> map (\b -> (+1) (seq b (case1 (undefined::Bool -> ([] Bool) -> Int -> Int) (undefined::Int -> Int) ([]::[] Bool) (seq b (\c -> seq b 0) (seq b (seq a a)))))) (seq a (id (seq a (seq a (seq a ([]::[] (([] (([] ([] Bool)) -> [] ([] (Bool -> Bool)))) -> Bool -> Bool -> Bool)))))))
\a -> map (\b -> (undefined::Bool -> Int) False) ((\b -> seq b (\c -> seq b ([]::[] ([] ([] Bool)))) b) (seq a (undefined::(([] Int) -> Int) -> Int) (\b -> seq a 2)))
(\a -> \b -> id (seq a (undefined::Int -> ([] Int) -> [] Int)) a) ((\a -> id (seq a (undefined::Int))) not) (\a -> seq a ((\b -> (!!) (seq a (seq a (undefined::[] ([] (Int -> Int))))) (seq b (seq b 1))) (seq a (head (undefined::[] (Int -> Bool))) (seq a 2))))
\a -> head (undefined::[] (Bool -> (([] Int) -> Int -> Int -> Bool) -> [] Int)) ((undefined::Int -> Bool) (head (seq a a))) (case1 (\b -> \c -> \d -> case1 (undefined::Bool -> ([] Bool) -> Int -> Bool) (undefined::Int -> Bool) ([]::[] Bool)) (seq a (seq a (\b -> (undefined::Int -> Int -> Bool)) (even 1))))
(undefined::(([] (Bool -> Bool)) -> [] (Bool -> Bool)) -> ([] Int) -> [] Int) (undefined::([] (Bool -> Bool)) -> [] (Bool -> Bool))
id (\a -> \b -> b) (\a -> seq a (seq a (\b -> \c -> seq a (undefined::([] Bool) -> [] Bool)) (seq a (seq a (undefined::[] Bool)))) (case1 (seq a (undefined::Int -> ([] Int) -> Bool)) False (seq a ([]::[] Int))))
(\a -> case1 take ((!!) (id ([]::[] ([] Int))) (seq a 2))) (head ((undefined::Bool -> Int -> [] (Int -> ([] Int) -> Bool)) (undefined::Bool) (head ((enumFromTo::Int -> Int -> [Int]) 0 1))))
head (id (undefined::[] ((([] (([] Int) -> Bool -> Bool)) -> ([] ([] Int)) -> [] Bool) -> ([] Int) -> [] Int))) (undefined::([] (([] Int) -> Bool -> Bool)) -> ([] ([] Int)) -> [] Bool)
\a -> seq a (\b -> seq a (\c -> map (undefined::Bool -> Int) (seq b (undefined::[] Bool))) ((:) 2)) (seq a ((\b -> seq a (head (seq b (undefined::[] ([] (([] Int) -> Bool)))))) (\b -> seq a (\c -> c) (b (seq b ([]::[] Int))))))
\a -> a
\a -> a
(undefined::([] Int) -> [] Int)
(\a -> \b -> seq a (\c -> \d -> d) (seq a (undefined::Bool))) ((\a -> seq a (seq a (seq a ([]::[] Int)))) (\a -> (undefined::[] Bool))) ((\a -> map (seq a (\b -> (undefined::[] Int))) (seq a (seq a ([]::[] ([] ([] Bool)))))) ([]::[] ([] (([] Int) -> Int -> Int -> Int))))
\a -> a
(\a -> \b -> seq a b) (undefined::Int)
head (head (tail ([]::[] ([] ((([] ([] (([] Int) -> Int -> Bool))) -> [] Bool) -> ([] Int) -> [] Int))))) ((\a -> \b -> seq a (seq b (seq b (undefined::([] (([] Int) -> Bool)) -> [] Bool)) (seq a ([]::[] (([] Int) -> Bool))))) ((-) (undefined::Int) (undefined::Int)))
\a -> (\b -> seq a (seq b (\c -> seq c (undefined::Bool -> [] Int))) (undefined::[] ([] Bool))) (undefined::Bool) ((\b -> seq b (seq b (b ([]::[] (([] Int) -> Int -> Int)))) (seq b (seq a (seq a 2)))) (\b -> seq a (\c -> seq a (seq a (\d -> True) (head a)))))
\a -> a
\a -> seq a (seq a (seq a (undefined::(([] Int) -> ([] ([] Bool)) -> [] ([] Bool)) -> [] Int)) ((\b -> \c -> \d -> (undefined::Bool -> [] ([] Bool)) (seq a (not b))) ((undefined::([] ([] Bool)) -> Bool) ((:) ([]::[] Bool) ([]::[] ([] Bool))))))
(undefined::(([] Int) -> Int -> Int -> Bool) -> ([] Int) -> [] Int) (undefined::([] Int) -> Int -> Int -> Bool)
\a -> case1 (seq a (\b -> \c -> seq b (seq b (undefined::([] Bool) -> [] Int))) (seq a (\b -> (undefined::Bool)) (seq a (seq a (undefined::Bool))))) a ((!!) (undefined::[] ([] Bool)) (seq a (seq a (seq a 0))))
(\a -> \b -> case1 (seq b (\c -> seq a (\d -> (undefined::[] Int)))) (seq a (undefined::Bool -> [] Int) False) b) (undefined::Int -> ([] (([] Bool) -> [] Bool)) -> [] (([] Bool) -> [] Bool))
(:) ((\a -> (\b -> case1 (\c -> (undefined::([] ([] Bool)) -> Int)) (seq b 2) (undefined::[] ([] Bool))) (seq a (undefined::Bool))) (\a -> tail (seq a a)))
(undefined::([] (([] (Int -> Int -> Bool)) -> Int)) -> ([] Int) -> [] Int) (id (\a -> seq a (seq a (id ([]::[] (([] (Int -> Int -> Bool)) -> Int))))) ((!!) ([]::[] (([] ([] Bool)) -> Bool)) (undefined::Int) (take (undefined::Int) (undefined::[] ([] Bool)))))
case1 ((\a -> seq a ((!!) (undefined::[] (Int -> ([] Int) -> [] Int)))) (not (undefined::Bool)) 1) ((\a -> seq a (head (undefined::[] (Bool -> [] Int)))) (head ([]::[] Bool)) (head (undefined::[] (Int -> Bool)) (undefined::Int)))
(undefined::Bool -> ([] Int) -> [] Int) ((!!) ([]::[] ((([] ([] Int)) -> [] Bool) -> Bool)) 1 (\a -> seq a (seq a (\b -> seq a (undefined::[] Bool)) (head (seq a ([]::[] ([] ([] (Int -> Int)))))))))
id (\a -> \b -> seq b (\c -> b) (seq a (\c -> \d -> ([]::[] (Int -> [] Int))) (seq b (seq a (seq a (undefined::Int)))))) (\a -> map (\b -> (undefined::Bool -> [] (([] ([] Int)) -> [] Bool)) (seq a (seq a False))) (map (\b -> \c -> (undefined::Bool)) (seq a (undefined::[] Bool))))
id
(undefined::(([] ([] Bool)) -> [] ([] Bool)) -> Int -> ([] Int) -> [] Int) (\a -> id a) ((\a -> case1 (seq a (undefined::Int -> ([] Int) -> Int)) (seq a (undefined::Int)) (seq a ([]::[] Int))) (\a -> case1 (seq a take) ([]::[] Int) (seq a (undefined::[] Int))))
(undefined::Int -> Bool -> ([] Int) -> [] Int) ((\a -> seq a (seq a (seq a (undefined::Int)))) (\a -> seq a (seq a (seq a a)))) ((!!) (undefined::[] ((([] ([] Bool)) -> [] Bool) -> Bool)) 2 ((\a -> seq a (undefined::([] ([] Bool)) -> [] Bool)) (\a -> seq a (seq a (seq a a)))))
\a -> (undefined::[] Int)
\a -> a
case1 ((\a -> \b -> seq a (seq b (\c -> \d -> seq d d))) (((==)::Int -> Int -> Bool) (undefined::Int) (undefined::Int))) ((\a -> seq a (\b -> seq a b)) ((\a -> seq a (undefined::Bool)) (head (undefined::[] Int)))) (case1 (id (:)) ([]::[] Bool) (head ([]::[] ([] Bool))))
\a -> (++) (tail (seq a ((:) (seq a ((\b -> seq b b) (undefined::Int))) (seq a a)))) (seq a (seq a (\b -> seq b (undefined::(([] Int) -> [] Int) -> [] Int)) (not (seq a True)) ((!!) (seq a ([]::[] (([] Int) -> [] Int))) 1)))
(undefined::([] Int) -> [] Int)
(\a -> \b -> seq a (seq a (undefined::Bool -> ([] Int) -> [] Int)) (seq a (not (undefined::Bool)))) (head (map id (undefined::[] Int))) (case1 (undefined::([] Int) -> ([] ([] Int)) -> [] Bool) ((++) ([]::[] Bool) ([]::[] Bool)))
\a -> a
head (undefined::[] ((([] (([] Int) -> ([] Int) -> [] Int)) -> ([] ([] Int)) -> [] Bool) -> ([] Int) -> [] Int)) (\a -> (undefined::([] ([] Int)) -> [] Bool))
(:) ((\a -> seq a (id ((!!) (seq a ([]::[] Int)) 1))) (\a -> (\b -> \c -> seq b (seq b (undefined::([] Int) -> Bool))) ((+) (undefined::Int) (undefined::Int))))
\a -> seq a (\b -> (:) ((+1) ((!!) (undefined::[] Int) (seq a (undefined::Int)))) a) (seq a (head ([]::[] ((Bool -> ([] Int) -> ([] Int) -> [] Bool) -> Bool)) (\b -> (undefined::Int -> ([] Int) -> ([] Int) -> [] Bool) (undefined::Int))))
\a -> ([]::[] Int)
(undefined::Bool -> ([] (([] ([] (Int -> Bool))) -> Int)) -> ([] Int) -> [] Int) (undefined::Bool) ((undefined::(Int -> [] (Int -> Int)) -> [] (([] ([] (Int -> Bool))) -> Int)) (\a -> head ([]::[] ([] (Int -> Int)))))
\a -> a
(undefined::([] Int) -> [] Int)
(\a -> seq a ((undefined::([] ([] Bool)) -> Int -> ([] Int) -> [] Int) (seq a (seq a (seq a (undefined::[] ([] Bool))))) ((undefined::(([] Int) -> Int -> [] ([] Bool)) -> Int) (\b -> \c -> seq b (undefined::[] ([] Bool)))))) (id (\a -> (!!) (seq a (seq a (seq a (undefined::[] ([] (Bool -> Bool)))))) 2))
case1 (\a -> (undefined::([] (Int -> Bool)) -> ([] Int) -> [] Int)) (\a -> a) (undefined::[] (Int -> Bool))
id
\a -> (undefined::(([] (Int -> Bool)) -> [] (Int -> Bool)) -> [] Int) (seq a ((\b -> seq b (seq b (\c -> head ([]::[] (Bool -> [] (Int -> Bool))) (seq a (undefined::Bool))))) ((-) 0 (seq a (undefined::Int)))))
\a -> seq a (id (\b -> a)) ((\b -> seq b (\c -> seq c (seq b (undefined::Bool -> [] (([] Int) -> Bool))) (seq b (seq a False)))) (seq a (seq a (\b -> (undefined::Int))) (seq a True)))
id
(undefined::(([] Int) -> [] ([] (([] ([] Int)) -> [] ([] ([] Int))))) -> ([] Int) -> [] Int) (case1 (undefined::Int -> ([] Int) -> [] ([] (([] ([] Int)) -> [] ([] ([] Int))))) (undefined::[] ([] (([] ([] Int)) -> [] ([] ([] Int))))))
(undefined::(([] (Bool -> Bool)) -> [] (Bool -> Bool)) -> ([] Int) -> [] Int) (\a -> map (\b -> seq b (\c -> (undefined::Bool -> Bool)) (seq b (undefined::Bool))) (undefined::[] ([] (Int -> Int))))
(\a -> seq a (\b -> id)) ((!!) ([]::[] Int) (head ([]::[] Int))) (\a -> map ((!!) (tail (undefined::[] (Bool -> Bool))) (seq a 0)) (seq a (head (undefined::[] (Bool -> [] Bool)) (seq a (seq a False)))))
\a -> head (seq a (seq a (seq a ([]::[] ((([] ([] Int)) -> Int -> [] ([] Int)) -> [] Int))))) (seq a (\b -> (!!) ([]::[] (([] ([] Int)) -> Int -> [] ([] Int))) ((+1) (undefined::Int))) ((\b -> seq b (tail ([]::[] (Int -> Int)))) (seq a False)))
\a -> seq a ((:) (seq a ((\b -> seq a (seq b id)) (seq a (seq a (seq a (undefined::Int)))) (seq a 1))) ((!!) (seq a (seq a (\b -> seq b ([]::[] ([] Int))) (seq a ([]::[] (([] Int) -> Int))))) (id (\b -> 0) (seq a (seq a (seq a True))))))
head ((!!) ((\a -> tail ((undefined::Bool -> [] ([] (([] Int) -> [] Int))) (seq a False))) ((undefined::Bool -> Int -> [] Bool) (not True))) ((undefined::Int -> Int) ((\a -> seq a (seq a (seq a (undefined::Int)))) (\a -> seq a (seq a (\b -> (undefined::Bool)))))))
\a -> id (seq a ((undefined::(Int -> Bool) -> (([] ([] Int)) -> [] ([] Int)) -> [] Int) ((undefined::(([] Int) -> Int -> Bool) -> Int -> Bool) (\b -> \c -> seq c (seq a False))))) ((undefined::(([] Int) -> ([] Int) -> [] Int) -> ([] ([] Int)) -> [] ([] Int)) (++))
(undefined::([] (([] Int) -> Bool)) -> ([] Int) -> [] Int) ([]::[] (([] Int) -> Bool))
(!!) (undefined::[] (Bool -> ([] Int) -> [] Int)) ((\a -> seq a (seq a (undefined::Int))) (\a -> a)) ((undefined::(Int -> Bool) -> Bool) (id (\a -> \b -> a) True))
\a -> a
\a -> seq a a
\a -> seq a (undefined::[] Int)
(\a -> a (a (\b -> b) (tail (undefined::[] (([] Int) -> [] ([] Int))))) ((undefined::Int -> [] (([] Int) -> [] ([] Int))) (seq a (head ([]::[] Int))))) (\a -> \b -> a)
(undefined::Bool -> (([] Int) -> Int -> [] Int) -> ([] Int) -> [] Int) (undefined::Bool) (head ((:) (id (id (\a -> seq a (undefined::Int -> [] Int)))) ((++) (undefined::[] (([] Int) -> Int -> [] Int)) ([]::[] (([] Int) -> Int -> [] Int)))))
(:) ((\a -> seq a (case1 (undefined::Bool -> ([] Bool) -> Bool -> Int) (seq a (undefined::Bool -> Int)) (seq a ([]::[] Bool)) (seq a ((undefined::Bool -> Bool) (undefined::Bool))))) (head (id ([]::[] (([] (Int -> [] Int)) -> Int -> Int -> [] Int)))))
case1 (id (\a -> \b -> (undefined::([] Bool) -> ([] Int) -> [] Int) (seq a a))) id ((undefined::(([] ([] ([] Int))) -> [] ([] ([] Int))) -> [] ([] Bool)) (\a -> a))
take ((\a -> seq a 1) ((\a -> (!!) (seq a (seq a (undefined::[] (([] ([] Int)) -> [] ([] Int))))) (seq a (seq a 0))) (\a -> seq a (seq a (seq a (undefined::([] ([] ([] Bool))) -> Bool)) (undefined::[] ([] ([] Bool)))))))
\a -> (\b -> seq b a) ((\b -> case1 (\c -> (undefined::([] Bool) -> Int)) (seq a 1) (seq b ([]::[] Bool))) (\b -> \c -> head (seq b (seq b (undefined::(([] Int) -> Int) -> [] Bool) (seq a (undefined::([] Int) -> Int))))))
\a -> a
tail
\a -> seq a (seq a (undefined::[] Int))
\a -> take 1 ([]::[] Int)
\a -> a
\a -> seq a (seq a a)
(undefined::(Bool -> ([] Int) -> ([] ([] ([] ([] Bool)))) -> [] ([] ([] Bool))) -> ([] Int) -> [] Int) (undefined::Bool -> ([] Int) -> ([] ([] ([] ([] Bool)))) -> [] ([] ([] Bool)))
(\a -> \b -> seq a (map (\c -> (+1) (seq a (seq c (seq c (undefined::Int))))) (seq a ([]::[] (([] ([] Int)) -> [] Bool))))) (\a -> (\b -> seq b (\c -> \d -> seq d (undefined::[] ([] (Int -> Int)))) (seq b (seq a (seq b (undefined::Int))))) (seq a (\b -> (undefined::Bool)) (seq a (seq a (seq a False)))))
(\a -> seq a (\b -> \c -> \d -> d)) True (undefined::Bool) True
id
(undefined::([] ([] Bool)) -> ([] Int) -> [] Int) ((\a -> (\b -> seq b (seq b (seq b (undefined::[] ([] Bool))))) (seq a (\b -> seq b (seq a (undefined::Bool))))) ((!!) (undefined::[] (([] ([] Int)) -> Bool)) 2 (filter (undefined::([] Int) -> Bool) (undefined::[] ([] Int)))))
(:) ((\a -> a) (case1 (\a -> seq a (\b -> id a)) ((+1) 0) ((undefined::Bool -> [] Int) (undefined::Bool))))
(\a -> (\b -> seq b (seq b (\c -> seq a tail) (a (seq a (undefined::[] (([] Int) -> ([] Int) -> [] Int)))))) (seq a (seq a ((\b -> seq b (seq a b)) (seq a False))))) ((undefined::Int -> ([] (([] Int) -> ([] Int) -> [] Int)) -> [] Bool) ((+) 2 (undefined::Int)))
\a -> seq a a
\a -> a
\a -> a
\a -> seq a (\b -> seq a a) (\b -> seq a ((!!) (tail (seq a (seq a ([]::[] (Int -> Bool -> Bool)))))) (seq b 0))
(\a -> (:) (case1 (undefined::Int -> ([] Int) -> Int) a (seq a (undefined::[] Int)))) ((undefined::Bool -> Int) True)
(undefined::([] Int) -> [] Int)
\a -> case1 (\b -> seq b (\c -> (undefined::([] ([] Bool)) -> [] Int)) (seq a (seq b (undefined::Int -> Int -> Int)) (seq a (seq a (undefined::Int))))) ([]::[] Int) ((!!) ((:) ([]::[] ([] Bool)) ([]::[] ([] ([] Bool)))) (seq a (seq a (seq a (undefined::Int)))))
(\a -> (\b -> (!!) (tail ([]::[] (([] Int) -> [] Int))) (seq b (a (undefined::([] Int) -> [] Bool)))) (seq a (seq a ((\b -> b) (undefined::Bool))))) (\a -> seq a (seq a 2))
(\a -> seq a ((!!) (seq a (id (undefined::Bool -> [] (([] Int) -> [] Int))) (seq a (seq a (seq a (undefined::Bool))))) (seq a (seq a (seq a (seq a (undefined::([] ([] Int)) -> Int)) (undefined::[] ([] Int))))))) (undefined::[] (([] (([] ([] Int)) -> [] Int)) -> Int -> Bool))
\a -> (\b -> map (\c -> seq a (\d -> seq b d) (seq a (seq c (undefined::Int)))) ((undefined::(Int -> [] Int) -> [] ([] ([] (Bool -> Bool)))) (\c -> a))) (\b -> head (head (tail ([]::[] ([] (([] (([] ([] Bool)) -> [] ([] (Bool -> Bool)))) -> Bool -> Bool))))))
(undefined::([] Int) -> [] Int)
id (\a -> head (seq a (undefined::[] (Bool -> [] Int))) (seq a (undefined::Bool)))
head ([]::[] ((([] Int) -> ([] (Bool -> Bool -> Bool)) -> Int -> Int) -> ([] Int) -> [] Int)) (undefined::([] Int) -> ([] (Bool -> Bool -> Bool)) -> Int -> Int)
(undefined::([] Int) -> [] Int)
tail
filter ((\a -> (\b -> seq a (seq a (seq b (\c -> even) (\c -> seq b (undefined::Int -> Int))))) ((!!) (tail ([]::[] (([] Int) -> ([] Int) -> Bool))) (seq a (seq a (undefined::Int))))) (id (undefined::(([] Int) -> [] (Int -> Int -> [] Int)) -> Bool) (undefined::([] Int) -> [] (Int -> Int -> [] Int))))
case1 (\a -> seq a (undefined::([] ([] ([] ([] Bool)))) -> ([] Int) -> [] Int)) (\a -> a) ((\a -> (\b -> seq b (undefined::[] ([] ([] ([] Bool))))) (seq a (seq a False))) (undefined::[] ([] Int)))
(!!) ([]::[] ((Int -> ([] Int) -> Int) -> ([] Int) -> [] Int)) ((+1) (id (undefined::(Int -> [] Bool) -> Int) (\a -> seq a (undefined::[] Bool)))) (undefined::Int -> ([] Int) -> Int)
\a -> (\b -> id (seq b (\c -> (++) a a))) (seq a (seq a (seq a (\b -> b)) (seq a (seq a (seq a (undefined::[] Bool)))))) (id (seq a (seq a (seq a (\b -> (++) ((undefined::Int -> [] ([] Bool)) (undefined::Int)) (seq a (seq a (id (undefined::[] ([] Bool))))))))))
id ((\a -> (\b -> seq b (seq a (seq a (undefined::Bool -> ([] Int) -> [] Int)))) (seq a (id (undefined::Int))) (seq a (undefined::([] (Int -> [] Int)) -> Bool) ([]::[] (Int -> [] Int)))) ((\a -> \b -> (\c -> seq a (\d -> c)) a) (case1 (undefined::([] Bool) -> ([] ([] Bool)) -> Bool) (undefined::Bool) ([]::[] ([] Bool)))))
\a -> ([]::[] Int)
(\a -> (undefined::((Int -> Bool) -> Int) -> ([] Int) -> [] Int) (seq a (\b -> \c -> 2) (head (seq a ([]::[] Int))))) ((undefined::([] (([] Int) -> Bool)) -> ([] Int) -> [] (Int -> Bool)) (id (\a -> seq a (undefined::[] (([] Int) -> Bool))) (\a -> id a)))
(\a -> seq a (\b -> \c -> c) (\b -> seq a (undefined::(Int -> Int -> Bool) -> Bool -> Bool) (\c -> a (undefined::[] Int) c))) (\a -> (undefined::Int -> Int -> Int -> Bool) (seq a ((+1) (id (undefined::(([] Int) -> Int -> Bool) -> Int) (head (undefined::[] (([] Int) -> Int -> Bool)))))))
\a -> id (\b -> \c -> seq b (\d -> a) (id (undefined::([] ([] Int)) -> Bool))) (seq a (seq a (seq a (\b -> 1)) (seq a (seq a (\b -> ([]::[] Bool)))))) (seq a ((undefined::Int -> ([] ([] ([] Int))) -> [] ([] ([] Int))) (seq a (seq a (\b -> seq b (undefined::Int))) (head a))))
\a -> a
tail
\a -> (\b -> seq a (\c -> seq a (\d -> a) (seq c (seq b not)))) (seq a (\b -> seq a 2) (\b -> tail (seq b ([]::[] (([] Int) -> Bool))))) (map (\b -> seq b (\c -> ([]::[] Int)) ((+1) (undefined::Int))) ((undefined::([] (([] Bool) -> [] Bool)) -> [] (Int -> Int)) (seq a (tail ([]::[] (([] Bool) -> [] Bool))))))
\a -> seq a ((\b -> seq b (seq b (\c -> \d -> seq d a) b)) (seq a (\b -> seq b b) (not (seq a (undefined::Bool)))) False)
(\a -> \b -> seq a (\c -> \d -> d)) (undefined::Int) ((\a -> seq a (seq a (seq a (undefined::Bool)))) (\a -> a)) (not ((\a -> \b -> a) (even 2) (undefined::Int)))
(!!) (id (undefined::[] ((Int -> Bool -> Bool) -> ([] Int) -> [] Int))) (undefined::Int) (\a -> seq a (undefined::Bool -> Bool -> Bool) (seq a (id (seq a (undefined::(Int -> Int) -> Bool)) (\b -> seq b (seq b a)))))
\a -> (\b -> map (\c -> case1 (undefined::Bool -> ([] Bool) -> Int) (undefined::Int) ([]::[] Bool)) (seq b (head (undefined::[] (Bool -> [] (([] Int) -> Bool)))) (seq a (id (undefined::Bool))))) ((\b -> seq b (undefined::Int -> ([] (Int -> Int)) -> Int -> Int) (seq a 1)) (seq a (\b -> seq b (undefined::Bool)) (\b -> \c -> seq a (undefined::[] ([] Int)))))
(\a -> seq a (\b -> \c -> c) (seq a (id (\b -> (undefined::[] (Int -> Int))) (not a)))) ((\a -> \b -> seq a b) ((:) (undefined::([] Int) -> Bool) ([]::[] (([] Int) -> Bool))) True)
(undefined::([] Int) -> [] Int)
\a -> seq a (seq a (seq a (seq a (\b -> ([]::[] Int)))) (undefined::([] ([] Int)) -> ([] Int) -> [] Bool))
(undefined::([] (([] ([] ([] (Int -> Int)))) -> Int -> [] Int)) -> ([] Int) -> [] Int) (id (\a -> seq a (undefined::[] (([] ([] ([] (Int -> Int)))) -> Int -> [] Int))) ((\a -> seq a (seq a (seq a False))) (head (undefined::[] (Int -> Bool)))))
case1 (head ([]::[] (Bool -> ([] Bool) -> ([] Int) -> [] Int))) (take (case1 (\a -> \b -> 2) (undefined::Int) ([]::[] ([] Int)))) ((\a -> (\b -> seq b ([]::[] Bool)) (\b -> seq a False)) (id (head (undefined::[] ([] (Int -> Int))))))
(\a -> \b -> seq a ((\c -> seq c (\d -> seq b b) (seq b (undefined::Int))) (seq a (id (seq a (seq a ([]::[] (([] (Int -> ([] Int) -> Int)) -> Int)))))))) ((undefined::Int -> ([] Int) -> [] (([] ([] ([] Bool))) -> [] ([] ([] Bool)))) (id (case1 (undefined::Int -> ([] Int) -> Int) (undefined::Int) (undefined::[] Int))))
(\a -> seq a (\b -> seq b (\c -> c)) (seq a (take (seq a (seq a (undefined::Int))) (seq a (seq a ([]::[] (Int -> Int))))))) (\a -> ((==)::Bool -> Bool -> Bool) (seq a (seq a ((\b -> seq b (seq b (undefined::Bool))) (seq a (seq a ([]::[] Bool)))))))
id (\a -> seq a (seq a (\b -> seq a (\c -> (undefined::([] Int) -> [] Int)) (\c -> c))) (map (seq a (\b -> (undefined::Int -> [] Int))) (head ([]::[] ([] Bool))))) ((\a -> seq a (seq a (\b -> \c -> seq b id))) ((undefined::Bool -> Int) (head (undefined::[] Bool))))
\a -> a
(undefined::(([] Int) -> [] (Int -> Int)) -> ([] Int) -> [] Int) (\a -> seq a (seq a (seq a (seq a (map (\b -> \c -> c) (seq a (seq a (seq a (seq a ([]::[] (Int -> Bool)))))))))))
\a -> a
(undefined::(([] (Bool -> Bool)) -> [] (Bool -> Bool)) -> ([] Int) -> [] Int) (\a -> map (\b -> seq a (\c -> False)) (id (\b -> ([]::[] (([] Int) -> [] Int))) (seq a (seq a (seq a (undefined::Int))))))
\a -> a
case1 (\a -> \b -> \c -> c) (\a -> seq a (seq a (seq a (undefined::(([] Int) -> Bool) -> [] Int))) (seq a (undefined::([] Int) -> Bool))) (take ((\a -> seq a a) (undefined::Int)) ((\a -> seq a ([]::[] Bool)) (undefined::Bool)))
\a -> a
filter ((\a -> \b -> seq a (seq b True)) (\a -> id (id ([]::[] (([] (Int -> ([] Int) -> Int)) -> Int -> ([] Int) -> Int)))))
\a -> case1 ((\b -> seq b take) (seq a (\b -> (undefined::([] Int) -> Int)) (undefined::Int))) a a
(\a -> \b -> (\c -> seq b (c (seq c (seq b (undefined::Int))) (undefined::Int))) (seq a (\c -> seq a (\d -> (undefined::Int -> [] Int))) (seq b (id (undefined::[] Bool))))) (\a -> seq a (undefined::[] (Bool -> Bool)))
\a -> seq a ([]::[] Int)
\a -> (\b -> seq b (undefined::Int -> (Int -> Int) -> [] Int) (seq b (seq a (seq a 2))) (seq b ((!!) (head (head (seq b (undefined::[] ([] ([] Int))))))))) (undefined::([] ([] (([] Bool) -> [] Bool))) -> [] (([] ([] (Int -> [] Int))) -> [] ([] (Int -> [] Int))))
(undefined::([] Int) -> [] Int)
\a -> a
(\a -> \b -> case1 (\c -> \d -> seq b b) b ((undefined::Bool -> [] (Int -> Int)) (seq a True))) ((\a -> seq a (\b -> (+1))) (\a -> (\b -> seq b (seq b (seq b ([]::[] Bool)))) (seq a (seq a (seq a (undefined::Int))))))
map ((\a -> id (seq a (seq a (seq a (\b -> seq a (+1)))))) ((\a -> seq a (not (undefined::Bool))) (undefined::[] ([] Int))) (-))
(\a -> seq a (\b -> \c -> \d -> ([]::[] Int)) (seq a (seq a (undefined::Bool)))) (map (undefined::([] Bool) -> Bool)) (not (((==)::[Int] -> [Int] -> Bool) (id ((undefined::Int -> [] Int) 1)) (id (undefined::(Int -> [] Int) -> [] Int) (\a -> seq a (seq a (undefined::[] Int))))))
\a -> seq a (\b -> map (\c -> (undefined::Int)) (id ((\c -> seq c (undefined::[] ([] ([] Bool)))) (seq b (undefined::Int))))) (seq a (seq a (\b -> (!!) ([]::[] (Int -> Bool)) (seq a (undefined::Int)))))
(\a -> \b -> (enumFromTo::Int -> Int -> [Int]) (head (undefined::[] (Bool -> Int)) (seq b (undefined::Bool))) (id (seq b (seq b (\c -> (undefined::Int)) (seq a (undefined::Bool)))))) (\a -> ([]::[] Int))
case1 ((\a -> \b -> seq a (\c -> seq c c)) (\a -> a)) (undefined::[] Int)
\a -> a
(\a -> seq a ((undefined::(Bool -> Bool) -> Int -> ([] Int) -> [] Int) (\b -> seq b (seq a (seq a a))) (seq a (seq a (seq a (id 2)))))) ((\a -> odd ((+1) (a (undefined::[] Int) (undefined::Int) (undefined::Int)))) ((\a -> \b -> \c -> seq a (\d -> a)) (head ([]::[] Int))))
\a -> ([]::[] Int)
(\a -> \b -> (\c -> seq b (seq c (\d -> b)) (seq a (seq b (seq b 2)))) ((||) False (seq a (seq a False)))) ((\a -> \b -> seq a (seq b (undefined::[] ([] Int)))) (\a -> seq a (case1 (\b -> (undefined::([] Int) -> [] Bool)) (seq a ([]::[] Bool)) (seq a (undefined::[] Int)))))
case1 ((!!) ((\a -> seq a (undefined::[] (Int -> ([] Int) -> [] Int))) (head (undefined::[] Int))) (id ((\a -> seq a 2) (\a -> seq a False)))) ((:) ((+) (head ([]::[] Int)) 0) ((\a -> a) ([]::[] Int)))
\a -> seq a (id (seq a (\b -> seq a (seq b a)))) (seq a (seq a (\b -> (undefined::([] (Int -> Bool)) -> [] (Int -> Int)) (seq a (seq a (undefined::[] (Int -> Bool)))))) (seq a (seq a (\b -> seq b (++)) (seq a (undefined::Int)))))
(\a -> seq a (head (map (undefined::(Int -> [] Bool) -> ([] Int) -> [] Int) (id (undefined::([] Bool) -> [] (Int -> [] Bool)) (seq a ([]::[] Bool)))))) (head (head (id ([]::[] ([] (([] (([] ([] Int)) -> [] ([] Int))) -> ([] ([] ([] (Bool -> Bool)))) -> Bool))))))
(undefined::([] Int) -> [] Int)
(\a -> \b -> seq a (map (\c -> (undefined::Int)) (seq b (undefined::[] (([] (([] Int) -> ([] Int) -> [] Bool)) -> [] Bool))))) ((\a -> \b -> seq a (\c -> \d -> head (head (seq d ([]::[] ([] ([] ([] Bool)))))))) ((\a -> (+1) (seq a (undefined::Int))) (not False)))
map (id ((\a -> seq a (\b -> seq a b)) (\a -> (undefined::(([] Int) -> Int -> [] ([] (Int -> Int))) -> Int -> [] Int) (id (\b -> (!!) ([]::[] (Int -> [] ([] (Int -> Int)))) (seq a (seq b (undefined::Int))))))))
\a -> seq a (\b -> seq b (seq b a)) (\b -> (\c -> \d -> head ((undefined::Bool -> [] (([] Int) -> [] (Bool -> Bool))) c)) (seq a (not (seq a (undefined::Bool)))))
\a -> (undefined::Bool -> ([] (Bool -> Bool)) -> [] Int) ((!!) (undefined::[] ((Int -> [] ([] Bool)) -> Bool)) (undefined::Int) ((!!) (seq a ([]::[] ([] ([] Bool)))))) ([]::[] (Bool -> Bool))
\a -> seq a ((undefined::(Bool -> Bool -> Bool) -> (([] Int) -> [] (Int -> Bool)) -> [] Int) (\b -> \c -> b) (seq a (\b -> \c -> seq b (\d -> seq c (undefined::[] (Int -> Bool))) (undefined::([] Int) -> Bool)) (\b -> False)))
tail
\a -> seq a (case1 (\b -> case1 (\c -> (undefined::([] Bool) -> [] Int)) a) (case1 (seq a (undefined::([] Bool) -> ([] ([] Bool)) -> [] Int)) a (seq a (seq a (undefined::[] ([] Bool))))) (seq a (map even ([]::[] Int))))
(!!) (head ((:) (\a -> seq a (undefined::[] (([] Int) -> [] Int))) (undefined::[] (Int -> [] (([] Int) -> [] Int)))) 1) (undefined::Int)
tail
\a -> a
\a -> map (id (seq a (\b -> 1))) (seq a (seq a (map (\b -> (undefined::[] (([] ([] (Bool -> Bool))) -> Int -> [] Int))) a)))
id
head ((undefined::(([] Bool) -> Bool) -> [] (([] Int) -> [] Int)) (\a -> seq a (undefined::(([] ([] (([] Int) -> [] (Int -> Bool)))) -> [] Bool) -> Bool) (\b -> (undefined::Bool -> [] Bool) (undefined::Bool))))
(undefined::(([] (([] Int) -> Bool -> Bool -> Bool)) -> Int -> Int -> Int) -> ([] Int) -> [] Int) (undefined::([] (([] Int) -> Bool -> Bool -> Bool)) -> Int -> Int -> Int)
\a -> case1 ((undefined::([] (Bool -> Bool)) -> Bool -> ([] Bool) -> [] Int) (seq a ([]::[] (Bool -> Bool)))) a (map (\b -> seq b (seq b (seq a True))) (seq a (head ([]::[] ([] ([] ([] Bool)))))))
(\a -> (\b -> seq b (\c -> \d -> seq d d)) (seq a (id (undefined::Int))) (seq a (seq a (\b -> a) (seq a (\b -> seq b ([]::[] ([] ([] (Int -> Int))))))))) ((!!) (undefined::[] ((Bool -> Int) -> Int)) (undefined::Int) (id (\a -> (undefined::([] Bool) -> Int) (seq a (seq a ([]::[] Bool))))))
(++) (case1 (\a -> \b -> take (undefined::Int) (seq a (seq a (seq b (undefined::[] Int))))) ((undefined::(([] Int) -> [] ([] (Bool -> Bool))) -> [] Int) ((undefined::Bool -> ([] Int) -> [] ([] (Bool -> Bool))) True)) (id (\a -> seq a ([]::[] ([] (Bool -> Bool)))) (\a -> ([]::[] Int))))
\a -> a
(\a -> take ((\b -> seq b (seq b (\c -> (undefined::Int))) (seq b (seq a (seq b (undefined::Int -> Int -> Int))))) (undefined::[] ([] Int)))) tail
\a -> (\b -> seq a (\c -> (undefined::([] ([] (Bool -> Bool))) -> [] Int) (seq c (seq c (seq b ([]::[] ([] (Bool -> Bool))))))) (\c -> seq b (\d -> \e -> (undefined::Int -> Int -> Bool)) c)) (\b -> (undefined::Bool))
head (undefined::[] ((([] Int) -> (([] ([] Int)) -> [] ([] Int)) -> [] ([] ([] Bool))) -> ([] Int) -> [] Int)) (undefined::([] Int) -> (([] ([] Int)) -> [] ([] Int)) -> [] ([] ([] Bool)))
(undefined::(([] Int) -> ([] (([] Int) -> ([] Int) -> [] Bool)) -> Int -> [] Bool) -> ([] Int) -> [] Int) (id (\a -> (undefined::([] (([] Int) -> ([] Int) -> [] Bool)) -> Int -> [] Bool)))
id
(\a -> seq a (id (\b -> \c -> c))) ((!!) ([]::[] (Int -> Int)) 1 1) (\a -> (\b -> (\c -> seq a (seq a (seq c (undefined::[] ([] Bool))))) (seq b (seq b (seq a (undefined::Bool))))) (seq a (seq a (\b -> (undefined::([] Int) -> [] (Int -> Bool))) 2)))
id
(undefined::([] (Int -> Int)) -> (Int -> Int -> Int) -> ([] Int) -> [] Int) ([]::[] (Int -> Int)) (\a -> (\b -> seq b ((undefined::([] Int) -> Int -> Int) (seq b (seq b ([]::[] Int))))) (seq a ((\b -> \c -> b) (seq a ([]::[] Bool)))))
(\a -> seq a (\b -> ([]::[] Int))) ((\a -> seq a (\b -> seq b (a (undefined::Int) b 1 0))) (\a -> seq a (\b -> \c -> seq a (undefined::Int -> Int -> Bool)) (not (seq a False))))
(\a -> case1 (seq a (\b -> \c -> \d -> (undefined::[] Int))) ((undefined::([] Bool) -> ([] Int) -> [] Int) (seq a (undefined::[] Bool))) (seq a (seq a ([]::[] Int)))) (\a -> (\b -> seq a (map (\c -> ([]::[] Bool)) (seq b (undefined::[] Bool)))) (seq a (seq a (\b -> seq a (seq b (undefined::([] Bool) -> Int -> Int)) (seq b (seq b ([]::[] Bool)))))))
\a -> a
\a -> seq a a
(undefined::(([] (([] ([] Int)) -> [] ([] ([] Int)))) -> Int -> Int) -> ([] Int) -> [] Int) (\a -> \b -> seq a b)
case1 (\a -> case1 (\b -> (undefined::([] Bool) -> ([] Int) -> [] Int)) (seq a (undefined::Bool -> ([] Int) -> [] Int) False) ((\b -> seq b ([]::[] Bool)) (undefined::Int))) (id (undefined::([] (Int -> Bool)) -> Bool -> [] Int) ([]::[] (Int -> Bool)) (case1 (\a -> (undefined::([] ([] Int)) -> Bool)) True ([]::[] ([] Int))))
\a -> a
(undefined::(([] ([] Int)) -> [] ([] (Int -> Bool))) -> ([] Int) -> [] Int) (id (\a -> seq a (undefined::(([] ([] Bool)) -> [] Bool) -> [] ([] (Int -> Bool))) (\b -> tail ((!!) ([]::[] ([] Bool)) (seq a (seq a (undefined::Int)))))))
filter (undefined::Int -> Bool)
\a -> (undefined::[] Int)
\a -> (undefined::(([] Int) -> [] (Bool -> Bool)) -> [] Int) (\b -> (!!) (seq a (seq a (seq a ((\c -> seq c (undefined::[] ([] (Bool -> Bool)))) (seq b (undefined::[] ([] Int))))))) ((+1) ((-) (seq b (undefined::Int)) (seq b (undefined::Int)))))
case1 (\a -> seq a (\b -> \c -> \d -> seq c ([]::[] Int)) a (seq a (id (undefined::(([] Bool) -> [] Int) -> Bool)) (seq a (seq a (seq a (undefined::([] Bool) -> [] Int)))))) ((\a -> seq a (\b -> seq b ([]::[] Int)) (seq a (seq a (undefined::Bool)))) (\a -> seq a ((\b -> seq b (seq b (undefined::Int -> ([] Int) -> Bool))) (seq a ([]::[] ([] Int))))))
case1 (\a -> (\b -> \c -> seq a (\d -> seq b (seq c d))) a) ((undefined::((([] Int) -> [] Bool) -> Int) -> ([] Int) -> [] Int) ((!!) (undefined::[] ((([] Int) -> [] Bool) -> Int)) 1)) ([]::[] Int)
\a -> a
\a -> a
(\a -> \b -> seq a (seq b (seq b (map (seq a (\c -> seq c (seq a (seq a 1)))) (seq b (seq a (seq b (seq a (undefined::[] (([] ([] ([] Bool))) -> [] ([] Bool))))))))))) (\a -> (undefined::([] Int) -> Bool))
\a -> a
(undefined::([] (([] Bool) -> [] Bool)) -> ([] Int) -> [] Int) ([]::[] (([] Bool) -> [] Bool))
id
(\a -> \b -> take ((undefined::(([] Int) -> [] Bool) -> Int) (seq b (\c -> seq c ([]::[] Bool)))) ((undefined::Bool -> [] Int) (seq a (seq a (undefined::Bool))))) ((undefined::Int -> Bool -> Int) ((+1) 0))
(\a -> \b -> seq b (a (seq b b) ([]::[] (([] ([] Int)) -> [] ([] (Int -> Int)))) (seq a head (seq b (undefined::[] ([] Int)))))) (undefined::([] Int) -> ([] (([] ([] Int)) -> [] ([] (Int -> Int)))) -> ([] Int) -> [] Int)
(undefined::(([] Bool) -> Bool) -> Bool -> ([] Int) -> [] Int) (head ((\a -> seq a (seq a ([]::[] (([] Bool) -> Bool)))) (not (undefined::Bool)))) ((\a -> (undefined::(([] ([] Int)) -> [] Int) -> Bool) (seq a (\b -> seq a (seq b ([]::[] Int))))) (\a -> (undefined::[] (Int -> ([] Int) -> [] Int))))
\a -> seq a a
tail
(!!) ([]::[] (([] Int) -> [] Int)) (undefined::Int)
take (undefined::Int)
\a -> (\b -> b (b a (undefined::Int) 1) (seq b (head a)) 1) (\b -> seq b (\c -> (enumFromTo'::Int -> Int -> [Int])) ((undefined::Bool -> ([] Bool) -> [] (Bool -> Bool)) (seq b (seq a (undefined::Bool)))))
(\a -> seq a (\b -> (\c -> (!!) (seq b (seq c ([]::[] ([] Int)))) (seq c (seq b (undefined::Int)))) (seq a ((undefined::Bool -> [] (([] Int) -> [] Int)) (seq b (seq b (undefined::Bool))))))) (undefined::([] ([] (Int -> Bool))) -> [] (Int -> Bool))
id (\a -> (undefined::([] Int) -> [] Int)) (\a -> seq a (\b -> seq a ((undefined::Int -> [] (([] ([] Bool)) -> [] ([] Bool))) (seq b (seq a (undefined::Int))))) (seq a (seq a (id (undefined::Bool -> ([] ([] Int)) -> [] Bool) (seq a False)))))
\a -> a
\a -> a
(undefined::([] Int) -> [] Int)
id (\a -> \b -> (undefined::[] Int)) (\a -> seq a (undefined::([] Int) -> [] ([] Int)))
head (map (\a -> case1 (\b -> \c -> seq a (\d -> (undefined::[] Int)) (seq a (seq c (undefined::[] ([] (Bool -> Bool)))))) (seq a (seq a (undefined::Int -> [] Int)) (seq a (seq a 2)))) ((!!) (undefined::[] ([] (([] Int) -> ([] Int) -> [] ([] Int)))) ((undefined::Int -> Int) (undefined::Int))))
\a -> (\b -> seq a (id (\c -> a) (id (seq a (\c -> seq b (seq b (undefined::([] Bool) -> [] Bool))))))) (id (undefined::(([] ([] ([] Bool))) -> [] ([] ([] Bool))) -> ([] Int) -> Int) (seq a (seq a (\b -> map (seq a (undefined::Int -> [] ([] Bool))) (seq b a)))))
case1 (\a -> \b -> b) ((undefined::([] (([] (([] Int) -> [] ([] Bool))) -> Int -> Bool)) -> [] Int) ([]::[] (([] (([] Int) -> [] ([] Bool))) -> Int -> Bool)))
(\a -> seq a (\b -> seq a (seq a (\c -> c)))) (head (take (undefined::Int) ([]::[] (([] ([] Bool)) -> [] Bool)))) (map (id (undefined::(([] ([] Bool)) -> [] ([] (Bool -> Bool))) -> [] Int)) (id (id (undefined::[] (([] ([] Bool)) -> [] ([] (Bool -> Bool)))))))
\a -> a
(\a -> (\b -> (!!) (seq a (seq b b)) (seq a (seq b (undefined::Int)))) (map (\b -> seq a tail) (seq a (seq a ([]::[] Int))))) (head ([]::[] (Int -> Bool)) ((+) ((+1) (undefined::Int)) (undefined::Int)))
(!!) (head (undefined::[] ([] ((Int -> Bool -> Bool) -> ([] Int) -> [] Int)))) ((\a -> seq a (seq a (undefined::Int))) (odd 0)) ((undefined::(([] Int) -> [] ([] Int)) -> Int -> Bool -> Bool) ((\a -> \b -> seq a (seq a ([]::[] ([] Int)))) odd))
\a -> (!!) (id (seq a (seq a (undefined::[] ((([] ([] Int)) -> [] ([] Bool)) -> [] Int))))) (seq a (seq a (\b -> b)) (seq a (undefined::Int))) (\b -> seq a (seq b (undefined::(Bool -> Int) -> Int -> [] ([] Bool))) (\c -> 1) (seq b (seq b (\c -> 0)) (undefined::Int -> [] Int)))
(\a -> \b -> (!!) (head (undefined::[] ([] (Bool -> [] Int)))) (seq a (seq a 1)) (seq a (seq b (seq b ((\c -> c (undefined::Int)) (\c -> False)))))) (id (undefined::([] (([] (Bool -> Bool)) -> Bool -> Bool)) -> Bool))
(undefined::([] Int) -> [] Int)
head ((\a -> seq a (undefined::[] (Bool -> ([] Int) -> [] Int))) ((\a -> seq a (undefined::Bool)) ((!!) (undefined::[] ([] Int))))) ((\a -> \b -> seq a (seq a False)) (\a -> seq a (seq a (seq a (undefined::Bool)))) ((\a -> seq a (seq a (seq a ([]::[] ([] (Int -> Bool)))))) (head ([]::[] Int))))
\a -> (++) (head (seq a ((\b -> seq b (\c -> (undefined::[] ([] Int)))) (id 1) (seq a (head (seq a (seq a (undefined::[] (Int -> [] Int))))))))) ([]::[] Int)
(++) (undefined::[] Int)
\a -> ([]::[] Int)
(++) (id (\a -> \b -> seq a (\c -> (undefined::[] Int)) (undefined::Bool)) (case1 (\a -> (undefined::([] ([] Int)) -> Bool)) (undefined::Bool) ([]::[] ([] Int))) (\a -> seq a (undefined::([] (Int -> [] Int)) -> [] ([] Bool)) (map (seq a (seq a (undefined::Bool -> Int -> [] Int))) (seq a (undefined::[] Bool)))))
\a -> seq a (seq a a)
\a -> (\b -> seq a (seq b (seq b (undefined::Bool -> Int -> [] Int))) True) (\b -> (undefined::Int -> ([] ([] Bool)) -> [] ([] Bool)) b) (seq a (seq a (seq a (seq a (seq a (undefined::(([] Bool) -> Bool) -> Int -> Int)) (undefined::([] Bool) -> Bool))) (seq a (undefined::(Bool -> ([] ([] ([] Bool))) -> Int) -> Int) (seq a (\b -> \c -> seq b 1)))))
(\a -> (undefined::(Int -> ([] Int) -> Int) -> ([] Int) -> [] Int) ((\b -> seq b (\c -> \d -> seq b c)) (seq a (\b -> seq a (seq b True))))) (undefined::Int -> Int -> Int -> Int)
\a -> seq a (seq a (undefined::(([] (Bool -> Bool)) -> Bool -> Bool) -> Bool -> [] Int)) (seq a (seq a (\b -> seq b (undefined::([] (Bool -> Bool)) -> Bool -> Bool)) (seq a (undefined::Bool)))) (seq a (seq a (\b -> b (seq b (seq b (undefined::Bool -> Int) (seq b True)))) (seq a (\b -> \c -> seq a False) (undefined::Int))))
\a -> seq a (seq a a)
(\a -> seq a (seq a (head (seq a ((++) ([]::[] (Int -> ([] Int) -> [] Int)) (undefined::[] (Int -> ([] Int) -> [] Int)))) 1))) (\a -> (\b -> seq b (\c -> \d -> seq c d)) (undefined::Bool) (\b -> 2))
(\a -> head (seq a ((!!) ([]::[] (Bool -> [] (([] Int) -> [] Int))) 1) (seq a (seq a True)))) ((undefined::Bool -> [] (([] ([] ([] (Int -> Int)))) -> [] ([] ([] (Int -> Int))))) ((\a -> seq a (even 2)) (undefined::[] Bool)))
case1 (\a -> \b -> b) ((\a -> seq a (seq a (\b -> seq a (undefined::[] Int)) (\b -> seq b odd))) ((\a -> seq a (seq a (seq a 1))) (\a -> id)))
case1 (\a -> seq a (\b -> seq a (\c -> seq b (seq b id)) (seq b (\c -> seq c (seq a c))))) (\a -> a) ((\a -> seq a (\b -> ([]::[] ([] ([] ([] Bool))))) (seq a (\b -> b))) ([]::[] ([] (Int -> Bool))))
(\a -> case1 (\b -> \c -> (++) (seq a ([]::[] Int))) (\b -> b) ((undefined::([] Int) -> [] Bool) (seq a ([]::[] Int)))) (\a -> \b -> \c -> (\d -> \e -> seq d True) c a)
(undefined::(([] (([] ([] ([] Int))) -> [] ([] ([] Bool)))) -> ([] Int) -> ([] Bool) -> [] Bool) -> ([] Int) -> [] Int) (head (id ([]::[] (([] (([] ([] ([] Int))) -> [] ([] ([] Bool)))) -> ([] Int) -> ([] Bool) -> [] Bool))))
(\a -> case1 (seq a (seq a (undefined::Int -> ([] Int) -> ([] Int) -> [] Int))) (\b -> b) (seq a (seq a (seq a (seq a ([]::[] Int)))))) ((undefined::([] ([] ([] (([] ([] Bool)) -> [] ([] Bool))))) -> Int) (id (undefined::[] ([] ([] (([] ([] Bool)) -> [] ([] Bool)))))))
case1 (\a -> seq a (seq a (seq a (undefined::Bool -> ([] Bool) -> ([] Int) -> [] Int)) (seq a (seq a (seq a a))))) (\a -> seq a (seq a (undefined::Bool -> Int -> [] Int)) (not True) (seq a (\b -> (undefined::Int)) (seq a ([]::[] Bool)))) (undefined::[] Bool)
\a -> a
\a -> map (id (\b -> head ([]::[] (Int -> Int))) (\b -> (\c -> seq c (undefined::[] ([] Bool))) (seq a (map (undefined::Bool -> Int -> Int))))) a
head (head ((\a -> seq a (seq a (\b -> (\c -> seq c ([]::[] ([] (([] Int) -> [] Int)))) (seq b (seq a (undefined::Int))))) (seq a (seq a (a (undefined::([] Int) -> Bool -> Bool) (undefined::[] (Int -> Bool)) (seq a 2))))) (\a -> \b -> \c -> seq b (case1 (seq a (undefined::Int -> ([] Int) -> Bool)) (even c) (seq a (tail (undefined::[] Int)))))))
(\a -> seq a (seq a (\b -> seq a (seq a (\c -> id) (undefined::Int))) ((undefined::Int -> ([] (([] Int) -> Int)) -> [] Bool) (seq a (seq a 1))))) ((\a -> (!!) (id ([]::[] ([] (([] Bool) -> [] Bool)))) (seq a 0)) ((undefined::Int -> ([] ([] ([] Int))) -> [] ([] ([] Bool))) (head (undefined::[] Int))))
(++) ((!!) ((\a -> seq a (undefined::[] ([] Int))) (undefined::Bool)) (id ((\a -> a) (undefined::Int))))
(++) (undefined::[] Int)
\a -> a
(\a -> id (\b -> map (seq a (\c -> (+1) (seq b 2))) ([]::[] ([] (([] (Int -> Int)) -> Int -> Int))))) (id (\a -> seq a (seq a ((\b -> (:) (\c -> True) (seq b ([]::[] (([] Int) -> Bool)))) (undefined::Int -> Int -> Int)))))
\a -> a
id
\a -> a
(undefined::Bool -> (Int -> Int -> Int) -> ([] Int) -> [] Int) ((\a -> seq a (not False)) (filter even ([]::[] Int))) (undefined::Int -> Int -> Int)
case1 (head (undefined::[] (Bool -> ([] Bool) -> ([] Int) -> [] Int))) (head ((\a -> tail (seq a ([]::[] (([] Int) -> [] Int)))) ((\a -> seq a 1) True))) ([]::[] Bool)
(\a -> seq a (seq a (\b -> (undefined::[] Int)))) (\a -> \b -> b)
(:) ((\a -> (undefined::([] ([] (Int -> Int))) -> Int) (seq a ((undefined::([] ([] (Int -> Bool))) -> [] ([] (Int -> Int))) (tail (seq a (undefined::[] ([] (Int -> Bool)))))))) (\a -> (!!) (map (\b -> \c -> (undefined::Bool -> [] ([] Bool)) (seq b True)) (filter (undefined::Int -> Bool) (seq a (seq a ([]::[] Int)))))))
id
(\a -> seq a (\b -> (\c -> seq c id) (seq a (seq b (undefined::Int)))) (seq a (\b -> seq b (seq b (undefined::[] (([] Int) -> Bool)))) (seq a (tail (undefined::[] (Bool -> Bool)))))) (\a -> (undefined::(([] Int) -> Int -> [] Int) -> [] ([] Bool)) (\b -> (undefined::Int -> [] Int)))
(undefined::([] Int) -> [] Int)
filter ((\a -> seq a (\b -> True)) ((\a -> seq a (case1 (seq a (undefined::Int -> ([] Int) -> [] ([] Bool))) (seq a ([]::[] ([] Bool))))) (\a -> id (undefined::([] Int) -> [] Bool) ([]::[] Int))))
(!!) (map (\a -> seq a ((undefined::Int -> ([] Int) -> [] Int) 2)) (map (\a -> seq a (undefined::[] ([] Bool))) (undefined::[] ([] ([] Int))))) ((undefined::Int -> Int -> Int) (undefined::Int) ((-) (undefined::Int) (undefined::Int)))
\a -> a
(undefined::(Int -> Int -> [] Int) -> Bool -> ([] Int) -> [] Int) ((\a -> seq a (\b -> \c -> seq b (undefined::[] Int))) (undefined::Int)) ((\a -> a (seq a (seq a (undefined::[] (Int -> Bool)))) (seq a (seq a (seq a 1)))) (\a -> ((==)::Int -> Int -> Bool) (head ([]::[] (Bool -> Int)) (seq a True))))
id
head (case1 (\a -> seq a (\b -> seq a (\c -> seq b ([]::[] (([] Int) -> [] Int)))) ((!!) ([]::[] Int) 1)) (map (undefined::([] ([] (Int -> Bool))) -> ([] Int) -> [] Int) ([]::[] ([] ([] (Int -> Bool))))) (id (undefined::Int -> (Int -> Bool) -> [] Bool) 2 (id ((!!) (undefined::[] Bool)))))
(\a -> \b -> tail (id (seq b (undefined::([] Bool) -> ([] Bool) -> [] Int)) (seq b (seq a ([]::[] Bool))) (case1 (seq b (undefined::Int -> ([] Int) -> [] Bool)) (seq a ([]::[] Bool)) b))) (\a -> seq a (undefined::([] (([] Int) -> Int -> [] ([] Bool))) -> [] ([] (Int -> Bool))) (map (\b -> id (undefined::([] Int) -> Int -> [] ([] Bool))) ([]::[] Int)))
\a -> a
\a -> a
(\a -> seq a ((undefined::Bool -> ([] Int) -> [] Int) ((&&) a (id a)))) ((undefined::(Int -> ([] Int) -> Int) -> Bool) ((!!) (id ([]::[] (Int -> ([] Int) -> Int))) 1))
(\a -> case1 (undefined::Int -> ([] Int) -> [] Int) (seq a (seq a (seq a (undefined::([] Int) -> [] Int)) (seq a (seq a (undefined::[] Int)))))) ((\a -> seq a (\b -> a)) (undefined::Int) (map (\a -> (undefined::Bool)) (undefined::[] ([] Int))))
\a -> a
\a -> head ([]::[] ((([] Int) -> [] (([] ([] (([] Int) -> [] Int))) -> [] ([] (([] Int) -> [] Int)))) -> [] Int)) (\b -> seq a (undefined::[] (([] ([] (([] Int) -> [] Int))) -> [] ([] (([] Int) -> [] Int)))))
head ((!!) ([]::[] ((Int -> Int -> [] Int) -> [] (([] Int) -> [] Int))) 0 ((\a -> seq a (\b -> seq a (undefined::Int -> Int -> [] Int))) 1 (((==)::[Int] -> [Int] -> Bool) (id (undefined::[] Int)) (head (undefined::[] ([] Int))))))
case1 (\a -> (undefined::(([] Int) -> [] (Int -> Int)) -> ([] Int) -> [] Int) (seq a (\b -> (\c -> seq a (seq c ([]::[] (Int -> Int)))) a))) ([]::[] Int)
tail
\a -> (undefined::Int -> (([] Int) -> ([] Int) -> Bool) -> [] Int) (seq a (\b -> seq a (seq b (undefined::Int))) (seq a (undefined::Int -> ([] Int) -> Int))) (\b -> \c -> seq a ((\d -> seq d (head (seq c (head ([]::[] ([] Bool)))))) (seq b (((==)::Bool -> Bool -> Bool) (seq c False) (seq a (undefined::Bool))))))
(undefined::([] Int) -> [] Int)
(\a -> (\b -> seq b (\c -> id)) id (seq a (undefined::Bool))) ((\a -> seq a 1) (\a -> \b -> (undefined::[] ([] (Int -> Bool)))))
id
(\a -> seq a (\b -> \c -> \d -> ([]::[] Int)) (seq a (seq a (undefined::Bool))) (undefined::Bool)) (undefined::([] ([] Bool)) -> [] ([] (Bool -> Bool)))
\a -> (undefined::Bool -> [] Int) ((undefined::([] (([] Int) -> [] Int)) -> Bool -> Bool) (undefined::[] (([] Int) -> [] Int)) (case1 (\b -> \c -> (undefined::Bool)) True (seq a (undefined::[] Bool))))
(\a -> id (seq a (seq a (undefined::([] (Bool -> Bool)) -> ([] Int) -> [] Int))) ((++) (head ([]::[] ([] (Bool -> Bool)))) (seq a (undefined::[] (Bool -> Bool))))) (undefined::([] Int) -> Int -> Int -> [] Int)
(undefined::Int -> (([] Bool) -> [] Bool) -> ([] Int) -> [] Int) ((\a -> seq a (seq a a)) (id (undefined::Int))) ((\a -> seq a (\b -> seq b (head (seq a (seq b (seq a (undefined::[] ([] Bool)))))))) ((+) ((+1) 0) (id (undefined::Int))))
\a -> (!!) (undefined::[] ((([] ([] ([] (Int -> Bool)))) -> [] (Int -> Bool)) -> [] Int)) (case1 (\b -> (undefined::([] Bool) -> Int)) (undefined::Int) (seq a (undefined::[] Bool))) (\b -> ([]::[] (Int -> Bool)))
\a -> a
(undefined::(([] Int) -> [] (Int -> [] (Int -> Bool))) -> ([] Int) -> [] Int) ((\a -> head (seq a (seq a (undefined::[] (([] Int) -> [] (Int -> [] (Int -> Bool))))))) (not ((\a -> seq a (seq a (undefined::Bool))) (undefined::[] Bool))))
\a -> (undefined::[] Int)
take (undefined::Int)
head ((\a -> seq a (seq a (seq a (undefined::[] ((([] Bool) -> Bool) -> ([] Int) -> [] Int))))) ((\a -> seq a (seq a ([]::[] Int))) (\a -> (undefined::([] Int) -> Bool)))) (\a -> (undefined::Int -> Bool) (seq a (\b -> 0) (seq a (seq a ([]::[] ([] ([] (([] Bool) -> [] Bool))))))))
\a -> seq a (seq a (map (id (\b -> seq b ((undefined::([] (Bool -> Bool)) -> Int) (seq b (seq b (undefined::Int -> [] (Bool -> Bool))) 0)))) (seq a (seq a (undefined::[] (([] Int) -> Int -> Bool))))))
(\a -> id (\b -> (undefined::Bool -> Int -> [] Int) (seq b (a b True)) (seq a (undefined::([] Bool) -> Int) (seq b (seq a (seq b (undefined::[] Bool))))))) (\a -> seq a (\b -> \c -> seq b (seq c not) c) ((\b -> seq b (undefined::([] Int) -> [] (Int -> [] Int))) (seq a (seq a (seq a (undefined::Bool))))))
filter ((undefined::(([] ([] ([] (Bool -> Bool)))) -> [] ([] ([] (([] Bool) -> Bool)))) -> Int -> Bool) (\a -> (++) (seq a ((\b -> seq a (seq b ([]::[] ([] ([] (([] Bool) -> Bool)))))) (seq a (seq a False)))) (seq a (\b -> seq a (undefined::[] ([] ([] (([] Bool) -> Bool))))) (seq a (seq a (seq a (undefined::Bool)))))))
\a -> map (\b -> (undefined::Int)) (seq a ([]::[] (((([] ([] Bool)) -> [] ([] Bool)) -> ([] Bool) -> Bool) -> ([] Int) -> [] (([] Int) -> Bool))))
\a -> a
\a -> a
\a -> a
(undefined::Bool -> ([] Int) -> [] Int) ((\a -> seq a (seq a (seq a even))) (undefined::Int -> [] Int) (id ((\a -> id a) 0)))
take ((undefined::(([] Int) -> Int -> Bool) -> Int) ((undefined::(([] Int) -> [] (Int -> Bool)) -> ([] Int) -> Int -> Bool) ((\a -> \b -> seq a (seq b (undefined::[] (Int -> Bool)))) (not (undefined::Bool)))))
\a -> seq a (id (\b -> map (\c -> seq b (seq c (undefined::Bool -> Int)) (seq a (seq c (undefined::Bool)))) (seq a (seq a (seq b (tail ([]::[] ([] ([] Bool))))))))) (\b -> (undefined::[] ([] (Int -> Bool))))
\a -> seq a (case1 (head (seq a (undefined::Int -> [] (Bool -> ([] Bool) -> [] Int)) (seq a (seq a (undefined::Int))))) (map (\b -> b) a) (map (\b -> b (undefined::[] Int) False) (seq a (seq a (seq a ([]::[] (([] Int) -> Bool -> Bool)))))))
(\a -> seq a (seq a ((undefined::([] (Int -> Int)) -> ([] Int) -> [] Int) (map (seq a (seq a (undefined::([] Bool) -> Int -> Int))) (seq a (seq a ([]::[] ([] Bool)))))))) (id ((+1) ((\a -> seq a (undefined::([] ([] Bool)) -> Int) (seq a ([]::[] ([] Bool)))) ((!!) ([]::[] Int) 1))))
\a -> (undefined::(Int -> ([] Int) -> Int -> Bool) -> [] Int) (undefined::Int -> ([] Int) -> Int -> Bool)
(\a -> \b -> a (seq a (\c -> (undefined::([] ([] ([] Bool))) -> [] ([] Int)) (seq c (seq a ([]::[] ([] ([] Bool)))))) head)) (\a -> ([]::[] Int))
(undefined::(([] Int) -> [] ((([] Int) -> Bool -> Bool) -> ([] Int) -> Bool -> Bool)) -> ([] Int) -> [] Int) (undefined::([] Int) -> [] ((([] Int) -> Bool -> Bool) -> ([] Int) -> Bool -> Bool))
(\a -> seq a (undefined::(([] Int) -> [] ([] Bool)) -> ([] Int) -> [] Int) ((undefined::([] Int) -> ([] Int) -> [] ([] Bool)) ([]::[] Int))) False
\a -> case1 (seq a (\b -> head (seq b ([]::[] (Bool -> ([] Bool) -> [] Int)))) (seq a (\b -> odd) ([]::[] Bool))) a (seq a (seq a (seq a (seq a (undefined::Bool -> [] Bool)))) ((undefined::Bool -> Bool) False))
\a -> a
\a -> map (\b -> seq a (case1 (seq b (undefined::Bool -> ([] Bool) -> Bool -> Int)) (seq b (undefined::Bool -> Int)) (seq b (undefined::[] Bool)) (seq a (seq b not) (seq a (seq b (seq b False)))))) (undefined::[] (([] (Bool -> Bool -> Bool)) -> [] (([] (Bool -> Bool -> Bool)) -> [] (Bool -> Bool -> Bool))))
(undefined::([] Int) -> [] Int)
(\a -> (\b -> seq b id) (seq a (\b -> seq a (map (\c -> (undefined::([] Int) -> ([] Int) -> Bool)) ([]::[] Bool))))) ((\a -> (+) (seq a (seq a (undefined::Int))) (seq a (seq a (undefined::Int)))) (undefined::Int -> Bool -> Bool))
\a -> case1 (seq a (seq a (\b -> \c -> seq c (undefined::([] Int) -> [] Int))) a) (id (undefined::(([] Int) -> [] (Int -> Int)) -> [] Int) (seq a (\b -> tail (seq b ([]::[] (Int -> Int)))))) (seq a (seq a (:) (seq a (undefined::Int)) a))
(\a -> seq a (seq a ((!!) (undefined::[] (Bool -> ([] Int) -> [] Int))) (seq a (id 1)) (case1 (\b -> (undefined::([] Int) -> Bool)) (seq a True) (seq a ([]::[] Int))))) (undefined::([] Int) -> [] (Int -> ([] Int) -> ([] Int) -> [] ([] Int)))
tail
(undefined::(([] ([] (([] Int) -> [] ([] Bool)))) -> [] Bool) -> ([] Int) -> [] Int) (undefined::([] ([] (([] Int) -> [] ([] Bool)))) -> [] Bool)
case1 (\a -> seq a (\b -> seq b (\c -> \d -> ([]::[] Int)))) (:) ((:) False ([]::[] Bool)) ((undefined::(Int -> Bool) -> Int) (\a -> ((==)::[Int] -> [Int] -> Bool) (seq a (seq a ([]::[] Int))) (seq a (seq a ([]::[] Int)))))
\a -> a
\a -> a
case1 (undefined::(([] Int) -> Int) -> ([] (([] Int) -> Int)) -> ([] Int) -> [] Int) (\a -> map ((!!) a) a) ((undefined::Int -> Int -> [] (([] Int) -> Int)) (head (undefined::[] Int)) ((\a -> seq a 1) False))
take (head ([]::[] ((([] (([] ([] Int)) -> [] Int)) -> Bool -> Bool -> Bool) -> Int)) (\a -> (!!) (seq a ((undefined::Bool -> [] (Bool -> Bool -> Bool)) (seq a (seq a True)))) ((undefined::([] ([] ([] (Int -> Bool)))) -> Int) (seq a (seq a (seq a (undefined::[] ([] ([] (Int -> Bool))))))))))
\a -> ([]::[] Int)
tail
(\a -> \b -> seq b ((\c -> seq a (\d -> seq c (undefined::[] Int))) (seq b ((+1) 1))) (seq b (seq b (undefined::[] (Int -> Bool))))) (\a -> (undefined::([] ([] ([] Bool))) -> Bool -> [] (Bool -> Bool)) (undefined::[] ([] ([] Bool))) (seq a (seq a (\b -> seq b (undefined::Bool))) (seq a (seq a (\b -> seq a False)))))
\a -> a
(!!) (id ((\a -> seq a (undefined::[] (Bool -> ([] Int) -> [] Int))) False)) 2 False
(\a -> seq a (\b -> \c -> c) (map (undefined::Int -> Bool -> Bool) (head (undefined::[] ([] Int))))) (undefined::[] (([] Bool) -> [] Bool))
(\a -> seq a (seq a (seq a (seq a (\b -> seq b (seq a (seq b id)))))) (seq a (\b -> seq b (\c -> ([]::[] ([] Bool)))) (seq a (seq a ([]::[] Int))))) ((!!) (undefined::[] (([] Int) -> ([] ([] Int)) -> [] Bool)) (undefined::Int))
\a -> case1 (seq a (undefined::([] (([] Bool) -> [] Bool)) -> ([] ([] (([] Bool) -> [] Bool))) -> [] Int)) a (seq a (map (\b -> ([]::[] (([] Bool) -> [] Bool))) (seq a (seq a (seq a ([]::[] Int))))))
id
(\a -> (\b -> seq b (id (undefined::Bool -> ([] Int) -> [] Int))) (\b -> b) (seq a (seq a even) 2)) (\a -> head (map (\b -> (undefined::Bool -> Int -> Int -> [] Int) False) (map (seq a (undefined::Bool -> Int -> ([] Int) -> Int)) (seq a (undefined::[] Bool)))))
(\a -> seq a (seq a (\b -> \c -> seq b (\d -> seq b (undefined::[] Int)) (seq c (undefined::([] Int) -> Bool))) ((\b -> id (seq b (undefined::[] (([] ([] Int)) -> [] ([] Int))))) (a (seq a ([]::[] (([] ([] Bool)) -> [] ([] Bool)))) (seq a (undefined::[] (Int -> Int -> Bool))))))) (head (id (id (undefined::[] (([] (([] ([] Bool)) -> [] ([] Bool))) -> ([] (Int -> Int -> Bool)) -> Int)))))
(undefined::Int -> (Int -> [] Int) -> ([] Int) -> [] Int) (id (\a -> seq a (undefined::Int)) (undefined::[] Int)) (\a -> seq a ((++) (map (seq a (+1)) (seq a (undefined::[] Int))) (seq a (map (undefined::([] Bool) -> Int) ([]::[] ([] Bool))))))
(undefined::(([] Int) -> Int -> Int) -> ([] Int) -> [] Int) (\a -> seq a (seq a ((undefined::([] (([] ([] Bool)) -> [] ([] Bool))) -> Int -> Int) (seq a (seq a ([]::[] (([] ([] Bool)) -> [] ([] Bool))))))))
id
(\a -> seq a (\b -> \c -> seq a c)) ((\a -> seq a (seq a (seq a False))) (\a -> 1)) (head ((\a -> seq a (seq a (seq a (undefined::[] (Int -> Int -> Int))))) (map (\a -> (undefined::[] (Bool -> Bool))) (undefined::[] Int))))
(undefined::([] Int) -> [] Int)
(undefined::([] Int) -> [] Int)
(:) ((\a -> (-) ((\b -> seq b b) (undefined::Int)) a) ((\a -> case1 (undefined::([] Int) -> ([] ([] Int)) -> Int) (seq a 0) (seq a ([]::[] ([] Int)))) (case1 (\a -> head) False (undefined::[] Bool))))
head (head (undefined::[] (((([] Int) -> Int -> Bool) -> ([] Bool) -> [] (Bool -> Bool)) -> [] (([] Int) -> [] Int))) (\a -> \b -> seq a (seq b (seq b (seq b (undefined::(Int -> Bool -> Bool) -> [] (Bool -> Bool))) (seq b (undefined::Bool -> Int -> Bool -> Bool) (seq a (seq a (undefined::Bool))))))))
(undefined::([] (Int -> [] Int)) -> (([] Int) -> Bool) -> ([] Int) -> [] Int) (map (enumFromTo::Int -> Int -> [Int]) ([]::[] Int)) (\a -> (\b -> seq b (seq a (seq b (seq b (undefined::Int -> Bool)) (head a)))) (\b -> (undefined::[] ([] (([] ([] Int)) -> [] ([] Bool))))))
(\a -> take (seq a ((\b -> seq b (seq a (undefined::Int))) (seq a (seq a (seq a (undefined::[] (([] Int) -> Bool)))))))) ((\a -> case1 (\b -> (undefined::([] ([] Int)) -> Bool)) (seq a (undefined::Bool)) (seq a ([]::[] ([] Int)))) ((\a -> seq a (seq a (seq a ([]::[] ([] ([] (Bool -> Bool -> Bool))))))) ((+1) (undefined::Int))))
case1 (\a -> \b -> id (undefined::([] (Bool -> Bool)) -> ([] Int) -> [] Int) (seq a ((!!) (undefined::[] ([] (Bool -> Bool))) 0))) ((!!) ([]::[] (Int -> ([] Int) -> [] Int)) 0 ((\a -> seq a (undefined::Int)) (\a -> False))) (id (\a -> seq a ([]::[] Int)) ((\a -> a) 2))
\a -> seq a ((\b -> case1 (\c -> (undefined::([] Bool) -> Int -> [] Int)) (undefined::Int -> [] Int) (seq a (undefined::[] Bool)) (seq b (\c -> (+1) 2) (id (seq a (undefined::([] ([] ([] Bool))) -> [] ([] Bool)))))) (take (id (head (seq a a))) (seq a ((undefined::([] Int) -> [] (Int -> Int)) a))))
id (\a -> (\b -> seq a (\c -> \d -> b)) (seq a (seq a (undefined::[] Int))) (seq a (\b -> (undefined::Int)) (head (undefined::[] Int)))) ((!!) (undefined::[] (([] Int) -> ([] Int) -> [] ([] Int))) ((+1) (undefined::Int)))
id
take ((+) ((!!) ((\a -> seq a ([]::[] Int)) (id (undefined::Bool))) ((\a -> seq a (seq a (undefined::Int))) (undefined::[] (Bool -> Bool)))) 1)
(\a -> take (head (seq a (seq a (\b -> (undefined::([] Int) -> [] Int)) (+1) (seq a (\b -> ([]::[] Int)) (tail (undefined::[] Bool))))))) (((==)::Int -> Int -> Bool) (undefined::Int) (head (id (undefined::[] Int))))
tail
\a -> seq a (seq a (seq a (\b -> \c -> a))) (seq a (id (undefined::([] (Int -> Bool)) -> Int)) (seq a (seq a (seq a ([]::[] (Int -> Bool)))))) (seq a (\b -> b))
\a -> id (\b -> seq b a) (seq a (seq a (seq a (undefined::([] ([] Bool)) -> ([] (([] Bool) -> [] Bool)) -> Int)) (map (seq a (seq a (undefined::([] Int) -> [] Bool))) (undefined::[] ([] Int)))))
\a -> seq a (head (take (seq a (seq a (seq a (undefined::([] Bool) -> Int)) ([]::[] Bool))) (seq a ([]::[] ((([] Int) -> Int -> Int -> [] Int) -> [] Int)))) (seq a (seq a ((!!) (undefined::[] (([] Int) -> Int -> Int -> [] Int))) (seq a 0))))
\a -> a
case1 (\a -> (undefined::([] (Int -> [] Int)) -> ([] Int) -> [] Int)) (\a -> (\b -> \c -> seq b (undefined::[] Int)) ((+1) (undefined::Int)) (seq a (undefined::Bool -> [] (Bool -> Bool)) (seq a (seq a True)))) ((\a -> seq a (take 2 ([]::[] (Int -> [] Int)))) ((\a -> \b -> seq a True) (head (undefined::[] ([] ([] ([] Int)))))))
\a -> a
(\a -> (\b -> seq b (seq b (seq b (undefined::Bool -> ([] Int) -> [] Int))) (seq a False)) (\b -> seq b (seq b (\c -> ([]::[] Bool)) (undefined::[] (Bool -> Bool))))) (\a -> seq a (seq a ([]::[] Int)))
(\a -> \b -> seq a (seq a (seq b (\c -> seq c (undefined::(Int -> [] Bool) -> [] Int)) (head (undefined::[] Bool)))) (\c -> (undefined::([] ([] ([] (Int -> Int)))) -> [] Bool) (seq a (seq a ([]::[] ([] ([] (Int -> Int)))))))) (\a -> seq a (\b -> (undefined::Bool -> (([] Bool) -> Bool) -> ([] Bool) -> Bool) (not (seq b (undefined::Bool)))) (\b -> seq a (seq b (seq a id)) ((||) True (undefined::Bool))))
(\a -> seq a (seq a (\b -> \c -> seq c (take (undefined::Int) c))) (\b -> ([]::[] Bool))) (\a -> id)
take ((-) ((\a -> a 2 (undefined::Int)) (\a -> \b -> b)) ((-) (id 0) 1))
(\a -> seq a (\b -> seq a (seq b (seq a (\c -> b))) (seq a (seq b (seq b (undefined::Bool -> Bool -> Int)) (seq b (seq b True)))))) (\a -> \b -> seq b (case1 (head (undefined::[] (Bool -> ([] Bool) -> Int -> Int))) (\c -> c) (id (seq b (undefined::[] Bool)))))
(\a -> seq a (seq a (\b -> \c -> seq b (seq c c)) (seq a (seq a ((\b -> seq b (seq b ([]::[] ([] ([] (Bool -> Bool)))))) (seq a (seq a False))))))) ((\a -> \b -> (\c -> seq a (seq c (undefined::[] ([] Bool)))) (seq b (head (undefined::[] ([] ([] Int)))))) ((\a -> head (seq a ([]::[] (Int -> Bool -> Bool)))) (undefined::[] ([] Int))))
(undefined::Bool -> Bool -> Bool -> ([] Int) -> [] Int) False ((\a -> seq a (seq a (seq a True))) ((!!) (undefined::[] (Bool -> [] Int)) 1)) ((\a -> seq a (undefined::(([] Int) -> [] Int) -> Bool)) (undefined::Int -> Int) (\a -> a))
(\a -> case1 (id (\b -> \c -> seq c tail)) (seq a (undefined::Bool -> ([] Int) -> [] Int) (seq a (undefined::Bool))) (seq a (seq a (a ([]::[] Int) ([]::[] Bool))))) (\a -> seq a (\b -> (undefined::([] Int) -> ([] Bool) -> [] Bool) a) ((\b -> seq b (seq b (seq a False))) ([]::[] ([] ([] ([] (Int -> Int)))))))
(undefined::([] Int) -> [] Int)
(\a -> seq a (seq a (seq a (\b -> id)) (\b -> seq a (seq a (a (id 1)))))) ((!!) (undefined::[] (Int -> [] Bool)) ((\a -> seq a a) (id 1)))
(undefined::(([] Int) -> [] Int) -> Bool -> ([] Int) -> [] Int) ((\a -> seq a ((++) ([]::[] Int))) ([]::[] Bool)) (even ((\a -> (\b -> seq b (seq a 0)) (seq a (seq a (seq a ([]::[] Bool))))) ((\a -> seq a False) (id (undefined::Int)))))
(\a -> seq a ((\b -> (\c -> \d -> seq a (seq c ([]::[] Int))) (seq a b)) (not (undefined::Bool)))) (case1 (\a -> head ([]::[] (([] Int) -> [] (Int -> Int -> Bool)))) (undefined::[] (Int -> Int -> Bool)) ((undefined::Bool -> [] Int) (undefined::Bool)))
\a -> a
(undefined::([] Int) -> [] Int)
(undefined::([] Int) -> [] Int)
\a -> (undefined::(([] (([] Int) -> [] (Int -> Int))) -> Int -> Int) -> [] Int) (\b -> seq b ((!!) (undefined::[] (Int -> Int -> Int)) (seq b (undefined::Int)) (seq a (seq a (case1 (undefined::Bool -> ([] Bool) -> Int) (undefined::Int) ([]::[] Bool))))))
(undefined::(([] ([] Int)) -> [] ([] (Int -> Int))) -> ([] Int) -> [] Int) (\a -> seq a ((!!) ((\b -> seq b (seq a ([]::[] ([] ([] (Int -> Int)))))) (seq a (seq a (undefined::Int)))) (seq a (id 1))))
\a -> seq a a
\a -> a
(\a -> seq a (\b -> (\c -> seq b (seq c (undefined::([] Int) -> [] Int))) (id ([]::[] Bool)))) ((\a -> seq a (\b -> (undefined::Bool))) (undefined::[] (([] Int) -> Bool))) ((:) ((\a -> seq a (seq a (undefined::[] ([] Bool)))) (not (undefined::Bool))) ((\a -> seq a (seq a (undefined::[] ([] ([] Bool))))) True))
head (head (map (\a -> (\b -> (\c -> seq c (seq b ([]::[] (([] Int) -> [] Int)))) (a (!!))) (seq a (seq a 2))) (map (undefined::([] Int) -> (([] Int) -> Int -> Int) -> Bool) ((\a -> seq a (seq a ([]::[] ([] Int)))) (undefined::[] Int)))))
(undefined::((Int -> [] Int) -> ([] Int) -> [] ([] Int)) -> ([] Int) -> [] Int) (undefined::(Int -> [] Int) -> ([] Int) -> [] ([] Int))
\a -> seq a (head (undefined::[] ([] Int)))
(undefined::([] Int) -> [] Int)
\a -> (\b -> (undefined::(Bool -> Int -> Bool) -> [] Int) ((\c -> seq b (\d -> \e -> c)) (undefined::Bool))) (\b -> \c -> seq a (head ((\d -> head (seq d ([]::[] ([] ([] (([] Int) -> Bool)))))) (seq b ((undefined::Int -> Bool) (head a))))))
(undefined::Int -> (([] Int) -> [] (Int -> [] Int)) -> ([] Int) -> [] Int) (case1 (\a -> seq a (undefined::([] Int) -> Int)) (undefined::Int) ([]::[] Int)) (\a -> id (\b -> \c -> (undefined::[] (Int -> [] Int))) (seq a (seq a (undefined::Int))) (seq a (head (seq a ([]::[] (Bool -> Bool))) (head (seq a ([]::[] Bool))))))
(\a -> seq a (seq a (id ((!!) (seq a ([]::[] (([] Int) -> [] Int))))))) ((\a -> seq a (id (undefined::Int -> Int -> Bool))) (head ([]::[] ([] Bool)))) (case1 ((\a -> \b -> \c -> a) (undefined::Int)) ((\a -> seq a 0) (undefined::[] (([] Int) -> Bool))) ((undefined::Int -> [] Bool) (head ([]::[] Int))))
(\a -> head (seq a (seq a ([]::[] (([] ([] (Int -> Bool))) -> ([] Int) -> [] Int)))) (filter (seq a (undefined::([] (Int -> Bool)) -> Bool)) (head (undefined::[] ([] ([] (Int -> Bool))))))) ((\a -> seq a (undefined::Int)) ((\a -> seq a (tail ([]::[] ([] ([] Bool))))) (((==)::[Int] -> [Int] -> Bool) ([]::[] Int) (undefined::[] Int))))
\a -> map (\b -> (!!) (seq b (\c -> (undefined::[] Int)) b) (seq a (seq b ((\c -> seq c c) (seq b 2))))) ((\b -> case1 (\c -> (undefined::([] Bool) -> [] Bool)) (undefined::[] Bool) (seq b ([]::[] Bool))) (seq a (\b -> seq b (seq b 1)) (\b -> seq a (\c -> (undefined::[] Int)))))
\a -> seq a (\b -> a) (seq a (\b -> seq b (\c -> \d -> seq d (\e -> d) (seq b (seq a d)))) (seq a (seq a ((+) (seq a (undefined::Int)) (seq a 1)))))
tail
(undefined::([] (([] (([] ([] ([] Int))) -> [] ([] ([] Int)))) -> Int -> [] Int)) -> ([] Int) -> [] Int) (undefined::[] (([] (([] ([] ([] Int))) -> [] ([] ([] Int)))) -> Int -> [] Int))
id
\a -> seq a (seq a (\b -> (\c -> seq c (seq a (undefined::Int -> [] Int))) (seq b (seq a (seq b False))) 2) (seq a (seq a (id (seq a (\b -> \c -> seq b ([]::[] ([] (Int -> [] Int)))))))))
(\a -> seq a (\b -> \c -> seq c (\d -> seq b (undefined::[] Int)) (not a))) (((==)::Int -> Int -> Bool) ((+1) 1) (undefined::Int)) (head ([]::[] (Bool -> ([] (([] Int) -> [] Int)) -> Int)) ((\a -> seq a (odd 0)) (id (\a -> seq a (undefined::Bool)))))
(\a -> \b -> seq a (seq a (undefined::Bool -> Bool -> [] Int)) True (seq b (seq b (seq b (even (seq a (undefined::Int))))))) ((!!) (undefined::[] (([] ([] (Int -> [] Int))) -> ([] Int) -> [] Bool)) (undefined::Int))
(undefined::([] Int) -> [] Int)
id ((\a -> seq a tail) (case1 (\a -> \b -> \c -> c) (\a -> a) ((\a -> seq a (undefined::[] Bool)) (undefined::Bool))))
take ((\a -> (!!) (undefined::[] (([] (Int -> [] Int)) -> Int)) a (head (seq a ([]::[] ([] (Int -> [] Int)))))) ((\a -> seq a (seq a (seq a 1))) (head ([]::[] (Int -> Int -> Bool)))))
map (\a -> seq a (seq a (id (seq a ((\b -> id (\c -> seq b 1)) a)) (\b -> filter (seq a (\c -> seq b ((!!) ([]::[] Bool) a))) (seq b (\c -> b) a)))))
head (undefined::[] (([] (([] (([] Bool) -> [] (Bool -> Bool))) -> Int)) -> ([] Int) -> [] Int)) ([]::[] (([] (([] Bool) -> [] (Bool -> Bool))) -> Int))
(\a -> seq a (\b -> \c -> seq a (seq c (undefined::Int -> [] Int)) ((+1) 1)) (\b -> map (seq a (\c -> ([]::[] (Int -> Bool)))) (seq a (seq b ([]::[] Int))))) (head (filter (case1 (undefined::Bool -> ([] Bool) -> Int -> Bool) odd ([]::[] Bool)) ((\a -> a) (undefined::[] Int))))
filter (\a -> (\b -> seq b (seq b (id (\c -> c (seq c ([]::[] (([] Bool) -> Bool))) (seq c ([]::[] Bool))) (\c -> seq c ((\d -> \e -> seq d d) (undefined::Bool)))))) (\b -> seq b (\c -> False)))
\a -> seq a ([]::[] Int)
case1 (undefined::(Int -> Int) -> ([] (Int -> Int)) -> ([] Int) -> [] Int) (\a -> (undefined::Int -> [] Int) (seq a (seq a (seq a (seq a (undefined::Int)))))) ([]::[] (Int -> Int))
\a -> (!!) (seq a ((undefined::([] Bool) -> [] ((Bool -> Bool) -> [] Int)) (tail (undefined::[] Bool)))) ((\b -> b) (seq a (seq a (seq a 0)))) ((&&) ((&&) True (seq a False)))
(\a -> id (\b -> seq b (seq b (++)) (seq a (undefined::[] Int)))) (id (\a -> 2) (tail ([]::[] Int))) ((\a -> seq a ((undefined::([] Int) -> Bool) (seq a (seq a (seq a ([]::[] Int)))))) ((!!) (undefined::[] (Int -> [] Bool)) (id 1)))
(undefined::([] Int) -> [] Int)
head ((\a -> id (\b -> seq a (seq b (undefined::Int -> [] (([] Int) -> [] Int))) (seq b (seq b a))) ((undefined::Bool -> Int -> Int) (undefined::Bool))) (head ((\a -> seq a ((\b -> seq b ([]::[] Int)) (undefined::Int))) (\a -> seq a (\b -> ([]::[] ([] (Int -> Bool))))))))
\a -> ([]::[] Int)
\a -> seq a (seq a (seq a (undefined::(([] Int) -> Int -> Int) -> Bool -> [] Int) (\b -> \c -> seq c (seq a c))) (seq a True))
\a -> seq a (seq a (seq a (\b -> a) (seq a (seq a (\b -> (undefined::Int)) (case1 (undefined::Int -> ([] Int) -> Bool) False a)))))
\a -> a
id (head (undefined::[] ((([] (Int -> Bool)) -> [] (Int -> Bool)) -> ([] Int) -> [] Int)) tail)
id
\a -> a
\a -> ([]::[] Int)
id (undefined::([] ([] ([] Bool))) -> ([] Int) -> [] Int) (map ((\a -> \b -> seq a (seq b (undefined::[] ([] Bool)))) (not False)) ((:) (undefined::Int) ([]::[] Int)))
(\a -> \b -> seq a (undefined::([] (([] Bool) -> Bool -> Bool)) -> [] Int) (seq b (seq a (seq b (undefined::Bool -> [] (([] Bool) -> Bool -> Bool)) (seq b (seq a True)))))) ((undefined::(([] Bool) -> Bool) -> Int) head)
(\a -> \b -> (\c -> seq a (\d -> seq c (undefined::[] Int))) ((!!) (seq a ([]::[] ([] Bool))))) 1 (\a -> (undefined::([] Bool) -> [] (Int -> [] Int)) ((\b -> seq b (seq a (seq b (undefined::[] Bool)))) (seq a (seq a (seq a (undefined::Int))))))
\a -> seq a a
(\a -> seq a (\b -> \c -> map (\d -> b) (seq b ([]::[] ([] Int))))) ((\a -> seq a (seq a (seq a (undefined::Bool)))) (undefined::[] (Int -> Bool))) (id ((\a -> seq a (seq a (\b -> b)) (seq a (seq a 0))) (undefined::Int -> (([] Int) -> [] Int) -> ([] Int) -> [] Int)))
id
head ([]::[] (Int -> ([] ([] ([] Bool))) -> ([] Int) -> [] Int)) ((\a -> seq a (seq a 1)) (head (undefined::[] ([] Bool)))) (id (\a -> seq a (seq a (undefined::[] ([] ([] Bool))))) ((\a -> seq a a) (head ([]::[] Bool))))
\a -> a
(!!) (undefined::[] (([] Int) -> [] Int)) (head ([]::[] Int))
id (undefined::Bool -> (([] Int) -> Int -> Int) -> ([] Int) -> [] Int) ((\a -> head (seq a ([]::[] Bool))) ((+1) (undefined::Int))) ((undefined::Bool -> ([] Int) -> Int -> Int) (case1 (\a -> \b -> a) (undefined::Bool) (undefined::[] Bool)))
\a -> seq a (seq a (seq a (seq a (seq a (undefined::Bool -> (([] Int) -> Int -> Bool) -> [] Int)))) ((!!) ([]::[] (Bool -> Bool)) (undefined::Int) (seq a False))) (\b -> id (\c -> even) (seq a id (seq a ((!!) (undefined::[] Int)))))
(\a -> (\b -> seq b (undefined::([] Bool) -> ([] Int) -> [] Int) ((++) (undefined::[] Bool) (undefined::[] Bool))) (seq a (seq a (seq a (\b -> seq b False) 0)))) (\a -> case1 (seq a (undefined::Int -> ([] Int) -> Int -> Int)) (\b -> b) (seq a ([]::[] Int)) (seq a (seq a (seq a (id (undefined::Bool -> Int) a)))))
(undefined::([] Int) -> [] Int)
id
(\a -> (undefined::(Int -> Bool) -> Int -> ([] Int) -> [] Int) (\b -> seq a (seq a True))) ((\a -> a) 1) ((-) (head (id (undefined::(Int -> Int -> Bool) -> [] Int) ((==)::Int -> Int -> Bool))) (undefined::Int))
filter (\a -> seq a (\b -> seq a (undefined::Bool -> (([] Int) -> [] Int) -> Bool) (seq b (seq a False))) (map (\b -> seq b (undefined::([] Int) -> Bool)) (tail ([]::[] ([] (Int -> Bool))))) (seq a (\b -> \c -> head ([]::[] (Int -> [] Int)) (seq a a)) (\b -> (!!) (seq b ([]::[] (Bool -> Bool))) 1)))
\a -> (\b -> seq b ((:) (seq b (head ([]::[] (([] Bool) -> Int)) (tail ([]::[] Bool)))) (map (seq b id) a))) (seq a ((\b -> seq b (\c -> seq b (undefined::([] Int) -> ([] Bool) -> [] Bool)) True) (seq a (undefined::([] Int) -> Int -> [] Int) a)))
\a -> map (\b -> (undefined::Int)) (seq a (id (\b -> (undefined::[] ((([] Int) -> [] (Int -> Int)) -> Int))) (seq a ((\b -> b) (seq a (undefined::Int))))))
\a -> (:) (seq a ((undefined::(([] Int) -> [] Int) -> Int) (\b -> case1 (\c -> id) (seq b a) b))) a
\a -> take (seq a (seq a (\b -> case1 (undefined::Bool -> ([] Bool) -> Int) (undefined::Int) (undefined::[] Bool)) (seq a ((undefined::Bool -> Int -> ([] Int) -> Int) (seq a False))))) ((undefined::Bool -> (([] Int) -> Int -> Int) -> [] Int) False (undefined::([] Int) -> Int -> Int))
(\a -> \b -> seq b (seq a b)) (id (\a -> head ([]::[] ((([] Int) -> Bool) -> Bool)) (\b -> seq a (undefined::Bool))) (tail (tail ([]::[] (([] ([] (Int -> [] Int))) -> Bool -> Bool)))))
head ((\a -> seq a (undefined::Int -> [] (Bool -> ([] Int) -> [] Int)) a) (head (undefined::[] (([] (Int -> Bool)) -> Int)) (tail (undefined::[] (Int -> Bool))))) ((\a -> seq a (seq a (seq a (seq a (seq a False))))) ((undefined::([] ([] Bool)) -> ([] ([] Int)) -> [] ([] Int)) (undefined::[] ([] Bool))))
\a -> seq a (seq a ((undefined::(([] ([] ([] Bool))) -> [] ([] ([] Bool))) -> [] Int) (\b -> seq a (undefined::([] (Int -> ([] Int) -> Bool)) -> [] ([] ([] Bool))) (id ((++) ([]::[] (Int -> ([] Int) -> Bool)) (seq a (undefined::[] (Int -> ([] Int) -> Bool))))))))
\a -> filter odd ((!!) (undefined::[] ((Int -> Int -> Bool) -> [] Int)) (seq a (seq a (seq a (undefined::Int)))) (\b -> \c -> seq c (undefined::Bool -> Bool) (seq a (undefined::Bool))))
tail
(\a -> seq a (seq a (undefined::(Int -> Bool -> Bool) -> ([] Int) -> [] Int)) (seq a (seq a (seq a (head (seq a (undefined::[] (Int -> Bool -> Bool)))))))) (undefined::([] Int) -> ([] (Bool -> Bool)) -> Int -> ([] ([] ([] Int))) -> [] ([] ([] Bool)))
id
id (id (undefined::(([] ([] ([] Int))) -> [] ([] ([] Int))) -> ([] Int) -> [] Int)) ((\a -> seq a ((undefined::Bool -> ([] ([] ([] Int))) -> [] ([] ([] Int))) a)) (head ([]::[] (Int -> Bool)) 0))
case1 (undefined::([] ([] (Int -> Bool))) -> ([] ([] ([] (Int -> Bool)))) -> ([] Int) -> [] Int) (\a -> a) (undefined::[] ([] ([] (Int -> Bool))))
tail
\a -> id (id (seq a (seq a (\b -> (undefined::(([] Int) -> [] Int) -> [] Int)))) (seq a (head (undefined::[] ((Int -> Bool -> Bool) -> Bool))) ((!!) (seq a (undefined::[] (Bool -> Bool)))))) (seq a (\b -> (undefined::([] Int) -> [] Int)) (case1 (undefined::Int -> ([] Int) -> Bool) (seq a True) (seq a a)))
tail
(++) (map (\a -> seq a (\b -> id (seq a 2)) (\b -> \c -> case1 (undefined::Bool -> ([] Bool) -> Bool) c ([]::[] Bool))) ([]::[] Bool))
\a -> a
\a -> a
\a -> (\b -> (\c -> seq c (seq c (seq a (undefined::([] ([] (Int -> Int))) -> [] Int))) (seq c (seq b ([]::[] ([] (Int -> Int)))))) (undefined::([] ([] ([] Int))) -> [] ([] ([] Bool)))) (id (\b -> \c -> \d -> b) (seq a (undefined::Bool)))
(undefined::(([] ([] ([] Int))) -> [] ([] ([] Bool))) -> ([] Int) -> [] Int) ((!!) ([]::[] (([] ([] ([] Int))) -> [] ([] ([] Bool)))) ((undefined::([] ([] Int)) -> Int) ([]::[] ([] Int))))
(undefined::(([] ([] ([] (([] Bool) -> [] Bool)))) -> [] (([] (Int -> Bool)) -> Int -> Bool)) -> ([] Int) -> [] Int) (head (undefined::[] (([] ([] ([] (([] Bool) -> [] Bool)))) -> [] (([] (Int -> Bool)) -> Int -> Bool))))
\a -> case1 ((\b -> \c -> \d -> seq b (seq a (undefined::[] Int))) (odd (seq a (seq a (undefined::Int))))) a (seq a (map (\b -> b) ([]::[] Bool)))
head (undefined::[] ((([] (([] Int) -> ([] Int) -> [] ([] Int))) -> ([] Int) -> [] Int) -> ([] Int) -> [] Int)) (\a -> \b -> (!!) (seq a (seq a (undefined::[] (Int -> [] Int)))) (seq a (seq a (undefined::Int))) (id (seq a 2)))
\a -> seq a a
(undefined::Int -> (Int -> ([] Int) -> Int) -> ([] Int) -> [] Int) (id (undefined::Int)) (\a -> seq a head)
map (\a -> seq a (\b -> (undefined::Int)) ((\b -> seq b (\c -> seq a (undefined::([] Int) -> ([] Int) -> [] Bool)) b) (head (seq a (undefined::[] (Int -> Bool))) a)))
(\a -> \b -> (++) ((undefined::([] Bool) -> [] Int) (seq a (seq a ([]::[] Bool)))) (seq a (seq a (\c -> (undefined::[] Int))) (seq a (id (undefined::Bool))))) (head (undefined::[] (([] (([] ([] Int)) -> [] Bool)) -> ([] ([] Int)) -> [] Bool)))
(:) ((\a -> id (\b -> seq a id) (seq a (\b -> seq a b)) (case1 (\b -> (undefined::([] Bool) -> Int)) a (seq a (undefined::[] Bool)))) 2)
\a -> (undefined::Bool -> Bool -> [] Int) (not (seq a (id head (seq a (seq a ([]::[] Bool)))))) (seq a (seq a ((!!) (undefined::[] (Int -> Bool)) (seq a (seq a 0)) (seq a ((\b -> seq a (seq b (undefined::Int))) (id a))))))
id
\a -> ([]::[] Int)
id (\a -> \b -> ([]::[] Int)) (id (\a -> seq a (\b -> a)) (undefined::Bool))
(undefined::Bool -> Bool -> Bool -> ([] Int) -> [] Int) (undefined::Bool) True ((\a -> seq a (\b -> seq a a)) (not False) ((\a -> seq a (seq a (seq a ((==)::[Int] -> [Int] -> Bool)))) (undefined::[] Int)))
(\a -> seq a (seq a (seq a (undefined::([] ([] Bool)) -> ([] Int) -> [] Int)))) (head (undefined::[] (Bool -> Int)) True) (undefined::[] ([] Bool))
case1 (\a -> (undefined::([] ([] Int)) -> ([] Int) -> [] Int)) (\a -> seq a (\b -> a) (seq a (seq a (seq a (undefined::[] (([] Int) -> Bool)))))) (map (\a -> map (seq a (undefined::([] ([] Int)) -> Int)) (seq a (undefined::[] ([] ([] Int))))) ([]::[] (([] ([] Bool)) -> [] ([] Bool))))
take 0
case1 (undefined::(Int -> Int) -> ([] (Int -> Int)) -> ([] Int) -> [] Int) id ((:) ((!!) (id (undefined::[] Int))) ((undefined::Bool -> [] (Int -> Int)) (undefined::Bool)))
(\a -> seq a (\b -> \c -> c) (seq a (\b -> seq a (undefined::Int -> [] Int)))) (id ((\a -> seq a (\b -> True)) (head (undefined::[] ([] ([] (Int -> Int))))) ((-) ((\a -> seq a (undefined::Int)) ([]::[] ([] Bool))))))
\a -> case1 (head (seq a (map (undefined::([] Bool) -> Int -> ([] Int) -> [] Int) (id (undefined::[] ([] Bool)))))) (tail a) ([]::[] Int)
(\a -> seq a tail) (\a -> (\b -> \c -> seq c (undefined::Int -> Bool) (head (seq b (undefined::[] Int)))) (\b -> seq a (seq b (seq a (seq a (id (\c -> \d -> (undefined::Int -> [] Int))))))))
case1 (undefined::([] ([] ([] Int))) -> ([] ([] ([] ([] Int)))) -> ([] Int) -> [] Int) ((!!) ([]::[] (Bool -> ([] Int) -> [] Int)) 2 ((\a -> seq a (undefined::Bool)) 2)) ((undefined::(([] Bool) -> [] (Int -> Bool)) -> [] ([] ([] ([] Int)))) ((undefined::Bool -> ([] Bool) -> [] (Int -> Bool)) (head (undefined::[] Bool))))
head (undefined::[] ((([] ([] ([] Int))) -> [] ([] Bool)) -> ([] Int) -> [] Int)) (undefined::([] ([] ([] Int))) -> [] ([] Bool))
(\a -> \b -> (!!) (seq a ([]::[] (([] Int) -> [] Int))) (undefined::Int)) ((\a -> seq a (seq a (undefined::Bool))) (id 1)) (case1 (\a -> \b -> (\c -> seq c (seq a (undefined::[] ([] Bool)))) a) ((\a -> seq a (seq a (undefined::[] ([] Bool)))) (undefined::Bool)))
(!!) ((\a -> (undefined::([] Int) -> [] (([] Int) -> [] Int)) (a ([]::[] Int) 0)) (\a -> \b -> map (\c -> b) (head (seq a (undefined::[] ([] (Int -> Int -> Bool))))))) (undefined::Int)
(\a -> (:) ((-) (seq a (undefined::([] ([] ([] Bool))) -> Int) (head (undefined::[] ([] ([] ([] Bool)))))) (seq a (a (seq a (undefined::[] Int)) (seq a 0) (seq a 2))))) (id (undefined::Bool -> ([] Int) -> Int -> Int -> Int) ((!!) (id (undefined::[] Bool)) (undefined::Int)))
\a -> a
\a -> (\b -> map (\c -> (+1) 2) (seq b ([]::[] (Int -> ([] (Bool -> Bool)) -> Bool -> Bool)))) (\b -> ((==)::Int -> Int -> Bool) ((!!) (undefined::[] Int) (undefined::Int)) (seq b (seq b (seq a (seq b (undefined::(([] Int) -> Int) -> Int)) (\c -> head a)))))
id (head (undefined::[] (Int -> Int -> ([] Int) -> [] Int))) ((\a -> seq a 2) (\a -> id (seq a (undefined::[] ([] Bool))))) ((\a -> a) (head (undefined::[] (([] (Int -> [] Int)) -> Int)) (undefined::[] (Int -> [] Int))))
id
\a -> (\b -> seq a (\c -> \d -> a) b (map (\c -> (undefined::[] ([] Int))) (seq b (seq a (undefined::[] ([] (([] Int) -> Bool))))))) (seq a (case1 (seq a (\b -> seq b head)) (seq a (undefined::Bool -> Int) False) a))
head (undefined::[] ((([] Int) -> ([] (([] Int) -> Int -> Bool)) -> [] ([] (Bool -> Bool))) -> ([] Int) -> [] Int)) (\a -> (undefined::([] (([] Int) -> Int -> Bool)) -> [] ([] (Bool -> Bool))))
(undefined::((([] Int) -> [] (Int -> Int)) -> Int) -> ([] Int) -> [] Int) (\a -> (!!) (seq a (undefined::[] Int)) (case1 (undefined::Int -> ([] Int) -> Int) (seq a (undefined::Int)) (seq a ([]::[] Int))))
(:) ((!!) ((:) (\a -> a) (id (undefined::[] (Int -> Int)))) (case1 (\a -> (undefined::([] Bool) -> Int)) (undefined::Int) ([]::[] Bool)) ((\a -> id (seq a (undefined::([] ([] (Bool -> Bool))) -> Int)) ([]::[] ([] (Bool -> Bool)))) True))
(undefined::(([] Int) -> [] Bool) -> Int -> ([] Int) -> [] Int) (\a -> seq a (\b -> seq a (seq b (undefined::[] Bool))) (seq a (\b -> (:) 0))) (case1 (undefined::Int -> ([] Int) -> Int) ((\a -> a) 0) ((\a -> seq a (undefined::[] Int)) ((+1) 2)))
\a -> seq a (undefined::([] ([] ([] Bool))) -> [] Int) (map (undefined::(([] Int) -> [] (Bool -> Bool)) -> [] ([] Bool)) (seq a (undefined::Int -> [] (([] Int) -> [] (Bool -> Bool))) ((+1) (seq a (undefined::Int)))))
\a -> seq a (\b -> id (\c -> (undefined::Int -> [] Int)) ((+1) (seq b (undefined::Int)))) (seq a (seq a (\b -> (undefined::[] ([] (Int -> Bool))))) ((!!) a (undefined::Int))) (case1 ((\b -> seq b (undefined::Bool -> ([] Bool) -> Int)) (seq a (seq a (undefined::Bool)))) ((\b -> b (undefined::Int) 2) (head (undefined::[] (Int -> Int -> Int)))) (head (undefined::[] (Int -> [] Bool)) (seq a (seq a (undefined::Int)))))
(\a -> \b -> (undefined::Bool -> [] Int) ((!!) (tail (undefined::[] Bool)) (seq b (seq a (undefined::Int))))) (\a -> seq a (\b -> id (seq a (\c -> id (seq c False)))) ((\b -> seq a (seq b (undefined::[] (Int -> Int)))) (head ([]::[] (([] ([] Int)) -> [] Int)))))
id (\a -> (:) (seq a 1)) ((undefined::Bool -> ([] ([] (Bool -> Bool))) -> [] (Int -> Int)) (undefined::Bool))
filter (\a -> True)
(\a -> (\b -> \c -> map (\d -> seq b 0) (undefined::[] (Int -> Bool))) (id ((!!) (seq a (tail (seq a (undefined::[] ([] Bool)))))))) (\a -> (undefined::Int -> [] ([] (Int -> Int))))
(undefined::(([] Int) -> [] (Int -> Int -> [] Int)) -> ([] Int) -> [] Int) ((undefined::(Int -> Int) -> ([] Int) -> [] (Int -> Int -> [] Int)) (\a -> seq a (head (undefined::[] ((Int -> Int) -> Int))) ((!!) ([]::[] Int))))
\a -> map (id (seq a (\b -> (!!) (seq b ([]::[] (([] ([] (Int -> Int))) -> Int))) (seq b (undefined::Int))) (seq a (seq a (\b -> seq a (undefined::([] Bool) -> [] Bool) (seq b b)))))) (map (\b -> seq a (\c -> seq c ([]::[] ([] (Int -> Int)))) (seq a (seq b id))) (seq a (seq a (\b -> ([]::[] ([] (([] Bool) -> [] Bool)))) (seq a 1))))
(\a -> (\b -> \c -> take (seq c (seq b (undefined::Int))) c) (map (\b -> seq b ([]::[] (Int -> Bool))) (seq a (undefined::[] Int)))) (\a -> head (seq a (seq a (seq a (\b -> head (undefined::[] ([] (([] ([] ([] Int))) -> [] ([] Bool))))) (seq a (\b -> seq a (seq b (undefined::Bool -> Int)) (id (undefined::Bool))))))))
\a -> ([]::[] Int)
filter even
\a -> a
(\a -> (\b -> seq b (seq a (seq a (\c -> \d -> ([]::[] Int)) a))) (even (seq a (\b -> b) (seq a (seq a 1))))) ((\a -> case1 (\b -> (undefined::([] ([] Bool)) -> Bool)) (undefined::Bool) (seq a ([]::[] ([] Bool)))) ((!!) ([]::[] (([] Int) -> [] (Bool -> Bool))) (undefined::Int)))
\a -> seq a (head (seq a (undefined::[] ((([] ([] Int)) -> [] ([] Int)) -> Int -> [] Int))) (\b -> tail (head ([]::[] (Bool -> [] ([] Int))) (seq b (seq a False)))) 0)
\a -> map (seq a (\b -> seq a ((undefined::Bool -> Int) (seq b (\c -> seq b (undefined::Bool)) (id 2))))) (seq a ([]::[] ((([] Int) -> [] (Int -> ([] ([] Int)) -> [] Int)) -> Int -> Bool)))
\a -> case1 ((!!) (seq a (id (undefined::Bool -> [] (([] Int) -> [] Int))) (seq a (seq a (undefined::Bool))))) (seq a (seq a (seq a (undefined::(([] ([] ([] Bool))) -> [] Bool) -> [] Int) (\b -> ([]::[] Bool))))) (seq a (\b -> a) ((!!) (seq a ([]::[] (([] Int) -> ([] Int) -> Bool))) (seq a (undefined::Int))))
head (id ([]::[] (((([] Int) -> [] (Int -> Bool)) -> Bool) -> ([] Int) -> [] Int))) (\a -> head (seq a (undefined::([] Bool) -> Int -> [] Bool) (undefined::[] Bool) (case1 (\b -> head) 2 (seq a (undefined::[] Int)))))
(\a -> seq a (\b -> seq a (seq a ((\c -> map (\d -> d) (seq c (undefined::[] Int))) (seq a (seq a (\c -> b))))))) (undefined::([] ([] ([] (Bool -> Bool)))) -> [] (([] Int) -> Bool))
(undefined::([] Int) -> [] Int)
\a -> a
(\a -> seq a ((\b -> seq b (seq b (\c -> seq a id) b)) (seq a (seq a (\b -> b)) ((||) False True)))) ((\a -> seq a ([]::[] (([] (([] Bool) -> Bool)) -> ([] Int) -> Int -> Int))) ((undefined::(Int -> Bool) -> Bool) even))
(\a -> case1 (\b -> \c -> map (seq b id) c) (map (\b -> a) (seq a (seq a (undefined::[] Bool))))) ((\a -> case1 (seq a (undefined::([] Bool) -> ([] ([] Bool)) -> Int)) (seq a 0) (seq a ([]::[] ([] Bool)))) ((undefined::Int -> ([] Int) -> ([] Int) -> [] Int) ((!!) ([]::[] Int) (undefined::Int))))
filter ((undefined::(([] Int) -> [] (Int -> Int)) -> Int -> Bool) ((\a -> \b -> case1 (undefined::Bool -> ([] Bool) -> [] (Int -> Int)) (seq a (undefined::[] (Int -> Int))) (seq a ([]::[] Bool))) (map (\a -> seq a ([]::[] (Int -> Int))) (filter (undefined::([] (Bool -> Bool)) -> Bool) ([]::[] ([] (Bool -> Bool)))))))
head (undefined::[] ((Int -> Int -> Bool) -> ([] Int) -> [] Int)) ((\a -> seq a (\b -> (undefined::Int -> Int -> Bool))) (undefined::[] Int) ((undefined::(([] Int) -> ([] Int) -> [] Bool) -> Bool) (\a -> seq a (map (undefined::Int -> Bool)))))
\a -> seq a (seq a (seq a (\b -> \c -> (undefined::(Int -> [] Int) -> [] Int) (head (undefined::[] (Int -> [] Int)))) (seq a (undefined::Bool -> Int) (seq a (not True))))) (seq a (seq a (\b -> \c -> seq c (undefined::[] (([] Bool) -> [] Bool))) (seq a (seq a (seq a True))) (seq a (seq a ((\b -> seq b (undefined::Bool)) (seq a (seq a ([]::[] ([] ([] ([] Bool)))))))))))
\a -> a
(\a -> (\b -> seq b id) (seq a (head (seq a (undefined::[] (Int -> Int -> [] Int))) (undefined::Int)))) ((undefined::Bool -> ([] (Int -> [] Int)) -> ([] Int) -> [] Int) ((!!) ([]::[] (Bool -> Bool)) (undefined::Int) ((!!) (undefined::[] Bool) (undefined::Int))))
\a -> a
(undefined::([] Int) -> [] Int)
\a -> a
(!!) (map (\a -> seq a (\b -> seq a (undefined::[] Int))) ((undefined::Int -> [] (Int -> Int -> Int -> Bool)) 2)) 1
\a -> map (\b -> 1) (filter even (seq a a))
(undefined::([] Int) -> [] Int)
\a -> seq a a
(\a -> \b -> seq a (seq a ((undefined::Bool -> ([] Int) -> [] Int) (seq b (undefined::Bool))))) ((\a -> seq a (seq a (undefined::Int))) 1) (\a -> \b -> ([]::[] Int))
\a -> (\b -> map (seq b (\c -> b (undefined::[] (([] Bool) -> [] (Bool -> Bool))) a (undefined::Int) 1)) (head (seq a (undefined::[] ([] (Int -> Int -> [] Int)))))) (undefined::([] (([] Bool) -> [] (Bool -> Bool))) -> ([] Int) -> Int -> Int -> Int)
\a -> a
\a -> ([]::[] Int)
case1 ((undefined::(Bool -> Bool -> Bool) -> Int -> ([] Int) -> [] Int) ((==)::Bool -> Bool -> Bool)) ([]::[] Int)
(\a -> (undefined::(Int -> Int) -> Bool -> ([] Int) -> [] Int) (seq a (\b -> b))) ((\a -> seq a (seq a True)) (\a -> seq a (seq a (seq a (undefined::[] (Int -> Int)))))) ((\a -> seq a (\b -> seq a (undefined::Bool))) (undefined::Int) (\a -> seq a (undefined::(([] Int) -> Int) -> [] (Bool -> Bool)) (seq a (\b -> seq a (undefined::Int)))))
(\a -> (\b -> seq a (seq b (seq b take))) ((+1) (seq a (undefined::Int))) ((!!) (seq a (seq a ([]::[] Int))) (seq a (seq a 0)))) (\a -> (undefined::[] ([] ([] (Int -> Int -> [] Int)))))
\a -> case1 (seq a (\b -> seq a (\c -> seq c a))) a ((\b -> (undefined::Bool -> [] (([] Int) -> [] ([] Int))) (seq b (undefined::Bool))) (\b -> (\c -> seq c (undefined::Int)) True))
(\a -> (:) (seq a (case1 (\b -> \c -> 1) (undefined::Int) (seq a (seq a (seq a ([]::[] Bool))))))) (\a -> (undefined::Bool -> [] (([] ([] (Int -> Bool))) -> [] ([] (Int -> Bool)))) (seq a (((==)::[Int] -> [Int] -> Bool) ([]::[] Int) a)))
tail
\a -> (undefined::[] Int)
head (undefined::[] (([] (([] ([] ([] Bool))) -> ([] ([] Bool)) -> [] ([] Bool))) -> ([] Int) -> [] Int)) ((\a -> seq a (seq a (undefined::[] (([] ([] ([] Bool))) -> ([] ([] Bool)) -> [] ([] Bool))))) 1)
(\a -> \b -> (undefined::(([] ([] Bool)) -> Bool) -> Bool -> [] Int) (\c -> seq c (seq c (seq b (undefined::Bool)))) (a (seq a (case1 (undefined::Int -> ([] Int) -> [] ([] Bool)) ([]::[] ([] Bool)) b)))) (case1 (undefined::([] Bool) -> ([] ([] Bool)) -> ([] ([] Bool)) -> Bool) (undefined::([] ([] Bool)) -> Bool) (id (undefined::Bool -> [] ([] Bool)) (not (undefined::Bool))))
(undefined::(([] ([] Int)) -> [] ([] Bool)) -> Int -> ([] Int) -> [] Int) (id (head (undefined::[] (([] ([] Int)) -> [] ([] Bool))))) ((-) ((\a -> seq a 2) (id (undefined::Bool))) (undefined::Int))
tail
\a -> a
\a -> (undefined::(([] ([] Int)) -> [] ([] (Int -> ([] Int) -> Bool))) -> [] Int) (id (map (\b -> (\c -> seq a (\d -> seq b (undefined::[] (Int -> ([] Int) -> Bool))) (c a 2)) (\c -> id (\d -> seq d (seq a (seq d True)))))))
\a -> seq a a
tail
\a -> seq a ((\b -> seq a (seq b (\c -> (undefined::Bool -> [] Int))) (seq b (seq b (seq a ([]::[] ([] Bool))))) (seq a (head (seq a ([]::[] (Int -> Bool))) (undefined::Int)))) (\b -> seq a (\c -> (!!) (head (seq b (seq b (seq c (seq b (seq c ([]::[] ([] (([] Int) -> Int -> Int -> [] Int))))))))))))
(\a -> seq a (undefined::(Bool -> Int -> [] Int) -> ([] Int) -> [] Int) (\b -> seq a (undefined::Int -> [] Int))) ([]::[] (([] Int) -> Bool))
(\a -> (\b -> seq b (\c -> id) b) ((+) (id (undefined::Int)) (seq a (seq a 0)))) ((\a -> seq a (\b -> seq a (seq a (tail (undefined::[] Int))))) ((\a -> seq a (undefined::([] Int) -> Int -> Bool)) (take 2 (undefined::[] Bool))))
tail
id ((\a -> seq a (undefined::Bool -> Int -> ([] Int) -> [] Int) (seq a (seq a (undefined::Bool)))) (\a -> id)) ((\a -> seq a (seq a (seq a (undefined::(([] Int) -> [] Bool) -> Int)))) (head ([]::[] Int)) (\a -> tail (head ([]::[] (Bool -> [] Bool)) (not True))))
(undefined::(([] ([] (Int -> Int -> Bool))) -> [] (Bool -> Bool)) -> ([] Int) -> [] Int) ((!!) (id (undefined::[] (([] ([] (Int -> Int -> Bool))) -> [] (Bool -> Bool)))) 0)
(\a -> seq a ((\b -> seq b b) (case1 (undefined::Int -> ([] Int) -> [] Int) (id (undefined::[] Int))))) (id (id (tail ([]::[] (([] (([] Int) -> ([] Int) -> Bool)) -> ([] (Bool -> Bool)) -> [] (Bool -> Bool))))))
\a -> seq a a
(undefined::Bool -> Bool -> ([] Int) -> [] Int) (undefined::Bool) ((||) (id ((undefined::([] Int) -> Bool) (undefined::[] Int))) True)
\a -> (\b -> seq a (seq a (\c -> a)) (\c -> seq b (seq b (seq c ((++) (seq b (undefined::[] (([] Int) -> Bool))) (seq b (undefined::[] (([] Int) -> Bool)))))))) (undefined::[] (([] Int) -> Int -> Int))
\a -> a
\a -> (\b -> seq b (seq a (seq a (\c -> (undefined::Bool -> [] Int))) (\c -> head (seq a (undefined::[] Bool))) (seq b (seq a (undefined::Bool -> Bool)) (seq a False)))) (\b -> seq b (undefined::Bool -> Int -> ([] ([] Int)) -> [] ([] (Int -> Int))) (undefined::Bool))
filter (\a -> seq a ((\b -> head (seq a (\c -> ([]::[] (Bool -> Bool))) (seq a (seq b (undefined::[] ([] Int)))))) (case1 (\b -> (undefined::([] ([] Bool)) -> Bool)) (seq a (undefined::Bool)) (seq a ([]::[] ([] Bool))))) True)
(\a -> (\b -> (undefined::Bool -> ([] Int) -> [] Int) (seq b (seq a (undefined::Bool)))) ((\b -> seq a (seq b (seq b ([]::[] ([] (([] ([] Int)) -> [] Bool)))))) (seq a (seq a (seq a (undefined::Bool)))))) ((\a -> (:) ((&&) True) (seq a ([]::[] (Bool -> Bool)))) (id (\a -> seq a ([]::[] (Bool -> Bool))) (head (undefined::[] Bool))))
(\a -> \b -> seq b (head (seq a ([]::[] (([] Int) -> Bool -> [] Int))) b) (not (head ([]::[] Bool)))) ((\a -> \b -> (\c -> seq c (seq a ([]::[] (([] Int) -> Bool)))) (seq a (seq a (seq b a)))) (head ([]::[] ((([] ([] Bool)) -> [] Bool) -> Bool)) (\a -> ([]::[] Bool))))
(\a -> seq a (\b -> seq a (seq b (enumFromTo'::Int -> Int -> [Int]) (seq b 0)) (seq b (seq a (+1)) (seq b (seq b (seq a (undefined::Int))))))) ((!!) ([]::[] (Int -> Bool)))
(undefined::Bool -> (([] Int) -> Int -> [] Int) -> ([] Int) -> [] Int) (not (case1 (undefined::Int -> ([] Int) -> Bool) False (undefined::[] Int))) (\a -> (\b -> seq b (undefined::Int -> Int -> [] Int)) (undefined::[] Int) ((\b -> seq a (b (undefined::[] ([] ([] (Bool -> Bool)))))) (\b -> seq b (undefined::Int))))
\a -> map (\b -> 2) (undefined::[] ((([] Int) -> [] (([] Int) -> Bool)) -> ([] Int) -> [] ([] Int)))
\a -> a
case1 ((undefined::Int -> Int -> ([] Int) -> ([] Int) -> [] Int) (head ([]::[] (Bool -> Int)) (not (undefined::Bool)))) (head (undefined::[] (([] ([] ([] Bool))) -> ([] Int) -> [] Int)) ((\a -> seq a (undefined::[] ([] ([] Bool)))) (\a -> \b -> b))) (take ((undefined::Bool -> Int) (undefined::Bool)) ((\a -> seq a (undefined::[] Int)) 2))
(\a -> seq a (\b -> (undefined::([] Int) -> [] Int)) (seq a ((undefined::([] Bool) -> ([] Int) -> [] (Bool -> Bool)) (seq a (tail ([]::[] Bool)))))) (\a -> \b -> seq b ((\c -> \d -> seq a (seq a c)) (seq a (seq a (seq a False))) (seq a (\c -> c) (seq b (seq b (seq a (undefined::Bool)))))))
(undefined::([] Int) -> [] Int)
(\a -> seq a (seq a (seq a (\b -> (:))) (undefined::Bool)) (seq a (seq a (\b -> seq a (undefined::Int))) id)) (undefined::([] Int) -> ([] (Int -> [] Int)) -> ([] Int) -> [] (Int -> [] Int))
\a -> a
\a -> ([]::[] Int)
(\a -> \b -> id (\c -> (undefined::([] Int) -> [] Int)) (seq a (head ([]::[] ([] Bool))))) (head (undefined::[] (([] Int) -> Int)) ((enumFromTo'::Int -> Int -> [Int]) (undefined::Int) 2)) (\a -> (\b -> seq a (\c -> \d -> b) (seq b (seq b (seq a True)))) a)
\a -> a
(\a -> head (id (\b -> seq b (undefined::[] (([] Int) -> [] Int))) (id (\b -> a) (tail (seq a (undefined::[] Int)))))) (head (undefined::[] ((([] Int) -> Int -> Int) -> ([] Int) -> Bool -> Bool)) (\a -> (undefined::(Int -> Int) -> Int -> Int) (seq a (head ([]::[] (Int -> Int))))))
\a -> (undefined::[] Int)
\a -> a
\a -> (\b -> \c -> seq b (seq c (\d -> seq b a) (seq a (seq b (undefined::Bool))))) (seq a (\b -> id (seq a ([]::[] ([] Bool))))) (\b -> (\c -> \d -> c) (seq a (seq b b)) (undefined::([] Bool) -> ([] Int) -> Bool))
id (id (\a -> seq a (seq a ((++) (seq a (filter (undefined::Int -> Bool) (seq a (seq a ([]::[] Int))))))))) (\a -> \b -> (undefined::([] Int) -> [] Bool))
case1 (\a -> id (\b -> id)) ((\a -> seq a (undefined::Bool -> ([] Int) -> [] Int)) (head (undefined::[] Bool)) ((\a -> a) (undefined::Bool))) ([]::[] ([] (Int -> Int)))
\a -> map (seq a (\b -> seq a (\c -> (undefined::Int)) (seq a (\c -> \d -> seq b ([]::[] ([] Int))) (seq b (seq b 1))))) (map (seq a ((undefined::Int -> Bool -> Int -> Int -> Bool) (undefined::Int))) (tail (seq a (seq a ([]::[] Bool)))))
case1 ((undefined::Bool -> Bool -> ([] Bool) -> ([] Int) -> [] Int) ((\a -> seq a (undefined::Bool)) 1)) ((!!) ((\a -> seq a (undefined::[] (([] Int) -> [] Int))) (undefined::Bool)) (undefined::Int)) ((undefined::(([] Int) -> [] ([] Int)) -> [] Bool) (undefined::([] Int) -> [] ([] Int)))
\a -> a
(\a -> seq a (seq a (undefined::([] Int) -> [] Int))) (\a -> id (undefined::([] Int) -> [] (Int -> Bool -> Bool)))
case1 (id (undefined::(Bool -> Bool) -> ([] (Bool -> Bool)) -> ([] Int) -> [] Int)) (take ((undefined::Int -> ([] ([] Bool)) -> Int) (undefined::Int) ((\a -> seq a ([]::[] ([] Bool))) ([]::[] (Bool -> Bool))))) (undefined::[] (Bool -> Bool))
\a -> seq a ((!!) ([]::[] ((([] Int) -> [] (([] Int) -> [] Int)) -> [] Int))) (id (seq a (\b -> seq a 2) (seq a False))) (head (seq a (seq a (undefined::[] (([] Int) -> [] (([] Int) -> [] Int))))))
\a -> seq a (seq a (\b -> seq a (seq a (seq b (undefined::(([] Int) -> [] (([] Int) -> Bool)) -> [] Int))) (\c -> tail ((!!) ([]::[] ([] (([] Int) -> Bool))) (head ([]::[] Int))))) (\b -> seq a (seq b (\c -> seq b ((undefined::Int -> [] ([] ([] ([] (Int -> Bool))))) (id 2))) (seq b (\c -> seq a (undefined::Bool)) (\c -> a)))))
\a -> (undefined::[] Int)
\a -> a
\a -> seq a (\b -> \c -> seq b a) (seq a (undefined::Bool)) (\b -> head (map (\c -> \d -> (undefined::[] ([] ([] Bool)))) (seq a ([]::[] Bool))) ([]::[] Int))
(\a -> \b -> \c -> seq a c) (undefined::Int) (case1 (\a -> seq a (\b -> \c -> \d -> seq d (undefined::[] Int))) (\a -> seq a (undefined::Bool -> ([] Int) -> [] Int) (seq a (undefined::Bool))) (filter (\a -> a) (undefined::[] Bool)))
(\a -> \b -> tail (case1 (seq a (undefined::Bool -> ([] Bool) -> [] Int)) (seq a (seq b b)) ((:) a (undefined::[] Bool)))) (odd ((+) ((!!) ([]::[] Int) 1) (case1 (undefined::Int -> ([] Int) -> Int) (undefined::Int) ([]::[] Int))))
(!!) (head ([]::[] ([] ((([] Int) -> Bool) -> ([] Int) -> [] Int)))) ((+1) (head (undefined::[] (Int -> Int)) (id (undefined::Int)))) ((undefined::(([] Int) -> [] (Int -> Int)) -> ([] Int) -> Bool) (undefined::([] Int) -> [] (Int -> Int)))
(\a -> \b -> \c -> seq c (undefined::Bool -> [] Int) (seq a (seq a (seq c a)))) ((\a -> seq a (a (seq a 2))) odd) ((\a -> seq a (seq a (seq a (undefined::Bool -> ([] Bool) -> [] Bool)) True)) ((!!) (undefined::[] (([] Int) -> [] (Int -> Bool))) (undefined::Int)))
(++) ((\a -> seq a ((undefined::([] ([] (([] (Int -> Int)) -> [] (Int -> Int)))) -> [] Int) (seq a ([]::[] ([] (([] (Int -> Int)) -> [] (Int -> Int))))))) (\a -> \b -> b))
\a -> a
\a -> (enumFromTo::Int -> Int -> [Int]) ((undefined::Bool -> (Int -> ([] Int) -> Int) -> Int) (undefined::Bool) (\b -> id (\c -> seq a (seq a b)))) ((\b -> b) ((!!) ([]::[] ((Int -> Int) -> Int)) (undefined::Int) (\b -> seq a b)))
\a -> a
(\a -> seq a (\b -> (\c -> seq c (seq a (\d -> b)) (undefined::[] (([] Int) -> [] Int))) (\c -> (undefined::[] Bool)))) (id (undefined::([] (([] Int) -> [] Int)) -> ([] Int) -> [] ([] Int)))
\a -> seq a a
\a -> head ([]::[] ((([] (([] Int) -> Bool -> Bool -> Bool)) -> Int -> [] Int) -> [] Int)) (id (\b -> case1 (\c -> \d -> \e -> d) (seq a (id (undefined::Int -> [] Int))) (seq a (seq b a))))
(\a -> seq a (seq a (seq a ((!!) (map (\b -> id) (seq a ([]::[] Bool))) (seq a (\b -> (undefined::Int)) (seq a 1)))))) (\a -> map ((undefined::Bool -> ([] ([] (Bool -> Bool))) -> Bool -> Bool) (head (undefined::[] Bool))) (map (\b -> ([]::[] ([] (Bool -> Bool)))) (seq a (undefined::[] Int))))
\a -> seq a (undefined::[] Int)
id (\a -> seq a (seq a (seq a (seq a (seq a (\b -> seq b (undefined::([] Int) -> [] Int)))))) (head (seq a (seq a (undefined::([] Bool) -> [] (Int -> [] Int))) (head (undefined::[] ([] Bool)))))) (\a -> (++) ((\b -> seq b (undefined::Int -> [] (([] Int) -> Int -> Int))) a a))
(:) ((\a -> seq a (\b -> (undefined::Int)) (seq a (a (undefined::[] Int) (undefined::[] Int)))) ((\a -> seq a (head ([]::[] (([] Int) -> ([] Int) -> Bool)))) (((==)::Int -> Int -> Bool) (undefined::Int) 0)))
(!!) (filter (\a -> (undefined::Bool)) (tail (undefined::[] (Int -> ([] Int) -> [] Int)))) ((\a -> seq a (seq a (undefined::Int))) (tail (undefined::[] (Bool -> Bool)))) (undefined::Int)
\a -> seq a (case1 (\b -> seq b (\c -> \d -> ([]::[] Int))) ((undefined::([] ([] Bool)) -> Int -> [] Int) (seq a ([]::[] ([] Bool)))) a (case1 (\b -> seq b (undefined::([] Int) -> Int -> Int)) (\b -> (undefined::Int)) a (seq a (seq a (undefined::(Int -> Int) -> Int)) (seq a (seq a id)))))
(undefined::(([] Int) -> [] ([] Int)) -> ([] Int) -> [] Int) (undefined::([] Int) -> [] ([] Int))
\a -> seq a (\b -> (undefined::[] Int)) (seq a (seq a (id (\b -> (undefined::([] (Int -> Int)) -> [] (Int -> Int))) (seq a (id ((==)::Bool -> Bool -> Bool) False)))))
take (case1 (undefined::Int -> ([] Int) -> Int) (id (\a -> (undefined::Int)) ((\a -> seq a True) False)) (take ((+1) 0) ([]::[] Int)))
(undefined::(([] ([] (Int -> Bool))) -> ([] (([] Int) -> Int -> [] Int)) -> Int -> [] Int) -> ([] Int) -> [] Int) (\a -> (undefined::([] (([] Int) -> Int -> [] Int)) -> Int -> [] Int))
\a -> map (\b -> seq a (undefined::(([] Int) -> ([] Int) -> [] Bool) -> Int) (\c -> map (id (undefined::([] Bool) -> Int -> Bool) (seq c (seq c (undefined::[] Bool)))))) (id (id (seq a ([]::[] (([] ([] (Bool -> Bool))) -> ([] ([] ([] Bool))) -> [] ([] (Bool -> Bool)))))))
(undefined::Int -> (([] Int) -> Int -> Int -> Int) -> ([] Int) -> [] Int) ((\a -> seq a (undefined::Int)) (\a -> seq a (seq a (seq a False)))) (\a -> (undefined::Int -> Int -> Int))
case1 (\a -> (++)) (case1 (\a -> seq a (++)) (\a -> seq a a) (head ([]::[] ([] Int)))) ((\a -> seq a ((:) (undefined::Int) (undefined::[] Int))) (head ([]::[] (([] Int) -> Int))))
\a -> (undefined::[] Int)
\a -> map (seq a (\b -> seq b (seq a (seq a (undefined::Bool -> Bool -> Int) (seq a (seq a True)) (seq a (seq b (\c -> True) (seq a (seq b ([]::[] ([] Bool)))))))))) ([]::[] (([] ([] (([] ([] Int)) -> [] Int))) -> [] Bool))
\a -> seq a (\b -> seq a (id (\c -> a)) (case1 (\c -> \d -> seq a (undefined::Int -> Int -> Bool)) (\c -> seq c even))) (map (\b -> seq a ([]::[] (Int -> Bool))) ((\b -> seq b (seq b (undefined::[] ([] (([] Int) -> Bool))))) (head (seq a (undefined::[] (([] Int) -> Int))))))
filter (\a -> (\b -> (undefined::Bool -> Bool) (seq b (\c -> seq a (seq c c)) (not (seq a (undefined::Bool))))) (seq a (seq a (undefined::(([] ([] (Int -> Int))) -> [] (Int -> Int)) -> [] (Bool -> Bool)))))
(undefined::(([] (Int -> Bool)) -> Int) -> Int -> ([] Int) -> [] Int) (\a -> seq a (\b -> 2) (seq a (seq a (seq a (undefined::Int))))) 2
\a -> (\b -> seq a (head (seq a (undefined::[] (Bool -> Int -> [] Int))) (seq b (head (undefined::[] Bool)))) (seq a (seq b (\c -> 2)) (\c -> seq b (\d -> False)))) (\b -> \c -> id (seq b (\d -> case1 (\e -> c) ((||) (seq a (undefined::Bool)) (seq c (undefined::Bool))))))
\a -> seq a a
(undefined::([] Int) -> [] Int)
(\a -> \b -> (!!) (map (\c -> b) (seq a ([]::[] Bool))) (seq a (\c -> (undefined::Int)) (seq b (seq b (undefined::[] ([] ([] (Int -> Bool)))))))) (\a -> seq a (head (seq a (head (seq a ([]::[] (Bool -> [] (([] Int) -> Int))))) (id (\b -> True) (seq a (seq a (seq a ([]::[] Int))))))))
(\a -> case1 (\b -> (undefined::([] ([] Int)) -> ([] Int) -> [] Int) (id (seq a ([]::[] ([] Int))))) (id (id (undefined::([] Bool) -> [] Int) (seq a (seq a (undefined::[] Bool)))))) (\a -> seq a (seq a (seq a (\b -> seq a (seq a (\c -> ([]::[] (Bool -> Bool))) (seq a (seq b (undefined::Int))))) ([]::[] (Int -> Int)))))
\a -> a
tail
\a -> seq a ((undefined::((([] Int) -> ([] Int) -> Bool) -> ([] Int) -> ([] Int) -> ([] Int) -> Bool) -> [] Int) (\b -> (undefined::([] Int) -> ([] Int) -> ([] Int) -> Bool)))
(++) (undefined::[] Int)
(++) (map (\a -> (undefined::Int)) ((undefined::Int -> [] ((([] Int) -> [] ([] (([] Int) -> [] Bool))) -> Bool)) (case1 (\a -> (undefined::([] Int) -> Int)) 0 ([]::[] Int))))
(!!) ((\a -> seq a (\b -> ([]::[] (([] Int) -> [] Int))) (seq a (undefined::Bool))) (case1 (\a -> id) ([]::[] Int) ([]::[] Int))) (case1 (\a -> \b -> seq b (seq a (seq a 2))) (head (undefined::[] Int)) (take 0 (undefined::[] (Bool -> Bool))))
\a -> seq a (head (seq a (\b -> seq a (seq b (id (seq b ([]::[] (Bool -> [] Int)))))) (seq a (seq a (\b -> (undefined::Bool))) (head (seq a (undefined::[] (([] (([] Bool) -> Bool)) -> Bool))))))) (seq a (undefined::Bool))
(\a -> take (seq a ((!!) ((\b -> seq b (seq b ([]::[] Int))) (seq a (undefined::Int))) (seq a (id (undefined::Bool -> Int) a))))) (id (\a -> (\b -> seq b (undefined::Bool)) (head (undefined::[] (([] Int) -> Int)))) (undefined::[] (([] ([] (Int -> Bool))) -> [] Bool)))
(:) ((\a -> seq a (id (\b -> (undefined::Bool -> Int)) (seq a (id ((==)::Int -> Int -> Bool)))) (id (undefined::(([] Int) -> Int -> [] Int) -> Bool) (\b -> (undefined::Int -> [] Int)))) (\a -> \b -> seq b (seq a (seq b (undefined::([] (Bool -> Bool)) -> Bool -> Bool)) (seq a (undefined::[] (Bool -> Bool)))) (a (seq a (undefined::[] Int)) (seq a ([]::[] (Int -> Bool -> Bool))) b (seq a True))))
(\a -> (!!) (seq a (seq a ([]::[] (([] Int) -> [] Int))))) ((undefined::Int -> [] (([] Int) -> Bool)) 1) ((\a -> (\b -> seq a b) (head (seq a ([]::[] Int)))) ((\a -> \b -> seq a (seq b (undefined::[] (([] Int) -> Bool)))) (tail (undefined::[] Int))))
\a -> seq a (tail a)
\a -> seq a a
(undefined::([] (Int -> [] Int)) -> Int -> ([] Int) -> [] Int) ((\a -> seq a (tail (undefined::[] (Int -> [] Int)))) 2) ((undefined::(([] Int) -> Int) -> Int) ((\a -> \b -> seq a (seq b 0)) (undefined::([] ([] Bool)) -> Bool)))
\a -> (undefined::([] (Int -> Int)) -> (([] Int) -> Bool) -> [] Int) (seq a (undefined::[] (Int -> Int))) (id (undefined::(([] Int) -> Int -> Int -> Int) -> ([] Int) -> Bool) (\b -> seq a ((!!) (seq a (seq a (undefined::[] (Int -> Int -> Int)))) (undefined::Int))))
\a -> ([]::[] Int)
(\a -> seq a (seq a (head (id (seq a ((undefined::Bool -> [] (([] Int) -> [] Int)) ((undefined::Int -> Bool) (seq a (seq a 1))))))))) (map (\a -> seq a (\b -> tail b)) ((\a -> a) ([]::[] Bool)))
(\a -> seq a ((!!) ([]::[] (Bool -> ([] Int) -> [] Int)) (head ([]::[] Int)) (seq a (head (seq a ([]::[] ((([] Int) -> [] Int) -> Bool))) (\b -> b))))) (undefined::([] (([] Int) -> ([] ([] Int)) -> [] Bool)) -> Int -> Int)
\a -> a
\a -> (undefined::[] Int)
\a -> (!!) (seq a (seq a (seq a (take ((+1) (seq a (seq a 2))) (seq a (\b -> ([]::[] ([] Int))) (seq a (seq a ([]::[] Bool)))))))) ((undefined::Bool -> Int) ((undefined::(Int -> Bool) -> Bool) (id (\b -> seq a (undefined::Bool)))))
head (id ([]::[] (([] (([] ([] (([] ([] Bool)) -> [] ([] Bool)))) -> Int)) -> ([] Int) -> [] Int))) ((!!) (id ([]::[] ([] (([] ([] (([] ([] Bool)) -> [] ([] Bool)))) -> Int)))) (head (undefined::[] (([] (Int -> Int)) -> Int)) (head (undefined::[] ([] (Int -> Int))))))
\a -> seq a ((\b -> (\c -> seq a (id (undefined::(([] Int) -> [] Int) -> [] Int)) (seq c (seq c (seq c id)))) (seq b b)) ((\b -> (+) (seq b (undefined::Int)) (seq a (seq b (seq b 0)))) (seq a (\b -> \c -> not c))))
\a -> a
(\a -> (\b -> id (seq b (undefined::Int -> ([] Int) -> [] Int))) (seq a False) 0) ((\a -> seq a (seq a ([]::[] ([] ([] (([] Int) -> ([] Int) -> [] Int)))))) ((undefined::(Int -> ([] Int) -> [] Bool) -> Int) (\a -> seq a (\b -> seq a (undefined::[] Bool)))))
tail
head ((\a -> seq a (seq a (seq a (undefined::[] (([] (Int -> Bool)) -> ([] Int) -> [] Int))))) (id (head (undefined::[] (Int -> Bool)) (id 0)))) (id ((\a -> seq a (id (seq a (seq a (undefined::[] (Int -> Bool)))))) (\a -> False)))
head ((\a -> head (seq a (undefined::[] (Int -> [] (([] Int) -> [] Int)))) (case1 (\b -> (undefined::([] ([] Bool)) -> Int)) (seq a 1) (seq a (undefined::[] ([] Bool))))) (\a -> case1 (\b -> \c -> \d -> seq b b) ((undefined::Bool -> ([] Int) -> Bool) (undefined::Bool)) (seq a (undefined::Int -> [] Bool) (seq a a))))
(\a -> seq a (seq a (seq a (id (seq a (\b -> seq a (\c -> c)))) (head (undefined::[] (Bool -> Bool -> Int -> Int)) False)))) ((\a -> \b -> seq a (\c -> seq c b) (seq a (seq a (undefined::Bool)))) (\a -> seq a (seq a (head ([]::[] (Bool -> Int -> Int))) True)))
(undefined::([] Int) -> [] Int)
(\a -> seq a (\b -> seq a (\c -> (undefined::([] Int) -> [] Int))) True) ((\a -> seq a (seq a (seq a (undefined::[] ([] (Int -> Bool)))))) (head ([]::[] Int))) (undefined::Bool)
\a -> a
(\a -> id (\b -> \c -> tail) (undefined::Int) (seq a (\b -> seq b (undefined::Int)) (seq a False))) ((\a -> seq a (id (seq a (undefined::Int -> [] ([] ([] (Int -> [] Int)))) 2))) ((\a -> id (seq a (!!))) (\a -> a)))
(undefined::([] Int) -> [] Int)
\a -> case1 (head (take (seq a (seq a 2)) (seq a (seq a ([]::[] (Int -> ([] Int) -> [] Int)))))) (map (\b -> seq a (seq a (seq b b))) (seq a a)) a
\a -> (\b -> id (\c -> \d -> a) (seq a (seq a (seq b ([]::[] (Int -> Int)))))) (seq a (\b -> (undefined::Int -> [] Bool)) (seq a (map (+1)))) ((-) ((undefined::Int -> Int) (seq a (seq a (seq a (undefined::Int))))) (id (seq a (undefined::Bool -> Int)) (seq a (seq a True))))
\a -> take ((\b -> head (seq b ([]::[] (Int -> Int))) (undefined::Int)) ((\b -> seq b (seq a (\c -> ([]::[] Bool)))) (seq a ((+1) (undefined::Int))))) a
case1 (\a -> (undefined::Bool -> ([] Int) -> ([] Int) -> [] Int) (seq a (seq a even) a)) (\a -> a) ((\a -> \b -> seq a ([]::[] Int)) (\a -> a) (undefined::Int))
\a -> a
(undefined::([] Int) -> [] Int)
\a -> a
\a -> case1 (\b -> \c -> \d -> seq d (seq a (seq d (undefined::[] Int)))) (seq a (undefined::(([] Int) -> Int) -> [] Int)) (undefined::[] Bool) (seq a ((\b -> (!!) (seq b ([]::[] (([] Int) -> Int))) 0) (\b -> id)))
(\a -> seq a (head (undefined::[] ((([] Int) -> [] Int) -> ([] Int) -> [] Int)))) ((\a -> seq a (undefined::Int)) id) ((undefined::(([] (Bool -> Bool)) -> Bool -> Bool) -> ([] Int) -> [] Int) (id ((undefined::Int -> ([] (Bool -> Bool)) -> Bool -> Bool) (id 0))))
\a -> (enumFromTo'::Int -> Int -> [Int]) (undefined::Int) ((+1) (seq a (seq a (\b -> seq b 2)) (\b -> a)))
id (\a -> seq a (undefined::Bool -> Bool -> ([] Int) -> [] Int) (seq a (seq a (undefined::Bool)))) ((\a -> id (seq a (undefined::[] ([] (Int -> Bool))))) (\a -> a)) ((\a -> (\b -> seq b (seq a (seq a (undefined::Bool)))) ((++) ([]::[] ([] Bool)) ([]::[] ([] Bool)))) (\a -> (undefined::(Int -> Int) -> [] ([] Bool)) ((+) (undefined::Int))))
\a -> seq a (map (undefined::(([] ([] ([] (([] Int) -> Int -> Int -> Int)))) -> [] ([] ([] ([] (([] Int) -> [] Int))))) -> Int) (seq a ([]::[] (([] ([] ([] (([] Int) -> Int -> Int -> Int)))) -> [] ([] ([] ([] (([] Int) -> [] Int))))))))
(undefined::([] Int) -> [] Int)
(\a -> (\b -> \c -> map (\d -> seq b (undefined::Int)) (seq a (seq c ([]::[] ([] Bool))))) ((\b -> seq b (\c -> seq b c)) (undefined::Int))) (head (undefined::[] ((([] ([] Bool)) -> [] Bool) -> ([] ([] Int)) -> [] ([] (Int -> Bool)))))
(\a -> case1 ((!!) (tail (undefined::[] (Int -> ([] Int) -> [] Int))) (seq a (seq a (undefined::Int)))) (seq a (\b -> (undefined::[] Int)) ((!!) (seq a (undefined::[] ([] Bool)))))) (undefined::([] ([] (([] Bool) -> [] (Bool -> Bool)))) -> [] ([] (Int -> Int)))
\a -> ([]::[] Int)
id
id
(undefined::([] Int) -> [] Int)
(\a -> (:) (seq a (\b -> (\c -> c (seq a (undefined::Int))) ((!!) (undefined::[] Int))) ([]::[] (([] (([] Bool) -> [] (Bool -> Bool))) -> [] Bool)))) ((undefined::Int -> Int -> Bool -> Bool) ((!!) ([]::[] (Bool -> Int)) 1 (undefined::Bool)))
case1 (\a -> \b -> (!!) (take a ([]::[] (([] Int) -> [] Int))) a) id ((\a -> seq a (undefined::Bool -> [] Int)) (+1) (((==)::Int -> Int -> Bool) (undefined::Int) 1))
id
(undefined::(([] Int) -> ([] Bool) -> [] Bool) -> ([] Int) -> [] Int) (undefined::([] Int) -> ([] Bool) -> [] Bool)
(\a -> seq a ((undefined::(([] ([] Int)) -> [] ([] Int)) -> ([] Int) -> [] Int) (\b -> seq b ((\c -> seq c (seq c (undefined::[] ([] Int)))) (seq b (\c -> seq b (undefined::[] Bool))))))) (head (id (undefined::[] ((([] Int) -> Int -> [] Int) -> [] ([] Bool)))) (\a -> seq a (\b -> seq b (\c -> ([]::[] Int)) (seq a b))))
tail
\a -> a
\a -> (\b -> \c -> map (\d -> b) (seq b (seq c ([]::[] Bool)))) (head (map (seq a id) a)) ((\b -> id (\c -> \d -> (undefined::([] Int) -> Bool)) (seq a b)) (undefined::Int))
(undefined::([] Int) -> [] Int)
id
\a -> a
\a -> (undefined::(Int -> [] Int) -> (([] ([] (Bool -> Bool))) -> Bool) -> [] Int) (undefined::Int -> [] Int) (undefined::([] ([] (Bool -> Bool))) -> Bool)
\a -> a
\a -> a
(\a -> seq a (seq a ((\b -> \c -> \d -> b) (seq a (seq a (seq a ([]::[] Int))))) ((\b -> seq b (id 1)) (seq a (\b -> (||)))))) (\a -> seq a (seq a (\b -> \c -> \d -> d)))
\a -> a
(\a -> (\b -> seq b ((!!) (undefined::[] (([] Int) -> [] Int)))) (seq a (seq a (seq a (undefined::[] Bool))))) ((\a -> id (seq a ([]::[] ([] (Bool -> Bool))))) True) ((\a -> (\b -> seq b (seq b (seq b (undefined::Int)))) (seq a (seq a (seq a (undefined::Bool))))) (\a -> \b -> seq a (seq b (seq b (undefined::([] Bool) -> Int -> Bool)) (seq a ([]::[] Bool)))))
(undefined::([] Int) -> [] Int)
(\a -> \b -> seq b (seq a (seq b (\c -> (undefined::([] Int) -> [] Int)) (id (undefined::Bool))))) ((\a -> not (seq a (undefined::Bool))) (\a -> seq a ([]::[] ([] Bool)))) (\a -> case1 ((undefined::Int -> Int -> ([] Int) -> [] Bool) (undefined::Int)) (seq a (seq a (undefined::[] Bool))) (seq a (seq a (undefined::[] Int))))
(undefined::(([] ([] (Int -> ([] Int) -> Int))) -> [] (Int -> ([] Int) -> Int)) -> ([] Int) -> [] Int) (\a -> head (tail ([]::[] (Bool -> [] (Int -> ([] Int) -> Int)))) ((||) (id False) (head ([]::[] Bool))))
head (id (undefined::[] (([] ([] Int)) -> Int -> ([] Int) -> [] Int))) (tail (map (undefined::(([] Int) -> [] Int) -> [] Int) (undefined::[] (([] Int) -> [] Int)))) ((!!) (id (\a -> (undefined::[] Int)) False) (undefined::Int))
tail
\a -> map (head (seq a (seq a ((:) (\b -> seq b (seq b ((+1) (undefined::Int)))) (seq a (undefined::[] ((([] Int) -> ([] Int) -> [] Bool) -> Int))))))) (seq a (\b -> seq a (seq a (tail (seq a (undefined::[] (([] Int) -> ([] Int) -> [] Bool)))))) (seq a ((\b -> seq b (seq a (undefined::Int))) (undefined::[] Int))))
\a -> a
tail
\a -> seq a a
\a -> seq a a
take ((\a -> seq a (\b -> seq a (undefined::Bool -> Int))) (undefined::Bool) (map (\a -> \b -> seq a (undefined::Bool)) (undefined::[] ([] ([] ([] ([] ([] Bool))))))) (((==)::Bool -> Bool -> Bool) (id ((\a -> a) True)) (id ((undefined::(([] Bool) -> [] Bool) -> Bool) (undefined::([] Bool) -> [] Bool)))))
\a -> tail ([]::[] Int)
case1 (undefined::Int -> ([] Int) -> [] Int) (take ((\a -> seq a (seq a 1)) ([]::[] ([] (Int -> [] Int)))) (map (\a -> (undefined::Int)) ([]::[] Bool)))
(!!) (map (undefined::(([] ([] ([] ([] Bool)))) -> [] Int) -> ([] Int) -> [] Int) ((++) (undefined::[] (([] ([] ([] ([] Bool)))) -> [] Int)) (undefined::[] (([] ([] ([] ([] Bool)))) -> [] Int)))) ((\a -> (+) (seq a (seq a (undefined::Int))) (undefined::Int)) (\a -> case1 (\b -> (undefined::([] Int) -> Int -> [] Int)) (undefined::Int -> [] Int) ([]::[] Int)))
\a -> a
id (\a -> (undefined::([] (([] Int) -> Bool)) -> ([] Int) -> [] Int)) (not ((\a -> seq a (seq a (undefined::Bool))) ([]::[] ([] (Bool -> Bool))))) ([]::[] (([] Int) -> Bool))
(!!) ((\a -> map (seq a (\b -> tail)) (seq a (seq a ([]::[] Bool)))) ((undefined::Bool -> Int -> [] Int) ((&&) (undefined::Bool) False))) (id ((\a -> \b -> seq a 2) (undefined::[] (Int -> Int))) (((==)::[Int] -> [Int] -> Bool) (undefined::[] Int) ([]::[] Int)))
\a -> (undefined::(([] (Bool -> Bool)) -> Bool -> Bool) -> [] Int) ((\b -> seq b ((\c -> seq c (seq a head)) (seq a (seq a True)))) (\b -> \c -> take (seq b (seq b c)) b))
\a -> a
\a -> (!!) (map (undefined::(Int -> Int -> Int) -> [] Int) ((\b -> seq b (seq a ([]::[] (Int -> Int -> Int)))) a)) ((undefined::(([] Int) -> [] Int) -> Int) (\b -> b))
\a -> tail (seq a (filter (seq a (seq a (\b -> id (seq a (\c -> seq b (seq b False))) (\c -> seq a (seq b (undefined::Int -> [] (Int -> [] Int))) (head a))))) a))
(\a -> seq a (seq a (\b -> seq b (seq b (\c -> (undefined::([] Int) -> [] Int)) (seq b (seq a 0))))) (seq a (\b -> seq b (seq b (undefined::[] ([] (Int -> Bool))))) (seq a (id (undefined::Int))))) (\a -> case1 (undefined::Int -> ([] Int) -> [] ([] Bool)) (seq a (seq a ([]::[] ([] Bool)))) (seq a (undefined::Int -> [] Int) (seq a (undefined::Int))))
\a -> a
\a -> ([]::[] Int)
tail
tail
case1 ((\a -> seq a (seq a (\b -> \c -> seq b (undefined::([] Int) -> [] Int)))) ((undefined::([] ([] Int)) -> Bool) (undefined::[] ([] Int)))) (\a -> seq a (seq a (id (undefined::([] ([] ([] ([] Bool)))) -> [] Int))) ((\b -> seq b ([]::[] ([] ([] ([] Bool))))) (id True))) (undefined::[] Int)
\a -> a
(\a -> id (\b -> head (undefined::[] (Bool -> ([] Int) -> [] Int)) a)) (id (case1 (undefined::([] Int) -> ([] ([] Int)) -> Bool) (undefined::Bool) (undefined::[] ([] Int)))) (\a -> seq a ((\b -> \c -> seq b (seq a (undefined::[] (Int -> Bool)))) (\b -> seq b (seq b (seq b (undefined::Int)))) ((+1) (id (undefined::Bool -> Int) False))))
\a -> (\b -> \c -> map (id (undefined::([] Bool) -> Int)) (seq b ([]::[] ([] Bool)))) (\b -> (undefined::Bool)) id
head (id (id ([]::[] (Bool -> Int -> ([] Int) -> [] Int)))) ((\a -> even (seq a 1)) (head ([]::[] ([] Bool)))) ((\a -> (\b -> b) (seq a (seq a (seq a 0)))) (head ([]::[] (([] Int) -> [] (Int -> Int -> [] Int)))))
\a -> seq a (map (seq a (\b -> (\c -> seq c (undefined::(([] Int) -> [] ([] Int)) -> Int)) (head a)) (seq a (seq a (\b -> seq b (undefined::[] (([] Int) -> Bool))) (\b -> (+1) b)))) ((undefined::(Bool -> [] ([] Int)) -> [] (([] Int) -> [] ([] Int))) ((\b -> seq a (seq b (undefined::Bool -> [] ([] Int)))) (seq a (seq a (seq a ([]::[] Bool)))))))
\a -> seq a ((\b -> map (\c -> seq c ((\d -> seq d d) (seq c (seq a 2)))) (seq a (seq a (seq b (undefined::[] (([] Int) -> [] ([] (([] Int) -> [] Int)))))))) (seq a (\b -> (undefined::([] Bool) -> [] ([] (Int -> Bool))) (tail ([]::[] Bool))) (seq a (seq a (\b -> case1 (undefined::Bool -> ([] Bool) -> Bool) True (undefined::[] Bool))))))
\a -> (\b -> map ((\c -> seq c (seq a (undefined::(Int -> [] Bool) -> Int))) (seq a (head (undefined::[] ([] ([] Int)))))) (seq b (\c -> seq b ([]::[] (Int -> [] Bool))) (\c -> seq b (seq b ([]::[] Bool))))) ((\b -> \c -> \d -> case1 (\e -> (undefined::([] Int) -> Bool)) (seq b True) a) (case1 (undefined::Bool -> ([] Bool) -> Int) (seq a (undefined::Int)) (seq a ([]::[] Bool))))
case1 (undefined::Bool -> ([] Bool) -> ([] Int) -> [] Int) (case1 ((\a -> seq a (undefined::Int -> ([] Int) -> [] Int)) 1) ((\a -> seq a (undefined::[] Int)) 2)) (head ([]::[] (Int -> Bool -> [] Bool)) 0 (undefined::Bool))
\a -> a
\a -> (\b -> seq b (\c -> case1 (seq c (undefined::Int -> ([] Int) -> [] Int)) ([]::[] Int) (seq c ([]::[] Int))) ((undefined::Int -> ([] Int) -> [] Int) ((-) 1 (undefined::Int)))) (seq a (id (seq a (\b -> seq b ((\c -> seq c (undefined::[] (Int -> ([] Int) -> [] Bool))) ((undefined::Int -> Bool) (seq b (seq b (undefined::Int)))))))))
(\a -> \b -> seq a ((:) (seq b (seq b (undefined::([] Bool) -> Int)) ([]::[] Bool)) (seq b tail ([]::[] Int)))) ((undefined::(Int -> Bool -> Bool) -> ([] (Bool -> Bool)) -> [] (Bool -> Bool)) (\a -> \b -> seq a b))
\a -> seq a (seq a (seq a (seq a (undefined::([] (([] (([] Int) -> Int -> Int -> [] Int)) -> Bool -> Bool)) -> [] Int)))) (seq a ([]::[] (([] (([] Int) -> Int -> Int -> [] Int)) -> Bool -> Bool)))
(undefined::Int -> ([] Int) -> [] Int) ((\a -> seq a (\b -> a)) 2 (\a -> (\b -> \c -> seq b (undefined::Bool)) (id (seq a (undefined::[] Bool)))))
(++) ((\a -> (\b -> seq b (seq a (seq b (undefined::([] Bool) -> [] Int)) (seq a ([]::[] Bool)))) (undefined::Bool)) ((\a -> seq a ((:) (seq a ([]::[] (Int -> Int))) (seq a (undefined::[] ([] (Int -> Int)))))) (map (\a -> tail) (head ([]::[] ([] (Int -> [] Int)))))))
(\a -> (:) (seq a (seq a (\b -> seq a (undefined::Int))) (\b -> head (seq b (undefined::[] Int))))) (head (head ((\a -> map (undefined::Int -> [] ([] ([] (Int -> Bool)))) (seq a (seq a (undefined::[] Int)))) (\a -> 2))))
\a -> seq a (\b -> a) (not True)
(\a -> \b -> seq a (\c -> head ([]::[] (Int -> [] Int)) (seq a (seq c (undefined::Int)))) (head (seq b ([]::[] (([] Int) -> ([] (([] Bool) -> Bool)) -> Int))))) (\a -> a)
(undefined::(([] Int) -> [] (Int -> Bool)) -> ([] Int) -> [] Int) (\a -> case1 (\b -> \c -> (undefined::[] (Int -> Bool))) (seq a (undefined::Int -> [] (Int -> Bool)) (undefined::Int)) (seq a a))
\a -> (undefined::(([] Int) -> [] ([] Int)) -> [] Int) (\b -> (\c -> seq c (head (seq c (undefined::[] (Bool -> [] ([] Int)))) (undefined::Bool))) (seq b (\c -> seq a (undefined::([] Int) -> [] (Int -> Bool))) (filter (undefined::Bool -> Bool) (undefined::[] Bool))))
id (\a -> seq a ((!!) (undefined::[] (Bool -> ([] Int) -> [] Int))) (undefined::Int) (seq a (seq a (seq a (seq a (seq a (undefined::Bool))))))) (\a -> (undefined::[] (([] Int) -> Bool)))
\a -> a
id (\a -> id ([]::[] Int))
(\a -> seq a (\b -> map ((\c -> \d -> c) 0) (tail (undefined::[] (Int -> Int -> [] Int))))) (undefined::[] (([] (Int -> ([] Int) -> Int)) -> ([] Int) -> Bool))
(undefined::(Bool -> Bool) -> ([] Int) -> [] Int) (\a -> a)
\a -> a
tail
id (\a -> seq a (case1 (seq a (\b -> \c -> \d -> d)) (seq a (seq a (seq a (undefined::([] Int) -> [] Int)))) (seq a (seq a (seq a ([]::[] Int)))))) ((undefined::Bool -> [] (([] (Int -> Bool)) -> Int -> [] Int)) ((\a -> seq a (undefined::Bool)) (undefined::([] Int) -> [] ([] Int))))
(undefined::Bool -> ([] Int) -> [] Int) ((\a -> not (seq a ((\b -> seq b (undefined::Bool)) (seq a (seq a (undefined::Int)))))) (\a -> \b -> \c -> ([]::[] ([] ([] Int)))))
(\a -> \b -> (!!) (undefined::[] (([] (([] Int) -> [] Int)) -> [] Int)) (seq b (seq b 1)) (head (tail (seq a (seq a ([]::[] ([] (([] Int) -> [] Int)))))))) (undefined::([] (([] ([] Int)) -> [] ([] ([] Int)))) -> ([] Int) -> [] Int)
(\a -> \b -> seq a ((undefined::([] Int) -> ([] ([] (Bool -> Bool))) -> [] Int) b) ((undefined::Bool -> [] ([] (Bool -> Bool))) (((==)::Bool -> Bool -> Bool) (undefined::Bool) (undefined::Bool)))) ((undefined::([] ([] (Int -> Int))) -> Int -> Bool) ((\a -> seq a (seq a (seq a (undefined::[] ([] (Int -> Int)))))) (undefined::[] Bool)))
case1 (\a -> seq a (seq a (\b -> \c -> (\d -> d) (seq b c)))) ((!!) (undefined::[] (Bool -> ([] Int) -> [] Int)) ((+1) (undefined::Int)) (undefined::Bool)) (undefined::[] (Int -> Int -> Bool))
\a -> (undefined::Bool -> Int -> [] Int) (seq a (seq a (seq a (seq a (undefined::([] ([] ([] Bool))) -> Bool)) (seq a (seq a ([]::[] ([] ([] Bool)))))))) (seq a (head (seq a (seq a (seq a (\b -> a)) (\b -> \c -> seq b ((undefined::([] Int) -> [] (Bool -> Bool)) (seq b a)))))))
(++) ((undefined::(Bool -> Bool -> Bool) -> Int -> [] Int) ((\a -> seq a (\b -> \c -> b)) ([]::[] ([] Bool))) ((\a -> (+) 1 (seq a (seq a 2))) (not (head ([]::[] Bool)))))
(\a -> \b -> seq a (\c -> seq b id) (seq a 2)) ((\a -> head (seq a ([]::[] ([] ([] Int))))) (\a -> seq a (undefined::[] Bool))) ((\a -> head (seq a ([]::[] (Bool -> [] (Int -> Int))))) (((==)::[Int] -> [Int] -> Bool) ([]::[] Int) (undefined::[] Int)) ((!!) (undefined::[] ((Int -> Int) -> Bool)) 0 (\a -> seq a 2)))
\a -> take (id (case1 (undefined::Bool -> ([] Bool) -> Bool -> Int) (undefined::Bool -> Int) ([]::[] Bool)) (seq a (seq a (\b -> b) (seq a (not False))))) (map (head (seq a (undefined::[] ((([] Int) -> Bool) -> Int)))) (seq a (\b -> seq b (undefined::[] (([] Int) -> Bool))) (seq a (seq a (seq a (undefined::Bool))))))
\a -> a
\a -> a
\a -> seq a (undefined::Bool -> (([] Int) -> Int -> Int -> Bool) -> [] Int) (seq a (head (seq a (undefined::[] ((Bool -> Bool) -> Bool))) (seq a ((&&) (undefined::Bool))))) (\b -> seq a (\c -> seq c (seq b (\d -> ((==)::Int -> Int -> Bool))) ((&&) (seq c False))) id)
\a -> head ((\b -> seq b (undefined::[] ((([] ([] Int)) -> [] ([] (Int -> Bool))) -> [] Int))) False) (seq a ((\b -> (\c -> \d -> seq c ([]::[] ([] (Int -> Bool)))) (id (seq b (undefined::Bool)))) 2))
(undefined::([] Int) -> [] Int)
\a -> (undefined::[] Int)
\a -> seq a a
(:) (head ((!!) (head ([]::[] ([] ([] Int)))) 1))
\a -> seq a ([]::[] Int)
(undefined::([] Int) -> [] Int)
(\a -> (\b -> seq b (seq a (\c -> \d -> d)) ((&&) True (undefined::Bool))) ((undefined::Bool -> ([] Int) -> ([] ([] Int)) -> [] Bool) (seq a False))) (\a -> seq a (seq a (undefined::(([] Int) -> [] (Int -> Int)) -> [] Bool) (case1 (undefined::Int -> ([] Int) -> [] (Int -> Int)) (seq a (seq a (undefined::[] (Int -> Int)))))))
(undefined::(([] Int) -> [] ((([] Int) -> [] (Bool -> Bool)) -> ([] Int) -> [] (Bool -> Bool))) -> ([] Int) -> [] Int) (\a -> (undefined::[] ((([] Int) -> [] (Bool -> Bool)) -> ([] Int) -> [] (Bool -> Bool))))
(\a -> (!!) (undefined::[] (Int -> ([] Int) -> [] Int)) (seq a (seq a 1))) ((\a -> \b -> seq a (undefined::[] Int)) (undefined::[] ([] ([] Bool)))) (id ((undefined::(([] Int) -> [] (([] Int) -> [] Int)) -> Int) ((undefined::Bool -> ([] Int) -> [] (([] Int) -> [] Int)) (undefined::Bool))))
id
(undefined::(([] Int) -> [] Int) -> Bool -> ([] Int) -> [] Int) ((undefined::Bool -> ([] Int) -> [] Int) False) (odd (head (undefined::[] (([] (Bool -> Bool)) -> Int -> Int)) (tail ([]::[] (Bool -> Bool))) ((\a -> seq a (undefined::Int)) ([]::[] ([] ([] (Int -> Int)))))))
id
(\a -> (++) ((enumFromTo::Int -> Int -> [Int]) ((\b -> b) (seq a (seq a (undefined::Int)))) (seq a (undefined::Int)))) (undefined::([] Int) -> Int -> ([] Int) -> Int)
(\a -> seq a (seq a ((!!) (undefined::[] (([] Int) -> [] Int))))) (not ((\a -> seq a (seq a (undefined::Bool))) (head ([]::[] ([] Int))))) 0
(\a -> \b -> seq b (seq b (seq a (\c -> seq a (undefined::(([] Bool) -> Bool) -> [] Int)) ((+1) 2)) ((undefined::Bool -> ([] Bool) -> Bool) (seq b True)))) head
(\a -> \b -> (!!) (map (\c -> b) (seq a (seq a (seq b ([]::[] (Bool -> Bool)))))) ((!!) b 1)) (head ([]::[] ([] (([] ([] (([] Int) -> Bool))) -> ([] Int) -> ([] Int) -> Bool))))
\a -> seq a (seq a (filter (seq a (case1 (id (\b -> \c -> even)) (undefined::Int -> Bool) ([]::[] Bool))) (tail a)))
(\a -> seq a take (undefined::Int)) ((\a -> \b -> seq a ((!!) ((\c -> seq c ([]::[] (Int -> Int))) (seq b 0)))) ((\a -> id (seq a True)) (undefined::Int -> [] Int)))
(\a -> seq a (\b -> \c -> \d -> seq b d) (seq a ((+1) (undefined::Int)))) False (undefined::Bool)
(\a -> (undefined::([] (Int -> Bool)) -> ([] Int) -> [] Int) (seq a ((undefined::([] Int) -> [] (Int -> Bool)) ([]::[] Int)))) (head (undefined::[] (Bool -> ([] Int) -> ([] Bool) -> [] Bool)) (id (\a -> seq a False) (undefined::[] ([] Bool))))
(\a -> case1 (id (\b -> seq a (undefined::([] Bool) -> ([] Int) -> [] Int))) (seq a (seq a (\b -> ([]::[] Int)))) ((\b -> seq b ([]::[] Bool)) a)) ((\a -> seq a (seq a (seq a (\b -> (undefined::Bool))) (\b -> (undefined::Int -> [] Bool)))) ((enumFromTo'::Int -> Int -> [Int]) 0 (head (undefined::[] Int))))
tail
\a -> a
(undefined::(([] (Int -> Bool)) -> [] (([] Bool) -> [] (Bool -> Bool))) -> ([] Int) -> [] Int) (\a -> seq a (seq a ((\b -> seq a (\c -> ([]::[] (([] Bool) -> [] (Bool -> Bool)))) (not (seq b (undefined::Bool)))) (case1 (seq a (undefined::Bool -> ([] Bool) -> Int)) 1 (seq a ([]::[] Bool))))))
\a -> a
id (\a -> (\b -> seq b (\c -> (undefined::([] Int) -> [] Int))) ([]::[] Bool)) (\a -> (undefined::[] ([] Int))) ((undefined::Int -> Int -> Bool) (id 1) (case1 (\a -> \b -> 1) 2 (undefined::[] ([] Int))))
head (head ([]::[] ([] ((([] (Int -> Bool -> Bool)) -> [] (Int -> Int)) -> ([] Int) -> [] Int)))) ((\a -> \b -> (\c -> seq a (seq c (undefined::[] (Int -> Int)))) (undefined::Int)) (\a -> seq a (seq a (seq a ((undefined::Int -> Bool) a)))))
case1 (\a -> \b -> seq a (\c -> (enumFromTo'::Int -> Int -> [Int]) a a)) (\a -> seq a ([]::[] Int)) ((undefined::([] (Int -> Int)) -> [] Int) ((\a -> seq a ([]::[] (Int -> Int))) (not False)))
(\a -> (\b -> id (\c -> seq c tail) (seq a (seq a (seq a b)))) ((\b -> seq b (seq b True)) (seq a (id (undefined::[] ([] ([] (Bool -> Bool)))))))) (id (\a -> \b -> seq b (\c -> seq c a) (id (\c -> (undefined::([] Int) -> Bool -> Bool)) (seq a ([]::[] Bool)))))
\a -> a
(\a -> (\b -> seq b (seq a (\c -> (undefined::([] Int) -> [] Int)))) (\b -> id True)) (case1 (\a -> \b -> ([]::[] Int)) ([]::[] Int) (undefined::[] Bool)) (undefined::Bool)
\a -> seq a (\b -> a) ((undefined::(([] Int) -> Int -> Bool) -> ([] ([] ([] Bool))) -> [] ([] ([] Bool))) ((undefined::Int -> ([] Int) -> Int -> Bool) 1))
\a -> a
head (undefined::[] (Bool -> ([] Int) -> [] Int)) ((\a -> seq a ((\b -> seq a (seq b (undefined::Bool))) (undefined::[] ([] (([] Int) -> Bool))))) (\a -> \b -> (\c -> seq c c) b))
\a -> a
(undefined::(([] Int) -> [] (([] Int) -> Bool)) -> ([] Int) -> [] Int) ((!!) ([]::[] (([] Int) -> [] (([] Int) -> Bool))) ((\a -> seq a (seq a (undefined::Int))) (\a -> seq a (seq a ([]::[] (Bool -> Bool))))))
(undefined::([] Int) -> [] Int)
take ((\a -> a) ((\a -> \b -> seq a b) (undefined::Bool -> Bool -> Bool) 2))
\a -> a
id
(undefined::Bool -> ([] Int) -> [] Int) (undefined::Bool)
\a -> a
(:) ((undefined::Bool -> Int) (not ((\a -> (\b -> seq b (seq a (undefined::Bool))) (\b -> a)) (\a -> map (\b -> seq b a) (undefined::[] Int)))))
(\a -> seq a ((\b -> seq a (\c -> \d -> seq a ([]::[] Int)) (seq b (even 1))) (undefined::([] ([] Int)) -> [] ([] Int)))) ((!!) ((++) ([]::[] (([] (Int -> Int)) -> [] (Int -> Int))) ([]::[] (([] (Int -> Int)) -> [] (Int -> Int)))) (undefined::Int))
map ((\a -> seq a (\b -> seq a (seq a (undefined::Bool -> Int -> Int)) (odd 1))) ((\a -> seq a (seq a (seq a (undefined::Bool)))) (\a -> \b -> seq b (seq a a))) (head (map (\a -> seq a (seq a (seq a (+)))) (id (undefined::([] ([] Bool)) -> [] Bool) (undefined::[] ([] Bool))))))
\a -> (\b -> seq b (\c -> filter ((!!) (undefined::[] Bool)) a) (\c -> seq b (\d -> seq a (\e -> seq c id) (seq b ([]::[] (Bool -> Bool)))))) (seq a (head ([]::[] (Bool -> ([] ([] Int)) -> [] (([] Int) -> Bool)))) (not False))
\a -> seq a a
tail
\a -> (undefined::(Int -> Bool -> Bool) -> [] Int) (\b -> \c -> seq c (\d -> id (undefined::Bool -> Bool)) (undefined::[] Bool) c)
(undefined::([] Int) -> (([] ([] Int)) -> [] Bool) -> ([] Int) -> [] Int) ((undefined::([] (Int -> Bool)) -> [] Int) (filter (undefined::(Int -> Bool) -> Bool) (undefined::[] (Int -> Bool)))) ((undefined::(([] Int) -> ([] ([] Int)) -> [] Int) -> ([] ([] Int)) -> [] Bool) (case1 (\a -> \b -> a)))
id (\a -> seq a (\b -> seq a (\c -> a)) (seq a (+1) ((+1) (seq a 0))) (undefined::([] Int) -> Int -> Int -> [] Int))
\a -> (\b -> (enumFromTo'::Int -> Int -> [Int]) (seq a (\c -> 0) (seq b (seq b (undefined::Int)))) (seq a (head a))) (\b -> map (\c -> (undefined::([] ([] ([] Bool))) -> Bool -> Bool) (seq c (seq a (undefined::[] ([] ([] Bool)))))) (seq b (seq b (\c -> ([]::[] (([] Int) -> Int -> Int)))) (seq a (seq a (seq b 1)))))
(++) ((undefined::(([] ([] Int)) -> [] ([] Bool)) -> [] Int) ((undefined::Int -> ([] ([] Int)) -> [] ([] Bool)) 2))
\a -> ([]::[] Int)
(\a -> (\b -> \c -> map (\d -> seq b (undefined::Int)) (head ([]::[] ([] ([] Int))))) (seq a (undefined::Bool -> Bool) (id (seq a (undefined::Bool))))) ((\a -> \b -> seq a (seq a (seq a (undefined::(Bool -> Bool) -> Int)) (seq a (\c -> seq c c)))) (\a -> \b -> b))
\a -> seq a a
\a -> (undefined::[] Int)
\a -> ([]::[] Int)
(\a -> \b -> (undefined::(([] ([] Int)) -> [] ([] (([] Bool) -> Bool))) -> [] Int) (seq a (\c -> seq b (\d -> seq b (undefined::[] ([] (([] Bool) -> Bool)))) (seq c (seq c (undefined::Bool)))))) ((\a -> seq a (\b -> (\c -> \d -> seq c ([]::[] (Int -> Bool))) True)) ((!!) (undefined::[] ([] ([] ([] Bool)))) (id (undefined::Int))))
\a -> (undefined::Bool -> Bool -> Bool -> [] Int) (((==)::[Int] -> [Int] -> Bool) (undefined::[] Int) (undefined::[] Int)) (seq a (undefined::([] ([] (Int -> Int))) -> Bool) (seq a (id ([]::[] ([] (Int -> Int)))))) ((undefined::(([] Int) -> [] ([] (([] ([] ([] Int))) -> [] ([] ([] Int))))) -> Bool) (\b -> seq b (seq b (seq a (seq a (undefined::[] ([] (([] ([] ([] Int))) -> [] ([] ([] Int))))))))))
\a -> a
case1 ((\a -> seq a (\b -> case1 (\c -> tail))) ((\a -> seq a 2) (\a -> (undefined::Int -> [] ([] Int))))) ((\a -> head (seq a ([]::[] (([] Int) -> [] Int)))) (id (undefined::(([] Int) -> [] Int) -> Bool) (undefined::([] Int) -> [] Int))) ([]::[] Int)
\a -> a
\a -> id (seq a (\b -> seq b (seq a (\c -> a))) (seq a (case1 (undefined::Bool -> ([] Bool) -> Int) (undefined::Int) (undefined::[] Bool)))) (seq a (undefined::([] Int) -> [] (([] Int) -> Bool)))
id (\a -> tail) ((\a -> (\b -> head (seq b (undefined::[] (Int -> Int -> Int)))) a) ((\a -> seq a (undefined::Bool)) ((==)::Bool -> Bool -> Bool)))
(undefined::(([] ([] ([] Int))) -> [] ([] ([] Bool))) -> ([] Int) -> [] Int) (\a -> seq a (seq a (\b -> map (undefined::(Int -> Bool) -> [] ([] Bool)) (seq a ([]::[] (Int -> Bool)))) ((undefined::Bool -> Bool) (seq a (seq a (seq a (undefined::Bool)))))))
(undefined::([] Bool) -> ([] Int) -> [] Int) ((undefined::([] ([] (([] Bool) -> Bool))) -> Int -> [] Bool) ((:) ([]::[] (([] Bool) -> Bool)) (undefined::[] ([] (([] Bool) -> Bool)))) ((\a -> a) 0))
\a -> map (id (seq a (undefined::(([] Int) -> ([] (([] Int) -> [] ([] Bool))) -> Int -> [] ([] Int)) -> Int))) (seq a (seq a (seq a (seq a (id ([]::[] (([] Int) -> ([] (([] Int) -> [] ([] Bool))) -> Int -> [] ([] Int))))))))
(++) ([]::[] Int)
\a -> a
\a -> a
tail
(\a -> seq a ((++) (seq a (seq a ((\b -> seq b ((\c -> seq c ([]::[] Int)) (seq b 2))) (map (seq a (\b -> (undefined::[] (Int -> Int)))))))))) ((\a -> \b -> seq a (seq a (seq b (\c -> (undefined::[] (Bool -> Bool))) (head (undefined::[] Int))))) ((\a -> seq a (seq a (seq a (undefined::Bool)))) (map (undefined::([] Int) -> Bool))))
filter even
\a -> a
\a -> seq a (\b -> \c -> seq b (seq b (undefined::([] Bool) -> [] Int)) (seq b ([]::[] Bool))) (id (\b -> (undefined::Int)) (seq a False)) False
\a -> (\b -> map (seq b id) (seq b ([]::[] Int))) (seq a (undefined::([] Int) -> [] ([] Int)))
\a -> a
case1 (:) ((\a -> id (seq a (undefined::Int -> [] Int))) (tail (undefined::[] Bool)) ((undefined::([] Bool) -> Int) (undefined::[] Bool)))
(\a -> seq a (\b -> seq b (\c -> (undefined::([] Int) -> [] Int))) (seq a (seq a (a (undefined::[] Bool)))) ((\b -> seq b (undefined::Bool)) (seq a (even (undefined::Int))))) (\a -> (!!) (seq a (seq a a)) (undefined::Int))
\a -> a
\a -> seq a ((\b -> map (\c -> seq a (seq b (\d -> c) (id (undefined::Bool -> Bool)))) (undefined::[] Int)) (\b -> id (\c -> \d -> \e -> e) (seq a ((undefined::Bool -> Int -> ([] Int) -> Bool) (undefined::Bool)))))
(undefined::([] Int) -> [] Int)
\a -> a
take (undefined::Int)
(\a -> seq a (seq a (seq a (undefined::Bool -> Bool -> ([] Int) -> [] Int) (not (seq a True))) False)) ((undefined::Bool -> ([] Int) -> ([] Int) -> [] Bool) (case1 (\a -> seq a (undefined::([] Int) -> Bool)) True ([]::[] Int)))
take ((\a -> case1 (undefined::Bool -> ([] Bool) -> Int) ((\b -> seq b (undefined::Int)) ([]::[] Bool)) (seq a tail (seq a (undefined::[] Bool)))) ((\a -> head (filter (seq a (undefined::(Bool -> Bool) -> Bool)) (undefined::[] (Bool -> Bool)))) ((\a -> a (a (seq a (undefined::Int)))) (\a -> a))))
\a -> map (id (seq a (\b -> \c -> seq c b) ((undefined::([] Bool) -> Int) (undefined::[] Bool)))) (seq a (take 0 (tail (seq a (seq a (tail ([]::[] (([] ([] Int)) -> [] Bool))))))))
\a -> ([]::[] Int)
(\a -> seq a (seq a (\b -> (\c -> \d -> seq c d) (seq b (seq a ([]::[] (Int -> Int)))))) ((!!) (seq a ([]::[] (([] (Int -> Int)) -> Int -> Int))) (seq a 0))) (\a -> id (undefined::Int -> Int -> [] (Int -> [] Int)))
id (\a -> head (seq a (seq a (undefined::[] (([] (Bool -> Bool)) -> ([] Int) -> [] Int)))) (seq a (\b -> ([]::[] (Bool -> Bool))) ([]::[] Int))) (not (case1 (\a -> \b -> seq a False) (((==)::[Int] -> [Int] -> Bool) ([]::[] Int) ([]::[] Int)) ((++) (undefined::[] ([] ([] Bool))) (undefined::[] ([] ([] Bool))))))
\a -> (undefined::[] Int)
filter ((\a -> seq a (seq a (head ([]::[] (Int -> Bool -> Int -> Bool)) a))) (id 2) ((undefined::(([] ([] Int)) -> [] Int) -> Bool -> Bool) (\a -> seq a ([]::[] Int)) ((||) (even 2) False)))
(:) ((\a -> (undefined::(Int -> Int -> Int) -> Int -> Int) (\b -> \c -> seq c (seq b a))) ((\a -> head (seq a (undefined::[] Int))) (id True)) (undefined::Int))
\a -> (:) (seq a (id (\b -> (undefined::(Int -> Int) -> Int) (\c -> c)) (seq a ((undefined::([] (Int -> Int)) -> [] ([] Bool)) (undefined::[] (Int -> Int)))))) (seq a (\b -> seq b (undefined::Bool -> [] Int) (seq b (seq b True))) (\b -> seq a (\c -> seq b ([]::[] (([] ([] Int)) -> [] ([] Int)))) b))
id ((\a -> seq a (seq a (undefined::([] Int) -> Int -> ([] Int) -> [] Int) (seq a ([]::[] Int))) ((undefined::([] Bool) -> Int) ([]::[] Bool))) (id (\a -> seq a ((!!) ([]::[] ([] (Int -> ([] Int) -> Bool))) 0)) ((undefined::([] ([] (Bool -> Bool))) -> ([] Int) -> [] Bool) (undefined::[] ([] (Bool -> Bool))))))
(\a -> \b -> id (id (\c -> seq a b)) (seq a ((!!) ([]::[] (Int -> ([] ([] Int)) -> Int)) (seq a (seq b 1))))) (enumFromTo'::Int -> Int -> [Int])
head ((!!) ((undefined::Int -> [] (Int -> [] (([] Int) -> [] Int))) ((+1) (undefined::Int))) ((\a -> seq a (undefined::Int)) ([]::[] (Bool -> Bool))) (undefined::Int))
(\a -> seq a (\b -> id ((\c -> seq c tail) (seq b (seq a a)))) (seq a ((\b -> seq b (\c -> c)) (undefined::Bool)))) ((\a -> seq a (case1 (seq a (undefined::Int -> ([] Int) -> Int)) (seq a (undefined::Int)) (seq a ([]::[] Int)))) (((==)::[Int] -> [Int] -> Bool) (id ([]::[] Int)) (tail ([]::[] Int))))
(\a -> take (seq a (seq a (undefined::(([] Int) -> Bool) -> ([] Int) -> Int) (((==)::[Int] -> [Int] -> Bool) ([]::[] Int))) (undefined::[] Int))) (head (undefined::[] (Int -> ([] Int) -> Int -> Int -> Bool)) ((+1) ((\a -> a) 0)))
\a -> seq a (undefined::(([] (Int -> [] Bool)) -> [] (Int -> Int)) -> [] Int) (\b -> seq a (seq a (seq b (seq a (seq a (\c -> seq c (seq c (undefined::[] (Int -> Int)))))))) (seq a (undefined::[] (Int -> Bool))))
(\a -> (\b -> seq a (seq b (seq a (\c -> seq c id) (seq a (undefined::Bool))))) (\b -> seq a (undefined::[] Bool))) ((\a -> \b -> seq a (seq b (undefined::[] (Int -> Int)))) (undefined::Bool))
(\a -> seq a (\b -> take (seq a ((undefined::Bool -> Int) False)) (map (undefined::(Int -> Int) -> Int) (seq a ([]::[] (Int -> Int)))))) (undefined::[] (([] ([] ([] (Int -> Bool)))) -> Int -> Int))
id (\a -> seq a (\b -> map (\c -> c) (undefined::[] Int))) (undefined::(Int -> Int -> Int -> Int) -> [] (([] Bool) -> [] Bool))
\a -> case1 (\b -> (undefined::Bool -> ([] Bool) -> Int -> [] Int) b) (\b -> seq b tail a) (seq a (seq a (undefined::Int -> [] Bool)) (seq a (seq a 1))) (seq a ((\b -> seq b (seq b (undefined::Int))) (seq a (seq a ((\b -> seq a (seq b ([]::[] (Int -> [] Int)))) (seq a (seq a True)))))))
(\a -> head ((\b -> seq a (seq b (undefined::[] (Int -> ([] Int) -> [] Int)))) (seq a (seq a (undefined::Int))))) ((\a -> \b -> seq a (seq b (undefined::[] (Bool -> Bool)))) (\a -> seq a (seq a (seq a 2)))) (id ((!!) ([]::[] (Bool -> Int)) 1) ((\a -> not (seq a True)) (undefined::Bool)))
\a -> a
(undefined::Bool -> ([] Int) -> [] Int) False
\a -> filter (head (id (seq a (seq a (seq a ((\b -> seq b (undefined::Bool -> [] (Int -> Bool))) (seq a True) (seq a (undefined::(([] ([] Int)) -> Bool) -> Bool) (\b -> seq b False)))))))) ((!!) (seq a (seq a (undefined::[] ((Int -> Bool) -> [] Int)))) ((+1) 1) (\b -> seq b (seq b (seq a (undefined::([] ([] (([] Int) -> Bool))) -> Bool))) (head (undefined::[] ([] ([] (([] Int) -> Bool)))))))
case1 (\a -> \b -> seq b (seq a (seq b take (seq a (seq b (seq b (undefined::Int))))))) ((:) 0) (map (\a -> \b -> seq a (seq a (undefined::[] Bool))) ((++) ([]::[] Bool) ([]::[] Bool)))
(undefined::([] Int) -> [] Int)
\a -> a
\a -> head (seq a (map (undefined::Bool -> (([] Int) -> ([] Int) -> [] Int) -> [] Int) (seq a (seq a (\b -> (undefined::[] Bool)) (seq a (seq a False)))))) (seq a (\b -> map (seq b (\c -> \d -> (undefined::(Int -> Int) -> Int) (+1)) (seq a (seq b (\c -> (undefined::([] Int) -> Bool -> Bool))) (seq a (seq b (undefined::Int)))))))
case1 (\a -> (\b -> \c -> seq b (filter odd)) a) (\a -> a) ((undefined::Int -> ([] ([] (Int -> Int))) -> [] Int) (head (undefined::[] Int)) ((undefined::(Bool -> Bool) -> [] ([] (Int -> Int))) (undefined::Bool -> Bool)))
case1 (\a -> seq a (seq a (\b -> \c -> c))) ((\a -> \b -> (\c -> seq c b) (seq a 0)) (undefined::Bool -> [] Bool)) (tail ((\a -> seq a (head ([]::[] ([] (Int -> Int))))) (\a -> seq a (seq a (seq a ([]::[] Bool))))))
case1 (\a -> head (seq a ([]::[] (([] (Bool -> Bool)) -> ([] Int) -> [] Int)))) (\a -> seq a (filter odd a)) ((\a -> seq a (undefined::[] (Bool -> Bool))) ((undefined::(Int -> ([] Int) -> Int) -> Bool) (\a -> \b -> seq b a)))
\a -> seq a (\b -> a) (\b -> seq b (\c -> \d -> head ((:) (undefined::Int -> Bool) ([]::[] (Int -> Bool)))) 2)
(undefined::(([] (Bool -> Bool)) -> [] (Bool -> Bool)) -> ([] Int) -> [] Int) (id (\a -> a))
tail
\a -> seq a (\b -> tail (tail (map (\c -> (!!) a (undefined::Int)) (undefined::[] ([] ([] (([] Int) -> Bool -> Bool -> Bool))))))) ((++) (seq a (seq a (seq a (seq a (undefined::Bool -> [] (Int -> Bool))) (seq a (seq a True))))) (seq a ([]::[] (Int -> Bool))))
filter ((\a -> seq a (id (\b -> \c -> seq b (seq a (seq a (undefined::Bool)))))) ((undefined::(Int -> Bool) -> [] Bool) (undefined::Int -> Bool)) ((!!) ((++) (id (undefined::[] (Int -> Int -> [] Int))) (undefined::[] (Int -> Int -> [] Int))) (case1 (undefined::Bool -> ([] Bool) -> Int) 0 ([]::[] Bool))))
id
\a -> seq a ((\b -> seq b (\c -> (undefined::(([] Bool) -> Bool) -> [] Int)) (seq b (undefined::Bool))) (seq a (seq a (seq a ((:) (\b -> b) (seq a (undefined::[] (Bool -> Bool)))))))) ((!!) (seq a (seq a (undefined::[] (([] Bool) -> Bool)))) (seq a ((+1) (seq a ((+1) (undefined::Int))))))
\a -> (undefined::[] Int)
\a -> seq a (id (\b -> \c -> a) (case1 (\b -> (undefined::([] Int) -> Bool)) (seq a (undefined::Bool)) a)) (\b -> head (seq a ([]::[] ((([] (Int -> Int)) -> Bool) -> ([] Int) -> [] Bool))) ((\c -> \d -> seq c (seq b (undefined::Bool))) (seq a (seq a (seq a (undefined::Int))))))
(\a -> \b -> case1 (seq a (seq a ((!!) ([]::[] (([] Int) -> [] Int))))) (filter (undefined::Int -> Bool) b) (seq b (undefined::([] ([] ([] Bool))) -> [] Int) ([]::[] ([] ([] Bool))))) take
\a -> (:) (head a) (seq a (\b -> seq b (id ([]::[] Int))) (head (seq a (undefined::[] Bool))))
(undefined::(([] Int) -> [] (Bool -> Bool)) -> Bool -> ([] Int) -> [] Int) ((\a -> \b -> seq a (seq b (undefined::[] (Bool -> Bool)))) (undefined::Int)) ((||) ((undefined::(Int -> [] Int) -> Bool) (\a -> seq a (seq a (undefined::[] Int)))) ((undefined::Int -> Bool) 0))
\a -> (undefined::Int -> Int -> [] Int) (id (seq a (seq a (seq a id) (seq a (seq a (undefined::Int)))))) (seq a (head (seq a (undefined::[] (Bool -> Int))) (seq a (undefined::([] Int) -> Bool) a)))
(\a -> (undefined::([] (([] Int) -> [] Bool)) -> ([] Int) -> [] Int) ((\b -> seq b (id ([]::[] (([] Int) -> [] Bool)))) (seq a (\b -> (undefined::Bool))))) (\a -> seq a (\b -> (undefined::[] Int)))
\a -> (undefined::[] Int)
\a -> a
\a -> seq a (id (seq a (\b -> seq b (\c -> ([]::[] Int)))) (id (id not (seq a (seq a (undefined::Bool))))) (head ([]::[] (([] ([] Bool)) -> ([] Int) -> [] (([] Int) -> Bool))) ((undefined::Int -> [] ([] Bool)) (seq a (seq a (seq a 2))))))
(\a -> (undefined::(Bool -> Bool) -> Int -> ([] Int) -> [] Int) (seq a (a (undefined::[] Int))) (id (undefined::(Int -> [] Int) -> Int) (seq a (\b -> seq b (seq a (undefined::[] Int)))))) ((!!) ((\a -> seq a (seq a ([]::[] (([] Int) -> Bool -> Bool)))) (head (undefined::[] ([] ([] Int))))) 2)
(undefined::(([] Int) -> [] (Int -> [] Int)) -> ([] Int) -> [] Int) (head (tail ([]::[] (Bool -> ([] Int) -> [] (Int -> [] Int)))) (case1 (\a -> \b -> a) (undefined::Bool) (undefined::[] Bool)))
(\a -> seq a (case1 (seq a (seq a (undefined::Bool -> ([] Bool) -> ([] Int) -> [] Int))) (seq a take (seq a (undefined::Int))) ((undefined::([] Int) -> [] Bool) (undefined::[] Int)))) ((\a -> \b -> seq a (seq b (undefined::[] (([] Bool) -> [] Bool)))) True ((!!) (undefined::[] Bool) 2))
tail
\a -> a
head (undefined::[] ((([] (([] ([] Int)) -> [] ([] (Int -> Int)))) -> [] (Int -> [] Int)) -> ([] Int) -> [] Int)) (undefined::([] (([] ([] Int)) -> [] ([] (Int -> Int)))) -> [] (Int -> [] Int))
(:) ((\a -> head (id (id (seq a ([]::[] (Int -> Int)))))) (head ([]::[] (([] ([] ([] (Bool -> Bool)))) -> Int -> Bool))) ((!!) (undefined::[] ((Int -> [] Int) -> Int)) (undefined::Int) (case1 (\a -> (undefined::([] Int) -> Int -> [] Int)) (undefined::Int -> [] Int) ([]::[] Int))))
\a -> a
(undefined::([] Int) -> [] Int)
\a -> seq a a
(\a -> seq a (\b -> \c -> seq b (seq b (\d -> c) (seq c (seq b (undefined::[] ([] Bool)))))) (\b -> False)) (\a -> seq a (seq a (\b -> seq a ((!!) (seq a (undefined::[] (([] Int) -> ([] Int) -> [] Int))) (seq b ((\c -> seq a c) (undefined::Int)))))))
(undefined::(Int -> ([] (Int -> [] Int)) -> Int -> Int -> [] Int) -> ([] Int) -> [] Int) (head (id (undefined::[] (Int -> ([] (Int -> [] Int)) -> Int -> Int -> [] Int))))
id
\a -> seq a (seq a a)
(\a -> (undefined::([] (([] Bool) -> [] Bool)) -> ([] Int) -> [] Int) ((undefined::Int -> [] (([] Bool) -> [] Bool)) ((+1) (seq a 0)))) (((==)::Int -> Int -> Bool) 2 ((undefined::([] ([] ([] Bool))) -> Int) (tail ([]::[] ([] ([] Bool))))))
case1 (\a -> id (\b -> case1 take) ((\b -> seq b True) a)) tail ((undefined::Int -> ([] (Bool -> Bool)) -> [] Int) 2 ((\a -> seq a (undefined::[] (Bool -> Bool))) (id (undefined::Int))))
\a -> seq a a
\a -> id (\b -> \c -> (\d -> seq d a) (head ([]::[] Bool))) (seq a (seq a (case1 (undefined::Bool -> ([] Bool) -> Bool) False (undefined::[] Bool)))) (seq a ((undefined::Int -> Int) (id (\b -> seq b 0) (seq a (seq a (seq a (undefined::([] ([] Int)) -> [] ([] Bool))))))))
\a -> a
\a -> ([]::[] Int)
\a -> id ((enumFromTo'::Int -> Int -> [Int]) ((\b -> seq b (head (seq b (seq a a)))) ((\b -> seq b (seq b (undefined::[] (Bool -> Bool)))) (seq a (seq a 0)))) 0)
\a -> a
case1 ((\a -> \b -> seq a (id (seq a (undefined::([] Bool) -> ([] Int) -> [] Int)))) ((\a -> seq a (undefined::[] Int)) (undefined::Bool))) (\a -> seq a ((enumFromTo'::Int -> Int -> [Int]) (id (seq a (undefined::Int))) (undefined::Int))) ((\a -> (\b -> seq b ([]::[] Bool)) (seq a (seq a (&&)))) (undefined::([] Int) -> ([] (([] Bool) -> Bool)) -> Bool))
(undefined::(([] ([] Int)) -> [] Int) -> ([] Int) -> [] Int) ((\a -> \b -> case1 (\c -> head) (seq a ([]::[] Int)) ([]::[] ([] Int))) ((\a -> a) ((+) (undefined::Int) (undefined::Int))))
(undefined::([] Int) -> [] Int)
\a -> (:) ((\b -> seq a (seq a (\c -> (undefined::Int))) (seq b (undefined::[] ([] (Int -> Int))))) ((\b -> seq a (seq b (undefined::[] (([] ([] ([] ([] Bool)))) -> [] Bool)))) (seq a 0))) (seq a (seq a (\b -> (undefined::([] Int) -> [] Int) (seq a (seq b a)))) (head (undefined::[] (([] ([] ([] Int))) -> [] Bool))))
(\a -> seq a (undefined::([] (([] Bool) -> [] Bool)) -> ([] Int) -> [] Int) (seq a (seq a (seq a (seq a ((++) (undefined::[] (([] Bool) -> [] Bool)) ([]::[] (([] Bool) -> [] Bool)))))))) ((undefined::Bool -> ([] ([] ([] (([] Int) -> Bool)))) -> [] (([] Int) -> Bool)) ((!!) (undefined::[] ((Int -> Int) -> Bool)) 0 (\a -> a)))
(\a -> take (case1 ((!!) (seq a (undefined::[] (([] Int) -> Int)))) a (seq a (id (undefined::[] Int))))) ((!!) (undefined::[] ((([] ([] ([] Bool))) -> Bool) -> Int)) ((+) 0 0) ((\a -> \b -> seq a (seq b (undefined::Bool))) (\a -> a)))
\a -> a
(\a -> seq a (case1 (seq a (undefined::Bool -> ([] Bool) -> ([] Int) -> [] Int)) (seq a (seq a (\b -> b))) (seq a (head ([]::[] ([] Bool)))))) (id ((\a -> \b -> \c -> seq a False) 2) ((\a -> seq a (seq a (seq a (undefined::Int)))) (take 2 ([]::[] (([] Bool) -> Bool)))))
head ((\a -> (\b -> seq b (seq a (undefined::[] (Bool -> ([] Int) -> [] Int)))) (seq a (seq a (seq a (undefined::[] Bool))))) (id (\a -> (undefined::Int)) False)) ((undefined::Bool -> Bool) ((||) True (undefined::Bool)))
\a -> (\b -> (undefined::([] ([] Int)) -> (Int -> [] Bool) -> [] Int) (seq b (seq a (seq b (undefined::[] ([] Int)))))) (seq a (seq a (seq a (\b -> (undefined::([] ([] Int)) -> [] ([] Bool)))) (seq a (seq a (undefined::Int))))) (head ([]::[] (Int -> [] Bool)))
(!!) ((undefined::Int -> [] (([] Int) -> [] Int)) (undefined::Int)) ((\a -> seq a ((\b -> a (seq b ([]::[] Int))) (id (undefined::Int -> [] Int)))) (case1 (\a -> seq a (seq a (undefined::([] Int) -> Int))) (id (undefined::Int))))
(\a -> \b -> (\c -> c (take (seq a 1) (seq c (undefined::[] Int)))) (take (seq b (\c -> a) (id False)))) ((\a -> \b -> a) (undefined::Int) ((\a -> seq a (seq a (seq a False))) head))
id
id ((undefined::Int -> ([] ([] (Int -> Int))) -> ([] Int) -> [] Int) ((\a -> a) (head ([]::[] Int)))) ((\a -> seq a (seq a (\b -> seq b ([]::[] ([] (Int -> Int))))) (seq a (seq a (seq a (undefined::Bool))))) (id ((\a -> seq a (\b -> a)) (undefined::Int))))
map (+1)
\a -> ([]::[] Int)
\a -> seq a (id (seq a a))
(\a -> (\b -> id (seq b (undefined::Bool -> ([] Int) -> [] Int)) a) ((!!) (seq a ([]::[] ([] (([] ([] Bool)) -> [] ([] Bool))))) (id 0))) ((&&) (head (undefined::[] ((([] Int) -> [] Bool) -> Bool)) (undefined::([] Int) -> [] Bool)) ((\a -> seq a (seq a (undefined::Bool))) ((+1) 1)))
(undefined::(([] Int) -> Int -> [] Int) -> ([] Int) -> [] Int) ((undefined::Bool -> ([] Int) -> Int -> [] Int) (id ((!!) ([]::[] Bool) (undefined::Int))))
\a -> (undefined::[] Int)
(\a -> \b -> seq a ((\c -> seq c b) ((!!) (seq b (seq a (undefined::[] ([] (([] Int) -> [] Int))))) (seq a (seq a 1))))) ((\a -> \b -> seq a (seq b (seq b (seq a (undefined::Bool -> [] ([] (Int -> Bool))) (seq a (undefined::Bool)))))) (\a -> (undefined::Bool -> Int) (seq a (seq a (seq a (undefined::Bool))))))
\a -> (\b -> (undefined::Bool -> (([] ([] Bool)) -> [] Bool) -> [] Int) (seq b True)) (id (\b -> even) (undefined::Int -> [] Bool)) (seq a (\b -> \c -> seq a (seq a (seq a (undefined::Int -> [] Bool) (seq a 0)))) (seq a 0))
\a -> a
\a -> a
(\a -> seq a (\b -> \c -> \d -> (undefined::[] Int)) (seq a (id (undefined::Int)))) (even 1) ([]::[] Int)
\a -> a
(undefined::([] (Int -> Int)) -> Bool -> ([] Int) -> [] Int) ((\a -> seq a (seq a ([]::[] (Int -> Int)))) (undefined::[] ([] Bool))) (undefined::Bool)
case1 (\a -> seq a (\b -> (\c -> seq c (undefined::Bool -> ([] Int) -> [] Int)) a (seq a (seq b True)))) (\a -> a) ((undefined::(([] Int) -> [] ([] Bool)) -> [] Int) (\a -> seq a (\b -> (undefined::[] ([] Bool))) (seq a False)))
(undefined::(([] Int) -> ([] (Int -> Int)) -> Int -> Int) -> ([] Int) -> [] Int) (undefined::([] Int) -> ([] (Int -> Int)) -> Int -> Int)
case1 (\a -> seq a (\b -> \c -> \d -> d) (seq a head (seq a (seq a ([]::[] Bool))))) (\a -> seq a (\b -> a) (seq a ([]::[] (Int -> Bool)))) (id (\a -> head ([]::[] ([] Int))) ((\a -> \b -> seq a (undefined::([] Int) -> Int)) True))
tail
id ((\a -> (undefined::Bool -> Int -> ([] Int) -> [] Int) (id (seq a True))) ((\a -> seq a (\b -> \c -> (undefined::Bool))) 1)) ((+1) ((\a -> (\b -> b) (seq a (seq a (seq a 2)))) (\a -> id ((\b -> seq b (undefined::[] Bool)) (seq a (seq a (undefined::Int)))))))
\a -> seq a (seq a (\b -> (undefined::([] (([] Bool) -> [] Bool)) -> [] Int) (seq b (undefined::[] (([] Bool) -> [] Bool)))) head)
id
map ((undefined::([] ([] Bool)) -> Int -> Int -> Int -> Int) ([]::[] ([] Bool)) ((undefined::(Int -> Int) -> Int) (\a -> seq a a)) ((\a -> seq a (case1 (undefined::Bool -> ([] Bool) -> Int) (undefined::Int) ([]::[] Bool))) (\a -> seq a (seq a (undefined::(([] Bool) -> Bool) -> Int) (\b -> (undefined::Bool))))))
head ((\a -> seq a (seq a (undefined::[] (([] ([] (Int -> Bool))) -> ([] Int) -> [] Int)))) ((\a -> seq a (seq a (undefined::Int))) ([]::[] Bool))) (map (\a -> map (\b -> \c -> (undefined::Bool)) (seq a (undefined::[] Int))) ([]::[] (([] Int) -> [] ([] (Int -> Int)))))
case1 ((undefined::([] Bool) -> Int -> ([] Int) -> ([] Int) -> [] Int) ([]::[] Bool)) ((undefined::(Int -> [] ([] Bool)) -> ([] Int) -> [] Int) ((\a -> \b -> a) (head (undefined::[] ([] ([] Bool)))))) (head ([]::[] (([] ([] ([] ([] Bool)))) -> [] Int)) ((\a -> seq a (undefined::[] ([] ([] ([] Bool))))) (undefined::Int)))
case1 (\a -> (undefined::([] Bool) -> ([] Int) -> [] Int)) (\a -> case1 (:) ([]::[] Int) a) (map (\a -> seq a (seq a (seq a True))) (take (undefined::Int) (undefined::[] (([] ([] Bool)) -> [] Bool))))
(\a -> \b -> seq b (\c -> seq a b) (\c -> (undefined::Int -> ([] (([] Int) -> [] Int)) -> Bool) (seq a (head b)))) ((\a -> seq a (seq a (seq a odd)) (seq a (seq a (seq a 1)))) (\a -> \b -> (-) (seq a (seq a (undefined::Int))) (seq a (seq a (undefined::Int)))))
(\a -> seq a (\b -> seq b (seq a (undefined::Bool -> [] Int)) ((!!) (undefined::[] Bool) (seq b (seq b 2))))) ((undefined::Int -> (([] Int) -> Int -> [] Int) -> [] ([] ([] Bool))) 2)
\a -> (\b -> seq a (seq a (id (seq b (\c -> a))))) (undefined::Int -> [] Bool) ((\b -> \c -> seq b (seq b take)) (seq a (seq a (seq a (undefined::Int)))) (seq a ((\b -> seq b (seq b (undefined::Int))) (seq a (seq a (seq a (undefined::[] ([] (Bool -> Bool)))))))))
(undefined::([] Int) -> [] Int)
(\a -> seq a (undefined::(([] Int) -> ([] Int) -> [] Int) -> ([] Int) -> [] Int)) ((\a -> seq a (undefined::Bool)) (undefined::Int)) (\a -> \b -> b)
tail
\a -> case1 (\b -> \c -> a) a ([]::[] ([] ([] Int)))
head ((undefined::Bool -> [] (Bool -> ([] Int) -> [] Int)) ((undefined::Bool -> Bool) False)) ((undefined::(([] (([] Int) -> [] ([] Bool))) -> ([] Int) -> [] ([] Bool)) -> Bool) (\a -> seq a (\b -> (undefined::([] Int) -> [] ([] Bool))) (seq a (seq a (seq a False)))))
\a -> (\b -> seq b (seq b (seq a (seq b (undefined::(Int -> ([] Int) -> Bool) -> [] Int))) (\c -> seq c (head ([]::[] (Int -> ([] Int) -> Bool)) c)))) (\b -> seq a (\c -> case1 (\d -> (undefined::([] Int) -> [] (Bool -> Bool))) (undefined::[] (Bool -> Bool)) (seq b a)) ((undefined::Int -> ([] Int) -> Int -> Bool) b))
id (\a -> case1 (\b -> seq b (\c -> \d -> d)) (seq a (\b -> b)) (seq a (seq a (seq a (undefined::[] Int))))) ((\a -> (undefined::Bool -> ([] Int) -> ([] Int) -> [] ([] Int)) a) (id (((==)::Bool -> Bool -> Bool) False (undefined::Bool))))
(undefined::Bool -> ([] Int) -> [] Int) ((undefined::Int -> (([] ([] Int)) -> [] Int) -> Bool) ((-) (undefined::Int) 1) (\a -> seq a (\b -> seq b (undefined::[] Int)) (seq a (id ([]::[] ([] Bool))))))
id (undefined::([] (Int -> Bool -> Bool)) -> Bool -> ([] Int) -> [] Int) ((undefined::([] ([] Bool)) -> [] (Int -> Bool -> Bool)) ((!!) (undefined::[] ([] ([] Bool))) 2)) ((\a -> case1 (seq a (undefined::Bool -> ([] Bool) -> Bool)) a (seq a (undefined::[] Bool))) ((\a -> odd (seq a 0)) (undefined::Bool)))
(!!) (map ((undefined::([] Int) -> Int -> ([] Int) -> [] Int) (tail ([]::[] Int))) ([]::[] Int)) 1
(\a -> \b -> seq b (seq a (\c -> (undefined::([] Int) -> [] Int))) (seq a (id ([]::[] Bool)))) ((undefined::(Bool -> [] (Int -> Bool)) -> [] Int) (undefined::Bool -> [] (Int -> Bool))) (\a -> filter (case1 (\b -> (undefined::([] Bool) -> ([] Int) -> Bool)) (\b -> (undefined::Bool)) (seq a (undefined::[] Bool))) ((undefined::Bool -> [] ([] Int)) True))
(undefined::(([] Int) -> (([] Bool) -> [] Bool) -> ([] Int) -> ([] Bool) -> [] Bool) -> ([] Int) -> [] Int) (\a -> seq a (\b -> seq a (undefined::([] Int) -> ([] Bool) -> [] Bool)))
\a -> (undefined::Int -> [] Int) (seq a ((\b -> seq a (seq b (\c -> 1))) (seq a True) (seq a (\b -> id (undefined::([] Int) -> ([] Int) -> Bool)) (seq a (id a)))))
id
head (undefined::[] (Int -> ([] Int) -> [] Int)) ((\a -> case1 (\b -> head) 1 (seq a (undefined::[] Int))) (even 1))
(!!) (map (\a -> seq a (undefined::Int -> ([] Int) -> [] Int)) (id (undefined::[] ([] Int)))) 2 ((\a -> seq a (\b -> (+1) (undefined::Int)) (seq a (seq a (seq a (undefined::Bool))))) (\a -> seq a ((\b -> seq b (seq a (undefined::[] Int))) (seq a (seq a (seq a True))))))
\a -> seq a (seq a a)
take ((\a -> head (seq a ([]::[] ((([] (Int -> Int)) -> [] (Int -> Int)) -> Int)))) (\a -> seq a a) ((\a -> (\b -> take b) a) ((\a -> seq a (seq a 2)) (\a -> seq a True))))
(undefined::([] Int) -> [] Int)
id (take ((+1) (id (id ((\a -> (!!) (seq a ([]::[] Int)) 2) (\a -> (undefined::Bool)))))))
head ([]::[] ((([] (([] ([] Int)) -> [] (([] Int) -> Bool))) -> [] (Bool -> Bool)) -> ([] Int) -> [] Int)) (head ([]::[] (([] (([] ([] Int)) -> [] (([] Int) -> Bool))) -> [] (Bool -> Bool))))
(\a -> seq a (seq a (\b -> seq b (\c -> tail)) (seq a (seq a (seq a (undefined::Int)))) (id (undefined::([] ([] ([] ([] (Int -> Int))))) -> Int) (seq a (seq a ([]::[] ([] ([] ([] (Int -> Int)))))))))) (id (\a -> case1 (\b -> seq a ((==)::[Int] -> [Int] -> Bool))) ((\a -> seq a (undefined::Bool)) (take (undefined::Int) (undefined::[] (Int -> Int)))))
\a -> a
(\a -> seq a (seq a (seq a (seq a (\b -> head (seq b (undefined::[] (([] Int) -> [] Int)))))))) (undefined::Bool -> Bool) (id (\a -> seq a (undefined::Int -> Int -> Bool -> Bool)) 0 (undefined::Int))
\a -> a
(undefined::(([] Int) -> ([] Bool) -> [] Bool) -> ([] Int) -> [] Int) (\a -> \b -> id (seq a (\c -> \d -> b) (seq b (seq b (undefined::Int))) (seq b (seq a ((!!) a (seq a (undefined::Int)))))))
case1 (\a -> \b -> \c -> id (head (seq c ([]::[] (Bool -> [] Int))) (seq a (seq b (undefined::Bool))))) (undefined::([] Int) -> [] Int) ((\a -> seq a (seq a (undefined::Int -> [] Int)) (seq a 1)) (\a -> id (\b -> seq b (\c -> (undefined::Bool -> Bool)))))
(\a -> \b -> seq a (seq b (seq a (:))) (seq b (undefined::Int))) ((\a -> seq a (seq a True)) ([]::[] ([] Bool))) ((undefined::([] (([] Int) -> [] Int)) -> Bool -> Bool) (head ([]::[] ([] (([] Int) -> [] Int)))) ((\a -> a ([]::[] Bool)) (\a -> (undefined::Bool))))
\a -> (undefined::(Bool -> Bool -> Bool) -> ([] ([] Int)) -> [] Int) ((\b -> seq b (\c -> \d -> d)) ((++) (undefined::[] ([] Int)) (undefined::[] ([] Int)))) ((undefined::((([] ([] Int)) -> Int) -> Int) -> [] ([] Int)) (seq a (\b -> case1 (seq b (undefined::Bool -> ([] Bool) -> Int)) (seq a (undefined::Int)) (undefined::[] Bool))))
(\a -> seq a (\b -> id) (seq a (seq a (seq a (undefined::Bool -> [] (([] Bool) -> [] Bool)))) (head (seq a (undefined::[] Bool))))) (undefined::([] ([] ([] Bool))) -> [] ([] (([] ([] Int)) -> [] ([] Bool))))
\a -> seq a (map (\b -> id ((\c -> \d -> seq c c) (undefined::Int)) ((\c -> seq c (seq a (undefined::([] Int) -> [] ([] Bool)))) (head (undefined::[] ([] ([] Int)))))) (seq a (seq a (seq a (undefined::[] (([] (([] Int) -> [] Bool)) -> Int -> Int -> Bool))))))
\a -> seq a a
\a -> (undefined::[] Int)
tail
\a -> seq a (\b -> (undefined::(([] Int) -> ([] Int) -> [] Bool) -> [] Int) (seq b (\c -> seq b (seq b (undefined::([] Int) -> ([] Int) -> [] Bool))) (seq a (seq a (undefined::Bool))))) (undefined::[] (([] ([] Bool)) -> [] ([] Bool)))
(\a -> seq a (seq a (undefined::([] (([] Int) -> Bool)) -> ([] Int) -> [] Int))) ((\a -> head (seq a (undefined::[] Bool))) (\a -> seq a (seq a (seq a (undefined::[] Bool))))) ((undefined::Int -> Int -> [] (([] Int) -> Bool)) ((!!) (undefined::[] Int) 1) ((undefined::Int -> Int) 2))
tail
\a -> (\b -> (enumFromTo'::Int -> Int -> [Int]) (seq b (\c -> seq a c) (undefined::Int)) (seq b (seq a (head ([]::[] ((([] Bool) -> Bool) -> Int)) head)))) ((\b -> b (seq a (head (seq b ([]::[] ([] (([] Int) -> [] (([] Int) -> Bool)))))))) (undefined::([] (([] Int) -> [] (([] Int) -> Bool))) -> Bool))
\a -> seq a ((undefined::Bool -> [] Int) ((\b -> seq a (seq a (seq a (seq b (seq b (seq a (seq a True))))))) (\b -> seq b (map (\c -> seq a (undefined::Bool)) ([]::[] (([] ([] Int)) -> Bool))))))
\a -> a
\a -> a
(\a -> take (a False ([]::[] ([] ([] (Bool -> Bool)))) (a False ([]::[] ([] ([] (Bool -> Bool)))) 2))) (\a -> (undefined::([] ([] ([] (Bool -> Bool)))) -> Int -> Int))
\a -> (\b -> seq a (case1 (\c -> (undefined::([] Bool) -> [] Int)) a ((undefined::Bool -> [] Bool) (seq a b)))) (head (case1 (seq a (\b -> \c -> seq a ([]::[] Bool))) ([]::[] Bool) a))
\a -> seq a a
head ((\a -> seq a (seq a ((\b -> \c -> seq b ([]::[] (([] Int) -> [] Int))) (a (\b -> \c -> True))) (seq a (undefined::Bool)))) (\a -> 2))
(undefined::(([] Int) -> [] ([] (([] Int) -> ([] Int) -> Bool))) -> ([] Int) -> [] Int) (\a -> seq a (seq a (undefined::[] ([] (([] Int) -> ([] Int) -> Bool)))))
(undefined::([] Int) -> [] Int)
(\a -> \b -> head (seq b (take (seq a 0) (seq b ([]::[] (Bool -> [] Int))))) (seq b (seq b ((\c -> head c) (seq b (seq b ([]::[] Bool))))))) (\a -> head (map (seq a (undefined::Int -> Int -> ([] Int) -> Bool)) (seq a ([]::[] Int))) (case1 (\b -> head) (undefined::Int) ([]::[] Int)))
id
(\a -> seq a (\b -> id (\c -> (\d -> seq d c) (seq c (undefined::Bool)))) (undefined::Int)) ((!!) (id ([]::[] (([] ([] (([] Int) -> Bool))) -> ([] Int) -> Bool))) ((\a -> seq a (seq a (undefined::Int))) (tail ([]::[] Int))))
tail
\a -> (undefined::Bool -> [] Int) (seq a (seq a (\b -> \c -> seq b True) (seq a (head ([]::[] (([] Int) -> Bool)))) (seq a (\b -> (+1) 1) (seq a (even (undefined::Int))))))
head (undefined::[] ((([] ([] ([] Int))) -> [] ([] ([] Bool))) -> ([] Int) -> [] Int)) (id (\a -> map (undefined::([] ([] Int)) -> [] ([] Bool))) (undefined::Bool))
case1 ((\a -> seq a (seq a (\b -> seq a (\c -> id)))) ((||) (undefined::Bool) (undefined::Bool))) (\a -> map (undefined::(Bool -> Bool) -> Int) (seq a (undefined::[] (Bool -> Bool)))) (undefined::[] Int)
(\a -> \b -> (undefined::(([] Int) -> [] ([] Bool)) -> [] Int) (seq a (\c -> head ([]::[] (([] Int) -> [] ([] Bool)))) (seq b (seq a (seq a (undefined::Bool)))))) (undefined::([] Int) -> ([] Bool) -> [] Bool)
\a -> a
(undefined::([] Int) -> [] Int)
(\a -> seq a (\b -> \c -> \d -> seq a ([]::[] Int)) (seq a (id ([]::[] Bool)))) ((\a -> seq a (seq a (seq a (undefined::[] ([] Int))))) (take (undefined::Int) (undefined::[] (Bool -> Bool)))) ((\a -> seq a ((\b -> seq b False) (seq a False))) (undefined::[] (([] (([] ([] Bool)) -> [] ([] Bool))) -> Int -> Bool)))
(!!) ((\a -> seq a ((undefined::Bool -> [] (([] Int) -> [] Int)) (seq a (seq a False)))) (\a -> (undefined::[] Int))) ((\a -> case1 (\b -> (undefined::([] Int) -> Int)) (seq a 1) (seq a (undefined::[] Int))) (id (id (\a -> head))))
id (undefined::(([] ([] ([] ([] Bool)))) -> Int -> ([] Bool) -> [] (Bool -> Bool)) -> ([] Int) -> [] Int) (\a -> seq a (\b -> \c -> \d -> seq c (\e -> seq c (undefined::[] (Bool -> Bool))) (seq a (seq a d))) (id (seq a (seq a (undefined::Bool -> [] ([] (Int -> Bool)))) (not True))))
\a -> seq a (\b -> seq b (\c -> id (undefined::Bool -> [] Int)) b (seq a (id (seq b head) (undefined::[] Bool)))) (seq a (seq a (seq a (id 1))))
(\a -> seq a (\b -> head (undefined::[] ([] Int)))) ((!!) ((\a -> seq a (seq a (undefined::[] (([] Int) -> Int -> [] Int)))) (undefined::[] Int)) ((\a -> a) (undefined::Int)))
(undefined::Bool -> (([] Bool) -> [] (Bool -> Bool)) -> ([] Int) -> [] Int) (id (\a -> seq a (undefined::Bool)) (\a -> seq a (id False))) (\a -> (undefined::[] (Bool -> Bool)))
id
case1 (id (\a -> (undefined::([] ([] Int)) -> ([] Int) -> [] Int))) (undefined::([] Int) -> [] Int) ((undefined::Bool -> [] ([] Int)) ((\a -> seq a (undefined::Bool)) (id (undefined::Int))))
\a -> a
(\a -> seq a ((undefined::Bool -> ([] Int) -> [] Int) (undefined::Bool))) True
(undefined::([] ((([] Int) -> Int -> Int -> Int) -> ([] Int) -> Int -> Int -> Int)) -> ([] Int) -> [] Int) (tail (tail (tail (undefined::[] ((([] Int) -> Int -> Int -> Int) -> ([] Int) -> Int -> Int -> Int)))))
(undefined::(([] (([] Int) -> ([] Int) -> Bool)) -> Int) -> ([] Int) -> [] Int) ((undefined::(([] Int) -> [] Int) -> ([] (([] Int) -> ([] Int) -> Bool)) -> Int) ((\a -> seq a (seq a (\b -> b))) (undefined::[] ([] Int))))
id (\a -> (undefined::([] Bool) -> Bool -> ([] Int) -> [] Int) (seq a (seq a (undefined::[] Bool)))) ((\a -> a) (((==)::Int -> Int -> Bool) (undefined::Int) 2)) ((undefined::(([] Bool) -> Bool) -> ([] ([] Int)) -> Bool) (\a -> id (seq a (undefined::Bool))) ((\a -> a) ((++) ([]::[] ([] Int)) ([]::[] ([] Int)))))
(\a -> \b -> seq b (seq a (seq a (\c -> seq a b)) (\c -> seq a ((undefined::(([] Bool) -> Bool) -> Int -> Bool) (seq a (seq c head)))))) (head (head ([]::[] ([] ((([] Int) -> Int -> Int -> Bool) -> Int)))))
(\a -> seq a (seq a (\b -> seq a (seq b (seq a (\c -> seq c (undefined::[] Int))))) (map (\b -> seq a (undefined::[] (Int -> Bool))) (seq a (seq a (undefined::[] Int)))))) (\a -> map (\b -> \c -> c) (head (seq a (undefined::[] (Int -> [] Bool))) (undefined::Int)))
(\a -> \b -> \c -> map (\d -> b) (seq a ([]::[] Bool))) ((\a -> head (seq a ([]::[] (([] ([] Bool)) -> [] Bool)))) (\a -> (undefined::Bool))) 2
head (id (\a -> tail (seq a (\b -> (undefined::[] (([] Int) -> [] Int))) ((\b -> \c -> seq b (undefined::Bool)) (seq a (undefined::Int))))) (\a -> \b -> seq a (undefined::Int)))
(undefined::([] ([] (Int -> Int))) -> ([] Int) -> [] Int) (head ((!!) (undefined::[] (Bool -> [] ([] ([] (Int -> Int))))) (id (undefined::Int)) ((||) (head (undefined::[] Bool)) (head ([]::[] Bool)))))
\a -> (undefined::[] Int)
\a -> map (seq a (seq a (id (id (undefined::(([] (([] Int) -> Int -> [] Int)) -> Int -> Int -> Bool) -> Int))))) (seq a (seq a (undefined::[] (([] (([] Int) -> Int -> [] Int)) -> Int -> Int -> Bool))))
id ((\a -> (\b -> seq b (seq a (undefined::Bool -> ([] Int) -> [] Int))) (seq a (seq a 2))) ((\a -> id (seq a 0)) (((==)::Bool -> Bool -> Bool) (undefined::Bool) True)) (id ((\a -> \b -> seq a (seq b (undefined::Bool))) (head ([]::[] Int)) ((undefined::Bool -> Int) True))))
(undefined::([] Bool) -> (([] ([] Bool)) -> [] Bool) -> ([] Int) -> [] Int) (undefined::[] Bool) ((\a -> \b -> seq b (seq b (seq a (undefined::Bool -> [] Bool))) (seq a (seq a (seq b True)))) (\a -> id (seq a (undefined::Int -> ([] ([] ([] Int))) -> Int)) (seq a (seq a (seq a (undefined::Int))))))
(\a -> \b -> seq a (map (\c -> (!!) (undefined::[] Int) (seq b c)) (undefined::[] Int))) (\a -> (undefined::(([] Int) -> ([] Int) -> Bool) -> [] (([] Bool) -> [] Bool)) (seq a (seq a (\b -> \c -> (undefined::([] Int) -> Bool))) (seq a False)))
(\a -> (\b -> seq a ((!!) (undefined::[] (([] Int) -> [] Int)) (seq b 1))) (a ([]::[] (([] Int) -> [] (Bool -> Bool))) (head (undefined::[] Int)) (a (undefined::[] (([] Int) -> [] (Bool -> Bool))) (undefined::Int) (undefined::Int)))) (\a -> \b -> \c -> seq b b)
(\a -> id (seq a ((\b -> \c -> seq b (undefined::([] Int) -> [] Int)) (seq a (seq a True))))) (\a -> a) (undefined::Bool)
id (undefined::(([] (([] (Bool -> Bool)) -> [] (Bool -> Bool))) -> Int -> Bool) -> ([] Int) -> [] Int) (\a -> (\b -> seq a (\c -> even) (\c -> seq c (seq b (undefined::Bool)))) (seq a (seq a ([]::[] ((([] Int) -> [] Bool) -> ([] Int) -> [] Bool)))))
\a -> ([]::[] Int)
case1 (\a -> \b -> \c -> id (undefined::Int -> [] Int) (seq a (undefined::([] ([] ([] Int))) -> Int) (seq b (undefined::[] ([] ([] Int)))))) ((\a -> seq a (\b -> tail) a) ((\a -> a) (id (undefined::Int)))) (map (\a -> id (seq a (undefined::Bool))) (id (undefined::[] (Int -> ([] Int) -> Int))))
\a -> (\b -> seq b (undefined::(Bool -> Bool -> Bool) -> [] Int)) (id ((\b -> b) True)) (id (\b -> \c -> c))
(:) (head ([]::[] ((([] Int) -> [] ([] Int)) -> Int)) ((undefined::(([] Int) -> [] (Bool -> Bool)) -> ([] Int) -> [] ([] Int)) (\a -> ([]::[] (Bool -> Bool)))))
\a -> (\b -> (\c -> seq b (seq a (undefined::Bool -> [] Int) (seq c b))) (\c -> seq b (seq b (\d -> (undefined::[] Bool))) even)) (undefined::Bool)
(\a -> \b -> seq b (\c -> seq c (undefined::Int -> [] Int)) (\c -> seq c (seq b (seq a (undefined::[] Bool)))) a) ((undefined::([] Bool) -> ([] ([] ([] Bool))) -> Int) (undefined::[] Bool) ((\a -> seq a (seq a (seq a (undefined::[] ([] ([] Bool)))))) (id ([]::[] ([] Bool)))))
tail
(\a -> (\b -> seq a (\c -> \d -> seq b d)) (seq a (undefined::Int)) (case1 (\b -> \c -> (undefined::Int)) (seq a 1) (seq a (undefined::[] Int)))) ((undefined::Bool -> [] (Int -> [] (([] Int) -> [] Int))) ((undefined::([] (([] Int) -> [] Int)) -> Bool) ([]::[] (([] Int) -> [] Int))))
\a -> a
\a -> id (undefined::((([] ([] Bool)) -> [] ([] Bool)) -> [] ([] ([] (([] Int) -> Int -> Int -> Bool)))) -> [] Int) (undefined::(([] ([] Bool)) -> [] ([] Bool)) -> [] ([] ([] (([] Int) -> Int -> Int -> Bool))))
\a -> (!!) ([]::[] ((([] (Int -> Bool)) -> Int -> Bool) -> [] Int)) ((\b -> b) (undefined::Int)) head
id
(undefined::([] Int) -> [] Int)
(!!) (tail ([]::[] ((([] Int) -> Int -> Int) -> ([] Int) -> [] Int))) ((!!) (id (undefined::[] Int)) 1) (!!)
(undefined::(([] ([] Int)) -> [] (([] Int) -> Bool)) -> ([] Int) -> [] Int) (undefined::([] ([] Int)) -> [] (([] Int) -> Bool))
\a -> (undefined::[] Int)
\a -> seq a ((!!) (tail (seq a ((++) (filter (seq a (undefined::([] Int) -> Bool)) (seq a (undefined::[] ([] Int)))) (head (id ([]::[] ([] ([] Int)))))))) (seq a 2))
\a -> ([]::[] Int)
(\a -> case1 (\b -> seq b (\c -> \d -> c)) ((undefined::Bool -> ([] Int) -> [] Int) False) (seq a (undefined::[] Int))) (case1 (\a -> \b -> (!!) (undefined::[] Int) 2) ((\a -> seq a (undefined::Int)) False) ((\a -> seq a (undefined::[] (Bool -> Bool))) ((+1) 2)))
\a -> seq a (seq a (\b -> (undefined::(Int -> ([] Int) -> Bool) -> [] Int)) (not (seq a (undefined::Bool))) (undefined::Int -> ([] Int) -> Bool))
head ((\a -> (undefined::Int -> [] (Bool -> ([] Int) -> [] Int)) (seq a 1)) ((undefined::Int -> [] (([] Int) -> [] Int)) ((+1) 1))) False
\a -> (\b -> seq b ((\c -> seq b (seq c (undefined::(Int -> Bool -> Bool) -> [] Int))) (undefined::Bool))) (seq a (\b -> seq b (\c -> (undefined::[] (Int -> Bool)))) (seq a (seq a (seq a 0)))) (undefined::Int -> Bool -> Bool)
\a -> case1 (\b -> \c -> seq b (enumFromTo'::Int -> Int -> [Int]) (b 1) (b 0)) a ([]::[] (Int -> Int))
\a -> filter (seq a (\b -> seq b (\c -> (undefined::Int -> Bool))) (seq a (undefined::Int)) (seq a ((!!) (head ([]::[] ([] ([] ([] Int))))) ((+1) 0)))) ((enumFromTo::Int -> Int -> [Int]) (seq a (\b -> seq a 1) (even (seq a (undefined::Int)))) (id (\b -> 1) (undefined::[] ([] (Int -> Int)))))
(\a -> seq a (\b -> \c -> case1 (undefined::Bool -> ([] Bool) -> [] Int) c ([]::[] Bool)) (seq a (undefined::(([] Bool) -> [] Bool) -> Int) (\b -> b))) (\a -> seq a (seq a (\b -> (undefined::[] (Int -> [] Int)))))
(\a -> \b -> seq b (\c -> seq a id) (seq b (seq a (seq b (undefined::Bool))))) ((\a -> seq a (undefined::[] ([] (Bool -> Bool)))) (not (undefined::Bool))) (case1 (\a -> \b -> (+1)) (\a -> seq a 0) (undefined::[] Int) ((\a -> (+1) (seq a (undefined::Int))) True))
\a -> a
\a -> seq a (head (id (seq a ([]::[] ((([] (([] ([] Int)) -> [] (([] Int) -> Bool))) -> Int -> [] Int) -> [] Int))))) (id (seq a (seq a (\b -> seq b (id (\c -> (undefined::Int -> [] Int) (seq b (seq b (undefined::Int)))))))))
\a -> (undefined::([] (([] ([] (([] Int) -> Bool))) -> Int -> Int -> [] Int)) -> [] Int) (seq a (seq a (seq a (seq a (seq a (seq a (tail (seq a (tail ([]::[] (([] ([] (([] Int) -> Bool))) -> Int -> Int -> [] Int)))))))))))
\a -> seq a (undefined::(([] (([] (Int -> Bool)) -> Int -> Bool)) -> Int -> Int -> Int) -> [] Int) (\b -> (-))
tail
(\a -> \b -> (\c -> \d -> seq c b) (seq a (seq a (undefined::Int))) (head (tail b))) (head (tail ([]::[] (Int -> ([] ([] Int)) -> [] ([] (Int -> Int))))) (id (\a -> (undefined::Int)) (\a -> seq a ([]::[] ([] Int)))))
(\a -> (\b -> seq b (\c -> \d -> d)) (seq a (head ([]::[] Int))) (odd (seq a (seq a ((\b -> seq b (undefined::Int)) (undefined::Int)))))) (head (id (tail (tail ([]::[] (([] Int) -> ([] (([] Int) -> Int -> [] Int)) -> Int -> Bool))))))
id
(undefined::(([] Int) -> Int -> Bool) -> ([] Int) -> [] Int) ((\a -> \b -> seq a (undefined::([] Int) -> Int -> Bool)) ((!!) (undefined::[] Int) (undefined::Int)) (id (\a -> seq a False) (\a -> seq a (seq a (seq a (undefined::[] ([] Bool)))))))
(\a -> seq a (seq a (seq a (id (\b -> \c -> seq b c))) (seq a (id (undefined::Bool -> Int -> Bool -> Bool) (odd (seq a 1)))))) ((\a -> seq a (\b -> seq b ([]::[] ([] Bool)))) ((\a -> seq a (seq a (seq a 1))) (\a -> seq a (seq a (seq a False)))))
\a -> seq a a
(\a -> \b -> filter (\c -> a) (map (seq b (undefined::([] ([] (Bool -> Bool))) -> Int)) (seq a ([]::[] ([] ([] (Bool -> Bool))))))) False
tail
\a -> seq a a
\a -> a
(:) ((\a -> (\b -> seq b (undefined::([] Bool) -> Int) (seq a (seq a ([]::[] Bool)))) ([]::[] (([] (([] Int) -> [] (Int -> Bool))) -> Int -> Int))) (\a -> \b -> seq a (case1 (\c -> seq a (\d -> b)) b (seq a (seq b ([]::[] Int))))))
(\a -> seq a (seq a (seq a (seq a tail)))) ((undefined::(([] Int) -> [] (Int -> [] Int)) -> Int) (undefined::([] Int) -> [] (Int -> [] Int)))
\a -> seq a a
(\a -> \b -> (\c -> \d -> a b c (undefined::Int)) (seq a (seq a 1)) (seq b ((\c -> c) (seq a (seq a (seq a False)))))) (\a -> id (undefined::(([] Int) -> Int -> Bool) -> Int -> Int -> [] Int) (\b -> \c -> seq a (seq c even) c))
\a -> ([]::[] Int)
(\a -> (:) (id (seq a (seq a (seq a (\b -> seq a (seq b (seq b (undefined::Int)))) (seq a (\b -> \c -> (undefined::[] Bool)))))))) (\a -> head ([]::[] (Bool -> ([] Int) -> [] (([] Int) -> [] Int))) ((&&) (even (undefined::Int)) (not (undefined::Bool))))
tail
(undefined::([] Int) -> [] Int)
\a -> a
case1 (\a -> \b -> (\c -> \d -> (enumFromTo'::Int -> Int -> [Int]) 1 c) (seq b (\c -> (undefined::Int)) (seq a (seq a (undefined::[] ([] (Int -> Int))))))) (head ([]::[] (([] Int) -> [] Int))) ((\a -> id (undefined::(Int -> [] Bool) -> [] Bool) (seq a (seq a (undefined::Int -> [] Bool)))) (\a -> seq a ([]::[] ([] Int))))
(\a -> \b -> case1 (\c -> (undefined::([] Bool) -> Bool -> [] Int)) (\c -> b) (seq b (undefined::[] Bool)) (seq b ((!!) (seq a (seq a (undefined::[] Bool))) a))) ((\a -> case1 (\b -> (undefined::([] Int) -> Int)) (seq a 1) (seq a (undefined::[] Int))) (case1 (\a -> \b -> (undefined::Bool)) False (undefined::[] Bool)))
\a -> head (undefined::[] ((([] (Bool -> Bool -> Bool)) -> Int) -> Bool -> [] Int)) (undefined::([] (Bool -> Bool -> Bool)) -> Int) (seq a ((\b -> seq a (undefined::(([] Int) -> [] Int) -> Bool) (\c -> seq a (seq b ([]::[] Int)))) (seq a (not (seq a (seq a (undefined::Bool)))))))
\a -> seq a ((!!) (map (seq a (\b -> head (undefined::[] (Bool -> [] Int)) (id (undefined::Bool)))) (map (\b -> seq b (undefined::Int -> Int -> Int -> Bool)) (seq a (undefined::[] Bool)))) ((\b -> seq b ((+) (seq a (undefined::Int)) (seq a 0))) (not (undefined::Bool))))
\a -> case1 (\b -> seq b (head (seq a (seq a (undefined::Int -> [] (([] Bool) -> [] Int))) (seq a (seq b (seq b (undefined::Int))))))) (map (seq a (\b -> id (undefined::Int))) (take (undefined::Int) ([]::[] (Bool -> ([] Bool) -> Int)))) ((:) (seq a (undefined::Bool)) ((:) True ([]::[] Bool)))
(\a -> seq a ((undefined::([] Int) -> ([] Bool) -> ([] Int) -> [] Int) (seq a (undefined::[] Int)))) 0 ((\a -> seq a (undefined::([] ([] (Bool -> Bool))) -> [] Bool)) (undefined::Bool) ((\a -> tail (seq a (undefined::[] ([] (Bool -> Bool))))) ((!!) (undefined::[] ([] Bool)))))
id (\a -> seq a (map (\b -> (\c -> \d -> seq c (seq b (undefined::Int))) False (seq a (\c -> a) (id (seq a 2)))) (seq a ([]::[] ((Bool -> Bool) -> ([] ([] (([] Int) -> Bool))) -> [] (([] Int) -> Bool))))))
(undefined::([] ([] (Int -> Bool))) -> (([] Bool) -> Bool) -> ([] Int) -> [] Int) ((:) (undefined::[] (Int -> Bool)) ([]::[] ([] (Int -> Bool)))) (case1 (\a -> seq a (\b -> \c -> False)) ((undefined::Int -> ([] Bool) -> Bool) ((+1) 0)) ((undefined::Int -> [] Bool) ((+1) (undefined::Int))))
(\a -> \b -> map (\c -> seq b (\d -> seq b c) (seq b (seq a (undefined::[] Int)))) (seq b b)) (\a -> (\b -> map (\c -> c) (seq a (seq b ([]::[] ([] Bool))))) ((!!) (undefined::[] (([] Int) -> Int -> Int -> Bool)) (seq a 2)))
\a -> id (seq a (seq a (undefined::(([] ([] Bool)) -> ([] (Int -> Bool)) -> Int -> Bool) -> [] Int))) (seq a (undefined::Int -> ([] ([] Bool)) -> ([] (Int -> Bool)) -> Int -> Bool) 0)
map (\a -> seq a 1)
(\a -> \b -> seq a (\c -> (\d -> seq d c) a)) False (undefined::([] ([] Int)) -> [] Bool)
(\a -> seq a ((\b -> seq a (seq b (\c -> (undefined::([] Int) -> [] Int))) True) (undefined::Bool))) (\a -> (undefined::Bool -> ([] ([] ([] (([] Int) -> Bool)))) -> [] ([] (Int -> Int))) (seq a (seq a (\b -> seq a True)) (undefined::[] Int)))
(:) ((\a -> (\b -> seq b (seq a ((\c -> c) ((+1) (undefined::Int))))) (\b -> (undefined::(Bool -> Bool) -> [] Bool) (head (seq b ([]::[] (Bool -> Bool)))))) ((\a -> ((==)::Bool -> Bool -> Bool) a a) ((\a -> seq a (seq a (seq a (undefined::Bool)))) (tail ([]::[] (Int -> Bool))))))
(\a -> seq a (\b -> (\c -> (\d -> seq d b) (seq a (seq c (seq a (undefined::[] ([] Bool)))))) (seq b (seq b (\c -> (undefined::[] ([] (Int -> Bool)))))))) ((!!) (case1 (\a -> (undefined::([] Bool) -> [] Int)) (undefined::[] Int) ([]::[] Bool)) ((+) (id 1) 1))
\a -> seq a ((\b -> head (seq b (seq b (undefined::[] ((Bool -> [] ([] (Bool -> Bool))) -> [] Int))))) ((\b -> seq b (seq b 0)) (seq a (seq a (seq a (undefined::[] ([] (([] Bool) -> [] Bool)))))))) (\b -> (!!) (map (undefined::Int -> [] ([] (Bool -> Bool))) (seq b (seq b ([]::[] Int)))) 2)
\a -> seq a (\b -> (\c -> seq c ((enumFromTo'::Int -> Int -> [Int]) 0)) ((&&) (undefined::Bool) (undefined::Bool)) (seq a ((!!) a (seq b 0)))) (undefined::([] (([] ([] ([] Bool))) -> [] ([] Bool))) -> [] (Int -> Bool))
\a -> (undefined::(Int -> ([] Int) -> Bool) -> [] Int) (seq a (\b -> seq b (case1 (\c -> (\d -> \e -> d) (seq b True)) ((\c -> seq b (seq c c)) True))))
\a -> a
map (\a -> 0)
(\a -> \b -> (\c -> seq c (seq b (seq b (undefined::Bool -> [] Int))) (undefined::Bool)) (seq b ((undefined::Int -> ([] (Int -> Int)) -> [] (Int -> Int)) a))) (head ((\a -> seq a ([]::[] (Bool -> Int))) (\a -> False)) ((\a -> seq a (seq a (seq a a))) (even (undefined::Int))))
(\a -> seq a (seq a (seq a (\b -> (undefined::Int -> ([] Int) -> [] Int))) (id (undefined::Int))) (case1 (undefined::([] Bool) -> ([] ([] Bool)) -> Int) (undefined::Int) (seq a ([]::[] ([] Bool))))) (head ((\a -> seq a (seq a ([]::[] (Bool -> Bool)))) ((+) 1)) ((undefined::Bool -> Bool) ((!!) (undefined::[] Bool) (undefined::Int))))
(\a -> \b -> seq b (id take (seq a (seq a (undefined::Int))))) ((||) True False) (head ([]::[] (([] ([] Bool)) -> [] Bool)))
\a -> tail (seq a (seq a (head (undefined::[] (Bool -> ([] (Bool -> Bool)) -> [] Int))) ((!!) (seq a (undefined::[] Bool)) (seq a (seq a 1))) (seq a (seq a (id (undefined::([] Bool) -> Int -> [] (Bool -> Bool)) (undefined::[] Bool) ((\b -> seq a b) (undefined::Int)))))))
(!!) ([]::[] (([] Int) -> [] Int)) ((undefined::(Int -> ([] Int) -> Bool) -> Int) ((undefined::([] Bool) -> Int -> ([] Int) -> Bool) (tail (undefined::[] Bool))))
(\a -> seq a (undefined::(([] ([] Bool)) -> [] ([] Bool)) -> ([] Int) -> [] Int)) ((\a -> a) (undefined::Bool)) (\a -> a)
(\a -> \b -> seq a (seq a (seq b (undefined::([] Bool) -> ([] Int) -> [] Int))) (seq a (seq b (seq b (undefined::[] Bool))))) (((==)::[Int] -> [Int] -> Bool) (id (undefined::[] Int)) ([]::[] Int)) ((+1) ((!!) (head (undefined::[] ([] (Bool -> Int)))) 1 ((\a -> a 0 not (undefined::Bool)) (\a -> \b -> \c -> b c))))
\a -> a
tail
case1 (\a -> seq a ((\b -> seq b (seq b (undefined::Bool -> ([] Int) -> [] Int))) (undefined::Int)) (seq a (seq a (seq a (undefined::(Int -> Bool) -> Bool))) (\b -> (undefined::Bool)))) (undefined::[] Int)
case1 ((undefined::([] ([] Int)) -> Int -> ([] Int) -> [] Int) (undefined::[] ([] Int))) (id ((:) ((\a -> seq a (seq a 0)) (id ([]::[] (Bool -> Bool)))) (case1 (undefined::Int -> ([] Int) -> [] Int) ([]::[] Int) (undefined::[] Int))))
id (id (undefined::(((Bool -> ([] Int) -> [] Int) -> [] ([] Int)) -> Bool) -> ([] Int) -> [] Int)) ((undefined::Int -> ((Bool -> ([] Int) -> [] Int) -> [] ([] Int)) -> Bool) (case1 (\a -> seq a head) 0 ([]::[] Int)))
head ([]::[] (Int -> ([] (Int -> Int)) -> ([] Int) -> [] Int)) (case1 (\a -> \b -> (undefined::Int)) 2 (undefined::[] Bool)) ((\a -> (\b -> tail (seq b ([]::[] (Int -> Int)))) (seq a a)) ((!!) (undefined::[] (Int -> Bool)) 2 (undefined::Int)))
(\a -> seq a id) (\a -> (\b -> (\c -> seq a (c ([]::[] Bool))) (seq a (seq b (seq a (undefined::([] Bool) -> [] Bool))))) (seq a (seq a (\b -> seq a ([]::[] (Int -> [] Int)))) id))
\a -> a
\a -> a
(\a -> seq a (\b -> (\c -> \d -> seq c ([]::[] Int)) (\c -> (undefined::[] Bool))) (undefined::[] ([] Bool))) (id (\a -> seq a (undefined::([] ([] Bool)) -> [] (Bool -> Bool))) False)
\a -> a
\a -> map (seq a (\b -> head a)) (seq a (\b -> a) (tail (seq a (seq a (undefined::[] (([] (Bool -> Bool -> Bool)) -> Int -> Int))))))
\a -> seq a (seq a (map (\b -> (\c -> seq a (seq a (seq c (seq a (seq c (undefined::Int)))))) ((undefined::Int -> ([] (Int -> Int)) -> [] (Int -> Int)) (seq a ((+1) (undefined::Int))))) (map (undefined::([] (Int -> Bool)) -> ([] ([] ([] Bool))) -> [] ([] Bool)) (seq a (\b -> seq b (undefined::[] ([] (Int -> Bool)))) (undefined::[] Int)))))
(\a -> seq a (undefined::Bool -> ([] Int) -> [] Int)) (\a -> seq a (((==)::Bool -> Bool -> Bool) (seq a (head ([]::[] Bool))))) ((\a -> seq a (seq a (seq a (head (undefined::[] ((Int -> Int -> Int) -> Bool)) (\b -> \c -> seq b c))))) (\a -> seq a (tail (seq a (seq a (seq a (seq a ([]::[] ([] Bool)))))))))
map (\a -> head (map (\b -> (!!) (head (undefined::[] (([] ([] Bool)) -> [] Int)) (seq a (seq b ([]::[] ([] Bool))))) a) ([]::[] (([] Int) -> Int -> ([] Int) -> Int))))
(\a -> seq a (undefined::(([] (Int -> Int)) -> Bool) -> ([] Int) -> [] Int) (\b -> (!!) (undefined::[] Bool) ((+1) 0))) (\a -> (undefined::Int -> [] ([] ([] Bool))))
id (\a -> (\b -> filter (\c -> seq c (seq b (seq a (seq a False))))) ((undefined::([] Bool) -> Int) (seq a (head (undefined::[] ([] Bool)))))) (\a -> seq a ((undefined::(Int -> Int -> Bool) -> [] Int) (\b -> \c -> seq c ((\d -> seq d (undefined::Bool)) True))))
\a -> seq a a
head (tail (id ([]::[] (([] (Int -> ([] ([] ([] Bool))) -> [] ([] Bool))) -> ([] Int) -> [] Int)))) (head (undefined::[] ([] (Int -> ([] ([] ([] Bool))) -> [] ([] Bool)))))
\a -> a
\a -> take ((!!) a (seq a (\b -> seq a (seq a (undefined::Int))) (\b -> seq a (id ([]::[] ([] Bool)))))) ((\b -> head (seq b ([]::[] ((Int -> Int) -> [] Int))) (seq b ((+) (undefined::Int)))) ((\b -> seq b (seq a (undefined::Bool))) (undefined::[] (([] Int) -> Bool))))
\a -> seq a a
(\a -> (\b -> \c -> head (seq b (undefined::[] (([] (Int -> Int)) -> [] Int))) (seq b (tail ([]::[] (Int -> Int))))) (seq a (seq a (seq a (seq a (undefined::Bool -> [] (([] Int) -> [] Int)) (seq a (undefined::Bool))))))) (undefined::[] (([] (([] (Bool -> Bool)) -> [] (Bool -> Bool))) -> Int))
\a -> (undefined::Bool -> (Int -> Int -> Int) -> [] Int) ((undefined::([] (([] ([] Bool)) -> [] ([] Bool))) -> Bool) (seq a (seq a (seq a ([]::[] (([] ([] Bool)) -> [] ([] Bool))))))) (\b -> (!!) (seq a (seq b (seq b ((!!) ([]::[] (([] ([] ([] Bool))) -> [] Int)) b)) (seq b (undefined::Int -> [] ([] ([] Bool))) (seq b (id 2))))))
(\a -> seq a (\b -> (\c -> seq c (seq a (undefined::(([] ([] Bool)) -> [] Bool) -> [] Int)) (\d -> seq d ([]::[] Bool))) ((undefined::(([] (Int -> [] Int)) -> [] ([] Bool)) -> Bool) (\c -> seq c ([]::[] ([] Bool)))))) (\a -> seq a (\b -> (\c -> (!!) (seq b ([]::[] ([] ([] (([] Int) -> [] Int))))) c) ((+1) (id ((+1) (seq b (undefined::Int)))))))
(!!) ([]::[] (([] Int) -> [] Int)) (case1 (\a -> (undefined::([] Bool) -> Int)) ((\a -> seq a 1) 2) ((\a -> seq a (undefined::[] Bool)) False))
\a -> seq a (seq a (id (\b -> \c -> seq c a))) (seq a (seq a (undefined::Int -> Bool) (id (seq a (undefined::Int))))) (seq a (\b -> seq a ((undefined::(Int -> Bool) -> [] (Bool -> Bool)) (\c -> seq b (((==)::[Int] -> [Int] -> Bool) (seq b a) a)))))
(undefined::([] ([] ([] Bool))) -> ([] Int) -> [] Int) ((undefined::Bool -> Int -> [] ([] ([] Bool))) (((==)::Bool -> Bool -> Bool) True False) (id ((undefined::(([] Bool) -> Bool) -> Int) (\a -> head a))))
(\a -> seq a (\b -> seq b b)) ([]::[] (([] (([] Int) -> Int -> Int -> [] Int)) -> ([] Int) -> Bool))
(!!) ((\a -> seq a ((\b -> seq b (seq a (undefined::[] (([] Int) -> [] Int)))) (seq a (seq a (undefined::Int))))) ((\a -> seq a (even a)) ((-) 1 (undefined::Int)))) ((\a -> seq a (seq a ((\b -> b) (seq a (undefined::Int))))) (id (\a -> seq a (head (seq a (undefined::[] (([] Int) -> ([] Int) -> [] Bool)))))))
case1 (\a -> (undefined::([] Bool) -> ([] Int) -> [] Int)) (\a -> map (seq a (\b -> head ([]::[] Int))) (seq a (seq a (undefined::[] Bool)))) (id ((undefined::Bool -> (Bool -> Bool) -> [] Bool) (undefined::Bool) ((\a -> seq a (undefined::Bool -> Bool)) ([]::[] Bool))))
(!!) (undefined::[] (Bool -> Bool -> ([] Int) -> [] Int)) (head ([]::[] Int)) (case1 (\a -> head) (undefined::Bool) ([]::[] Bool)) ((\a -> seq a (seq a (seq a (undefined::(Bool -> Bool) -> Bool))) (\b -> b)) ((\a -> \b -> seq a (seq a ([]::[] ([] Bool)))) 1))
(\a -> (undefined::Bool -> Int -> ([] Int) -> [] Int) (seq a (seq a True))) (head (map (\a -> ([]::[] (Bool -> Bool))) ([]::[] Int))) ((undefined::(([] ([] (([] Int) -> [] Int))) -> Int -> Int -> Int) -> Int) (\a -> \b -> seq a (seq a (seq a ((+) (seq b b))))))
\a -> seq a (\b -> filter (\c -> (\d -> d) b) (seq a (\c -> a) (seq a (seq b (seq b 1))))) (seq a (((==)::[Int] -> [Int] -> Bool) a (map (\b -> seq a 1) (seq a (undefined::[] (Int -> Int))))))
\a -> seq a (case1 (seq a (head (seq a (\b -> ([]::[] (Int -> ([] Int) -> [] Int))) (seq a (seq a (seq a False)))))) ([]::[] Int) (seq a (\b -> a) ((\b -> b 2 (undefined::Int)) (\b -> \c -> seq b c))))
(\a -> \b -> seq a (\c -> \d -> d) (seq b (seq a (seq b 1)))) (head (map (undefined::Bool -> ([] ([] Bool)) -> [] Bool) ([]::[] Bool))) ((undefined::(([] ([] (Int -> [] Int))) -> Int -> Bool) -> Bool) (\a -> \b -> seq a (seq a (\c -> (undefined::Bool))) b))
case1 (\a -> case1 (seq a (\b -> \c -> \d -> d)) (\b -> b)) ((undefined::Bool -> Bool -> ([] Int) -> [] Int) (not False) ((\a -> seq a False) (undefined::[] ([] Int)))) (tail ([]::[] Bool))
\a -> map ((!!) (seq a ([]::[] ((([] ([] Bool)) -> [] ([] (Bool -> Bool))) -> Int))) (seq a (seq a (seq a ((+1) (seq a 0)))))) (seq a (tail ((\b -> tail (seq b ([]::[] (([] ([] Bool)) -> [] ([] (Bool -> Bool)))))) (head (seq a (undefined::[] Int))))))
case1 ((!!) ([]::[] (([] Int) -> [] Int))) (map (\a -> (\b -> seq b (seq b (undefined::Int))) (map (undefined::([] Int) -> Bool))) ((undefined::(([] Int) -> Int) -> [] (Int -> Int -> Int)) (\a -> head a)))
\a -> seq a a
\a -> (\b -> seq b (seq b (\c -> a) (\c -> case1 (undefined::Bool -> ([] Bool) -> [] ([] Bool)) (seq a (undefined::[] ([] Bool))) (seq c (undefined::[] Bool))))) (seq a (\b -> \c -> (undefined::Int -> Int -> [] (([] Int) -> Bool)) (seq b (seq a 2))) False)
\a -> a
(\a -> (undefined::Bool -> Int -> ([] Int) -> [] Int) (((==)::[Int] -> [Int] -> Bool) (undefined::[] Int) (undefined::[] Int)) (seq a (seq a (\b -> 2)) (\b -> (undefined::Int)))) ((\a -> seq a (seq a (\b -> seq b (undefined::Bool)) (seq a (seq a 0)))) (\a -> seq a (\b -> seq a (\c -> ([]::[] Int))) (undefined::Bool)))
case1 (\a -> case1 (\b -> id (\c -> \d -> ([]::[] Int)) (seq b (id id)))) (take ((-) (id (undefined::Int)) (undefined::Int))) (undefined::[] Int)
take ((undefined::Int -> ([] ([] (Int -> Bool))) -> Int) ((undefined::([] (([] Int) -> Int -> Int)) -> Int) ([]::[] (([] Int) -> Int -> Int))) (map (undefined::Bool -> [] (Int -> Bool)) (case1 (\a -> (undefined::([] Int) -> [] Bool)) (undefined::[] Bool) (undefined::[] Int))))
id (\a -> seq a (\b -> \c -> c) (case1 (\b -> (undefined::([] ([] Bool)) -> Bool)) (seq a (undefined::Bool)) (undefined::[] ([] Bool)))) (undefined::([] (([] Int) -> [] (Int -> Bool))) -> ([] ([] Int)) -> [] ([] Int))
\a -> (undefined::[] Int)
id (undefined::(([] (Int -> Int)) -> Int) -> Int -> ([] Int) -> [] Int) ((undefined::Int -> ([] (Int -> Int)) -> Int) ((+1) (undefined::Int))) ((\a -> seq a (undefined::(([] Int) -> Bool -> Bool) -> Int) (\b -> \c -> c)) ((\a -> seq a (seq a (seq a (undefined::[] Bool)))) (\a -> True)))
\a -> a
\a -> ([]::[] Int)
(\a -> seq a (\b -> case1 (seq b (seq b (\c -> \d -> b))) b (seq b (seq a (seq b (undefined::[] Bool)))))) ((\a -> seq a ((undefined::(Int -> Int -> Int -> Bool) -> Bool) (seq a (undefined::Int -> Int -> Int -> Bool)))) ((\a -> seq a (seq a (seq a (undefined::([] Int) -> ([] Int) -> [] Int)))) (even 1)))
\a -> seq a (id (\b -> a)) (\b -> seq a (undefined::Int -> ([] (([] Int) -> Int -> Bool)) -> Int) 1)
id (\a -> \b -> seq b ((undefined::Int -> (([] Bool) -> [] Bool) -> [] Int) (seq b 2)) (seq a (\c -> c))) ((!!) (id (head ([]::[] ([] (([] ([] Int)) -> [] ([] (Int -> Int))))))) 1)
(\a -> (\b -> (undefined::([] ([] Bool)) -> ([] Int) -> [] Int) (seq a (seq b (undefined::[] ([] Bool))))) (id (undefined::(Int -> Int) -> [] ([] (Int -> Int))) (\b -> b))) (undefined::Int -> [] ([] (Int -> Int)))
\a -> seq a a
\a -> a
\a -> (undefined::[] Int)
(\a -> \b -> (undefined::([] Bool) -> ([] (Int -> [] Int)) -> [] Int) (seq a (seq b (seq b ([]::[] Bool)))) ((\c -> seq c (tail (undefined::[] (Int -> [] Int)))) (seq a (seq a (seq a (undefined::Bool)))))) (\a -> seq a (undefined::[] ([] Bool)))
id
\a -> a
\a -> (\b -> (!!) ([]::[] (Bool -> [] Int)) (seq a (seq b 1)) (seq a (b (id (undefined::[] (([] Int) -> Int -> Int))) (seq b ((+1) (undefined::Int)))))) (seq a (\b -> \c -> seq c (\d -> head (undefined::[] (Bool -> Bool)) (seq b b))) (((==)::[Int] -> [Int] -> Bool) a a))
\a -> seq a (undefined::(Int -> ([] Int) -> Bool) -> Int -> [] Int) (undefined::Int -> ([] Int) -> Bool) (seq a (\b -> (undefined::Int)) (undefined::([] Int) -> [] (Bool -> Bool)))
\a -> a
\a -> a
id (undefined::(([] Int) -> [] ([] (([] ([] Int)) -> [] (([] Int) -> Bool)))) -> ([] Int) -> [] Int) (\a -> (undefined::[] ([] (([] ([] Int)) -> [] (([] Int) -> Bool)))))
\a -> map (undefined::(([] ([] ([] Bool))) -> [] ([] Bool)) -> Int) ((undefined::([] ([] (Bool -> Bool))) -> [] (([] ([] ([] Bool))) -> [] ([] Bool))) (seq a (seq a (seq a (\b -> ([]::[] ([] (Bool -> Bool))))) True)))
(\a -> seq a (seq a (undefined::((Int -> Int) -> [] ([] ([] Bool))) -> ([] Int) -> [] Int) (\b -> seq b (seq a (undefined::([] Int) -> [] ([] ([] Bool))) (seq a ([]::[] Int)))))) (\a -> seq a ((\b -> seq b (id (undefined::([] Int) -> Int -> Int -> Bool) (tail a))) (((==)::Bool -> Bool -> Bool) (seq a (undefined::Bool)) (seq a (seq a True)))))
(\a -> seq a ((undefined::Bool -> Bool -> ([] Int) -> [] Int) (seq a (a (undefined::([] Int) -> ([] Int) -> [] Bool) ([]::[] Int) ([]::[] Int)))) (case1 (\b -> \c -> (undefined::Bool)) (seq a (undefined::Bool)) (seq a (undefined::[] Bool)))) (\a -> seq a (case1 (seq a (\b -> (undefined::([] Int) -> ([] Int) -> Bool))) (seq a (head (undefined::[] (Int -> ([] Int) -> Bool))) (head ([]::[] Int)))))
(:) (id ((\a -> (undefined::([] Bool) -> (Int -> Int -> Bool) -> Int) (seq a (tail (undefined::[] Bool))) ((\b -> seq a (seq b (undefined::Int -> Int -> Bool))) (undefined::[] Int))) ((\a -> \b -> map (\c -> \d -> True) (seq a ([]::[] Int))) ((\a -> seq a (seq a 1)) (\a -> a)))))
\a -> seq a a
\a -> take (seq a (seq a (\b -> seq a ((\c -> c) 1))) (\b -> seq b (seq b (\c -> seq c (undefined::[] Bool)) (not (undefined::Bool))))) (seq a (seq a a))
\a -> (undefined::(([] Int) -> [] (Int -> [] Int)) -> [] Int) (undefined::([] Int) -> [] (Int -> [] Int))
\a -> seq a a
take ((undefined::(([] Int) -> ([] (Int -> Bool)) -> [] (Int -> Bool)) -> Int) ((\a -> seq a (\b -> tail)) (case1 (undefined::Bool -> ([] Bool) -> Int) (undefined::Int) ([]::[] Bool))))
(undefined::Bool -> ([] Int) -> [] Int) (case1 (undefined::([] ([] Bool)) -> ([] ([] ([] Bool))) -> Bool) ((\a -> a (undefined::Int) True) (head ([]::[] (Int -> Bool -> Bool)))) (take 0 (undefined::[] ([] ([] Bool)))))
case1 (head ([]::[] ((Int -> Int) -> ([] (Int -> Int)) -> ([] Int) -> [] Int))) (\a -> seq a ([]::[] Int)) ((\a -> seq a (undefined::Bool -> [] (Int -> Int)) (seq a (seq a False))) (\a -> \b -> seq b (seq b b)))
(undefined::(([] Int) -> ([] Bool) -> [] Bool) -> ([] Int) -> [] Int) (head (head (undefined::[] ([] (Bool -> ([] Int) -> ([] Bool) -> [] Bool)))) (case1 (\a -> \b -> a) True (undefined::[] Bool)))
\a -> seq a (seq a a)
\a -> seq a (case1 (\b -> seq b (id (\c -> case1 (undefined::Bool -> ([] Bool) -> [] Int) a ([]::[] Bool)))) a ((\b -> seq b (id (seq a ([]::[] ([] (Int -> Int)))))) (seq a (seq a (seq a (undefined::[] (Bool -> Bool)))))))
\a -> seq a (id a)
take 1
\a -> a
(undefined::([] Int) -> [] Int)
\a -> a
(\a -> (undefined::Int -> Int -> ([] Int) -> [] Int) (seq a (seq a (seq a 1))) ((!!) (undefined::[] ((Bool -> Bool) -> Int)) 0 (seq a (seq a (\b -> seq b a))))) (even ((!!) ([]::[] (([] ([] (Int -> Int))) -> Int)) 0 ((++) (undefined::[] ([] (Int -> Int))) ([]::[] ([] (Int -> Int))))))
\a -> (undefined::[] Int)
\a -> a
\a -> a
(\a -> a) ((++) ((++) ((\a -> seq a (seq a (undefined::[] Int))) (undefined::Int)) ((\a -> seq a (seq a ([]::[] Int))) (\a -> (+1)))))
take (case1 (\a -> (!!) (undefined::[] (([] (([] ([] Bool)) -> [] Bool)) -> Int)) (seq a (seq a (undefined::Int)))) ((\a -> seq a (undefined::Bool -> Int)) (head ([]::[] Int)) (odd 1)) (map (\a -> head) (head (undefined::[] ([] ([] (Int -> Int)))))))
\a -> a
(\a -> seq a (\b -> (\c -> seq b (\d -> seq c b) (id (seq c (undefined::[] (Int -> Int))))) ((||) (seq a (seq a (undefined::Bool))) (a ([]::[] Int) False)))) (\a -> (\b -> seq a (seq a (\c -> \d -> c) (seq b (seq a False)))) (\b -> map (\c -> (undefined::([] Int) -> ([] Int) -> [] Int)) (seq b (seq a (undefined::[] Bool)))))
(!!) ((undefined::Int -> [] (Bool -> ([] Int) -> [] Int)) (head ([]::[] Int))) (undefined::Int) (odd ((\a -> a ([]::[] (([] ([] Bool)) -> [] ([] (Bool -> Bool))))) (\a -> id (seq a (undefined::Bool -> Int)) (undefined::Bool))))
(\a -> \b -> (\c -> seq a (seq c (\d -> (undefined::[] Int)))) (seq a (undefined::Bool)) (undefined::[] (([] Int) -> [] Int))) ((\a -> seq a (seq a (seq a (\b -> seq a ([]::[] ([] Int))) (head (undefined::[] ([] Bool)))))) (\a -> (undefined::[] (Int -> Int))))
case1 ((\a -> seq a (\b -> \c -> \d -> ([]::[] Int))) ((\a -> seq a 1) (id False))) ((\a -> \b -> seq a ([]::[] Int)) 1) ((\a -> seq a (undefined::(([] Int) -> Bool) -> [] Bool)) (undefined::Int) (\a -> (\b -> seq b (undefined::Bool)) (seq a (undefined::[] (([] Int) -> Bool)))))
tail
\a -> map (undefined::(Bool -> Bool -> Bool) -> Int) (seq a ([]::[] (Bool -> Bool -> Bool)))
(!!) ((\a -> (\b -> seq a (seq b ([]::[] (([] Int) -> [] Int)))) (seq a ([]::[] Int))) ((\a -> id (seq a (undefined::Bool))) (\a -> id (seq a (undefined::[] (([] Int) -> [] Int)))))) (id (\a -> \b -> b) (undefined::Bool) (undefined::Int))
id
head ([]::[] ((([] Int) -> Bool) -> Int -> ([] Int) -> [] Int)) ((\a -> \b -> seq a (seq b (undefined::Bool))) ((!!) (undefined::[] (([] Int) -> Int)))) (id (\a -> (undefined::(Int -> Int -> Int) -> Int) (\b -> seq a (\c -> c))) (\a -> (:) (head ([]::[] (Int -> Int))) (seq a (seq a ([]::[] (Int -> Int))))))
(!!) (undefined::[] (([] Int) -> [] Int)) ((\a -> seq a ((\b -> b (undefined::[] Int)) head)) ([]::[] ([] (Int -> Bool))))
(\a -> \b -> seq a (seq b ((!!) ([]::[] (([] Int) -> [] Int)) (seq b 2)))) (undefined::([] Bool) -> [] (Bool -> Bool)) False
tail
(:) (case1 ((\a -> seq a (undefined::Bool -> Int -> ([] Int) -> Int) (seq a True)) (\a -> seq a head a)) (id (undefined::Int -> (([] Int) -> Bool) -> Int) 1 (\a -> (||) True (undefined::Bool))) ((++) (undefined::[] Int) (undefined::[] Int)))
\a -> a
filter ((\a -> \b -> (undefined::([] (([] (([] ([] ([] Bool))) -> [] ([] Bool))) -> [] Bool)) -> Bool) (seq b (seq a ([]::[] (([] (([] ([] ([] Bool))) -> [] ([] Bool))) -> [] Bool))))) (case1 (case1 (\a -> \b -> a)) ((\a -> seq a (undefined::Bool)) 0) ((\a -> seq a ([]::[] Bool)) (undefined::Bool))))
id (\a -> (:) (undefined::Int)) ((!!) (id (\a -> ([]::[] Int)) (id 0)) ((\a -> a) 0))
\a -> seq a a
\a -> (\b -> head (seq b (seq b (id ([]::[] ((Int -> Int -> [] Int) -> [] Int))))) (\c -> (undefined::(([] Bool) -> [] Bool) -> Int -> [] Int) (\d -> tail (undefined::[] Bool)))) (seq a (seq a (head (seq a (seq a (seq a (seq a (seq a (undefined::[] (([] (([] Int) -> Int -> [] Int)) -> ([] Int) -> [] ([] Int)))))))))))
\a -> seq a (seq a a)
\a -> (undefined::(([] ([] ([] ([] (Int -> Int))))) -> [] Bool) -> [] Int) ((\b -> id (\c -> id (undefined::Bool -> [] Bool) (seq b (seq a (undefined::Bool))))) (seq a (\b -> seq b (seq a 1)) (seq a (seq a (seq a (undefined::[] ([] (Int -> [] Bool))))))))
\a -> a
\a -> seq a ((\b -> case1 (\c -> (undefined::([] Bool) -> Int -> [] Int)) (seq b (undefined::Int -> [] Int)) (seq a (undefined::[] Bool))) (seq a (seq a (\b -> seq a (undefined::Bool))) (seq a (undefined::[] ([] (Bool -> Bool)))))) (case1 (\b -> \c -> seq c (undefined::Int)) (seq a (seq a (seq a (seq a 0)))) (id (undefined::(([] Int) -> [] Int) -> [] Bool) (seq a (\b -> (undefined::[] Int)))))
tail
(\a -> \b -> \c -> seq a (undefined::Bool -> [] Int) (seq c a)) ((\a -> seq a (undefined::Bool)) (filter (undefined::([] Int) -> Bool) ([]::[] ([] Int)))) (map ((undefined::([] Bool) -> ([] ([] Bool)) -> Int) (tail (undefined::[] Bool))) ((\a -> seq a ([]::[] ([] ([] Bool)))) True))
(\a -> \b -> seq b (seq a (\c -> id)) (undefined::Bool)) ((\a -> head (seq a (undefined::[] Bool))) (\a -> head (seq a (undefined::[] Bool)))) (\a -> seq a (seq a (id (\b -> ([]::[] ([] Bool))))) (\b -> seq a (seq b ((undefined::(Int -> Bool) -> [] Int) (seq a (\c -> seq c (undefined::Bool)))))))
(undefined::([] Int) -> [] Int)
(\a -> \b -> (undefined::(([] Int) -> Int) -> ([] Int) -> [] Int) (\c -> seq c (seq a (undefined::Int)))) ((undefined::([] ([] Bool)) -> [] ([] (Int -> Int))) ([]::[] ([] Bool))) ((undefined::(([] (Int -> Bool)) -> [] (Int -> Bool)) -> Bool) (filter (undefined::(Int -> Bool) -> Bool)))
\a -> seq a a
\a -> (++) (seq a (\b -> map (\c -> seq a (undefined::Int)) ([]::[] Bool)) (case1 (seq a (undefined::Bool -> ([] Bool) -> Bool)) False ([]::[] Bool))) ([]::[] Int)
(\a -> seq a tail) (\a -> (\b -> seq b (\c -> tail (undefined::[] (Int -> [] Int))) False) (seq a (seq a (undefined::([] Bool) -> Int -> ([] Int) -> [] Int) (seq a (tail (undefined::[] Bool))))))
\a -> seq a ((undefined::(Int -> Int) -> [] Int) ((\b -> b (seq a (id (undefined::Int -> [] Int)) (seq b (b (undefined::[] Int) 0)))) (seq a (seq a (undefined::Int -> ([] Int) -> Int -> Int) (seq a (seq a (seq a 0)))))))
\a -> seq a (id (head (undefined::[] ((([] ([] Int)) -> [] ([] (Int -> Int))) -> [] Int)))) (\b -> seq b (seq b (seq a ([]::[] ([] (Int -> Int))))))
\a -> seq a ((++) (seq a (\b -> a) ((\b -> seq b (seq b (undefined::[] (([] Int) -> [] Int)))) (seq a (seq a (\b -> (undefined::Int)))))) ((\b -> id (\c -> (undefined::[] Int)) (seq b (id (undefined::Bool)))) (\b -> seq a (undefined::Int))))
take (case1 (\a -> seq a (\b -> \c -> a)) ((\a -> seq a (undefined::(Int -> Bool -> Bool) -> Int)) 2) ((undefined::Bool -> [] Int) (undefined::Bool)) (\a -> \b -> case1 (seq a (\c -> id (undefined::([] Bool) -> Bool))) True (seq a (head ([]::[] ([] Bool))))))
\a -> a
\a -> a
\a -> ([]::[] Int)
id (\a -> (undefined::[] Int))
(undefined::(([] ([] ([] Bool))) -> [] (Int -> [] Bool)) -> ([] Int) -> [] Int) (\a -> seq a (seq a (undefined::[] (Int -> [] Bool))))
id (\a -> \b -> head (seq a (\c -> seq b (seq c (seq c (seq b ([]::[] ([] Int)))))) ((undefined::([] Bool) -> Bool -> Bool -> Bool) (seq a (seq a (undefined::[] Bool)))))) (\a -> head)
\a -> seq a (undefined::(([] Int) -> [] (([] Int) -> Int -> Int -> Bool)) -> [] Int) (\b -> (undefined::[] (([] Int) -> Int -> Int -> Bool)))
id ((undefined::(([] ([] (Bool -> Bool -> Bool))) -> [] Int) -> ([] Int) -> [] Int) (\a -> seq a ((undefined::Bool -> [] Int) (seq a (seq a (seq a (undefined::([] Bool) -> Bool)) (tail ([]::[] Bool)))))))
\a -> a
head ((undefined::Bool -> (([] Int) -> Int) -> [] (([] Int) -> [] Int)) ((\a -> seq a (not (undefined::Bool))) 1) ((\a -> seq a ((undefined::Int -> ([] Int) -> Int) (seq a (seq a 0)))) ((||) (undefined::Bool) False)))
\a -> seq a (seq a (head (seq a (seq a (undefined::[] (((([] ([] Int)) -> Int) -> ([] Int) -> ([] Int) -> [] ([] Int)) -> [] Int)))))) (seq a (\b -> (undefined::([] Int) -> ([] Int) -> [] ([] Int))))
case1 (id (undefined::(([] Int) -> Bool) -> ([] (([] Int) -> Bool)) -> ([] Int) -> [] Int)) (\a -> ([]::[] Int)) (id (head ([]::[] ((Bool -> Bool) -> [] (([] Int) -> Bool))) ((undefined::([] Int) -> Bool -> Bool) ([]::[] Int))))
tail
\a -> (:) (seq a (seq a ((\b -> (\c -> seq c 0) (seq b (seq b False))) (\b -> seq b (seq b (undefined::Bool -> [] ([] (Int -> Int -> Bool))) (seq a (seq a True))))))) (map ((\b -> \c -> seq b (seq a c)) (undefined::Bool)) a)
\a -> (\b -> seq a (seq a (\c -> seq b (\d -> ([]::[] Int)) (undefined::Int)))) (seq a (((==)::[Int] -> [Int] -> Bool) a (seq a (seq a a)))) (undefined::([] Int) -> [] (Int -> [] Int))
tail
(\a -> \b -> seq b (map (\c -> (undefined::([] Bool) -> Int) (seq a (seq b (undefined::[] Bool)))) (seq a (tail (undefined::[] (([] (([] Int) -> Bool -> Bool)) -> [] Bool)))))) (\a -> seq a (\b -> (\c -> seq a (seq c ((!!) (seq a ([]::[] ([] ([] (([] Int) -> Bool))))) (seq b 2)))) (id ((undefined::Int -> [] (([] Int) -> Bool)) (seq a (seq b 0))))))
(\a -> (undefined::Bool -> Int -> ([] Int) -> [] Int) (odd (seq a 2))) (take ((+1) (undefined::Int)) (id ([]::[] (([] Int) -> [] Int)))) ((\a -> id (seq a (undefined::(([] Bool) -> Bool) -> Int))) (filter not ([]::[] Bool)) (case1 (\a -> \b -> seq b a) (not (undefined::Bool))))
(undefined::(Int -> Int -> Bool) -> Bool -> ([] Int) -> [] Int) (\a -> \b -> case1 (\c -> head) True (seq a (undefined::[] Bool))) ((undefined::([] ([] (Int -> Bool))) -> Bool) (undefined::[] ([] (Int -> Bool))))
\a -> a
(undefined::Bool -> ([] Int) -> [] Int) (not ((\a -> seq a (even (undefined::Int))) (\a -> not (seq a (undefined::Bool)))))
(\a -> seq a (seq a (\b -> \c -> c) (seq a (seq a (\b -> seq a (\c -> head) (a (undefined::[] Int) (undefined::[] Int))))))) ((\a -> seq a ((!!) (undefined::[] (([] Int) -> ([] Int) -> Bool))) (seq a (seq a (seq a (undefined::Int))))) ((undefined::(Int -> [] Int) -> Bool) (\a -> id (undefined::[] Int))))
\a -> a
\a -> tail (seq a ((\b -> b (seq a (seq b (seq b (seq b 1)))) (b (undefined::Int) a (undefined::[] Int)) ((\c -> seq c a) (seq b True))) (seq a (\b -> (undefined::Int -> ([] Int) -> ([] Int) -> [] Int) (seq a (seq a (\c -> seq c b) (seq a ([]::[] Int))))))))
\a -> seq a (\b -> seq a a) (\b -> head ((\c -> seq c ([]::[] ([] (([] Int) -> Bool)))) ((!!) (seq a (seq a ([]::[] (([] ([] Int)) -> [] Bool)))) (seq a (seq a 2)))))
(undefined::(Int -> Int -> [] Int) -> ([] Int) -> [] Int) (\a -> (!!) ((undefined::Int -> [] (Int -> [] Int)) a) (undefined::Int))
\a -> seq a (id (seq a (undefined::(([] Int) -> Bool -> Bool -> Bool) -> [] Int))) (seq a (undefined::Bool -> ([] Int) -> Bool -> Bool -> Bool) (((==)::[Int] -> [Int] -> Bool) a a))
id (\a -> (\b -> \c -> seq c (seq a (seq a (undefined::Bool -> [] Int) (seq c b)))) False) (undefined::([] (([] Int) -> [] (Int -> [] Int))) -> ([] Int) -> [] ([] Int))
id (id (\a -> (\b -> seq a (seq b (:)) b) ((\b -> seq b (seq b 2)) (seq a (seq a ([]::[] (([] (Int -> [] Int)) -> Int))))))) ((undefined::Int -> ([] (([] Int) -> [] (Int -> Bool))) -> Bool -> Bool -> Bool) ((\a -> (+1) (seq a a)) (undefined::Int)))
id (\a -> seq a (\b -> seq a (seq a (undefined::Bool -> ([] Int) -> [] Int)) (seq a (b (undefined::[] Int) a))) (seq a (seq a (seq a (undefined::Int -> ([] Int) -> Int -> Bool))) a)) 1
(\a -> seq a (\b -> \c -> seq b (undefined::([] Int) -> [] Int)) (not (seq a (undefined::Bool)))) ((undefined::Int -> ([] (Int -> Int)) -> Int -> Int) (undefined::Int)) ((\a -> seq a (seq a (\b -> (undefined::Int)))) (\a -> seq a (seq a (seq a ([]::[] ([] Bool))))) ((\a -> seq a (seq a (seq a False))) (head ([]::[] (([] (Int -> [] Int)) -> [] Bool)))))
(\a -> \b -> seq a (undefined::Int -> [] Int) (head ([]::[] ((([] Int) -> Int -> Int) -> Int)) (\c -> \d -> (undefined::Int)))) ((\a -> seq a (seq a ((\b -> seq a b) (odd (undefined::Int))))) ((undefined::(Bool -> Bool) -> ([] Int) -> [] (Int -> Int)) (\a -> a)))
\a -> seq a (seq a ((\b -> \c -> seq a (seq a (undefined::Int -> [] Int)) (b (b (undefined::Int)))) (seq a (id (undefined::Int -> Int -> Int)) 0))) ((undefined::Bool -> ([] ([] (Int -> Int))) -> [] Bool) (undefined::Bool))
\a -> (\b -> seq b (\c -> tail (seq a a)) (seq b (\c -> seq b (seq c 0)) a)) True
\a -> a
id
\a -> seq a (seq a (seq a ((!!) ((\b -> seq b (id (undefined::([] (Bool -> Bool)) -> [] ([] Int)) (tail (undefined::[] (Bool -> Bool))))) (\b -> head (undefined::[] Bool))) ((+) ((\b -> seq b (seq a 2)) (seq a (seq a ([]::[] ([] Bool))))) (seq a ((\b -> seq b (undefined::Int)) (seq a (\b -> not))))))))
\a -> ([]::[] Int)
(undefined::(([] (Int -> ([] Int) -> Int -> Int)) -> Int -> ([] Int) -> Int -> Int) -> ([] Int) -> [] Int) (head (tail (undefined::[] (([] (Int -> ([] Int) -> Int -> Int)) -> Int -> ([] Int) -> Int -> Int))))
\a -> head (seq a (undefined::[] ((([] (([] Int) -> Bool -> Bool -> Bool)) -> ([] Int) -> [] Bool) -> [] Int))) (\b -> \c -> map (seq c (seq a (seq a (undefined::Bool -> Int -> Bool)) (even 2))) (undefined::[] Int))
\a -> (\b -> seq b (id (\c -> (undefined::Bool -> [] Int) (b ([]::[] Int) ([]::[] (([] Int) -> Int -> Bool)) a (undefined::Int))) ((!!) (seq a a) (seq a (seq a (undefined::Int)))))) (seq a (\b -> seq a (head (seq a (seq b (undefined::[] (([] (([] Int) -> Int -> Bool)) -> ([] Int) -> Int -> Bool)))))))
(\a -> seq a (\b -> seq b (seq b (\c -> seq c (undefined::([] Int) -> [] Int)) (seq a (seq a id)))) (\b -> seq b (\c -> seq a (undefined::([] Int) -> [] ([] Bool))) (seq a (seq b (seq a (undefined::Int)))))) (\a -> (undefined::(([] Int) -> ([] Int) -> Bool) -> [] ([] (Int -> Bool))) (undefined::([] Int) -> ([] Int) -> Bool))
\a -> a
\a -> seq a (undefined::[] Int)
(\a -> seq a (\b -> seq b (seq b (\c -> (undefined::([] Int) -> [] Int))) (seq a (tail (undefined::[] Bool)))) (undefined::Bool)) (\a -> seq a (seq a (seq a (seq a (seq a (seq a (\b -> seq a (seq b tail)))))) (undefined::[] (Bool -> Bool))))
take (undefined::Int)
(\a -> seq a (seq a (seq a ((\b -> seq b (\c -> seq a (undefined::([] Int) -> [] Int))) (seq a (seq a (seq a (undefined::Int)))) (seq a (undefined::([] Bool) -> Int) (head (seq a (undefined::[] ([] Bool))))))))) ((\a -> map (case1 (\b -> seq a (undefined::([] Bool) -> [] (Bool -> Bool))) (seq a (undefined::[] (Bool -> Bool))))) ((\a -> seq a (\b -> seq b (undefined::[] Int))) (odd (undefined::Int))))
tail
(\a -> (!!) ([]::[] (([] Int) -> [] Int)) (seq a (undefined::(([] Int) -> [] Bool) -> Int) (\b -> seq b (undefined::[] Bool)))) ((!!) ((\a -> seq a (seq a (undefined::[] Bool))) ([]::[] ([] ([] ([] Bool))))) ((!!) (id (undefined::[] Int)) 2))
\a -> seq a (undefined::(([] (Int -> Int -> Bool)) -> [] (([] (Int -> Int -> [] Int)) -> Int -> Int -> Bool)) -> [] Int) (head ([]::[] (([] (Int -> Int -> Bool)) -> [] (([] (Int -> Int -> [] Int)) -> Int -> Int -> Bool))))
\a -> a
(undefined::Bool -> (Int -> Int -> [] Int) -> ([] Int) -> [] Int) (undefined::Bool) (\a -> \b -> seq a (seq b (\c -> seq c (seq b (undefined::([] Bool) -> [] Int)) (c (seq c (undefined::[] ([] ([] (Bool -> Bool))))))) (\c -> (undefined::([] Int) -> [] Bool) (seq c ([]::[] Int)))))
\a -> ([]::[] Int)
(\a -> take (seq a ((undefined::([] (Bool -> Bool)) -> Int) (seq a (undefined::Bool -> [] (Bool -> Bool)) (seq a (seq a (seq a False))))))) (++)
filter ((\a -> seq a (id (\b -> (undefined::Int -> Bool)))) ((!!) (undefined::[] (Bool -> [] (Int -> Int))) (undefined::Int) False) (\a -> (\b -> seq a ((\c -> seq b (seq c ([]::[] ([] Int)))) (odd (undefined::Int)))) ((undefined::Bool -> ([] Int) -> Int -> Int -> Bool) (seq a (seq a (seq a (undefined::Bool)))))))
id
(\a -> (undefined::Bool -> Int -> ([] Int) -> [] Int) (seq a a)) ((\a -> seq a (seq a (seq a False))) ([]::[] ([] Bool))) ((!!) ((undefined::([] ([] Bool)) -> [] Int) (undefined::[] ([] Bool))) ((undefined::([] ([] ([] (Int -> Bool)))) -> Int) (undefined::[] ([] ([] (Int -> Bool))))))
(undefined::([] Int) -> [] Int)
\a -> (enumFromTo::Int -> Int -> [Int]) (seq a (seq a (\b -> case1 (undefined::Int -> ([] Int) -> Int) (undefined::Int) a) ((undefined::([] Int) -> Bool) (seq a a)))) (seq a (undefined::Bool -> Bool -> Int) (seq a (seq a (seq a (undefined::Bool)))) ((undefined::([] (([] Int) -> [] Bool)) -> Bool) (take 0 ([]::[] (([] Int) -> [] Bool)))))
(:) ((\a -> a (seq a (seq a ((\b -> seq b ([]::[] (Int -> Int))) (seq a (\b -> b))))) (head (seq a (undefined::[] (Bool -> Int))) (seq a (seq a True)))) ((!!) ((\a -> seq a (undefined::[] (([] (Int -> Int)) -> Int -> Int))) 2) ((\a -> id a) (id 1))))
id
(\a -> seq a (seq a (\b -> seq a (\c -> (undefined::[] Int))) (\b -> seq a (\c -> c) (seq a (seq a (seq b False)))))) (id (undefined::Bool -> ([] ([] ([] Int))) -> [] ([] ([] Int))) ((\a -> head (seq a ([]::[] Bool))) ((:) (undefined::([] Int) -> Int -> Int) ([]::[] (([] Int) -> Int -> Int)))))
(\a -> seq a (seq a (\b -> b))) (case1 (\a -> (\b -> seq b (seq b (undefined::([] Int) -> Int -> Int -> Bool))) (seq a a)) (\a -> \b -> (undefined::Int -> Bool) (seq b b)))
\a -> seq a (map (id (seq a (\b -> seq a (undefined::(([] Int) -> [] (Bool -> Bool)) -> Int))) 2) (seq a ((undefined::Int -> [] (([] Int) -> [] (Bool -> Bool))) (undefined::Int))))
filter (\a -> case1 (seq a (undefined::Int -> ([] Int) -> Bool)) ((!!) (seq a ([]::[] (([] Bool) -> Bool))) (undefined::Int) ([]::[] Bool)) (seq a (seq a ((undefined::(Bool -> [] Int) -> [] Int) (seq a (id (undefined::Bool -> [] Int)))))))
\a -> map (undefined::(([] ([] ([] Bool))) -> [] ([] Bool)) -> Int) ((undefined::([] ([] Bool)) -> [] (([] ([] ([] Bool))) -> [] ([] Bool))) ((!!) ([]::[] ((Int -> Bool) -> [] ([] Bool))) (undefined::Int) (seq a (\b -> seq a (seq a (undefined::Bool))))))
\a -> seq a ([]::[] Int)
\a -> (undefined::(([] Int) -> Int -> Int) -> [] Int) ((!!) (undefined::[] (Int -> ([] Int) -> Int -> Int)) (seq a (seq a (seq a 1))) (undefined::Int))
\a -> a
\a -> seq a ((\b -> seq b (\c -> b (seq a (seq a (undefined::Int))) (seq c (seq c (undefined::Int)))) (seq b (head (head (id (undefined::[] ([] (Int -> ([] Int) -> Bool)))))))) ((!!) ([]::[] (Int -> Int -> Int -> [] Int)) (seq a (head a)) (seq a (\b -> 1) (seq a (\b -> tail (undefined::[] (Bool -> Bool)))))))
\a -> a
(\a -> seq a (\b -> (undefined::([] ([] (Bool -> Bool))) -> [] Int) (seq b (seq a (\c -> ([]::[] ([] (Bool -> Bool))))) (seq a (head ([]::[] Bool)))))) (\a -> map (\b -> \c -> b) (case1 (\b -> (undefined::([] Int) -> [] Bool)) (seq a (undefined::[] Bool)) (seq a (undefined::[] Int))))
\a -> a
\a -> a
(\a -> seq a (\b -> seq a (seq a b))) (case1 (\a -> (undefined::([] (Bool -> Bool)) -> ([] Bool) -> Int) (seq a ([]::[] (Bool -> Bool)))) ((+1) 2) (id (undefined::([] ([] Int)) -> [] Bool) (undefined::[] ([] Int))))
id (\a -> tail) (undefined::Bool)
\a -> seq a (undefined::[] Int)
\a -> a
\a -> (\b -> seq a ((\c -> seq a (seq a (\d -> a)) (seq c (seq c (undefined::[] Bool)))) (head (seq a (undefined::Int -> [] (([] ([] Int)) -> [] Bool)) (seq b b))))) (seq a (seq a (seq a (undefined::Int))))
\a -> id (seq a (seq a (\b -> \c -> a) (seq a (id (undefined::(Bool -> Bool) -> Bool)) (\b -> seq a b)))) (\b -> seq b (\c -> \d -> d))
(undefined::Bool -> (Int -> ([] Int) -> Int) -> ([] Int) -> [] Int) (undefined::Bool) (\a -> seq a (\b -> seq a head) (seq a (\b -> ([]::[] ([] ([] Bool)))) (seq a (seq a (seq a (undefined::[] (Bool -> Bool)))))))
(undefined::([] Int) -> [] Int)
id (\a -> seq a (\b -> (undefined::(Int -> [] Bool) -> [] Int) (\c -> seq a ((!!) (undefined::[] ([] Bool)) c)))) (undefined::Int -> [] (Int -> Int -> Bool))
\a -> (\b -> head (id (head (undefined::[] ((([] ([] Bool)) -> [] Bool) -> [] ([] Int)))) ((\c -> seq c (\d -> seq b (undefined::[] Bool))) (\c -> seq b c)))) (case1 (\b -> seq b (seq a (\c -> \d -> b))) ((undefined::Int -> ((Int -> Int) -> Bool) -> Bool) (id 2)) ((!!) (undefined::[] ([] Bool)) (seq a (seq a 1))))
\a -> a
(undefined::Bool -> (Int -> ([] Int) -> Bool) -> ([] Int) -> [] Int) ((\a -> not (seq a a)) False) (\a -> seq a (seq a (\b -> (undefined::Int -> Bool -> Bool) (undefined::Int) ((\c -> seq c c) (seq b (seq a (seq b True)))))))
(undefined::([] Int) -> [] Int)
take 1
id
(\a -> \b -> head (undefined::[] ((Int -> Bool) -> Bool -> [] Int)) (seq b (\c -> a ([]::[] ([] (([] Int) -> Bool))) (undefined::Int) c)) True) ((undefined::Bool -> ([] ([] (([] Int) -> Bool))) -> Int -> Int -> Bool) (case1 (\a -> \b -> False) False (undefined::[] Int)))
(\a -> seq a (id head) ([]::[] (([] Int) -> [] Int))) (undefined::((Int -> [] Bool) -> Int -> [] Int) -> Int)
(undefined::([] Int) -> [] Int)
\a -> seq a (undefined::Bool -> [] Int) (seq a ((undefined::Int -> Bool -> Bool) (seq a (seq a (seq a 0))) (case1 (seq a (undefined::Bool -> ([] Bool) -> Bool)) (seq a False) (seq a ([]::[] Bool)))))
\a -> (\b -> seq b (seq b (\c -> seq c (undefined::Bool -> [] Int))) ((++) ([]::[] (Int -> Int)) ([]::[] (Int -> Int))) (seq a ((\c -> c) (seq a (not (undefined::Bool)))))) (seq a ((\b -> seq b (\c -> seq c (seq a (undefined::[] (Int -> [] Bool))))) (\b -> seq a (\c -> seq b True) (seq b (\c -> ([]::[] (Bool -> Bool)))))))
(\a -> seq a tail) ((undefined::Bool -> [] (([] Bool) -> Bool)) ((\a -> seq a (undefined::Bool)) ((!!) (undefined::[] (Bool -> [] Bool)) 2)))
(undefined::([] Int) -> [] Int)
(++) (head (tail ((++) ((\a -> \b -> seq a ([]::[] ([] Int))) 2 ((!!) ([]::[] (([] Bool) -> Bool)) 0)) ((\a -> seq a (map (undefined::(([] Int) -> Bool) -> [] Int) (undefined::[] (([] Int) -> Bool)))) (undefined::Bool)))))
case1 ((undefined::Bool -> Int -> ([] Int) -> ([] Int) -> [] Int) (undefined::Bool)) tail (map (\a -> (+1) (seq a (undefined::Int))) (undefined::[] (Bool -> Bool)))
(\a -> \b -> seq a b) (undefined::(([] ([] Bool)) -> [] ([] Bool)) -> ([] Int) -> ([] Bool) -> [] Bool)
\a -> (undefined::[] Int)
(\a -> seq a (case1 (\b -> \c -> seq c (\d -> (undefined::[] Int))) (\b -> seq b b) (seq a (undefined::[] Int)))) (head ([]::[] ((Int -> Int -> ([] Int) -> Int) -> Bool)) (\a -> \b -> \c -> id (seq a (seq c (undefined::Bool -> Int)) True)))
\a -> seq a a
\a -> map (\b -> b) (seq a a)
\a -> ([]::[] Int)
\a -> a
\a -> seq a (seq a (seq a (undefined::([] (([] ([] Bool)) -> [] ([] Bool))) -> [] Int)) (seq a (take (case1 (\b -> head) (undefined::Int) (undefined::[] Int)) (seq a ((\b -> seq b (undefined::[] (([] ([] Bool)) -> [] ([] Bool)))) (seq a (seq a True)))))))
head ((!!) ([]::[] ([] ((Int -> ([] Int) -> Int) -> ([] Int) -> [] Int))) (case1 (undefined::Bool -> ([] Bool) -> Int) 1 (undefined::[] Bool))) ((!!) ((undefined::Bool -> [] (([] Int) -> Int)) (id (\a -> (undefined::Bool)) (head (undefined::[] Int)))))
\a -> seq a ((undefined::Bool -> [] Int) (seq a (id (seq a (case1 (\b -> (undefined::([] ([] Int)) -> Bool)) (seq a (undefined::Bool)))) (seq a (map (\b -> seq b a) ([]::[] ([] ([] Int))))))))
\a -> (undefined::[] Int)
take ((undefined::(([] (([] ([] Bool)) -> [] ([] Bool))) -> [] (([] ([] Bool)) -> [] ([] Bool))) -> Int) tail)
\a -> seq a (seq a (\b -> (undefined::Int -> [] Int)) ((\b -> seq a (seq b (undefined::Bool))) ([]::[] ([] Int))) (undefined::Int))
\a -> seq a (seq a (\b -> \c -> a)) (\b -> \c -> (undefined::([] Bool) -> Int -> Bool -> Bool) (tail (undefined::[] Bool))) (head (seq a ([]::[] ((([] Int) -> ([] (([] Int) -> Bool)) -> Bool) -> Int))) (\b -> seq a (seq a (seq a (undefined::Bool -> ([] (([] Int) -> Bool)) -> Bool)) (odd (seq a 1)))))
\a -> tail (case1 (\b -> \c -> seq a a) (seq a a) (seq a ((!!) ([]::[] (Int -> [] (Int -> Int))) 1 ((\b -> b) (seq a 0)))))
(!!) (id (undefined::[] (([] Int) -> [] Int))) ((\a -> seq a 1) (undefined::([] Bool) -> [] Bool))
\a -> a
take ((undefined::Bool -> Int -> Int) (case1 (\a -> (undefined::([] Int) -> Bool)) False (undefined::[] Int)) (undefined::Int))
case1 ((\a -> \b -> \c -> seq a (\d -> d)) 1 (((==)::Int -> Int -> Bool) (undefined::Int) ((+1) (undefined::Int)))) ((\a -> seq a (\b -> seq a ([]::[] Int)) (seq a 0)) ((undefined::(Int -> Bool) -> ([] Int) -> [] Bool) (id (\a -> seq a False))))
\a -> map (case1 (\b -> id (\c -> \d -> b)) ((undefined::Int -> ([] (Bool -> Bool)) -> Int) (seq a 0)) (seq a a)) (seq a (seq a (\b -> seq b (undefined::Int -> [] ([] (Bool -> Bool)))) (seq a (seq a (seq a False)))) (seq a ((\b -> b) (seq a (head (undefined::[] Int))))))
(\a -> (\b -> \c -> seq a (seq c (seq b (seq b (undefined::Bool -> [] Int) (seq b (undefined::Bool)))))) (undefined::([] ([] ([] ([] Bool)))) -> Bool -> Bool)) ((\a -> seq a (map (undefined::([] Int) -> ([] Int) -> [] Int)) (seq a (tail ([]::[] ([] Int))))) (id (\a -> (undefined::Bool -> [] (Int -> Int)) (seq a (seq a False)))))
tail
(\a -> seq a (\b -> filter (\c -> head ([]::[] Bool))) (seq a (undefined::([] Int) -> [] ([] Int)))) (not ((\a -> (undefined::([] (([] Int) -> Bool)) -> Bool) (seq a (head (undefined::[] ([] (([] Int) -> Bool)))))) ((++) ((undefined::Int -> [] Bool) ((+1) (undefined::Int))))))
\a -> map (seq a (\b -> seq a (seq a (\c -> seq c (seq a (seq b (seq b (undefined::Int))))) ((\c -> seq c (seq c (undefined::[] (Int -> [] Int)))) (undefined::Int))))) (seq a (undefined::[] (([] ([] (Int -> Int))) -> ([] ([] (Int -> [] Bool))) -> [] (Int -> Int))))
\a -> seq a (\b -> a) ((\b -> seq a (\c -> head ([]::[] ([] (Bool -> Bool)))) (seq b a)) (head (seq a ([]::[] (Bool -> ([] Int) -> ([] Bool) -> [] Bool)))))
\a -> (:) (id (\b -> seq b (undefined::Bool -> Int)) ((:) ([]::[] (Bool -> Bool)) (undefined::[] ([] (Bool -> Bool)))) (not (seq a (not (undefined::Bool))))) ((\b -> seq a (seq b (seq a (seq b (undefined::([] Bool) -> [] Int) (seq a (undefined::[] Bool)))))) (\b -> seq b (seq a (\c -> not) (seq a (seq b (undefined::Int))))))
id (\a -> \b -> b) (undefined::([] Bool) -> [] (Int -> Int -> Int))
case1 (\a -> \b -> \c -> c) (\a -> seq a (\b -> a) (seq a (\b -> b) (seq a (seq a (undefined::Bool))))) ((undefined::Int -> (Int -> Bool) -> [] (Bool -> Bool)) 1 (head (undefined::[] (Int -> Bool))))
(!!) ((undefined::(Bool -> Bool -> Bool) -> [] (([] Int) -> [] Int)) (id (head ([]::[] (Bool -> Bool -> Bool))))) ((undefined::(([] (([] Int) -> Int -> Int -> Int)) -> [] (Bool -> Bool)) -> Int) (undefined::([] (([] Int) -> Int -> Int -> Int)) -> [] (Bool -> Bool)))
(\a -> seq a (undefined::([] Int) -> [] Int)) 1
\a -> (!!) ((undefined::Bool -> [] (([] ([] ([] Bool))) -> [] Int)) (seq a (seq a (undefined::Bool)))) (seq a (seq a (undefined::([] ([] (Int -> Bool -> Bool))) -> Int)) (seq a (seq a (seq a ([]::[] ([] (Int -> Bool -> Bool))))))) ((undefined::([] ([] (Int -> Int))) -> [] ([] ([] Bool))) (seq a ([]::[] ([] (Int -> Int)))))
take ((\a -> seq a (seq a ((undefined::([] ([] Int)) -> Int) (tail ([]::[] ([] Int)))))) ((\a -> (+1) (seq a 0)) (\a -> \b -> b)))
(\a -> seq a (\b -> ([]::[] Int))) (\a -> case1 (\b -> seq b (\c -> (undefined::[] ([] Bool)))) (undefined::[] ([] Bool)) (seq a (tail (seq a (undefined::[] Bool)))))
(\a -> \b -> seq a (\c -> \d -> seq c b) ((+) (undefined::Int) 2) True) ((\a -> seq a (seq a (\b -> a) (seq a (head (undefined::[] Int))))) ((\a -> seq a (seq a (seq a False))) (\a -> (undefined::[] Bool))))
(\a -> \b -> seq b (seq a (\c -> seq b (seq a (undefined::Int -> [] Int)) ((+1) (undefined::Int)))) ((undefined::Int -> [] (Int -> [] Int)) (seq b (undefined::Int)))) (\a -> (undefined::[] Bool))
tail
case1 (\a -> \b -> \c -> c) (\a -> seq a (\b -> (undefined::(([] Bool) -> Bool) -> [] Int)) (id (undefined::Int)) ((\b -> \c -> seq b b) (undefined::Bool))) (case1 (\a -> \b -> ([]::[] Bool)) ([]::[] Bool) ([]::[] Int))
case1 (undefined::Bool -> ([] Bool) -> ([] Int) -> [] Int) (\a -> seq a ((undefined::([] (Int -> [] Int)) -> [] Int) (seq a (seq a (seq a ([]::[] (Int -> [] Int))))))) (head ([]::[] (([] ([] (([] Bool) -> Bool))) -> [] Bool)) ([]::[] ([] (([] Bool) -> Bool))))
(!!) ((\a -> seq a ((!!) ([]::[] ([] (([] Int) -> [] Int)))) 0) ((\a -> id (seq a (undefined::Int))) ((++) ([]::[] Bool) (undefined::[] Bool)))) (id (id ((undefined::([] Bool) -> (Int -> Int -> Int) -> Int) (id ([]::[] Bool)) (\a -> \b -> 1))))
\a -> (!!) (head (seq a (\b -> (undefined::[] ([] (Bool -> [] Int)))) ((+1) (undefined::Int)))) (seq a (seq a (seq a (\b -> 2) (\b -> b)))) ((\b -> seq b (seq b (\c -> seq b (undefined::Bool)) (seq b (seq b (seq a (undefined::[] (([] Int) -> [] Bool))))))) (seq a (seq a True)))
\a -> seq a (undefined::[] Int)
case1 (\a -> \b -> \c -> seq a ((\d -> seq d b) a)) (head (map (head ([]::[] (Int -> ([] Int) -> [] Int))) (tail ([]::[] Int)))) (id (case1 (\a -> seq a tail) (undefined::[] Int) ([]::[] Int)))
\a -> (!!) (seq a (seq a (id (seq a (undefined::[] ((Int -> Int -> Bool) -> [] Int)))))) ((\b -> b) (id (seq a (undefined::Int)))) (\b -> \c -> seq c ((\d -> \e -> seq d (seq d True)) ([]::[] Bool)) (seq b (\d -> (undefined::([] Int) -> [] Bool)) (seq c ([]::[] (Int -> Int)))))
tail
(++) (tail (head (undefined::[] (([] ([] (Int -> Bool))) -> [] Int)) (id ((\a -> (\b -> seq b (seq a (undefined::[] ([] (Int -> Bool))))) (seq a (seq a (undefined::[] Int)))) (case1 (undefined::Int -> ([] Int) -> Bool) False ([]::[] Int))))))
filter (undefined::Int -> Bool)
\a -> seq a (seq a a)
(\a -> head (seq a ([]::[] ((([] Int) -> [] ([] Int)) -> ([] Int) -> [] Int))) ((\b -> \c -> seq b (seq b (undefined::[] ([] Int)))) (\b -> a (undefined::[] Int) ([]::[] ([] ([] Bool)))))) (\a -> (\b -> seq b ((!!) (seq b (seq a ([]::[] (([] ([] ([] Bool))) -> Bool)))) (seq b (seq a (undefined::Int))))) (\b -> (undefined::([] Bool) -> [] Bool)))
(\a -> \b -> seq b (seq b (\c -> (\d -> seq d b) (seq b (seq a (undefined::Bool))))) (seq b (seq a (\c -> \d -> seq a tail) (undefined::Int)))) (id (head ((undefined::(Int -> [] Bool) -> Bool -> [] Int) (\a -> seq a (undefined::[] Bool)) (head ([]::[] ((Int -> Int -> Bool) -> Bool)) (head ([]::[] (Int -> Int -> Bool)))))))
\a -> seq a (\b -> seq a (\c -> case1 (undefined::Bool -> ([] Bool) -> [] Int) a (undefined::[] Bool)) (undefined::([] Int) -> Int -> Int -> Bool)) (seq a (map (\b -> \c -> take c ([]::[] (([] ([] Bool)) -> [] ([] Bool))))) (seq a (seq a (\b -> seq b (undefined::[] ([] Bool))) False)))
id (\a -> seq a (\b -> ([]::[] Int))) ((undefined::Bool -> ([] (([] Int) -> ([] Bool) -> [] Bool)) -> Int -> [] Int) (id (\a -> seq a a) ((&&) (undefined::Bool) False)))
id (\a -> \b -> seq b (seq b (undefined::([] Bool) -> ([] Int) -> [] Int) (seq a ([]::[] Bool)))) ((\a -> seq a (seq a (seq a (undefined::Bool)))) (undefined::[] ([] (([] Int) -> [] Int)))) (map (head ((undefined::Int -> [] (Int -> Int -> [] Int)) (id 1))) ((\a -> seq a (undefined::[] Int)) (undefined::Int -> Bool)))
(\a -> seq a (seq a ((!!) ([]::[] (Int -> ([] Int) -> [] Int))) (id 2))) (head ([]::[] (Bool -> Int)) (undefined::Bool)) ((\a -> (+1) (seq a (\b -> (undefined::Int)) (head (undefined::[] Bool)))) (\a -> seq a (undefined::([] Bool) -> [] (Bool -> Bool)) a))
(\a -> \b -> seq a (seq b (\c -> seq a (undefined::([] Int) -> [] Int)) (seq b ([]::[] (Bool -> Bool))) (seq a (map (undefined::(([] ([] Bool)) -> Int) -> Int)) (seq b (seq a (seq b (undefined::[] (([] ([] Bool)) -> Int)))))))) ((undefined::Bool -> [] ([] (Int -> Int))) (undefined::Bool))
(\a -> (\b -> seq b (\c -> c)) (not (seq a (odd (seq a (seq a 2)))))) (id (undefined::(([] ([] Int)) -> [] ([] (Int -> Int))) -> Int) (\a -> map (\b -> ([]::[] (Int -> Int))) a))
(undefined::([] Int) -> [] Int)
(\a -> \b -> seq a (head ([]::[] (([] ([] ([] ([] (Int -> Int))))) -> [] Int))) (seq a (seq a (\c -> seq b ([]::[] ([] ([] ([] (Int -> Int)))))) (a (undefined::[] Int) ([]::[] ([] ([] (Bool -> Bool)))) (undefined::Int))))) (\a -> \b -> seq b odd)
(\a -> seq a (seq a (\b -> (undefined::([] Int) -> [] Int)) ((\b -> id (seq b (undefined::([] ([] Int)) -> [] ([] ([] Int))))) (seq a (a ([]::[] (Bool -> Bool)) True))))) (head (undefined::[] (Int -> ([] (Bool -> Bool)) -> Bool -> Bool)) ((undefined::(Int -> [] Int) -> Int) (\a -> seq a (head ([]::[] ([] Int))))))
\a -> a
(undefined::([] Int) -> [] Int)
id (\a -> (undefined::([] (([] (([] Bool) -> [] Bool)) -> Int)) -> ([] Int) -> [] Int) (seq a (seq a (seq a (seq a (seq a ([]::[] (([] (([] Bool) -> [] Bool)) -> Int)))))))) ((!!) (tail (undefined::[] (([] (([] Int) -> Bool)) -> [] (Int -> Int -> Int)))) ((undefined::([] Bool) -> Int) (head ([]::[] ([] Bool)))))
(undefined::([] (([] Int) -> Bool)) -> ([] Int) -> [] Int) (take ((\a -> seq a (seq a (undefined::Int))) ([]::[] (([] Int) -> Bool))) (id (\a -> ([]::[] (([] Int) -> Bool))) ([]::[] Int)))
\a -> (undefined::Int -> (([] Int) -> [] Bool) -> [] Int) (seq a (\b -> seq b (seq b 2)) (\b -> seq a (seq a (\c -> c)))) (id (seq a (seq a (seq a (seq a (\b -> seq a (undefined::Int -> ([] Int) -> [] Bool) 0) ((\b -> b (seq b (undefined::Int))) (\b -> b)))))))
tail
id (\a -> (\b -> seq b tail) (seq a (seq a (\b -> 0)) (seq a (+1)))) ((undefined::(([] Int) -> [] (Bool -> Bool)) -> [] ([] Int)) (\a -> case1 (\b -> (undefined::([] Int) -> [] (Bool -> Bool))) ([]::[] (Bool -> Bool)) (seq a a)))
(!!) ([]::[] (([] Int) -> [] Int)) (head (tail ([]::[] ((([] ([] Int)) -> [] ([] Bool)) -> Int))) (\a -> seq a ((undefined::Bool -> [] ([] Bool)) (seq a False))))
id (\a -> (:) (seq a (seq a (id (undefined::Int))))) (head ((undefined::Int -> [] (([] (Bool -> Bool)) -> Bool -> Bool)) 0))
\a -> a
(++) ((enumFromTo'::Int -> Int -> [Int]) (undefined::Int) (id ((\a -> a) (case1 (undefined::Int -> ([] Int) -> Int) (undefined::Int) (undefined::[] Int)))))
\a -> seq a ((!!) (head (seq a (undefined::[] (([] (([] Int) -> Bool)) -> [] ([] Int)))) (tail (seq a ([]::[] (([] Int) -> Bool))))) (case1 (seq a (\b -> \c -> b)) (seq a (undefined::Bool -> Int) (seq a (undefined::Bool))) a))
(undefined::Int -> ([] Int) -> [] Int) ((undefined::((([] ([] Int)) -> Int) -> ([] Int) -> [] Int) -> Int) (\a -> seq a (\b -> \c -> c) ((-) 2 (undefined::Int))))
\a -> head (case1 (undefined::(Int -> Int -> Int) -> ([] (Int -> Int -> Int)) -> [] ([] Int)) (seq a (map (undefined::([] ([] ([] (Bool -> Bool)))) -> [] Int) (seq a ([]::[] ([] ([] ([] (Bool -> Bool)))))))) (filter (\b -> seq b (seq a (seq a True))) (undefined::[] (Int -> Int -> Int))))
\a -> case1 (\b -> \c -> (undefined::[] Int)) (seq a (undefined::Int -> ([] ([] ([] Bool))) -> [] Int) (seq a 0) (filter (seq a (undefined::([] ([] Bool)) -> Bool)) (seq a (undefined::[] ([] ([] Bool)))))) (tail ((\b -> seq b ([]::[] ([] ([] Bool)))) (seq a (seq a (seq a (undefined::[] Bool))))))
(!!) ((\a -> seq a (seq a (undefined::Bool -> [] (([] Int) -> [] Int)) (undefined::Bool))) ((\a -> seq a (id head)) (undefined::[] Int))) ((undefined::Bool -> (([] ([] Int)) -> [] Int) -> Int) (((==)::Int -> Int -> Bool) 0 1) ((\a -> seq a (undefined::([] ([] Int)) -> [] Int)) (((==)::Int -> Int -> Bool) 2 1)))
(\a -> seq a (head (tail (undefined::[] ((([] Int) -> Int) -> ([] Int) -> [] Int))) (seq a (seq a (\b -> seq b head) (\b -> seq a (seq b (undefined::Bool))))))) (id (id (\a -> seq a (seq a ([]::[] Bool)))) (undefined::([] ([] ([] Bool))) -> [] ([] Bool)))
head ((\a -> (undefined::Int -> [] (Bool -> ([] Int) -> [] Int)) ((+1) (seq a 1))) ((\a -> seq a True) (\a -> head ([]::[] ([] ([] Int)))))) (undefined::Bool)
\a -> (\b -> (undefined::([] (Int -> Bool)) -> Int -> [] Int) (seq b (seq b (seq a ([]::[] (Int -> Bool)))))) head (seq a (seq a (seq a (head (id (undefined::Int -> [] (Int -> Int)) (seq a (seq a 0))) (seq a (seq a (\b -> b)) (id (undefined::Int)))))))
(:) ((\a -> head (seq a (undefined::[] (([] Int) -> Int -> Int))) (seq a (seq a (seq a ([]::[] Int))))) (\a -> seq a (seq a (\b -> (undefined::[] ([] Bool)))) (seq a (seq a ([]::[] Bool)))) ((\a -> seq a (id (undefined::(Int -> Bool -> Bool) -> Int))) (\a -> a) (head ((undefined::Bool -> [] (Int -> Bool -> Bool)) (head (undefined::[] Bool))))))
\a -> (\b -> seq a (head (seq a (seq b (case1 (undefined::Int -> ([] Int) -> [] ([] Int)) (seq a (seq a ([]::[] ([] Int)))) a))))) (undefined::([] Bool) -> [] (Bool -> Bool))
map ((undefined::(([] (Int -> Int)) -> Int -> Int) -> Int -> Int) (\a -> \b -> b))
\a -> id (seq a (\b -> seq a (seq b ((undefined::Bool -> (Int -> [] Bool) -> [] Int) (seq a (undefined::Bool))))) ((!!) (seq a a) (head (undefined::[] Int))) (seq a (seq a (seq a (case1 ((!!) (seq a ([]::[] (([] Int) -> Int -> [] Bool)))) (\b -> seq b (seq a ([]::[] Bool))) (seq a (seq a (seq a a))))))))
\a -> (:) ((\b -> (\c -> seq b (seq c 1)) (undefined::[] (([] ([] Int)) -> Int))) (seq a (case1 (\b -> (undefined::([] Int) -> ([] Int) -> [] Int)) (\b -> b)))) (seq a (\b -> seq a (seq a (undefined::Int -> [] Int)) (seq a (seq a (undefined::Int)))) (undefined::([] Int) -> Int -> [] Int))
\a -> a
(:) ((\a -> (\b -> seq b (seq b (seq a (seq a (undefined::(([] Int) -> [] Int) -> Int)) (\c -> (undefined::[] Int))))) (seq a (\b -> not (undefined::Bool)) (head ([]::[] (([] Int) -> Bool -> Bool -> Bool))))) ((:) (\a -> a) ((undefined::([] ([] (Int -> Bool))) -> [] (Bool -> Bool)) ([]::[] ([] (Int -> Bool))))))
\a -> (\b -> (\c -> (:) (undefined::Int) (seq c (seq a a))) (seq a ((!!) (seq b (seq b ([]::[] Bool))) (seq b (seq a (undefined::Int)))))) (seq a (head (undefined::[] (Bool -> ([] (([] ([] Bool)) -> [] ([] Bool))) -> [] (Int -> Int)))))
\a -> seq a (\b -> a) (seq a 0)
\a -> seq a ((undefined::Int -> (([] ([] ([] Int))) -> Bool -> Bool) -> [] Int) 0) (seq a (id (\b -> (\c -> \d -> seq c id) b) ((\b -> seq b b) (not (seq a True)))))
take ((+1) ((\a -> seq a (undefined::([] Bool) -> Bool -> Int) (seq a (seq a (seq a (undefined::[] Bool))))) ((\a -> seq a (\b -> seq a True)) (undefined::Int)) (case1 (\a -> \b -> a) (not True) (id (undefined::[] Bool)))))
(++) (head (id (\a -> (undefined::Bool -> [] (Bool -> [] Int))) (head ([]::[] Bool)) ((undefined::([] (Int -> Int)) -> Bool) (id (undefined::[] (Int -> Int))))) (id (undefined::(Int -> Bool -> Bool) -> Bool) (\a -> seq a (\b -> (undefined::Int -> Bool) (head ([]::[] Int))))))
\a -> seq a (\b -> seq a a) ((\b -> case1 (undefined::Int -> ([] Int) -> Bool) (seq b (undefined::Bool)) (seq b a)) (seq a (seq a (seq a (seq a ([]::[] ([] ([] (([] (Bool -> Bool)) -> [] (Bool -> Bool))))))))))
\a -> a
(\a -> \b -> seq a (seq a (undefined::Int -> ([] Int) -> [] Int))) (undefined::Bool) ((!!) (undefined::[] ((Int -> Int -> Bool) -> Bool)) 1 (\a -> \b -> seq a (seq b (undefined::Bool)))) (case1 (\a -> \b -> (undefined::Bool -> Int)) (undefined::Bool -> Int) (undefined::[] Bool) ((undefined::(Int -> ([] ([] Int)) -> [] Int) -> Bool) (head ([]::[] (Int -> ([] ([] Int)) -> [] Int)))))
(\a -> seq a (seq a (seq a (\b -> seq b (\c -> tail) (undefined::Int)))) ((\b -> seq a (seq b (\c -> (undefined::[] Bool)))) (\b -> a))) ((undefined::([] Int) -> Int -> Bool) ((!!) ([]::[] ([] Int)) 2) ((undefined::([] ([] Int)) -> Int) ([]::[] ([] Int))))
\a -> seq a ([]::[] Int)
\a -> a
\a -> a
\a -> seq a (\b -> (undefined::Int -> Bool -> [] Int) 1) (case1 (seq a (undefined::Bool -> ([] Bool) -> Bool)) (seq a True) (seq a (undefined::[] Bool))) (seq a (\b -> seq a b) (seq a (head (undefined::[] Bool))))
(\a -> seq a (seq a (id (\b -> take) (seq a (id 0)) (seq a (case1 (undefined::Bool -> ([] Bool) -> Int) 0 ([]::[] Bool)))))) ((\a -> a (seq a (seq a (undefined::(Int -> Int -> Bool) -> Bool)) (seq a (seq a (\b -> even))))) id)
\a -> a
(\a -> \b -> map (\c -> c) (head (seq a (seq a (head ([]::[] ([] ([] Int)))))))) (head ((undefined::Int -> [] (([] Int) -> [] (([] Int) -> Bool))) ((undefined::([] Bool) -> Int) (undefined::[] Bool))))
(\a -> seq a (\b -> seq b (seq b (head (seq a (seq b ([]::[] (([] ([] (Int -> Int))) -> [] Int))))) (map (seq b (undefined::(Int -> Bool) -> [] (Int -> Int))) (seq b (undefined::[] (Int -> Bool))))))) (head ((\a -> (\b -> seq a (seq b (undefined::[] (([] Int) -> Bool -> Bool)))) (seq a ([]::[] Int))) ((\a -> seq a (seq a ([]::[] (([] Bool) -> [] Bool)))) (id (undefined::Int)))))
head ([]::[] (([] ((([] Bool) -> [] (Bool -> Bool)) -> ([] Bool) -> [] (Bool -> Bool))) -> ([] Int) -> [] Int)) (undefined::[] ((([] Bool) -> [] (Bool -> Bool)) -> ([] Bool) -> [] (Bool -> Bool)))
\a -> seq a (seq a (seq a (\b -> \c -> a)) (\b -> b)) (seq a (\b -> \c -> id (undefined::[] Int)))
(\a -> seq a (\b -> \c -> (undefined::([] Int) -> [] Int))) ((!!) ([]::[] Int) 0) (odd (undefined::Int)) ((undefined::Bool -> Int) ((\a -> a (id True)) not))
\a -> a
tail
(undefined::(([] Bool) -> Bool) -> ([] Int) -> [] Int) head
id (\a -> seq a id) (\a -> seq a (seq a (seq a (seq a (undefined::Bool -> Int -> [] (Int -> Int)))) (seq a (not True))) ((undefined::(([] Bool) -> [] Bool) -> Int) (\b -> id b)))
head ([]::[] (Int -> ([] Int) -> [] Int)) ((\a -> seq a (head (seq a (\b -> (undefined::[] Int)) (seq a (seq a 1))))) (odd ((-) (undefined::Int) 0)))
tail
\a -> (\b -> (undefined::Bool -> [] Int) (seq a (undefined::([] (Int -> Int)) -> Bool) (seq b (seq b (seq b ([]::[] (Int -> Int))))))) (seq a (undefined::(([] (Int -> Int -> Int)) -> [] (Int -> Bool)) -> Bool) (id (\b -> seq a (take (seq b (undefined::Int)) (seq b ([]::[] (Int -> Bool)))))))
tail
(undefined::([] Int) -> [] Int)
\a -> a
(\a -> \b -> seq b (seq a (:)) (seq a (id 0))) (\a -> head (seq a (undefined::[] (([] ([] ([] Bool))) -> Bool))) (seq a (seq a (seq a ([]::[] ([] ([] Bool))))))) ((\a -> seq a (seq a (id (undefined::(([] Int) -> [] Bool) -> Bool)) (seq a (\b -> ([]::[] Bool))))) (\a -> seq a (seq a (seq a (undefined::Bool -> [] (Int -> Int)))) (seq a (seq a False))))
case1 (undefined::(([] Int) -> Int) -> ([] (([] Int) -> Int)) -> ([] Int) -> [] Int) (\a -> a) ([]::[] (([] Int) -> Int))
(\a -> id (seq a (seq a (\b -> \c -> c)))) (undefined::Bool) (undefined::Bool)
\a -> seq a a
case1 (\a -> \b -> (++) (seq a (seq a (id (undefined::Bool -> [] Int)) (id (seq a (undefined::Bool)))))) (\a -> a) ((++) ((\a -> seq a (undefined::[] (([] Bool) -> Bool))) (undefined::[] Int)) ((\a -> seq a (undefined::[] (([] Bool) -> Bool))) True))
(\a -> \b -> tail ((!!) (head ([]::[] ([] ((Int -> Int) -> [] Int)))) (seq a (seq a 1)) (\c -> c))) (\a -> (\b -> seq b ((undefined::Bool -> [] (Int -> [] (([] Int) -> [] Int))) (seq a (seq b True)))) (seq a (map (\b -> ([]::[] (Int -> Int))) (seq a ([]::[] (Int -> Bool))))))
\a -> (\b -> b (seq b (b (\c -> \d -> (undefined::Int -> [] Int)))) (filter (undefined::Int -> Bool) a) (seq b (undefined::Int)) (seq b (seq a (seq b (undefined::Int))))) (\b -> \c -> case1 (\d -> seq c (\e -> (!!) ([]::[] (Int -> [] Int)))) (b (seq c (head (undefined::[] ([] Int))))) (seq b (undefined::Bool -> [] Int) (seq c True)))
head (undefined::[] (([] Int) -> [] Int))
(\a -> (\b -> seq a (seq b (\c -> id))) (seq a (seq a (seq a ([]::[] ([] Int)))))) (head ((\a -> seq a (seq a (undefined::[] (Bool -> Bool)))) (id ([]::[] Bool)))) (id (undefined::(Int -> Int -> ([] Int) -> [] (([] Int) -> Bool)) -> Bool) ((!!) ([]::[] (Int -> ([] Int) -> [] (([] Int) -> Bool)))))
\a -> a
\a -> filter even a
\a -> case1 (\b -> seq b (\c -> seq c (\d -> b) (undefined::[] ([] ([] (Bool -> Bool)))))) (map (head (seq a (undefined::[] (Bool -> Int)))) (seq a ([]::[] Bool))) (seq a (\b -> id (seq b (undefined::[] ([] Int)))) (seq a (\b -> (undefined::Int -> Bool -> Bool)) (seq a (seq a (undefined::[] ([] Int))))))
\a -> a
\a -> a
(\a -> seq a (undefined::((Bool -> Int) -> Bool) -> ([] Int) -> [] Int) (id (\b -> \c -> b) ((||) False (undefined::Bool)))) ((\a -> seq a (seq a (seq a (\b -> (!!) ([]::[] ([] (Bool -> Bool))) 1)))) ((\a -> seq a (seq a (seq a 1))) (undefined::[] ([] Bool))))
(undefined::(([] (([] Int) -> Bool)) -> Int -> ([] (Bool -> Bool)) -> Bool -> Bool) -> ([] Int) -> [] Int) (undefined::([] (([] Int) -> Bool)) -> Int -> ([] (Bool -> Bool)) -> Bool -> Bool)
(!!) ((undefined::([] Bool) -> [] (Int -> ([] Int) -> [] Int)) (tail ([]::[] Bool))) ((\a -> seq a (seq a (undefined::Int))) (not (undefined::Bool))) ((undefined::(([] (Int -> Bool)) -> [] (Int -> Int)) -> Int) (\a -> tail (seq a (undefined::[] (Int -> Int)))))
\a -> case1 (\b -> case1 (\c -> \d -> seq c (undefined::([] Bool) -> [] Int)) (undefined::([] Bool) -> [] Int) (head (undefined::[] ([] Bool)))) (map (\b -> seq a (seq a (seq b 0))) (head (undefined::[] ([] (Int -> Int -> Int -> Bool))))) (seq a (seq a (undefined::[] Bool)))
case1 ((undefined::(([] Int) -> [] Int) -> Int -> ([] Int) -> [] Int) (\a -> map (seq a (seq a (undefined::Bool -> Int))) (undefined::[] Bool))) ([]::[] Int)
(\a -> seq a (seq a (\b -> \c -> (undefined::([] Int) -> [] Int))) (undefined::Bool) True) ((\a -> seq a (head (seq a (\b -> (undefined::[] Bool)) (seq a (seq a ([]::[] ([] Bool))))))) (\a -> case1 (\b -> (undefined::([] Int) -> Int -> Bool)) (\b -> True) ([]::[] Int)))
(\a -> (\b -> \c -> seq b (seq b (\d -> c) (seq c (seq a ([]::[] Bool))))) (seq a (seq a (seq a (undefined::Int -> [] (([] Int) -> [] Int)))) (seq a (undefined::Int)))) (head (undefined::[] (([] Bool) -> ([] (Bool -> Bool)) -> [] (Bool -> Bool))) (tail (head ([]::[] ([] Bool)))))
\a -> (\b -> seq b (seq a (\c -> \d -> a)) (seq b (undefined::Bool)) (seq b (\c -> (+1) (seq b (undefined::Int))))) (undefined::([] Int) -> ([] Int) -> [] Bool)
(undefined::Int -> (Int -> Int -> [] Int) -> ([] Int) -> [] Int) ((undefined::(Int -> ([] Int) -> Bool) -> Int) (\a -> \b -> seq a (seq a False))) ((!!) ((\a -> seq a (seq a ([]::[] (Int -> Int -> [] Int)))) (head (undefined::[] Int))) ((!!) ([]::[] Int) (id (undefined::Int))))
(\a -> (:) ((\b -> id (seq b (seq a (seq b (seq a (undefined::Int)))))) True)) (\a -> id (undefined::(([] Int) -> [] ([] Bool)) -> [] ([] ([] (([] Int) -> Int)))) (seq a (seq a (undefined::([] Int) -> [] ([] Bool)))))
\a -> filter (seq a (undefined::Int -> Bool)) a
\a -> a
(undefined::([] Int) -> [] Int)
(!!) (id (undefined::(Int -> Bool) -> [] (([] Int) -> [] Int)) (case1 (undefined::Int -> ([] Int) -> Int -> Bool) (\a -> False) ([]::[] Int))) ((\a -> seq a (seq a (seq a (undefined::Bool -> Int)))) (undefined::Bool) ((undefined::(Int -> Int) -> Bool) (\a -> seq a (id a))))
(++) (head ((undefined::(([] Int) -> ([] Int) -> [] (([] ([] ([] Bool))) -> [] ([] ([] Bool)))) -> [] ([] Int)) (\a -> seq a (seq a (seq a (\b -> (\c -> seq b (seq c (undefined::[] (([] ([] ([] Bool))) -> [] ([] ([] Bool)))))) (seq a ((\c -> seq c 2) (seq b ([]::[] Bool))))))))))
(\a -> (\b -> seq b (seq b (undefined::([] ([] Int)) -> ([] Int) -> [] Int))) (a (seq a (undefined::[] Int)) (seq a (undefined::Int)))) (\a -> seq a (seq a (undefined::([] ([] Bool)) -> Int -> Int)) (seq a (undefined::[] ([] Bool)))) (undefined::[] ([] Int))
(\a -> \b -> seq a (seq a (undefined::[] Int))) (\a -> a)
(\a -> seq a (\b -> seq b (\c -> seq b ([]::[] Int)))) ((undefined::Bool -> [] (Int -> Bool)) True) ([]::[] ([] ([] Bool)))
tail
head (head (tail ((undefined::Bool -> [] ([] (([] Int) -> [] Int))) (not ((!!) (undefined::[] ((Bool -> Bool -> Bool) -> Bool)) 2 ((\a -> seq a (seq a (undefined::Bool -> Bool -> Bool))) 1))))))
case1 (undefined::Int -> ([] Int) -> [] Int) ((\a -> map (\b -> seq b 2) (seq a (seq a (undefined::[] ([] (Int -> Int)))))) ((\a -> seq a (seq a (seq a (undefined::[] Bool)))) (\a -> \b -> seq b (\c -> seq c ([]::[] Int)))))
case1 ((\a -> seq a ((!!) (undefined::[] (Int -> ([] Int) -> [] Int)))) ((+) 2 2) (head ([]::[] ((([] ([] Int)) -> [] Int) -> Int)) (\a -> ([]::[] Int)))) ([]::[] Int)
(++) (id (\a -> ([]::[] Int)) (undefined::([] (([] (Int -> Int)) -> [] (Int -> Int))) -> ([] ([] Int)) -> [] Int))
\a -> (undefined::Bool -> [] Int) (seq a ((\b -> (\c -> c (undefined::Int) True) b) (head (seq a (\b -> seq b ([]::[] (Int -> Bool -> Bool))) (undefined::Int)))))
\a -> (undefined::(([] ([] ([] Int))) -> [] ([] Bool)) -> [] Int) (undefined::([] ([] ([] Int))) -> [] ([] Bool))
\a -> a
(\a -> \b -> (:) a b) ((\a -> a (a (undefined::Int) (undefined::Int) (undefined::[] Int)) (a (undefined::Int) (undefined::Int) (undefined::[] Int)) (seq a (undefined::[] Int))) (\a -> id (\b -> (\c -> seq c (undefined::([] Int) -> Int)) (seq a (seq b False)))))
\a -> case1 (\b -> case1 (\c -> \d -> \e -> (undefined::[] Int)) (\c -> a) (seq b (seq b (undefined::[] Bool)))) a ((\b -> seq b (tail (undefined::[] Bool))) (seq a (seq a (undefined::Bool -> [] ([] Int))) (odd 0)))
(\a -> \b -> (undefined::Int -> (Int -> ([] Int) -> Bool) -> [] Int) 2 (\c -> \d -> (\e -> e) (id (seq a (undefined::Bool))))) (id (\a -> seq a (seq a id)) ((\a -> seq a True) ([]::[] Bool)))
(\a -> seq a ((:) (undefined::Int))) ((\a -> head (seq a (undefined::[] (Bool -> Int -> Int)))) (undefined::[] ([] Int)) ((\a -> seq a (seq a (seq a (undefined::Bool)))) ((!!) ([]::[] Int) (undefined::Int))))
(\a -> seq a (seq a (\b -> (!!) ([]::[] (([] Int) -> [] Int)) (seq a (seq a 1))) (undefined::([] Int) -> [] (Bool -> Bool)))) (undefined::([] (([] Int) -> [] Bool)) -> [] (Bool -> Bool))
\a -> a
(undefined::(Int -> ([] Int) -> Int) -> Bool -> ([] Int) -> [] Int) ((\a -> seq a (\b -> \c -> seq a b)) (head ([]::[] ([] Int)))) ((!!) ((\a -> seq a (seq a (undefined::[] Bool))) (\a -> a)) (id (undefined::Bool -> Int) (id False)))
\a -> seq a (case1 (\b -> (\c -> seq c (seq a (undefined::([] (Int -> Int -> [] Int)) -> [] Int))) ((\c -> seq c 0) (id (undefined::Bool)))) ((!!) (seq a ([]::[] (Bool -> [] Int))) 2 (id False)) (id (seq a (\b -> seq a (undefined::[] (Int -> Int -> [] Int)))) (seq a (not (seq a True)))))
id ((undefined::Bool -> ([] Int) -> [] Int) (((==)::Int -> Int -> Bool) ((\a -> a) ((+1) 1)) 2))
take (id (head ([]::[] ((([] Int) -> [] ([] (([] ([] ([] Bool))) -> [] ([] Bool)))) -> Int)) ((undefined::Bool -> ([] Int) -> [] ([] (([] ([] ([] Bool))) -> [] ([] Bool)))) ((\a -> seq a (a (undefined::Int))) (\a -> seq a (seq a (undefined::Bool)))))))
(:) ((!!) ((++) ((\a -> seq a (seq a ([]::[] Int))) 0) ((\a -> seq a (undefined::[] Int)) (head ([]::[] Bool)))) (undefined::Int))
head (id ([]::[] ((([] (Bool -> Bool -> Bool)) -> Bool -> Bool -> Bool) -> ([] Int) -> [] Int))) (\a -> seq a (seq a (seq a (seq a (\b -> \c -> seq b (\d -> seq b (seq b d))))) (seq a (seq a (seq a (undefined::[] (([] Int) -> Bool)))))))
(\a -> seq a (\b -> \c -> seq a tail) (seq a (seq a (seq a (undefined::Bool)))) (a (seq a (seq a (\b -> (undefined::[] Bool)) (seq a (seq a 0)))))) ((\a -> seq a (seq a (\b -> head))) (((==)::[Int] -> [Int] -> Bool) ([]::[] Int) ([]::[] Int)) ((\a -> seq a 2) ([]::[] (([] (Int -> [] Bool)) -> Int))))
(undefined::([] Int) -> [] Int)
\a -> (!!) (map (seq a (\b -> seq a (\c -> a) (seq a (undefined::Bool)))) (seq a (map (\b -> even) (seq a (undefined::[] (Int -> [] Int)))))) ((\b -> \c -> seq b (seq a (undefined::Int))) (seq a (seq a (seq a 1))) (seq a (seq a (\b -> seq a (undefined::([] ([] Int)) -> [] ([] Int)))) (seq a (undefined::Int))))
id
(++) (map (\a -> case1 (undefined::Bool -> ([] Bool) -> Int) ((!!) (undefined::[] Int) (undefined::Int)) (take 1 (undefined::[] Bool))) ((\a -> seq a (map (seq a (undefined::Int -> [] (([] Int) -> [] Int))) (seq a (undefined::[] Int)))) (head (undefined::[] (Bool -> Int -> Bool -> Bool)) (undefined::Bool))))
\a -> a
(undefined::(([] ([] Int)) -> [] Int) -> ([] Int) -> [] Int) (undefined::([] ([] Int)) -> [] Int)
case1 (\a -> seq a (\b -> take (case1 (undefined::Bool -> ([] Bool) -> Int) (seq a 0) (undefined::[] Bool)))) ((\a -> seq a id) ((\a -> a (undefined::Bool)) (head (undefined::[] (Bool -> Bool))))) ((\a -> seq a (\b -> ([]::[] (Int -> Int -> Bool))) (not (undefined::Bool))) (tail (head (undefined::[] ([] (Int -> Bool))))))
(\a -> seq a (\b -> seq a (\c -> (undefined::[] Int)))) ((!!) ([]::[] (([] Bool) -> [] Bool)) (id 0)) (case1 (undefined::Int -> ([] Int) -> Int -> [] Int) ((\a -> \b -> seq a ([]::[] Int)) (tail (undefined::[] ([] Bool)))) ((!!) ([]::[] ([] Int)) 0))
\a -> a
\a -> seq a (seq a ((\b -> seq a (seq b (seq a (id (\c -> seq c ([]::[] Int)) (map (\c -> seq c not) (seq a a)))))) (seq a (\b -> id (\c -> (undefined::Bool -> ([] Int) -> Int) (seq c (seq c False))) (seq b (\c -> seq c ([]::[] (([] ([] Bool)) -> [] ([] Bool)))) (seq a True))))))
\a -> seq a ((\b -> seq a (\c -> seq b (undefined::Int -> [] Int)) ((+1) 0)) ((!!) (seq a a) (seq a (seq a 0)))) ((\b -> \c -> seq a (seq b (undefined::Int))) (seq a (seq a (seq a ([]::[] Bool)))) (seq a (case1 (seq a (undefined::([] Int) -> ([] ([] Int)) -> Bool)) (seq a (undefined::Bool)) (seq a (undefined::[] ([] Int))))))
\a -> seq a (seq a (seq a (seq a (\b -> seq b (undefined::[] Int))))) (seq a (\b -> ([]::[] (Int -> [] Int))))
id
\a -> head (seq a (seq a (seq a (seq a (seq a (id ([]::[] ((([] ([] ([] Int))) -> [] ([] Bool)) -> [] Int)))))))) (seq a (undefined::Bool -> ([] ([] ([] Int))) -> [] ([] Bool)) (id (seq a (undefined::Int -> Bool)) (seq a (seq a (seq a 1)))))
(\a -> seq a (\b -> \c -> c) (\b -> (undefined::(Int -> Int) -> Int -> [] Int) (seq b (+1)))) (undefined::([] ([] ([] ([] Bool)))) -> Bool -> Bool -> Bool)
\a -> a
\a -> (\b -> seq b (\c -> \d -> seq c b) (seq b (seq a True)) (seq a (seq b (seq b (\c -> \d -> b) b)))) a
(\a -> (\b -> seq a (seq b (\c -> (undefined::([] Int) -> [] Int)))) (seq a ((!!) ([]::[] Int)))) (\a -> ((==)::Int -> Int -> Bool)) ((undefined::(([] ([] (Bool -> Bool))) -> [] (Int -> Int)) -> Bool) (\a -> (++) (seq a (seq a (undefined::[] (Int -> Int)))) (seq a (seq a ([]::[] (Int -> Int))))))
\a -> map (\b -> id 2) ((\b -> seq b ([]::[] Bool)) (\b -> b))
(undefined::((Int -> [] Bool) -> ([] (Int -> Int)) -> Bool -> Bool) -> ([] Int) -> [] Int) (\a -> seq a (seq a (\b -> head (id (\c -> seq a (seq a (seq a (undefined::[] (Bool -> Bool))))) (\c -> seq a (seq c (undefined::Int -> [] Int) (seq b (undefined::Int))))))))
(\a -> \b -> seq a (seq a (seq b (seq b (undefined::([] Int) -> Int -> [] Int))) b (undefined::Int))) ((\a -> \b -> a) (undefined::Bool) ((\a -> seq a (\b -> \c -> c)) (undefined::[] ([] ([] Int)))))
\a -> map (seq a (\b -> (undefined::(([] ([] ([] Int))) -> [] ([] ([] Int))) -> Int) ((!!) (undefined::[] (([] ([] ([] Int))) -> [] ([] ([] Int)))) (undefined::Int)))) ([]::[] (([] Int) -> [] ([] Bool)))
\a -> seq a (undefined::[] Int)
tail
(undefined::([] Int) -> [] Int)
\a -> a
\a -> (undefined::[] Int)
(\a -> (undefined::Bool -> ([] Int) -> [] Int) a) (undefined::Bool)
\a -> head (seq a ([]::[] (Int -> [] Int))) (seq a (id (\b -> seq a (seq b (seq b (seq a 1))))) (id (map (seq a (undefined::(Bool -> Bool -> Bool) -> Bool -> Bool)))))
\a -> head ([]::[] ((([] Bool) -> ([] (([] Int) -> [] (([] Int) -> Bool))) -> ([] ([] Int)) -> [] Bool) -> [] Int)) (\b -> (undefined::([] (([] Int) -> [] (([] Int) -> Bool))) -> ([] ([] Int)) -> [] Bool))
\a -> id (head (tail ([]::[] (((([] Bool) -> Bool) -> ([] Int) -> [] Bool) -> [] Int))) (seq a ((\b -> seq b (\c -> (undefined::([] Int) -> [] Bool))) (seq a (seq a (seq a (seq a (undefined::Bool -> Int)) (even (undefined::Int))))))))
\a -> a
\a -> (\b -> seq b ((undefined::(([] ([] Int)) -> [] Bool) -> [] Int) (seq a (id (\c -> (undefined::([] ([] Int)) -> [] Bool)) (tail (seq b ([]::[] Bool))))))) False
case1 (\a -> \b -> b) ((\a -> seq a ((\b -> b) (a (+1) (undefined::[] Int) 0))) (head (undefined::[] ((Int -> Int) -> ([] Int) -> Int -> [] Int))))
tail
map ((undefined::(([] Int) -> ([] ([] (Bool -> Bool))) -> [] ([] (Bool -> Bool))) -> Int -> Int) (\a -> (:) (seq a ((\b -> map (\c -> (undefined::Bool -> Bool)) (seq b (undefined::[] (Int -> [] Int)))) (seq a (seq a (seq a (seq a (seq a (undefined::[] ([] ([] (([] ([] Bool)) -> [] Bool)))))))))))))
\a -> (\b -> b (undefined::Int)) (\b -> case1 (\c -> \d -> a) ((enumFromTo'::Int -> Int -> [Int]) b b) ((:) True (undefined::[] Bool)))
\a -> seq a (seq a (seq a (\b -> seq a (\c -> (undefined::Bool -> [] Int)) (\c -> seq b (seq c True))) (seq a (\b -> \c -> (undefined::[] (Int -> Int))) ((||) (undefined::Bool) True))) ((\b -> seq a (\c -> not True) b) (seq a (undefined::Int))))
id
\a -> (\b -> seq b (seq b (head (undefined::[] ((([] ([] Int)) -> [] ([] Bool)) -> [] Int))))) (undefined::Bool) (\b -> seq a (\c -> tail ((!!) (seq b ([]::[] ([] ([] Bool)))) c)) (seq a (head (seq b (undefined::[] (Bool -> Int))) (undefined::Bool))))
case1 (\a -> \b -> seq b (\c -> (:)) 2 0) ((\a -> \b -> seq a (undefined::(Int -> Int) -> [] Int) (seq b (+1))) ((\a -> seq a ([]::[] (Int -> Int))) False)) ((undefined::(Int -> [] (Int -> Int)) -> [] ([] ([] ([] Bool)))) (\a -> (undefined::Int -> [] (Int -> Int)) a))
\a -> (undefined::[] Int)
case1 (\a -> (\b -> seq a (seq a (seq b (\c -> (undefined::([] Int) -> [] Int))))) (seq a (seq a odd) 2)) (\a -> case1 (seq a (\b -> (undefined::([] Bool) -> [] Int))) a (undefined::[] Bool)) (id (case1 (\a -> (undefined::([] Bool) -> [] Int)) (undefined::[] Int) ([]::[] Bool)))
tail
\a -> ([]::[] Int)
case1 (id (\a -> \b -> seq b (\c -> c))) (\a -> seq a (seq a (undefined::(([] Int) -> [] ([] Bool)) -> [] Int) (seq a (\b -> seq b (seq a ([]::[] ([] Bool))))))) ((\a -> (undefined::Int -> [] (Bool -> Bool)) (seq a (seq a (undefined::Int)))) (\a -> seq a ([]::[] ([] Bool))))
(\a -> case1 (seq a (undefined::Bool -> ([] Bool) -> ([] Int) -> [] Int)) (undefined::([] Int) -> [] Int) (seq a (undefined::(([] Int) -> Int) -> [] Bool) (\b -> 2))) (head (tail (undefined::[] (Bool -> [] (([] Int) -> ([] Bool) -> [] Bool)))) ((\a -> seq a (seq a (seq a False))) (\a -> a)))
id (\a -> map (seq a (\b -> (undefined::Int -> ([] ([] ([] Bool))) -> Int) ((+1) b) (undefined::[] ([] ([] Bool))))) ((\b -> seq a (\c -> seq b a) (seq b (seq b (seq a ([]::[] (([] Bool) -> Int)))))) (\b -> seq b (undefined::([] ([] Int)) -> Int -> Int -> Int))))
\a -> seq a ([]::[] Int)
\a -> seq a (seq a (undefined::Int -> [] Int)) ((\b -> id (\c -> b)) (seq a (id (undefined::Int))) (take (undefined::Int)))
\a -> map (\b -> seq a (undefined::Int -> Int) ((undefined::([] (Int -> Int)) -> Int) (tail (seq a ([]::[] (Int -> Int)))))) (id ((!!) (undefined::[] ([] (([] ([] Bool)) -> [] ([] (Bool -> Bool))))) (seq a (undefined::Int))))
id
\a -> seq a a
\a -> take (seq a (undefined::(Int -> Bool -> Bool) -> Int) (seq a (\b -> \c -> id) (seq a (seq a True)))) (head (seq a ([]::[] ((([] Int) -> ([] Int) -> Bool) -> [] Int))) ((!!) ([]::[] (([] Int) -> ([] Int) -> Bool)) 1))
\a -> a
(undefined::(([] Int) -> ([] (([] (Int -> Int)) -> [] (Int -> Int))) -> ([] Int) -> Int) -> ([] Int) -> [] Int) (\a -> \b -> head)
\a -> map (\b -> seq a ((\c -> seq b (seq c (seq c (id 0)))) (id (\c -> False) (tail (seq b (undefined::[] (([] Int) -> [] Int))))))) ([]::[] (Int -> Int -> Bool))
\a -> id (\b -> seq a (\c -> ([]::[] Int)) (seq b (undefined::Bool -> (([] (Bool -> Bool)) -> Bool) -> Int) (b 2 a))) (seq a (seq a (\b -> seq a (\c -> seq c (undefined::Int -> ([] Int) -> Bool)) (seq a (seq a 0)))) (seq a (\b -> seq b (\c -> (undefined::Bool -> Bool))) (\b -> seq a (seq b (seq a (undefined::Bool))))))
\a -> seq a a
head ((\a -> seq a (seq a (seq a (seq a (seq a (\b -> seq b (id ([]::[] (([] Int) -> [] Int))))) (seq a (head ([]::[] Bool))))))) (head (undefined::[] (Int -> Int -> Bool))))
case1 ((undefined::((([] Bool) -> Int) -> [] Int) -> Int -> ([] Int) -> [] Int) (id (\a -> seq a (undefined::(([] Bool) -> Int) -> [] Int)) (not True))) (id ((\a -> seq a ((\b -> seq b (undefined::[] Int)) ([]::[] ([] Int)))) (\a -> seq a (seq a (undefined::Bool -> Int -> Int -> Bool)) (head (undefined::[] Bool)))))
\a -> seq a (\b -> case1 (:) (undefined::[] Int) (b (undefined::[] ([] (([] ([] ([] Int))) -> [] ([] ([] Int))))))) (seq a (seq a (\b -> seq b ((\c -> \d -> seq c a) (\c -> (undefined::Bool))) (seq a (case1 (undefined::Int -> ([] Int) -> Int) (undefined::Int) a)))))
\a -> a
(:) (undefined::Int)
\a -> seq a (seq a (\b -> seq b (\c -> (undefined::Bool -> [] Int))) (seq a id) (seq a (case1 (seq a (undefined::Int -> ([] Int) -> Int)) (seq a (undefined::Int)) (seq a a)))) (seq a (seq a (undefined::([] (([] (([] Int) -> [] Bool)) -> Int -> Int)) -> Bool)) (id (undefined::[] (([] (([] Int) -> [] Bool)) -> Int -> Int))))
(undefined::((([] (([] ([] Int)) -> [] ([] Int))) -> Bool) -> Int -> Bool) -> ([] Int) -> [] Int) ((\a -> \b -> seq a (((==)::Int -> Int -> Bool) ((\c -> seq c (undefined::Int)) (seq a (undefined::[] Bool))))) (head ([]::[] (Bool -> Int)) False))
\a -> seq a (\b -> \c -> (undefined::[] Int)) (seq a (\b -> seq a (seq a (undefined::Int))) (seq a False)) (seq a (seq a (\b -> seq b (\c -> seq a id) (id b))) (seq a (undefined::(([] Bool) -> [] Bool) -> Int) (\b -> ([]::[] Bool))))
\a -> (undefined::[] Int)
(\a -> seq a (\b -> ([]::[] Int))) (\a -> seq a ([]::[] (Bool -> Bool)))
\a -> seq a (seq a (seq a (undefined::(([] (Int -> [] (([] Int) -> [] Int))) -> Int -> [] (([] Int) -> [] Int)) -> [] Int)) head)
(!!) (undefined::[] ((([] Int) -> ([] Bool) -> [] Bool) -> ([] Int) -> [] Int)) (undefined::Int) ((undefined::([] (([] Int) -> Bool)) -> ([] Int) -> ([] Bool) -> [] Bool) ((undefined::Bool -> [] (([] Int) -> Bool)) (((==)::[Int] -> [Int] -> Bool) (undefined::[] Int) ([]::[] Int))))
(undefined::([] Int) -> [] Int)
case1 (\a -> \b -> seq b (\c -> \d -> d) (seq b (\c -> (undefined::([] Int) -> [] Bool)) (head ([]::[] Int)))) (head (take ((+1) 2) (undefined::[] (([] Int) -> [] Int)))) ((\a -> seq a (seq a ([]::[] (([] Bool) -> [] Bool)))) (head (undefined::[] (([] Int) -> [] ([] Int))) ([]::[] Int)))
id (\a -> \b -> case1 (seq b (\c -> \d -> b)) b (seq a (undefined::[] Int))) ((\a -> \b -> seq b (seq a (seq b (undefined::Int -> [] Int))) (a (a (seq a b)))) ((\a -> \b -> seq a (seq a (undefined::Int))) (\a -> a)))
\a -> map (undefined::(([] (([] Int) -> [] ([] Int))) -> [] (([] Int) -> ([] Int) -> [] ([] Int))) -> Int) (seq a (undefined::[] (([] (([] Int) -> [] ([] Int))) -> [] (([] Int) -> ([] Int) -> [] ([] Int)))))
\a -> a
(\a -> seq a ((\b -> \c -> seq b (\d -> d)) (seq a a)) (undefined::Bool)) ((\a -> seq a (seq a 0)) (id (undefined::[] (([] (([] Bool) -> [] (Bool -> Bool))) -> Int))))
(undefined::([] Int) -> [] Int)
\a -> seq a (seq a (seq a (seq a (undefined::(([] (([] Int) -> [] Bool)) -> [] ([] (([] Int) -> Bool))) -> [] Int)))) (seq a (\b -> seq b (\c -> (undefined::Bool -> [] ([] (([] Int) -> Bool))) b)) (seq a (\b -> seq a (seq b (undefined::Bool))) (\b -> seq b b)))
\a -> seq a a
(undefined::([] (([] (Int -> Bool)) -> Int -> [] Int)) -> ([] Int) -> [] Int) ((\a -> seq a (seq a ([]::[] (([] (Int -> Bool)) -> Int -> [] Int)))) 1)
(\a -> seq a (\b -> b)) (undefined::([] (([] ([] Int)) -> [] Int)) -> [] (([] ([] Bool)) -> [] ([] (Bool -> Bool))))
\a -> map (\b -> (\c -> seq c (\d -> (undefined::Int))) (seq a (seq a (seq a True))) tail) (seq a (id (undefined::[] (([] ([] (([] Int) -> [] (Int -> Int)))) -> [] ([] (([] Int) -> [] (Int -> Int)))))))
id (\a -> map (seq a ((undefined::Int -> Int -> Int) (id (seq a (undefined::Int))))) a)
(undefined::(([] (Bool -> Bool)) -> ([] Int) -> Int -> Bool) -> ([] Int) -> [] Int) (id (id (\a -> \b -> (undefined::Int -> ([] Int) -> Int -> Bool) (seq b a)) ((\a -> seq a (seq a (undefined::Int))) True)))
case1 ((!!) ([]::[] (Bool -> ([] Bool) -> ([] Int) -> [] Int)) (id (id 2))) (\a -> a) (tail ((undefined::Int -> [] Bool) (undefined::Int)))
\a -> a
\a -> seq a (map (seq a (\b -> (\c -> (\d -> seq d (seq c (undefined::Int))) (seq b (seq c a))) (seq b (seq b (undefined::(Int -> [] ([] (Bool -> Bool))) -> Int))))) (id ((\b -> (undefined::Bool -> [] (Int -> Int -> Bool -> Bool)) (seq b (seq a True))) ((\b -> seq a (seq b 2)) (id ([]::[] ([] Int)))))))
\a -> (undefined::((([] ([] Int)) -> [] Bool) -> ([] Int) -> [] ([] Bool)) -> [] Int) (seq a (seq a (seq a (head ([]::[] ((([] ([] Int)) -> [] Bool) -> ([] Int) -> [] ([] Bool)))))))
(!!) (id (undefined::[] ((Int -> Int -> [] Int) -> ([] Int) -> [] Int))) 1 (\a -> \b -> seq a (seq a ((undefined::Bool -> Bool -> [] Int) (seq a False)) ((\c -> c) (seq a (seq b (seq a (undefined::Bool)))))))
id
(undefined::([] Int) -> [] Int)
head (undefined::[] ((([] Int) -> [] Int) -> Bool -> ([] Int) -> [] Int)) (map (\a -> a)) (not ((\a -> seq a ((\b -> seq a (seq b (undefined::Bool))) (undefined::Int -> Int))) (undefined::([] Int) -> [] (Int -> [] Int))))
\a -> a
(undefined::([] Int) -> [] Int)
\a -> map (seq a (seq a (seq a (\b -> \c -> seq c (undefined::Int)))) (seq a head a)) (seq a (seq a (seq a (undefined::[] (([] Int) -> [] (([] Int) -> Bool))))))
\a -> seq a ((\b -> seq b (seq b (\c -> seq c (undefined::Int -> [] Int)) (head (undefined::[] (Int -> [] Bool))))) ((!!) (seq a (seq a (undefined::[] (([] Int) -> [] (Bool -> Bool))))) (seq a (seq a 2)))) ((-) ((\b -> seq b (seq b 1)) (\b -> seq b (seq b (undefined::[] Bool)))) (case1 (\b -> \c -> (undefined::Int)) (seq a 0) (seq a (undefined::[] ([] Int)))))
(undefined::([] Int) -> [] Int)
(++) ((undefined::Bool -> [] Int) ((\a -> seq a (\b -> seq a (undefined::Bool)) tail) ((undefined::([] Int) -> [] (([] ([] ([] ([] Bool)))) -> Bool)) ([]::[] Int))))
(\a -> (\b -> head (seq b ([]::[] (Bool -> ([] Int) -> [] Int)))) (seq a (undefined::[] ([] Bool)))) ((!!) (id ([]::[] (Bool -> [] (Int -> Bool)))) (undefined::Int)) ((\a -> case1 (undefined::Bool -> ([] Bool) -> Bool) (seq a (undefined::Bool)) (seq a ([]::[] Bool))) (\a -> seq a (head (id (seq a (seq a (undefined::[] (([] Int) -> Bool))))))))
id (\a -> \b -> (undefined::Bool -> ([] Int) -> [] Int) (seq a (seq a (undefined::Bool)))) ((undefined::([] ([] (Int -> Bool))) -> [] ([] (Bool -> Bool))) ([]::[] ([] (Int -> Bool)))) (id (\a -> seq a (\b -> seq b (undefined::Int)) (seq a (seq a False))) (\a -> ([]::[] Int)))
(undefined::Int -> Int -> ([] Int) -> [] Int) (id (case1 (undefined::Bool -> ([] Bool) -> Int) 2 (undefined::[] Bool))) ((\a -> seq a (\b -> 2)) (take (undefined::Int) ([]::[] Int)) ((\a -> seq a (\b -> seq b ([]::[] ([] Bool)))) (undefined::Int)))
(\a -> seq a ((\b -> \c -> \d -> seq b ([]::[] Int)) ([]::[] Int) (head (seq a (undefined::[] (Bool -> Bool))) ((!!) ([]::[] Bool) (undefined::Int))))) ((\a -> seq a (seq a (\b -> id (undefined::[] (([] ([] (Int -> [] Int))) -> Int))))) ((undefined::(Int -> Int) -> ([] Int) -> Int) (\a -> head (seq a (undefined::[] Int)))))
id (\a -> \b -> \c -> seq c c) (undefined::([] Int) -> [] ([] Int)) ((\a -> seq a (seq a (case1 (undefined::Bool -> ([] Bool) -> Bool) (undefined::Bool) ([]::[] Bool)))) (\a -> seq a (case1 (\b -> (undefined::([] Bool) -> ([] Int) -> Bool)) (\b -> False) ([]::[] Bool))))
\a -> seq a (seq a (\b -> a)) head
\a -> head (seq a ((undefined::(([] ([] Int)) -> [] ([] ([] Int))) -> Bool -> [] ([] Int)) (\b -> take 0 (seq b (seq b (undefined::[] ([] ([] Int)))))) (seq a (((==)::[Int] -> [Int] -> Bool) a a))))
(!!) ([]::[] ((([] Int) -> [] (([] Int) -> Bool)) -> ([] Int) -> [] Int)) (head ((!!) ([]::[] ([] Int)) 2)) (map ((!!) (tail ([]::[] (Int -> ([] Int) -> Bool))) (head (filter (undefined::Int -> Bool) ([]::[] Int)))))
(undefined::([] Int) -> [] Int)
id
id (\a -> (undefined::([] (([] Bool) -> [] Bool)) -> ([] Int) -> [] Int) (seq a (seq a (seq a (seq a (undefined::Int -> [] (([] Bool) -> [] Bool)) (seq a 2)))))) (id (map (\a -> seq a (undefined::(([] Int) -> Bool) -> ([] Int) -> Bool)) ([]::[] ([] Int))))
case1 (\a -> \b -> case1 (\c -> \d -> id) (\c -> c) (seq b (seq b (undefined::[] Bool)))) (\a -> (\b -> seq b (undefined::(Int -> Int -> Bool) -> [] Int)) (seq a (seq a 1)) (undefined::Int -> Int -> Bool)) ((\a -> seq a (seq a ([]::[] (Int -> Int)))) (\a -> seq a (\b -> True) (undefined::[] Int)))
(undefined::(([] ([] ([] (Bool -> Bool)))) -> [] (Int -> Bool)) -> ([] Int) -> [] Int) (\a -> (undefined::(Int -> Bool) -> Int -> [] (Int -> Bool)) (seq a (\b -> seq b False)) (seq a (\b -> head (undefined::[] Int)) id))
\a -> seq a (\b -> seq a a) (case1 ((\b -> seq b (undefined::Bool -> ([] Bool) -> Int)) (seq a (seq a even))) ((undefined::(([] Int) -> Bool) -> Int) (undefined::([] Int) -> Bool)) (head (head (undefined::[] ([] ([] Bool))))))
(\a -> \b -> (enumFromTo::Int -> Int -> [Int]) (seq a (seq a ((undefined::Int -> Int) (seq b 0)))) (seq a (seq a (seq a ((+1) (seq b 0)))))) ((undefined::([] Int) -> ([] (Int -> Int -> [] Int)) -> [] (Int -> Int)) (case1 (\a -> \b -> a) ([]::[] Int) ([]::[] ([] Int))))
\a -> head ((:) ((undefined::(([] Bool) -> [] (Bool -> Bool)) -> [] Int) (\b -> (undefined::([] Bool) -> [] (Bool -> Bool)) b)) (undefined::[] ([] Int)))
(undefined::(Int -> Int) -> (([] Int) -> [] Bool) -> ([] Int) -> [] Int) ((!!) (undefined::[] (Int -> Int)) 1) (case1 (\a -> seq a (id (seq a (\b -> (undefined::[] Bool))))) (head ([]::[] (Bool -> [] Bool)) False))
head (head (undefined::[] ([] ((([] Int) -> [] (([] ([] Bool)) -> [] ([] Bool))) -> ([] Int) -> [] Int)))) (id (\a -> seq a ([]::[] (([] ([] Bool)) -> [] ([] Bool)))))
\a -> a
\a -> seq a (tail (seq a ((\b -> (:) (seq b (seq a (undefined::Bool -> Int)) (seq b (seq b b))) a) (seq a (\b -> id (undefined::([] (([] Int) -> [] Int)) -> Bool) (id (undefined::[] (([] Int) -> [] Int)))) (\b -> (undefined::Bool -> Int -> ([] Int) -> [] Int) (seq b (seq a True)))))))
id
(\a -> (undefined::(([] Int) -> Bool) -> ([] Int) -> [] Int) (seq a (seq a (\b -> (&&) True (seq a (seq a False)))))) (head (tail (tail ([]::[] (([] Int) -> ([] (([] Int) -> [] ([] Bool))) -> ([] Int) -> [] (Int -> Int))))))
(\a -> (undefined::([] (Int -> [] Int)) -> ([] Int) -> [] Int) (seq a (undefined::[] (Int -> [] Int)))) ((\a -> seq a ((undefined::([] Int) -> Bool) (seq a (undefined::[] Int)))) (\a -> (\b -> seq b (\c -> seq b c)) ((!!) (undefined::[] Int) 0)))
case1 ((undefined::([] Bool) -> Int -> ([] Int) -> [] Int) ((\a -> seq a (seq a (seq a (undefined::[] Bool)))) (undefined::([] Int) -> [] ([] Int)))) (map (head ([]::[] (Bool -> Int))) (head ([]::[] (([] ([] (Int -> Int))) -> [] Bool)) ([]::[] ([] (Int -> Int)))))
(\a -> id (seq a (seq a (\b -> \c -> seq b (seq c (seq a c))))) (\b -> \c -> seq a (\d -> seq a d) (seq c (undefined::Bool)))) ((\a -> seq a (seq a (\b -> ([]::[] (([] Int) -> Bool)))) (undefined::Bool -> Bool)) odd)
(\a -> \b -> (undefined::Bool -> ([] Int) -> [] Int) (seq b a)) ((\a -> seq a (seq a (undefined::Bool))) (undefined::Int)) (\a -> a)
\a -> head (seq a (seq a ((\b -> seq b (seq b (seq a (undefined::Bool -> Int -> [] ([] Int)))) False (seq a (seq b (seq b (seq a (undefined::Int -> Int) (undefined::Int)))))) (undefined::([] ([] ([] (Int -> [] Int)))) -> [] (Int -> Bool)))))
\a -> a
id (\a -> \b -> b) ((+1) 1) (take ((\a -> id ((\b -> seq b (undefined::Int)) (seq a (seq a True)))) ((undefined::([] Bool) -> ([] ([] Bool)) -> [] Bool) ([]::[] Bool))))
(!!) (map (\a -> \b -> (undefined::([] ([] ([] Bool))) -> [] Int) (seq b (seq b (undefined::[] ([] ([] Bool)))))) (head ([]::[] (Int -> [] Bool)) 1)) (case1 (\a -> head (seq a (undefined::[] (([] ([] (Bool -> Bool))) -> Int)))) (undefined::Int) ((\a -> seq a (undefined::[] ([] (Bool -> Bool)))) True))
\a -> head (seq a (seq a (seq a (map (id (\b -> ([]::[] Int))) (case1 (:) (undefined::[] Bool) (undefined::[] Bool))))))
\a -> a
(\a -> seq a (seq a (\b -> \c -> (enumFromTo'::Int -> Int -> [Int]) (undefined::Int) (seq c (seq b 1)))) (map (\b -> \c -> (\d -> seq d True) (head (undefined::[] ([] (Bool -> Bool))))))) (undefined::([] (([] ([] Bool)) -> [] ([] Bool))) -> Int -> Int -> Bool)
\a -> a
id
take (case1 (undefined::Int -> ([] Int) -> Int) (head ([]::[] ((Int -> Bool) -> Int)) ((undefined::Bool -> Int -> Bool) (id False))) (id ((\a -> seq a (tail ([]::[] Int))) (undefined::[] ([] (([] Int) -> [] ([] Int)))))))
\a -> map (id (undefined::(([] (([] (Int -> Int)) -> Int -> Int)) -> ([] (Int -> [] Int)) -> Int -> Int) -> Int)) (seq a (seq a (seq a ([]::[] (([] (([] (Int -> Int)) -> Int -> Int)) -> ([] (Int -> [] Int)) -> Int -> Int)))))
case1 (\a -> \b -> seq a (tail (seq b (\c -> b) (\c -> case1 (seq c (undefined::Int -> ([] Int) -> Bool)) (seq a (undefined::Bool)))))) (undefined::[] Int)
id
(\a -> seq a (seq a (\b -> (undefined::Bool -> ([] Int) -> [] Int) (odd (undefined::Int))))) (\a -> a) (\a -> \b -> (undefined::Int))
id
id (\a -> (undefined::(([] ([] Int)) -> [] Int) -> [] Int) ((\b -> seq b (case1 (\c -> \d -> c) a)) (seq a (case1 (seq a (undefined::Int -> ([] Int) -> Int)) (undefined::Int) a))))
(:) ((\a -> seq a (\b -> (+1))) ((!!) (undefined::[] Bool) 2) (undefined::Int -> [] Bool) ((undefined::(([] ([] Int)) -> [] Bool) -> Int) ((\a -> \b -> seq a (seq b (undefined::[] Bool))) 1)))
\a -> ([]::[] Int)
tail
(\a -> \b -> seq b (undefined::Bool -> [] Int) (not (seq a (not True)))) (\a -> seq a (\b -> seq b (map (\c -> (undefined::([] Int) -> Bool -> Bool)) ([]::[] Bool))) (seq a (id (\b -> (undefined::[] (Int -> [] Int))) (seq a (seq a (seq a False))))))
\a -> (\b -> seq b a) (seq a (\b -> \c -> seq c (\d -> (undefined::(Int -> Bool -> Bool) -> Int)) a (seq c (seq c (\d -> (undefined::Int -> Bool -> Bool))) (seq a (seq c (seq b (undefined::Bool)))))))
(undefined::(Bool -> ([] ([] Int)) -> [] Bool) -> Int -> ([] Int) -> [] Int) ((undefined::Int -> Bool -> ([] ([] Int)) -> [] Bool) (id (undefined::Int))) ((-) (head ([]::[] (([] Bool) -> Int)) ([]::[] Bool)) (undefined::Int))
case1 (\a -> seq a (undefined::([] ([] (Int -> Bool))) -> ([] Int) -> [] Int)) (\a -> a) ((undefined::Int -> [] ([] (Int -> Bool))) ((\a -> seq a 2) (undefined::Bool)))
\a -> (\b -> map (seq b (\c -> seq a (undefined::([] (([] Int) -> Bool)) -> Int)) (seq a (seq a (undefined::Bool)))) (seq b (\c -> ([]::[] ([] (([] Int) -> Bool)))) a)) (seq a (id (\b -> seq b (head (seq a (seq a (undefined::[] (Int -> ([] (Int -> Int)) -> [] (Int -> Int)))))))))
map ((undefined::Bool -> (([] ([] Int)) -> [] ([] (Int -> Int))) -> Int -> Int) ((\a -> seq a (undefined::Bool)) (\a -> seq a (\b -> seq a (undefined::Bool)))) (\a -> ([]::[] ([] (Int -> Int)))))
(!!) ([]::[] ((([] ([] ([] Int))) -> [] ([] Bool)) -> ([] Int) -> [] Int)) (id (\a -> (undefined::Int)) (id ([]::[] Bool))) (\a -> seq a (map (seq a (\b -> seq a (\c -> ([]::[] Bool)) (undefined::Bool))) (case1 (undefined::Bool -> ([] Bool) -> [] Int) ([]::[] Int) ([]::[] Bool))))
(!!) (map ((!!) (tail (head ([]::[] ([] (([] Int) -> [] Int)))))) ((enumFromTo'::Int -> Int -> [Int]) (head (undefined::[] Int)) 2)) ((\a -> id ((!!) (seq a (undefined::[] Int)) (seq a (undefined::Int)))) ((\a -> (++) (seq a (undefined::[] ([] Int)))) (((==)::Int -> Int -> Bool) 2 (undefined::Int))))
\a -> seq a ((!!) (take (case1 (\b -> head) 2 a) (seq a (case1 (undefined::Bool -> ([] Bool) -> [] ([] Int)) (undefined::[] ([] Int)) (undefined::[] Bool)))) (seq a (seq a (seq a (seq a (seq a (seq a (undefined::Bool -> Bool -> Int) False)) False)))))
(undefined::Bool -> Bool -> ([] Int) -> [] Int) ((\a -> a) False) (odd ((undefined::Bool -> Int) ((undefined::([] ([] Bool)) -> Bool) (undefined::[] ([] Bool)))))
\a -> map (undefined::(([] Int) -> ([] Bool) -> [] Bool) -> Int) (seq a ((\b -> seq a (seq b (seq a ([]::[] (([] Int) -> ([] Bool) -> [] Bool))))) ((undefined::([] Int) -> [] (Int -> Int)) a)))
head ((\a -> (!!) (seq a (\b -> (undefined::[] ([] (([] Int) -> [] Int)))) (seq a (seq a (undefined::Bool))))) (head (map (\a -> a) ([]::[] Int))) ((undefined::(([] Int) -> Int -> ([] Int) -> Bool) -> Int) (\a -> (\b -> \c -> \d -> seq b False) ((+1) (seq a 0)))))
case1 ((\a -> \b -> \c -> \d -> seq c (seq b (seq a d))) (id (undefined::([] Bool) -> Bool) ([]::[] Bool))) (\a -> seq a (seq a (\b -> (undefined::[] Int)) (undefined::[] ([] ([] (([] Int) -> [] Int)))))) ((undefined::Bool -> Bool -> [] Int) False (head (id ([]::[] Bool))))
(undefined::([] Int) -> [] Int)
(\a -> seq a (undefined::([] Int) -> [] Int)) (undefined::[] (([] (([] ([] Int)) -> [] Int)) -> Int -> Bool))
\a -> seq a (\b -> seq b (seq b ((undefined::Int -> ([] (([] Int) -> Bool)) -> [] Int) ((+1) (undefined::Int))))) (head ([]::[] ((([] Int) -> Int -> Bool) -> Bool)) (\b -> seq a (\c -> seq a (undefined::Bool)))) (seq a (seq a (seq a (\b -> (undefined::Bool -> [] (([] Int) -> Bool)))) (seq a (seq a (seq a True)))) ((||) (seq a True) (seq a False)))
(\a -> head (seq a ((!!) ([]::[] (Bool -> [] (([] Int) -> [] Int))) (seq a 1)) a)) (((==)::[Int] -> [Int] -> Bool) ([]::[] Int) ((\a -> seq a (seq a (undefined::[] Int))) ([]::[] ([] (Int -> Bool)))))
\a -> a
tail
(undefined::(([] Int) -> [] ([] Bool)) -> ([] Int) -> [] Int) (undefined::([] Int) -> [] ([] Bool))
(undefined::([] Int) -> [] Int)
\a -> map (id (\b -> id (\c -> seq b 1) (id (head (undefined::[] (([] Int) -> [] (([] Int) -> Bool))))))) (id (seq a ([]::[] (([] (Int -> [] ([] ([] Bool)))) -> [] (Int -> [] ([] ([] Bool)))))))
tail
id
\a -> map (\b -> seq a (seq b ((undefined::((([] Int) -> Int) -> [] Bool) -> Int) (\c -> seq a (head (seq b (seq a (undefined::[] ([] Bool))))))))) ([]::[] Bool)
\a -> take ((undefined::Int -> Int) (seq a (seq a (\b -> seq b (undefined::Int))) (head (seq a (undefined::[] (Bool -> Int)))))) (seq a (case1 (seq a (undefined::([] Int) -> ([] ([] Int)) -> [] Int)) (seq a a) ([]::[] ([] Int))))
\a -> a
\a -> seq a a
(\a -> (undefined::Int -> (Int -> Bool) -> ([] Int) -> [] Int) (head (seq a ([]::[] Int))) (undefined::Int -> Bool)) True
(\a -> seq a (\b -> \c -> c) ((undefined::(Bool -> [] Int) -> [] (([] Int) -> [] Int)) (\b -> tail (seq b ([]::[] Int))))) ((undefined::([] ([] Bool)) -> ([] Int) -> [] (Int -> [] (([] Bool) -> [] Bool))) (head (undefined::[] ([] ([] Bool)))))
id ((\a -> seq a ((\b -> \c -> seq b (undefined::([] Int) -> [] Int)) (head ([]::[] Int)))) ((\a -> seq a (seq a ([]::[] (Int -> Int)))) (\a -> seq a (seq a True)))) ((undefined::(Bool -> Bool -> Bool) -> Bool) (&&))
(\a -> (\b -> seq a (seq b (seq b (undefined::Bool -> ([] Int) -> [] Int)))) (seq a (seq a (seq a (undefined::[] ([] Int))))) (seq a (seq a (seq a (seq a (undefined::([] ([] Bool)) -> Bool) (seq a (undefined::[] ([] Bool)))))))) ((!!) (undefined::[] ((Int -> Bool -> Bool) -> Int)) ((!!) (undefined::[] Int) (undefined::Int)) ((\a -> seq a (seq a (\b -> not))) (undefined::Bool)))
(\a -> seq a (\b -> b) (\b -> b)) (\a -> case1 (undefined::([] ([] Int)) -> ([] ([] ([] Int))) -> [] ([] Bool)) (seq a (seq a (seq a (seq a ([]::[] ([] Bool)))))) (filter (undefined::([] ([] Int)) -> Bool) (undefined::[] ([] ([] Int)))))
\a -> head (seq a (seq a (seq a (seq a (id (undefined::[] (([] (([] (([] ([] ([] Int))) -> [] ([] ([] Bool)))) -> Int)) -> [] Int))))))) ([]::[] (([] (([] ([] ([] Int))) -> [] ([] ([] Bool)))) -> Int))
\a -> a
\a -> seq a (id (\b -> seq b ((undefined::([] ([] Bool)) -> Int -> [] Int) ([]::[] ([] Bool))) (seq b (seq a (id (seq b 1)))))) (\b -> seq b (undefined::[] ((([] ([] Bool)) -> [] ([] Bool)) -> ([] ([] Bool)) -> [] ([] Bool))))
\a -> (undefined::([] Bool) -> [] Int) (map (case1 (\b -> (undefined::([] Int) -> Bool -> Bool)) (\b -> False) (seq a a)) (seq a (seq a (undefined::[] Bool))))
\a -> a
\a -> seq a (\b -> seq a (seq a a)) ((undefined::Bool -> ([] Int) -> [] ([] (Int -> [] Int))) (seq a (\b -> (undefined::Bool)) (head (undefined::[] ([] ([] (Int -> ([] Int) -> Bool)))))))
case1 (\a -> (\b -> seq a (\c -> (:) b)) (seq a (seq a id) (seq a 1))) ((\a -> seq a (\b -> (undefined::([] Int) -> [] Int)) (head (undefined::[] Int))) (undefined::[] ([] ([] Bool)))) ((undefined::([] ([] ([] (([] Int) -> [] Bool)))) -> [] Bool) ((\a -> seq a (undefined::[] ([] ([] (([] Int) -> [] Bool))))) False))
id
\a -> (undefined::Bool -> [] Int) (seq a (not ((\b -> id (seq b (undefined::Bool -> Bool) b)) (seq a (seq a (seq a even)) (seq a (seq a 1))))))
\a -> map (\b -> seq b (undefined::([] ([] ([] (([] (Int -> Bool)) -> Int -> Bool)))) -> Int) (seq b (seq b ([]::[] ([] ([] (([] (Int -> Bool)) -> Int -> Bool))))))) (seq a (seq a (undefined::Int -> [] (([] (Bool -> Bool)) -> [] (Bool -> Bool)))) (seq a (seq a (case1 (undefined::Bool -> ([] Bool) -> Int) 0 (undefined::[] Bool)))))
head (tail (head (undefined::[] ([] ((([] ([] Int)) -> [] ([] (Int -> Int))) -> ([] Int) -> [] Int))))) (\a -> (\b -> seq b (head (id (undefined::Bool -> [] ([] ([] (Int -> Int)))) (seq a (seq b True))))) ((!!) ([]::[] (Bool -> Int)) (undefined::Int) (seq a (seq a (seq a True)))))
take ((undefined::(([] Int) -> Bool) -> Int) (\a -> seq a ((\b -> seq a (seq b ((&&) (undefined::Bool) (seq a (undefined::Bool))))) (seq a (case1 (undefined::Int -> ([] Int) -> [] ([] Bool)) ([]::[] ([] Bool)) a)))))
\a -> head (seq a ([]::[] ([] Int)))
(\a -> seq a (undefined::(Int -> Int -> Bool) -> ([] Int) -> [] Int)) ((\a -> seq a (seq a not)) ([]::[] (Int -> Int -> Bool))) (\a -> seq a (\b -> head (seq b (seq a (undefined::[] (Int -> Bool))))) (case1 (\b -> seq b (undefined::([] Int) -> Int)) (seq a a) (seq a (undefined::[] Int))))
\a -> (!!) (seq a ([]::[] ((Int -> ([] Int) -> [] (Int -> [] Int)) -> [] Int))) (seq a (head (undefined::[] (Int -> Int))) (head (seq a a))) ((!!) ([]::[] (Int -> ([] Int) -> [] (Int -> [] Int))) (seq a (\b -> seq b 1) (seq a (seq a (seq a ([]::[] Bool))))))
case1 ((!!) (undefined::[] (Bool -> ([] Bool) -> ([] Int) -> [] Int)) ((\a -> seq a (undefined::Int)) (undefined::Bool))) (\a -> a) (map (\a -> seq a (not True)) (take 1 (undefined::[] (Int -> Bool))))
(\a -> map (\b -> seq a (undefined::Int))) (\a -> seq a (seq a (\b -> seq a (undefined::([] (([] Int) -> Bool)) -> Bool))) True (seq a ((undefined::Int -> [] (([] Int) -> Bool)) (seq a (seq a a)))))
\a -> seq a (\b -> seq a (seq b (undefined::Int -> Bool -> [] Int))) (seq a ([]::[] ([] Bool))) (id (undefined::([] Bool) -> Int) (id (seq a (undefined::[] Bool)))) (seq a ((\b -> seq a (\c -> seq b (undefined::Bool)) ([]::[] (Int -> Int -> Int))) (seq a (undefined::([] ([] Int)) -> Int) ([]::[] ([] Int)))))
(\a -> seq a (seq a (seq a (\b -> (undefined::Int -> ([] Int) -> [] Int))) True)) ((!!) (id ([]::[] (([] ([] Bool)) -> [] Bool))) (undefined::Int)) ((-) (head (undefined::[] Int)) ((-) (head (undefined::[] Int)) (undefined::Int)))
head (id ([]::[] ((([] ([] ([] (([] Int) -> Bool)))) -> [] ([] (([] Int) -> Bool))) -> ([] Int) -> [] Int))) ((\a -> seq a head) ((!!) (id ([]::[] Int)) (head ([]::[] Int))))
head (undefined::[] ((([] ([] Int)) -> [] (([] Int) -> Bool)) -> ([] Int) -> [] Int)) (\a -> seq a (seq a (\b -> seq b (seq a (id (seq b (seq a (undefined::[] (([] Int) -> Bool))))))) (head (seq a (undefined::[] (([] (Int -> Bool)) -> Int -> Bool))))))
\a -> (!!) (seq a (seq a (seq a (\b -> (undefined::([] ([] Bool)) -> [] ([] Int)))) (head (seq a ([]::[] Bool)))) (seq a (\b -> seq b ([]::[] ([] Bool))) (undefined::([] Int) -> Int -> Bool))) (seq a (seq a ((undefined::([] Bool) -> ([] (([] Int) -> Bool)) -> Int) (seq a (tail (undefined::[] Bool))) ((\b -> seq a (seq b ([]::[] (([] Int) -> Bool)))) (seq a (seq a (undefined::Bool)))))))
tail
\a -> (!!) ((\b -> seq b (\c -> seq a ([]::[] ([] Int)))) 0 ((undefined::Bool -> [] (([] Int) -> Bool)) (seq a (even 2)))) (seq a (\b -> seq a (\c -> b) (seq b (seq b (undefined::[] Bool)))) ((+1) 0))
case1 ((\a -> seq a (:)) ((!!) (undefined::[] ((Bool -> Bool) -> Bool)) (undefined::Int) (\a -> a))) (tail ([]::[] Int))
(undefined::([] ([] (([] Int) -> Int -> Int))) -> ([] Int) -> [] Int) (head (undefined::[] ((([] Int) -> Int) -> [] ([] (([] Int) -> Int -> Int)))) (head (id (undefined::[] (([] Int) -> Int)))))
(\a -> \b -> (\c -> seq a (seq c (undefined::Int -> [] Int))) (\c -> seq a ([]::[] Bool)) (seq b (seq b (seq b (seq a (seq a 2)))))) (undefined::Bool)
id (\a -> seq a ((undefined::(([] Int) -> ([] Int) -> [] Int) -> ([] Int) -> [] Int) (seq a (\b -> seq a (seq a (undefined::Bool -> ([] Int) -> [] Int)) True)))) (id (\a -> seq a ((\b -> seq b ([]::[] (Int -> [] Int))) (seq a (seq a ([]::[] ([] Bool)))))) (case1 (undefined::Int -> ([] Int) -> Int) (undefined::Int) (undefined::[] Int)))
\a -> (undefined::(Bool -> Bool) -> (([] ([] Int)) -> [] ([] (Int -> Int))) -> [] Int) (seq a (seq a (seq a (undefined::Int -> Bool -> Bool))) (seq a (seq a (undefined::Int)))) ((undefined::Bool -> ([] ([] Int)) -> [] ([] (Int -> Int))) ((undefined::(([] ([] Int)) -> [] ([] Bool)) -> Bool) (seq a (\b -> seq a (seq b (undefined::[] ([] Bool)))))))
\a -> seq a (case1 (\b -> (undefined::([] Bool) -> Int -> [] Int)) (seq a (seq a (seq a (\b -> a)))) ((undefined::([] (Int -> Bool)) -> [] Bool) (seq a (undefined::[] (Int -> Bool))))) (seq a ((!!) (seq a ([]::[] ((([] ([] Bool)) -> [] Bool) -> Int))) (undefined::Int)) head)
id ((undefined::(([] ([] Int)) -> [] ([] ([] Int))) -> ([] Int) -> [] Int) (undefined::([] ([] Int)) -> [] ([] ([] Int))))
(undefined::(([] Int) -> Int) -> ([] Int) -> [] Int) (case1 (\a -> head) (case1 (\a -> head) 2 (undefined::[] Int)))
\a -> seq a (undefined::[] Int)
(undefined::(([] ([] (Int -> [] Int))) -> Int -> Bool) -> ([] Int) -> [] Int) (\a -> (undefined::([] ([] Bool)) -> Bool -> Int -> Bool) (take 2 (undefined::[] ([] Bool))) (seq a (seq a (case1 (undefined::Bool -> ([] Bool) -> Bool) False ([]::[] Bool)))))
\a -> (undefined::[] Int)
\a -> (undefined::Int -> (Int -> Int -> Int) -> [] Int) (head (id ((\b -> seq b (undefined::[] Int)) (seq a (undefined::([] ([] Int)) -> Bool))))) (-)
head ([]::[] (([] Int) -> [] Int))
(:) ((undefined::Bool -> Int) ((\a -> id (\b -> False) (seq a (seq a (\b -> (undefined::Bool))))) (\a -> seq a (\b -> seq a (undefined::([] Int) -> ([] Bool) -> [] Bool)) (seq a (head (undefined::[] Int))))))
(undefined::(([] ([] (([] Int) -> Int -> Int -> [] Int))) -> [] Bool) -> ([] Int) -> [] Int) ((undefined::Bool -> ([] ([] (([] Int) -> Int -> Int -> [] Int))) -> [] Bool) True)
\a -> a
(\a -> (undefined::(([] Int) -> Int -> Int) -> ([] Int) -> [] Int) (seq a (undefined::Int -> ([] Int) -> Int -> Int) ((+1) (seq a (undefined::Int))))) ((undefined::(([] Int) -> Int -> Int -> Bool) -> Int -> ([] Int) -> Int) (\a -> seq a (\b -> seq b (\c -> (undefined::Int -> Bool))) 2))
take ((\a -> seq a (seq a (\b -> (undefined::Bool -> Int)) (seq a (seq a (undefined::[] Int)))) ((undefined::([] (([] Bool) -> [] Bool)) -> Bool) (head (seq a ([]::[] ([] (([] Bool) -> [] Bool))))))) ((!!) (undefined::[] Int) ((\a -> seq a (seq a 0)) (\a -> seq a (seq a (undefined::Bool))))))
(undefined::Int -> ([] (([] Int) -> [] Int)) -> ([] Int) -> [] Int) ((\a -> a) (head ([]::[] Int))) ((undefined::(([] Int) -> Int -> Bool) -> [] (([] Int) -> [] Int)) ((\a -> seq a (undefined::([] Int) -> Int -> Bool)) (undefined::Int -> [] Bool)))
tail
take (undefined::Int)
(\a -> \b -> seq b (\c -> seq b (seq c (undefined::Int -> [] Int)) (seq b (undefined::Int))) (seq a (case1 (seq b (undefined::Int -> ([] Int) -> Int)) (seq b 0) (seq b b)))) (\a -> (!!) (seq a (seq a (undefined::[] (Bool -> [] (Int -> Int))))) ((+1) (undefined::Int)) (seq a (undefined::Bool)))
\a -> map ((undefined::Int -> Bool -> Int) (seq a (seq a (\b -> seq a (undefined::Int)) (seq a (head ([]::[] (([] Int) -> Bool))))))) (id (\b -> seq b (seq a tail ([]::[] Bool))) (\b -> True))
(undefined::([] (Bool -> Bool)) -> ([] Int) -> [] Int) (map ((undefined::([] ([] Int)) -> Bool -> Bool -> Bool) (id ([]::[] ([] Int)))) (case1 (\a -> (undefined::([] Int) -> [] Bool)) (undefined::[] Bool) ([]::[] Int)))
\a -> a
(\a -> \b -> \c -> map (\d -> seq a (undefined::Int)) (seq a ([]::[] (([] (Int -> Bool)) -> [] Bool)))) (case1 (\a -> \b -> a) True (undefined::[] Bool)) (\a -> ([]::[] (([] Int) -> Bool)))
\a -> seq a (seq a ((undefined::([] (([] Bool) -> [] Bool)) -> ([] ([] (Int -> Int))) -> [] Int) (seq a (\b -> id (undefined::[] (([] Bool) -> [] Bool))) (seq a (id (undefined::[] ([] Bool)))))) (seq a ((!!) (undefined::[] (Int -> [] ([] (Int -> Int)))) (seq a (seq a (undefined::Int)))) (seq a (seq a (seq a (\b -> 0) (seq a (seq a (undefined::[] (Int -> [] Int)))))))))
(!!) ([]::[] (Bool -> Bool -> ([] Int) -> [] Int)) (id (undefined::Int)) ((undefined::Int -> Bool) (id (undefined::Int))) (head ((++) (undefined::[] (Bool -> Bool)) ([]::[] (Bool -> Bool))) ((\a -> a (head ([]::[] Int))) (\a -> seq a (not False))))
\a -> seq a (\b -> seq a ((enumFromTo'::Int -> Int -> [Int]) (case1 (undefined::Int -> ([] Int) -> Int) 1 a) (b (seq b a) (seq b (seq b ([]::[] (([] Int) -> [] (Bool -> Bool)))))))) (undefined::([] Int) -> ([] (([] Int) -> [] (Bool -> Bool))) -> Int)
id ((\a -> seq a (undefined::Bool -> Bool -> ([] Int) -> [] Int)) (head ([]::[] Int)) ((||) (odd 2) (undefined::Bool))) ((\a -> seq a False) ((undefined::Bool -> [] (([] Int) -> [] Int)) ((!!) ([]::[] Bool) (undefined::Int))))
\a -> a
head (map (\a -> seq a (seq a (seq a (undefined::Bool -> ([] Int) -> [] Int)))) (map (undefined::([] ([] Int)) -> [] (Bool -> Bool)) (id ([]::[] ([] ([] Int)))))) ((undefined::(([] ([] Int)) -> [] ([] (([] ([] ([] Bool))) -> [] ([] Bool)))) -> Bool) (\a -> seq a (seq a (seq a ([]::[] ([] (([] ([] ([] Bool))) -> [] ([] Bool))))))))
\a -> ([]::[] Int)
(\a -> seq a (seq a (undefined::([] (Int -> [] Int)) -> ([] Int) -> [] Int) ((!!) (undefined::[] (Bool -> [] (Int -> [] Int))) 1 (id (seq a True))))) (\a -> \b -> (!!) ([]::[] (([] ([] Int)) -> ([] Int) -> [] Int)) ((+1) 1) (seq b (seq a (undefined::([] ([] (Int -> Int))) -> [] ([] Int)) (tail (seq a ([]::[] ([] (Int -> Int))))))))
\a -> map ((\b -> \c -> case1 (seq b (undefined::Int -> ([] Int) -> Int)) (seq a (undefined::Int)) (seq b (undefined::[] Int))) (\b -> case1 (\c -> ((==)::[Int] -> [Int] -> Bool)) (\c -> False) ([]::[] Int))) (take (id (seq a ((-) 2 2))) ((++) (seq a (undefined::[] Bool)) (id ([]::[] Bool))))
(undefined::([] Int) -> [] Int)
\a -> seq a a
case1 ((!!) (undefined::[] (Bool -> ([] Bool) -> ([] Int) -> [] Int)) ((\a -> seq a 2) True)) ((\a -> (undefined::Int -> ([] Int) -> [] Int) a) ((\a -> seq a (undefined::Int)) (undefined::[] ([] Int)))) (map (undefined::Bool -> Bool) ((:) True (undefined::[] Bool)))
(\a -> \b -> seq a (\c -> ([]::[] Int)) (head ((!!) ([]::[] ([] ([] (Int -> Int)))) (seq b (seq a 2))))) ((!!) ([]::[] ((([] ([] ([] Int))) -> [] ([] Bool)) -> ([] ([] ([] Int))) -> [] ([] Bool))))
\a -> seq a (seq a (undefined::(([] (([] Int) -> Int -> Bool)) -> [] (Bool -> Bool)) -> [] Int)) (seq a (seq a (\b -> \c -> ([]::[] (Bool -> Bool)))) (seq a ((!!) (head ([]::[] ([] Bool))) (seq a (seq a 1)))))
\a -> a
(\a -> id (seq a (seq a (\b -> seq b (\c -> c)) (seq a (undefined::Bool -> Int) (seq a (odd 1)))))) (\a -> (undefined::([] ([] ([] Bool))) -> Int -> Int -> [] Bool) ((undefined::Int -> [] ([] ([] Bool))) (seq a (head ([]::[] Int)))))
\a -> seq a ([]::[] Int)
(undefined::Bool -> (([] Int) -> [] Bool) -> ([] Int) -> [] Int) True (undefined::([] Int) -> [] Bool)
\a -> a
\a -> (undefined::[] Int)
(undefined::(([] Int) -> Int) -> ([] Int) -> [] Int) (undefined::([] Int) -> Int)
\a -> map (seq a (\b -> \c -> seq a (undefined::Bool -> Int)) (seq a (tail ([]::[] ([] Bool)))) (seq a ((\b -> seq b (undefined::Int)) (not True)))) (seq a (\b -> \c -> seq a (undefined::[] Bool)) (seq a 1) (seq a ((\b -> seq b (seq b ([]::[] ([] (Bool -> Bool))))) (\b -> (undefined::[] Bool)))))
(\a -> seq a (seq a (seq a (\b -> seq a (\c -> ([]::[] Int)))))) (map (undefined::(Bool -> Bool) -> [] ([] Bool)) (tail ([]::[] (Bool -> Bool)))) ((\a -> seq a (seq a (\b -> a)) (undefined::Int)) (undefined::Bool))
\a -> a
(\a -> case1 (\b -> \c -> seq b (\d -> seq c d)) (\b -> b) ((\b -> seq b (undefined::[] Bool)) (seq a (undefined::Bool)))) (||)
\a -> ([]::[] Int)
\a -> a
\a -> a
(\a -> (\b -> \c -> seq b (\d -> ([]::[] Int))) (\b -> False) (seq a (\b -> head ([]::[] Bool)) (seq a (tail (undefined::[] ([] Bool)))))) (case1 (\a -> seq a (undefined::Bool -> ([] Bool) -> Int) (seq a a)) ((\a -> seq a 1) ([]::[] Int)) (head (undefined::[] (Int -> [] Bool)) (undefined::Int)))
\a -> a
\a -> a
case1 ((undefined::((Int -> Bool) -> Bool) -> Int -> ([] Int) -> [] Int) (\a -> a ((\b -> b) (seq a (seq a (undefined::Int)))))) ((\a -> seq a (undefined::[] Int)) (\a -> map ((++) ([]::[] Int)) (undefined::[] ([] Int))))
\a -> a
(\a -> (undefined::Int -> ([] Int) -> [] Int) (seq a ((!!) (seq a ([]::[] Int)) (seq a (seq a (seq a 1)))))) (head (id (undefined::[] (([] Int) -> [] (([] (Int -> Int -> Int)) -> [] (Int -> Int -> Int))))))
(\a -> seq a (\b -> (undefined::(([] Bool) -> Bool) -> [] Int) head)) (undefined::Bool)
head ([]::[] ((([] (([] Int) -> Int -> Bool)) -> [] ([] (Int -> Int -> [] Int))) -> ([] Int) -> [] Int)) (undefined::([] (([] Int) -> Int -> Bool)) -> [] ([] (Int -> Int -> [] Int)))
(:) ((\a -> (undefined::(Int -> Bool) -> Int) (seq a (\b -> (\c -> c) False))) ((\a -> seq a (seq a (id (seq a ([]::[] (([] ([] ([] (Bool -> Bool)))) -> [] Bool)))))) ((!!) ([]::[] (([] Bool) -> Int -> Bool)) (undefined::Int) ([]::[] Bool))))
(undefined::([] Int) -> [] Int)
case1 (case1 (\a -> \b -> seq a ((!!) ([]::[] (([] Int) -> [] Int)))) ((undefined::Int -> Int -> ([] Int) -> [] Int) (undefined::Int)) (head (undefined::[] ([] Int)))) (map (case1 (\a -> (undefined::([] Bool) -> Bool -> Int)) (\a -> 1) ([]::[] Bool)) (id (\a -> ([]::[] Bool)) (undefined::[] (Int -> Bool -> Bool))))
\a -> a
\a -> seq a (seq a a)
tail
(\a -> (\b -> \c -> take b) (seq a (seq a (seq a (undefined::Int)))) (seq a (even (seq a (\b -> 1) a)))) (even ((\a -> head (seq a (seq a (seq a (undefined::[] Int))))) ((undefined::([] ([] (Bool -> Bool))) -> Int) (tail ([]::[] ([] (Bool -> Bool)))))))
\a -> seq a (\b -> case1 (\c -> head (seq c (undefined::[] (([] (Bool -> Bool)) -> [] Int)))) a (undefined::[] (Bool -> Bool))) ((\b -> seq a (\c -> seq b (seq c c)) (seq b b)) (seq a (seq a (\b -> seq b b)) 0))
id
(undefined::Int -> ([] Int) -> ([] Int) -> [] Int) ((\a -> seq a (seq a (seq a (undefined::Int)))) (\a -> (undefined::Int))) ((undefined::(([] (Int -> Int)) -> Int) -> Bool -> [] Int) (\a -> seq a 1) ((undefined::(Int -> Bool) -> Bool) (\a -> (undefined::Bool))))
(undefined::(([] ([] ([] ([] Int)))) -> [] (([] ([] Bool)) -> [] Bool)) -> ([] Int) -> [] Int) (\a -> seq a (\b -> ([]::[] (([] ([] Bool)) -> [] Bool))) (seq a (seq a (seq a (\b -> seq b filter (\c -> (undefined::Bool)))))))
\a -> a
(\a -> \b -> map (\c -> seq b (seq c ((\d -> seq b d) (undefined::Int)))) ((!!) (seq a (undefined::[] ([] Bool))) (seq b (seq b (seq a (undefined::Int)))))) ((\a -> \b -> seq a (seq b (undefined::([] Int) -> [] (Int -> [] Int)) (seq b (seq b ([]::[] Int))))) False)
\a -> map (id (seq a (\b -> seq b ((undefined::(Int -> Int) -> ([] (Int -> Int)) -> Int) (seq b (+1)) (seq a (seq b (seq b (seq a (seq b (undefined::[] (Int -> Int))))))))))) (undefined::[] (Bool -> ([] (Int -> Int -> Int)) -> [] (([] Int) -> Int -> Int -> Int)))
(undefined::([] Int) -> [] Int)
\a -> seq a a
(++) ((\a -> a (seq a (seq a (seq a ([]::[] Int)))) (seq a (seq a (id (undefined::Int)))) ((\b -> seq b (undefined::Int)) (undefined::Int -> Bool))) (\a -> seq a (\b -> (undefined::Bool -> Int -> Int -> [] Int) (seq b (seq b (undefined::Bool)))) (map (\b -> seq b (undefined::[] (Bool -> Bool))) (seq a (seq a ([]::[] ([] (Int -> Int))))))))
(undefined::([] Int) -> [] Int)
\a -> seq a (map (seq a (undefined::Bool -> (([] Int) -> ([] Int) -> [] ([] Int)) -> Int) (id (seq a (\b -> b) (seq a (seq a (undefined::Bool)))))) (seq a (seq a (seq a (\b -> tail (undefined::[] (([] Int) -> ([] Int) -> [] ([] Int))))) (case1 (seq a (undefined::Int -> ([] Int) -> Bool)) (seq a False) (seq a a)))))
tail
(undefined::([] Int) -> [] Int)
(undefined::Int -> Bool -> Bool -> ([] Int) -> [] Int) ((+) 2 (undefined::Int)) ((\a -> seq a (a True)) (\a -> a)) (id (id (undefined::(([] Int) -> Int -> Int -> [] Int) -> Bool)) (\a -> seq a ((\b -> seq b (seq b (undefined::Int -> Int -> [] Int))) (seq a (seq a (seq a ([]::[] ([] Bool))))))))
id
(:) ((\a -> seq a (seq a (seq a (\b -> seq a (seq a (seq b (undefined::Int))))))) (\a -> seq a (id even (id 0))) ((undefined::Int -> Int -> ([] Int) -> Int) ((\a -> a) (id (undefined::Int)))))
(\a -> \b -> (\c -> seq c (\d -> seq b d)) (a ([]::[] Int) (undefined::[] Int))) (\a -> case1 (seq a (seq a (undefined::Int -> ([] Int) -> [] Bool))) (seq a (seq a (undefined::[] Bool)))) (((==)::Int -> Int -> Bool) ((+) 0 (undefined::Int)) ((\a -> seq a 2) (head ([]::[] ([] (Int -> [] Int))))))
(\a -> seq a (seq a (seq a ((\b -> (\c -> \d -> seq c d) (seq a (seq b 2))) (\b -> (!!) (undefined::[] (Int -> [] Int)) (seq b b)))))) ((\a -> \b -> (\c -> seq c c) (seq a (seq b (seq a (undefined::Bool))))) (id (\a -> head (undefined::[] (([] Int) -> ([] Bool) -> Bool)) (undefined::[] Int))))
\a -> seq a (seq a a)
id
tail
(\a -> seq a (seq a (\b -> \c -> id) (head ([]::[] Bool)))) (\a -> \b -> seq a (id (undefined::([] Bool) -> Bool)) (seq b (head ([]::[] ([] Bool))))) ((+1) ((undefined::(Int -> Bool) -> Int) (\a -> not False)))
(\a -> \b -> seq a ((\c -> seq b (seq b (\d -> seq c b) (seq c (seq b 2)))) (seq b (undefined::([] (Int -> ([] Int) -> Bool)) -> [] ([] Bool))))) ((\a -> map (\b -> seq a (undefined::Int -> Int)) (seq a (seq a (undefined::[] Bool)))) ((\a -> seq a False) ([]::[] Bool)))
(\a -> case1 (undefined::([] Int) -> ([] ([] Int)) -> ([] Int) -> [] Int) (seq a (undefined::([] Bool) -> ([] Int) -> [] Int) (seq a (undefined::[] Bool))) ([]::[] ([] Int))) ((\a -> seq a (\b -> \c -> (\d -> seq d (\e -> e)) ((!!) (undefined::[] Bool)))) (case1 (undefined::Int -> ([] Int) -> Int) 1 (undefined::[] Int)))
\a -> take (seq a (\b -> \c -> b (undefined::Int -> [] Bool)) (seq a (seq a (seq a (undefined::(Int -> [] Bool) -> Int)))) ((\b -> head (seq b a)) head)) a
tail
(undefined::(([] (Int -> [] ([] Bool))) -> [] (Int -> [] ([] Bool))) -> ([] Int) -> [] Int) (\a -> (\b -> (:) (seq a (seq a (undefined::Int -> [] ([] Bool)))) (seq b (seq b ([]::[] (Int -> [] ([] Bool)))))) ((||) False (undefined::Bool)))
\a -> a
(:) ((\a -> case1 (id (undefined::(Bool -> Bool) -> ([] (Bool -> Bool)) -> Int)) (seq a (undefined::Bool -> Int) (seq a (undefined::Bool))) ((undefined::(([] Int) -> Bool) -> [] (Bool -> Bool)) (\b -> seq a (undefined::Bool)))) (\a -> (undefined::(Int -> Int -> Bool) -> [] (([] ([] ([] Bool))) -> [] ([] Bool))) ((!!) (undefined::[] (Int -> Int -> Bool)) ((+1) (undefined::Int)))))
\a -> a
take ((\a -> id (seq a (seq a (id (\b -> a))))) ((\a -> seq a 2) (\a -> seq a (id ((==)::Int -> Int -> Bool)))) (\a -> (!!) (undefined::[] ([] (Int -> Int))) (seq a (undefined::Int))))
(++) (map ((\a -> seq a (seq a (undefined::Int -> Bool -> Int))) (id True) (id (\a -> (undefined::Int)) ([]::[] ([] ([] (Int -> Int)))))) ((\a -> seq a (\b -> seq a (undefined::[] Bool))) ((+1) (undefined::Int)) (undefined::([] ([] Int)) -> [] Int)))
(\a -> seq a (\b -> b)) ((undefined::Bool -> (([] ([] Bool)) -> [] ([] Bool)) -> Bool) (undefined::Bool) (\a -> seq a (id (seq a (undefined::([] Int) -> [] ([] Bool))) (id (seq a ([]::[] Int))))))
\a -> seq a (seq a (seq a (head (case1 (\b -> \c -> seq c ([]::[] (Int -> [] Int))) (seq a (undefined::[] (Int -> [] Int))) (id (undefined::[] Int)))))) (id ((+) (head (seq a a)) ((\b -> seq a (seq b (undefined::Int))) (id (\b -> ([]::[] (Int -> Int)))))))
\a -> a
\a -> map (\b -> head (undefined::[] (Bool -> ([] ([] ([] Bool))) -> Int)) (seq a (seq b (seq a False))) (id (undefined::Int -> [] ([] ([] Bool))) (seq a (seq a (seq a (undefined::Int)))))) (seq a (tail (seq a (seq a ([]::[] (([] ([] ([] (Int -> Int -> Bool)))) -> [] ([] ([] (Int -> Int -> Bool)))))))))
\a -> a
\a -> seq a (seq a (undefined::[] Int))
\a -> seq a (seq a (\b -> id (\c -> (undefined::[] Int))) ((\b -> id (seq b 0)) (seq a id))) (\b -> seq a (\c -> seq a (seq a (\d -> seq c (undefined::Bool -> [] Bool) (c b False False)))) (seq b (head (head ([]::[] ([] (([] Int) -> Bool -> Bool -> Bool)))))))
(\a -> (\b -> \c -> seq b (seq c (\d -> c)) (seq b (seq c ([]::[] ([] ([] (Int -> Int))))))) (seq a ((!!) (undefined::[] (([] Int) -> [] Bool)) (head (undefined::[] Int))))) (\a -> id (\b -> tail (seq a (head (undefined::[] ([] (Int -> Int)))))) (\b -> \c -> seq b (\d -> b) (seq c True)))
take ((\a -> id ((\b -> seq b (seq b (undefined::Bool -> Int)) (b (undefined::[] Int) (undefined::Bool))) (\b -> seq a (\c -> \d -> False) ([]::[] ([] ([] ([] Bool))))))) (tail ((\a -> seq a (\b -> seq b (undefined::[] (Int -> Int))) (seq a ([]::[] ([] Int)))) ((\a -> seq a 0) (undefined::[] Bool)))))
(undefined::([] Int) -> [] Int)
(++) (map (\a -> seq a (seq a ((\b -> seq b (seq b (seq a (seq a (seq a (undefined::Int)))))) (seq a (\b -> seq a (undefined::Bool -> [] (Bool -> Bool)) (seq b (undefined::Bool))))))) ((undefined::(Int -> Bool -> Bool) -> [] (([] ([] Int)) -> [] ([] ([] Int)))) ((!!) ([]::[] (Int -> Bool -> Bool)) (undefined::Int))))
\a -> a
tail
\a -> seq a ((undefined::(([] ([] Int)) -> [] Int) -> [] Int) ((\b -> \c -> map (seq b (seq b head)) (undefined::[] ([] Int))) ((undefined::(Int -> Int) -> ([] ([] Int)) -> [] ([] Bool)) (seq a (seq a (\b -> b))))))
id
tail
\a -> (:) ((\b -> seq b b) ((\b -> b) ((!!) ([]::[] Int) (undefined::Int)))) ([]::[] Int)
(undefined::(([] ([] ([] (Int -> [] Int)))) -> [] (Int -> [] Int)) -> ([] Int) -> [] Int) (\a -> seq a (map ((!!) ([]::[] (([] Int) -> Int -> [] Int)) (seq a (undefined::Int))) (map head (seq a ([]::[] ([] ([] Int)))))))
filter ((!!) (map (\a -> seq a (seq a ((\b -> seq a (id (seq b False))) (seq a (id (undefined::Int)))))) (map ((\a -> \b -> seq a (undefined::[] (([] Int) -> [] Int))) (undefined::Bool)) ((\a -> seq a (seq a ([]::[] Bool))) (undefined::Bool)))))
id
\a -> (undefined::(([] Int) -> [] (Int -> [] Int)) -> [] Int) (case1 (\b -> seq b (\c -> id (undefined::Bool -> [] (Int -> [] Int)) (seq a (seq c (undefined::Bool))))) ((\b -> seq b ([]::[] (Int -> [] Int))) (seq a (not False))))
id (head (tail ([]::[] (([] (([] Int) -> [] Int)) -> ([] Int) -> [] Int)))) ([]::[] (([] Int) -> [] Int))
(\a -> (!!) (seq a (seq a (seq a (undefined::Bool -> [] (([] Int) -> [] Int))) a)) (seq a (seq a (undefined::(Int -> Bool -> Bool) -> Int)) (seq a ((!!) ([]::[] (Bool -> Bool)))))) ((\a -> seq a (\b -> seq a (seq b True)) (take 1 (undefined::[] Bool))) ((undefined::Bool -> ([] ([] Int)) -> [] ([] Bool)) False))
tail
id (\a -> a)
\a -> (undefined::(([] ([] Int)) -> [] ([] (([] Int) -> ([] Int) -> [] ([] Int)))) -> [] Int) (\b -> (undefined::[] ([] (([] Int) -> ([] Int) -> [] ([] Int)))))
\a -> ([]::[] Int)
(undefined::(([] Int) -> [] Bool) -> ([] Int) -> [] Int) ((\a -> (undefined::Int -> ([] Int) -> [] Bool) (head (seq a (undefined::[] Int)))) id)
\a -> map (seq a (id (seq a (seq a (\b -> b (\c -> tail (seq a (seq b (undefined::[] ([] (([] (Bool -> Bool)) -> Bool -> Bool))))))))))) ([]::[] ((([] Int) -> [] ([] (([] (Bool -> Bool)) -> Bool -> Bool))) -> Int))
case1 (\a -> \b -> \c -> (undefined::[] Int)) tail (id (\a -> seq a (seq a (undefined::[] ([] (Int -> Int))))) (undefined::[] ([] Int)))
id
\a -> seq a ((\b -> \c -> seq b a) (seq a (case1 (\b -> (undefined::([] Int) -> Bool)) (seq a (undefined::Bool)) a))) id
\a -> ([]::[] Int)
(\a -> \b -> (undefined::(([] Int) -> Int -> Bool) -> [] Int) (seq b ((\c -> \d -> \e -> seq c c) (not (seq a False))))) (undefined::([] ([] ([] (Int -> Bool)))) -> [] (Int -> ([] ([] Int)) -> [] ([] (Int -> Bool))))
\a -> a
(\a -> seq a (seq a (seq a (\b -> case1 (undefined::Int -> ([] Int) -> [] Int) (undefined::[] Int))))) ((\a -> seq a (seq a a)) (head (undefined::[] Int))) (\a -> seq a ((undefined::Bool -> [] Bool) (seq a (undefined::Bool))))
id (\a -> head (seq a (undefined::[] ((([] Int) -> [] Bool) -> ([] Int) -> [] Int))) (seq a (\b -> a (undefined::[] ([] (Int -> [] Int)))) (undefined::Bool))) (undefined::([] ([] (Int -> [] Int))) -> ([] Int) -> [] Bool)
(undefined::(Int -> Bool) -> (Bool -> Bool -> Bool) -> ([] Int) -> [] Int) (case1 (\a -> (!!)) even (undefined::[] Bool)) (\a -> seq a (seq a (seq a (undefined::(([] Int) -> [] ([] Bool)) -> Bool -> Bool) (\b -> seq a (\c -> seq c ([]::[] ([] Bool))) (seq b a)))))
(undefined::([] (([] Int) -> [] Int)) -> ([] Int) -> [] Int) (id (\a -> (!!) (seq a ([]::[] ([] (([] Int) -> [] Int)))) (seq a 2)) ((\a -> seq a (tail ([]::[] (Bool -> Bool)))) (\a -> \b -> seq b (seq a (undefined::[] Bool)))))
(\a -> \b -> tail (map (\c -> seq c (seq b (undefined::Bool -> Int) (seq c True))) ((\c -> seq b (seq c ([]::[] ([] (Int -> Bool))))) (seq b (seq a (undefined::Bool)))))) (id ((\a -> seq a (seq a (undefined::[] (([] (([] Int) -> Int -> Int)) -> Int -> Int)))) (undefined::Int)))
(undefined::([] ([] (Int -> Bool))) -> ([] Int) -> [] Int) ((undefined::Int -> [] ([] (Int -> Bool))) ((\a -> seq a (seq a (seq a 0))) (\a -> seq a (id (undefined::[] (Bool -> Bool))))))
\a -> map (\b -> (undefined::Bool -> (([] ([] Int)) -> [] ([] Bool)) -> Int) b (\c -> (\d -> seq d ([]::[] ([] Bool))) b)) (map (seq a (\b -> \c -> True) (seq a (seq a (undefined::Int)))) (seq a ([]::[] Int)))
\a -> a
\a -> (\b -> seq a ((!!) (head ([]::[] ([] (Bool -> [] Int)))) (seq b (seq b (undefined::Int)))) (seq b (seq b (\c -> b ([]::[] (Int -> Int)) (undefined::Int) 0) (head ([]::[] (([] Int) -> Int)))))) (\b -> seq a (seq b (seq a (\c -> \d -> seq a (((==)::[Int] -> [Int] -> Bool) a a)))))
(undefined::(([] ([] (Int -> ([] Int) -> Bool))) -> [] ([] (Int -> ([] Int) -> Bool))) -> ([] Int) -> [] Int) (\a -> a)
(undefined::(([] (([] ([] Bool)) -> [] ([] Bool))) -> ([] Int) -> [] Bool) -> ([] Int) -> [] Int) ((\a -> \b -> (undefined::Bool -> ([] Int) -> [] Bool) a) True)
\a -> a
\a -> a
head (tail ([]::[] (([] (([] (([] ([] Int)) -> [] Bool)) -> Int -> Bool)) -> ([] Int) -> [] Int))) ((\a -> seq a (tail (undefined::[] (([] (([] ([] Int)) -> [] Bool)) -> Int -> Bool)))) (((==)::[Int] -> [Int] -> Bool) ([]::[] Int) (head ([]::[] ([] Int)))))
\a -> case1 (seq a (\b -> \c -> \d -> a) (\b -> b)) ((\b -> seq a (seq a (seq b (seq b a)))) (seq a (seq a (not False)))) (case1 (\b -> \c -> ([]::[] Bool)) (id (undefined::[] Bool)) a)
head (id ((\a -> seq a ((:) (\b -> b) ([]::[] (([] Int) -> [] Int)))) ((\a -> ((==)::[Int] -> [Int] -> Bool) (seq a ([]::[] Int)) (seq a (seq a (undefined::[] Int)))) ((+) ((+1) 0) 0))))
\a -> seq a a
\a -> seq a (\b -> id a) (\b -> seq a (seq a (seq a (seq a (seq a (seq a (seq a (seq b (undefined::[] (([] (Int -> Int -> Int)) -> [] (Int -> Int -> Int)))))))))))
(\a -> seq a ((undefined::Bool -> Int -> ([] Int) -> [] Int) (seq a (seq a (undefined::Bool)))) (a (\b -> (:) (seq b (seq a (undefined::[] Bool))) ([]::[] ([] Bool))))) (undefined::(([] (Int -> Int -> Int)) -> [] ([] Bool)) -> Int)
\a -> a
id (\a -> id (seq a (seq a (\b -> a))) (seq a (\b -> seq a (undefined::([] Int) -> [] ([] ([] Bool)))) (seq a (case1 (\b -> (undefined::([] Bool) -> ([] Int) -> Bool)) (\b -> True) (undefined::[] Bool)))))
\a -> (undefined::([] Bool) -> Int -> Bool -> [] Int) (seq a (seq a (seq a (undefined::[] Bool)))) (undefined::Int) (seq a (seq a (\b -> seq b (\c -> seq a (undefined::Bool)) a)) (\b -> seq b (undefined::[] Int)))
\a -> a
(\a -> \b -> seq a (\c -> ([]::[] Int))) (map (\a -> \b -> b) (tail (undefined::[] (([] Int) -> Int)))) ((\a -> a) ((!!) ([]::[] Int) ((+1) 1)))
id (\a -> id (\b -> seq b (\c -> c)) (undefined::([] Int) -> [] ([] Int))) (\a -> head (undefined::[] (Int -> [] (([] ([] Int)) -> [] Int))) 0)
filter ((undefined::Int -> Int -> Int -> Int -> Bool) (undefined::Int) ((+1) 1) (undefined::Int))
case1 ((\a -> seq a (\b -> \c -> seq c (undefined::([] Int) -> [] Int)) (seq a (head (undefined::[] ([] Int))))) ((+) 1 1)) ((\a -> seq a (\b -> seq b (undefined::[] Int)) (seq a (seq a (seq a 0)))) ((undefined::([] ([] (Int -> Bool))) -> Bool -> Bool) (tail (undefined::[] ([] (Int -> Bool))))))
head (head (tail ([]::[] ([] ((([] Int) -> [] ([] ([] (Bool -> Bool)))) -> ([] Int) -> [] Int))))) (\a -> seq a (map (seq a (seq a (undefined::(([] Int) -> Int -> Bool) -> [] ([] (Bool -> Bool))))) (seq a (seq a ((\b -> seq b (undefined::[] (([] Int) -> Int -> Bool))) (seq a (undefined::Bool)))))))
(\a -> seq a (\b -> filter ((undefined::Bool -> Int -> Bool) (seq a (undefined::Bool))))) ([]::[] ([] Int)) (\a -> (!!) ([]::[] Int))
(\a -> seq a (seq a (seq a (\b -> \c -> (\d -> seq d c) (undefined::[] Bool)))) (seq a (\b -> seq b (\c -> \d -> seq c (undefined::Bool)) ((+1) (seq a 1))))) (head ([]::[] (Int -> ([] (([] Int) -> Int)) -> [] (Int -> [] Int))) ((undefined::Int -> Int) ((-) 0 (undefined::Int))))
(\a -> filter (((==)::Int -> Int -> Bool) a)) (undefined::Int)
\a -> a
(!!) ((\a -> seq a (seq a ([]::[] (Int -> ([] Int) -> [] Int)))) (undefined::Int)) ((\a -> seq a a) ((+1) (undefined::Int))) 1
\a -> a
id
case1 ((\a -> seq a (\b -> \c -> \d -> d)) (undefined::Bool) ((\a -> a) (((==)::Int -> Int -> Bool) 2 1))) (undefined::[] Int)
\a -> (undefined::[] Int)
(\a -> seq a (\b -> id)) (undefined::Bool) (\a -> seq a (map (\b -> case1 (undefined::Bool -> ([] Bool) -> Int) 2 (undefined::[] Bool)) (seq a (seq a (seq a (seq a ([]::[] (([] ([] ([] ([] Bool)))) -> Int -> Bool))))))))
\a -> seq a (seq a (\b -> seq a (seq b (seq b (\c -> a))) (seq b ((undefined::(Bool -> ([] Bool) -> Bool) -> [] ([] Int)) (seq b (seq a (undefined::Bool -> ([] Bool) -> Bool))))))) ((\b -> seq b (\c -> (undefined::([] ([] (Int -> [] Int))) -> Int -> Int))) ((!!) (undefined::[] (([] ([] ([] ([] Int)))) -> Int)) 2 (seq a (id (undefined::[] ([] ([] ([] Int))))))))
(:) ((undefined::(([] (([] Int) -> ([] Int) -> [] Bool)) -> [] (([] (([] Int) -> Bool)) -> [] (([] Int) -> Bool))) -> Int) (\a -> ([]::[] (([] (([] Int) -> Bool)) -> [] (([] Int) -> Bool)))))
\a -> a
(:) ((\a -> (\b -> id (\c -> b)) (seq a (seq a (seq a 2))) ((undefined::(Int -> Bool) -> ([] Int) -> [] (Int -> Bool)) (seq a (\b -> seq a (seq b False))))) (\a -> seq a (undefined::(Int -> ([] Int) -> Bool) -> ([] Int) -> Int -> ([] Int) -> Bool)))
\a -> seq a a
\a -> (undefined::(([] (([] (Int -> Int)) -> Int -> Int)) -> ([] (Int -> Int)) -> Int -> Int) -> [] Int) (seq a (head (seq a (seq a (seq a (undefined::[] (([] (([] (Int -> Int)) -> Int -> Int)) -> ([] (Int -> Int)) -> Int -> Int)))))))
\a -> seq a a
take ((undefined::Bool -> Bool -> Int) ((undefined::([] (([] ([] Bool)) -> [] ([] Bool))) -> Bool) (take (undefined::Int) ([]::[] (([] ([] Bool)) -> [] ([] Bool))))) (head (tail (undefined::[] ((([] Int) -> ([] Int) -> Bool) -> Bool))) ((\a -> seq a (undefined::([] Int) -> ([] Int) -> Bool)) (take 0 ([]::[] Bool)))))
(!!) ([]::[] ((Bool -> Bool -> Bool) -> ([] Int) -> [] Int)) ((\a -> a) ((+1) (undefined::Int))) (\a -> \b -> seq a (seq a (seq a (head ([]::[] ((([] (([] Int) -> Int -> Bool)) -> Bool) -> Bool)) (\c -> seq c b)))))
\a -> head ((\b -> \c -> seq a (seq b (\d -> ([]::[] ([] Int)))) b) (even (seq a (seq a (\b -> (undefined::Int)) (\b -> seq a ([]::[] ([] Bool)))))) (head (seq a (seq a ([]::[] (([] (([] Int) -> Int)) -> [] Bool))))))
(\a -> \b -> id (seq b (undefined::Bool -> [] Int)) (seq a a)) ((\a -> \b -> seq a b) ((++) (undefined::[] ([] Bool)) (undefined::[] ([] Bool))) False)
\a -> ([]::[] Int)
\a -> (undefined::Bool -> ([] (([] ([] ([] ([] Bool)))) -> Bool)) -> [] Int) ((undefined::(([] Int) -> Bool -> Bool) -> Bool) (\b -> seq b (seq b (\c -> (undefined::Bool))))) ((\b -> seq b ((++) (seq b (seq a ([]::[] (([] ([] ([] ([] Bool)))) -> Bool)))) (seq a (seq a ([]::[] (([] ([] ([] ([] Bool)))) -> Bool)))))) (seq a 2))
(++) (map (\a -> (!!) ((:) (seq a 2) (seq a (undefined::[] Int))) (seq a 0)) (map (case1 (undefined::Bool -> ([] Bool) -> Int -> Bool) even (undefined::[] Bool)) ((:) (undefined::Int) (undefined::[] Int))))
case1 (\a -> (undefined::([] (Int -> Int)) -> ([] Int) -> [] Int)) (\a -> a) ([]::[] (Int -> Int))
\a -> a
\a -> seq a (\b -> \c -> a) ((\b -> b (undefined::Int) False) (\b -> \c -> c)) (\b -> (+) b)
case1 (\a -> case1 (\b -> \c -> \d -> d) (\b -> b)) ((++) ([]::[] Int)) (take 0 ((\a -> seq a ([]::[] Bool)) 0))
(\a -> (\b -> \c -> (undefined::([] ([] (Bool -> Bool))) -> [] Int) (seq b ([]::[] ([] (Bool -> Bool))))) (seq a (\b -> \c -> c) (id (seq a (undefined::Int))))) (undefined::(([] ([] Bool)) -> [] Bool) -> ([] Int) -> ([] Bool) -> [] Bool)
(\a -> seq a (\b -> ([]::[] Int))) ((\a -> \b -> seq b (\c -> seq a (undefined::[] Int)) (id (seq a True))) (undefined::Int -> Bool -> Bool))
(undefined::([] Int) -> [] Int)
(\a -> id (\b -> (undefined::([] Int) -> [] Int)) (seq a ((\b -> seq b (seq b 2)) (seq a (seq a (seq a ([]::[] ([] Bool)))))))) (undefined::([] (([] Bool) -> [] Bool)) -> Int -> Int -> Int)
id
(!!) (undefined::[] (Bool -> ([] Int) -> [] Int)) ((\a -> seq a ((+1) (undefined::Int))) (\a -> a)) ((\a -> seq a (undefined::Bool)) ((+) 1 ((+1) 0)))
head ([]::[] ((([] ([] (Int -> [] Int))) -> [] ([] (Int -> [] Int))) -> ([] Int) -> [] Int)) id
tail
\a -> seq a a
\a -> (!!) (id (seq a (\b -> seq a (seq a (undefined::Int -> [] ([] Int))) (seq a (seq a (undefined::Int)))) (seq a (map (\b -> (undefined::Int -> ([] Int) -> Int)) (seq a a))))) (seq a (seq a (\b -> seq a (seq a (undefined::Bool -> Int) (seq a False)))) (\b -> seq b (seq a (\c -> ([]::[] (Bool -> Bool)))) (head (undefined::[] Int))))
id
(\a -> seq a filter (((==)::Int -> Int -> Bool) (seq a (seq a (seq a (undefined::Int)))))) (\a -> a ((undefined::Bool -> [] Int) (even 2)) (a (undefined::[] Int) True (undefined::Bool)) (seq a (seq a (seq a (seq a False)))))
(undefined::(([] Int) -> ([] (([] (Int -> Int)) -> [] (Int -> Int))) -> Bool -> Bool) -> ([] Int) -> [] Int) (\a -> \b -> (undefined::([] ([] (Int -> Bool))) -> Bool -> Bool) (seq b ((\c -> seq c ([]::[] ([] (Int -> Bool)))) (id (seq a ([]::[] Bool))))))
case1 (undefined::Bool -> ([] Bool) -> ([] Int) -> [] Int) (\a -> (undefined::Bool -> [] Int) (seq a False)) ((\a -> \b -> seq a (undefined::[] Bool)) (even 0) (tail (head ([]::[] ([] (Int -> Bool))))))
id
(\a -> \b -> \c -> map (\d -> seq a d) (seq a c)) ((\a -> seq a (seq a (seq a ([]::[] ([] Int))))) (undefined::[] Int)) (head ([]::[] ((([] ([] Int)) -> [] ([] (Int -> Int))) -> Int)) (head (undefined::[] (([] ([] Int)) -> [] ([] (Int -> Int))))))
tail
\a -> (\b -> (\c -> seq c (\d -> a)) (seq b (id (undefined::[] ([] (Bool -> Bool))))) ((!!) ([]::[] (([] Bool) -> Int)) (undefined::Int) (seq b (seq b (seq a ([]::[] Bool)))))) (\b -> \c -> seq b (seq a ((undefined::Bool -> Bool) (even (seq a (head a))))))
\a -> (enumFromTo::Int -> Int -> [Int]) (seq a (seq a ((\b -> (+) (seq b (undefined::Int)) (seq b 1)) (seq a (seq a (seq a (seq a (seq a ([]::[] (([] Int) -> ([] Int) -> [] Int)))))))))) ((\b -> (!!) a (seq b (undefined::Int))) (case1 (undefined::Bool -> ([] Bool) -> ([] Int) -> Bool) (seq a (undefined::([] Int) -> Bool)) (seq a (undefined::[] Bool))))
(\a -> \b -> seq a (undefined::[] Int)) (id (head (tail ([]::[] ([] (([] (([] (Bool -> Bool)) -> [] (Bool -> Bool))) -> ([] Int) -> Bool))))))
filter ((\a -> seq a (seq a (\b -> \c -> seq c (seq b (seq b False)))) (map (\b -> False))) (case1 (\a -> \b -> False) ((\a -> seq a True) (undefined::[] Int)) ((\a -> seq a (undefined::[] Bool)) 0)))
\a -> seq a (\b -> a) (undefined::Int -> ([] (Int -> Bool)) -> Int -> Bool)
\a -> seq a (seq a (\b -> (undefined::([] Bool) -> Bool -> [] Int) (tail (seq a ([]::[] Bool))) ((\c -> seq c (c ([]::[] Bool))) (head ([]::[] (([] Bool) -> Bool)))))) (id ([]::[] (([] (([] ([] Bool)) -> [] Bool)) -> [] (([] ([] Bool)) -> [] Bool))))
(undefined::([] Int) -> [] Int)
\a -> head (id (seq a (seq a (seq a (seq a (seq a (seq a (undefined::[] ((([] Int) -> ([] ([] Int)) -> Int -> [] Int) -> [] Int))))))))) (seq a (seq a (id (seq a (seq a ((\b -> seq a (\c -> seq c (seq b (seq c (undefined::([] ([] Int)) -> Int -> [] Int))))) (((==)::Int -> Int -> Bool) (undefined::Int) ((+1) 2))))))))
\a -> a
\a -> head (seq a (seq a (head (map (\b -> seq b (undefined::Bool -> Int -> [] ([] Int)) (seq a (seq b True))) ((\b -> seq b (undefined::[] ([] ([] Bool)))) (undefined::Bool))) (undefined::Int))))
case1 ((\a -> seq a ((\b -> seq b (\c -> id)) (undefined::[] Bool))) ((\a -> seq a (head (undefined::[] ([] ([] Int))))) ((!!) (undefined::[] Int) 2))) ((!!) ((\a -> seq a (seq a ([]::[] ([] Int)))) (undefined::Int)) ((\a -> (+1) (seq a (undefined::Int))) (\a -> seq a (\b -> b))))
\a -> seq a (filter (case1 (\b -> seq b (\c -> \d -> seq b b)) (seq a (undefined::Int -> Int -> Bool) (seq a 0)) (seq a ([]::[] Bool))) a)
(\a -> (:) ((!!) (id ([]::[] (Bool -> Int))) (seq a (seq a 1)) (seq a (seq a (((==)::[Int] -> [Int] -> Bool) (seq a (undefined::[] Int)) (seq a ([]::[] Int))))))) (\a -> seq a (\b -> seq a (seq b ([]::[] ([] (([] ([] Bool)) -> [] ([] Bool)))))))
(\a -> \b -> seq a (seq a (\c -> b)) (\c -> seq a (undefined::[] (Int -> [] (Bool -> Bool))))) ((\a -> (undefined::Int -> [] (([] (([] Bool) -> Bool)) -> Int)) (seq a a)) ((\a -> seq a (head ([]::[] Int))) ([]::[] Int)))
case1 (undefined::Int -> ([] Int) -> ([] Int) -> [] Int) (undefined::([] Int) -> [] Int) ((enumFromTo::Int -> Int -> [Int]) ((undefined::Bool -> Int) (undefined::Bool)) (id 2))
\a -> seq a (seq a (\b -> \c -> (undefined::Int -> [] Int) 0) ((!!) ([]::[] (([] Int) -> Int -> Bool)) 0) ((++) (seq a (seq a (head (undefined::[] (Bool -> [] Bool)) (not False)))) ((\b -> seq a (seq b ([]::[] Bool))) (head ([]::[] (([] Bool) -> Bool))))))
\a -> a
\a -> seq a (id (\b -> (\c -> (undefined::Bool -> [] Int) (seq c True)) (seq a (undefined::Bool -> ([] Int) -> Bool -> Bool) (seq a (not (undefined::Bool)))))) (seq a (seq a (undefined::([] Int) -> ([] Int) -> [] (([] ([] Bool)) -> [] ([] Bool)))))
\a -> a
\a -> a
(\a -> \b -> seq a (seq a (undefined::[] Int))) ((undefined::(([] Int) -> Bool) -> ([] Int) -> Int -> Int -> [] Int) (\a -> False))
\a -> ([]::[] Int)
(undefined::([] Int) -> [] Int)
id
id
\a -> a
case1 ((\a -> seq a (seq a (\b -> \c -> seq c (id (seq b ([]::[] Int)))))) (\a -> id (\b -> 1) (\b -> seq b (seq b (undefined::[] Bool))))) (filter (\a -> head ([]::[] (Bool -> Bool)) (even 2)) ([]::[] Int))
\a -> seq a (map (\b -> seq b ((\c -> seq a (seq c (\d -> 1) (seq a b))) (undefined::([] Int) -> Int -> Bool))) ((undefined::Bool -> ([] (([] Int) -> [] Int)) -> [] Bool) False (seq a (seq a (\b -> (undefined::[] (([] Int) -> [] Int))) (undefined::[] Int)))))
take (head (map (\a -> seq a (seq a (undefined::Int -> Int -> Int) (seq a 2))) (undefined::[] ([] (Int -> Bool -> Bool -> Bool)))) ((!!) ((\a -> seq a (seq a (undefined::[] Int))) (head (undefined::[] Int))) ((!!) (undefined::[] Int) (undefined::Int))))
take ((\a -> seq a (undefined::(Int -> Int -> [] Int) -> Int) ((!!) (tail (undefined::[] (Int -> Int -> [] Int))) (head (undefined::[] Int)))) ((:) ((\a -> (undefined::([] Bool) -> Int -> Bool) (seq a (a ([]::[] Bool)))) (head ([]::[] (Bool -> ([] Bool) -> [] Bool)) (head ([]::[] Bool))))))
(\a -> seq a (seq a (seq a (\b -> \c -> seq c c)))) ((\a -> seq a (undefined::Int)) ((:) False (undefined::[] Bool))) (\a -> id (map (undefined::(Int -> Int -> Bool) -> Bool) (seq a ((!!) (seq a ([]::[] ([] (Int -> Int -> Bool)))) (undefined::Int)))))
id
\a -> seq a a
case1 (undefined::Bool -> ([] Bool) -> Bool -> ([] Int) -> [] Int) (\a -> seq a (seq a (\b -> b))) (tail (tail ([]::[] Bool))) ((\a -> case1 (seq a (undefined::Int -> ([] Int) -> Bool)) (seq a True) (undefined::[] Int)) (id (\a -> \b -> not (undefined::Bool))))
\a -> a
\a -> head (seq a (seq a ((!!) (seq a ([]::[] ([] ((([] Bool) -> [] (Bool -> Bool)) -> [] Int)))) (seq a (\b -> 1) (undefined::[] ([] (Int -> Bool))))))) (undefined::([] Bool) -> [] (Bool -> Bool))
(\a -> (!!) ([]::[] ((Int -> Bool) -> ([] Int) -> [] Int)) (head (undefined::[] Int)) (\b -> (!!) (a (seq b 1)) (seq b b))) ((\a -> seq a (\b -> \c -> ([]::[] Bool))) (undefined::Int) ((undefined::(Int -> Int -> [] Int) -> [] ([] Int)) (enumFromTo'::Int -> Int -> [Int])))
\a -> a
\a -> a
(undefined::([] Int) -> [] Int)
(undefined::Int -> Bool -> Int -> ([] Int) -> [] Int) (undefined::Int) (even (undefined::Int)) ((!!) ([]::[] (Bool -> Int -> Int)) 0 ((!!) ([]::[] Bool) (undefined::Int)) (undefined::Int))
\a -> map (seq a (\b -> id (seq a (-) (seq b 1))) (seq a (seq a (undefined::Bool -> ([] (Bool -> Bool)) -> Bool -> Bool) (even (seq a (undefined::Int)))))) a
\a -> a
tail
(undefined::Bool -> (([] (Int -> [] Bool)) -> Bool) -> ([] Int) -> [] Int) True (\a -> True)
head (undefined::[] ((([] Int) -> Int -> Int -> [] Int) -> ([] Int) -> [] Int)) (undefined::([] Int) -> Int -> Int -> [] Int)
\a -> (\b -> seq b ([]::[] Int)) (seq a (\b -> (-) (seq b (seq a 1)) (seq b 0)) (\b -> a))
\a -> (\b -> map (seq b (\c -> (\d -> seq d d) (seq c 1))) (seq a ((++) (seq b (undefined::[] Bool)) (seq a ([]::[] Bool))))) (seq a (seq a (seq a ((undefined::Bool -> Bool -> Int) (undefined::Bool) (seq a ((||) True) (not (seq a (undefined::Bool))))))))
(undefined::([] Int) -> [] Int)
head ((\a -> map (\b -> (\c -> seq b (seq c tail)) b) (map (\b -> seq b (undefined::[] Int)) (seq a ([]::[] Int)))) ((\a -> seq a (seq a (seq a even)) (seq a (seq a (seq a (undefined::Int))))) ((!!) ([]::[] (([] ([] ([] Bool))) -> [] ([] Bool))) 1)))
\a -> head (seq a (undefined::[] ((([] ([] ([] ([] (([] Int) -> Bool))))) -> [] ([] ([] (([] Int) -> Bool)))) -> [] Int))) (\b -> case1 (\c -> \d -> seq d (undefined::[] ([] ([] (([] Int) -> Bool))))) (seq b (seq b (head b))) (seq a (undefined::[] Int)))
\a -> a
\a -> a
\a -> a
(\a -> seq a (\b -> b)) ((!!) (undefined::[] (([] Int) -> ([] Int) -> [] (([] Int) -> Int -> [] Int))) ((\a -> seq a (seq a 0)) (undefined::[] Bool)))
(undefined::([] Int) -> [] Int)
(\a -> \b -> seq a ((undefined::Bool -> (([] Int) -> Int -> Int) -> [] Int) a) (\c -> seq c ((undefined::Bool -> Int -> Int) a))) ((undefined::Int -> Bool -> Bool) ((-) (undefined::Int) (undefined::Int)) ((undefined::Bool -> Bool) False))
(\a -> id (\b -> seq a (undefined::Bool -> ([] Int) -> [] Int)) (seq a (seq a (seq a (undefined::Bool)))) ((\b -> seq a (seq b (seq a True))) ((+) (undefined::Int) (undefined::Int)))) (undefined::([] ([] (([] Int) -> ([] ([] Int)) -> [] Bool))) -> [] ([] (Int -> [] Int)))
(undefined::Bool -> (([] Int) -> Bool -> Bool -> Bool) -> ([] Int) -> [] Int) (case1 (\a -> \b -> a) True (undefined::[] Bool)) (id (undefined::(Int -> Bool) -> ([] Int) -> Bool -> Bool -> Bool) (\a -> (\b -> id (seq b True)) (\b -> seq a (undefined::Int -> Bool))))
(:) ((!!) ([]::[] (([] (Int -> Int)) -> Int -> Int)) 0 ((!!) (undefined::[] ([] (Int -> Int))) 1) ((\a -> seq a ((+) (undefined::Int) (seq a (seq a (undefined::Int))))) (\a -> id (seq a (seq a (\b -> ([]::[] (([] Int) -> Bool))))))))
\a -> seq a a
\a -> seq a ((undefined::Bool -> (Int -> Bool -> Bool) -> [] Int) ((undefined::((([] ([] Bool)) -> [] Bool) -> Bool) -> Bool) (seq a (undefined::(([] ([] Bool)) -> [] Bool) -> Bool)))) ((\b -> (\c -> seq b (\d -> seq d c)) (undefined::Bool -> Bool)) (\b -> \c -> True))
\a -> a
\a -> a
(undefined::(([] Bool) -> [] (Bool -> Bool)) -> ([] Int) -> [] Int) (undefined::([] Bool) -> [] (Bool -> Bool))
(\a -> seq a (seq a (seq a (seq a (\b -> \c -> c))) ((undefined::(([] Int) -> ([] Int) -> [] Int) -> Int) (seq a (seq a (\b -> seq b tail)))))) (\a -> seq a (seq a (seq a (seq a (seq a (undefined::(Int -> Int -> Bool) -> [] (([] Int) -> Bool)))))) (undefined::Int -> Int -> Bool))
(undefined::(([] (Int -> Bool)) -> ([] (([] ([] Int)) -> [] ([] Int))) -> Bool) -> ([] Int) -> [] Int) (undefined::([] (Int -> Bool)) -> ([] (([] ([] Int)) -> [] ([] Int))) -> Bool)
tail
(!!) (head ([]::[] (Int -> [] (([] Int) -> [] Int))) (head ([]::[] (Int -> Int)) (head ([]::[] Int)))) ((\a -> seq a ((undefined::(Int -> [] Int) -> Int) (seq a (\b -> seq a ([]::[] Int))))) (head (undefined::[] ((([] Int) -> Bool -> Bool) -> Bool)) (\a -> \b -> seq a b)))
\a -> a
\a -> a
(\a -> \b -> seq a b) ((\a -> \b -> map (seq a (seq b (id (undefined::Int -> Bool))))) (odd ((+) (undefined::Int) 1)))
id
(\a -> seq a (\b -> \c -> c)) 2 (\a -> a)
\a -> a
take ((!!) (case1 (\a -> (undefined::([] Bool) -> [] (Int -> Int))) (undefined::[] (Int -> Int)) ([]::[] Bool)) 2 (id (undefined::(([] Int) -> Int -> Bool) -> Int) (undefined::([] Int) -> Int -> Bool)))
(!!) ([]::[] (Bool -> Bool -> ([] Int) -> [] Int)) 0 ((\a -> not (seq a (undefined::Bool))) (\a -> \b -> seq b b)) (undefined::Bool)
(\a -> seq a (\b -> \c -> tail ((\d -> seq d c) (b c (undefined::Int)))) ((\b -> seq a (seq b (seq a (undefined::([] Int) -> Int -> Int)))) (seq a (\b -> (undefined::Bool))))) ((\a -> seq a (undefined::([] (([] Int) -> Bool)) -> [] ([] Int)) (seq a (seq a (seq a ([]::[] (([] Int) -> Bool)))))) (tail ([]::[] (([] (([] Int) -> [] (Int -> Bool))) -> Bool))))
(++) (id (\a -> tail ((undefined::Bool -> ([] (Int -> Bool)) -> [] Int) (undefined::Bool) (head (undefined::[] (Int -> [] (Int -> Bool))) 1))) (head ((\a -> seq a (undefined::Bool -> [] Int) a) ((\a -> seq a (seq a (undefined::Bool))) (head (undefined::[] ([] ([] Int))))))))
(undefined::([] Bool) -> ((Bool -> Bool -> Bool) -> Bool) -> ([] Int) -> [] Int) ((undefined::Int -> [] Bool) 1) (id (\a -> a (a (undefined::Bool) True) (undefined::Bool)))
id
id (\a -> id) (\a -> seq a (\b -> b))
\a -> a
case1 (\a -> (undefined::([] ([] (Int -> Bool))) -> ([] Int) -> [] Int)) (\a -> map (seq a (seq a (\b -> seq b 2))) (seq a (id ([]::[] (Int -> Bool -> Bool -> Bool))))) ((\a -> seq a (\b -> ([]::[] ([] (Int -> Bool)))) (seq a (seq a ([]::[] ([] Int))))) (id (undefined::Bool -> Int -> ([] Int) -> Int) (not True)))
id
\a -> a
(:) 1
\a -> seq a (seq a ((!!) ((\b -> map (undefined::(Bool -> Bool -> Bool) -> [] Int) (seq b ([]::[] (Bool -> Bool -> Bool)))) (head (head (seq a (undefined::[] ([] ([] Int))))))) (seq a (\b -> seq a (undefined::Int)) (seq a ((\b -> seq b (seq a True)) (seq a (seq a (undefined::[] (Int -> Bool)))))))))
\a -> seq a (\b -> a) (id (\b -> \c -> seq c ((\d -> seq d (undefined::([] Int) -> [] Bool)) (undefined::Int))) ((undefined::(([] Bool) -> Bool) -> [] ([] (Bool -> Bool))) ((!!) ([]::[] (([] Bool) -> Bool)) (undefined::Int))))
tail
\a -> a
(:) ((\a -> a) 2)
(\a -> case1 ((\b -> \c -> seq b (\d -> b)) (tail (seq a (undefined::[] Int)))) (filter (\b -> (undefined::Bool)) (id ([]::[] Int)))) ((\a -> seq a (seq a (seq a (\b -> seq b (undefined::Int)) (seq a (undefined::[] Bool))))) (\a -> seq a (undefined::[] (Int -> [] Int))))
tail
(undefined::(([] (([] ([] Int)) -> [] Int)) -> Int -> Int -> Bool) -> ([] Int) -> [] Int) (\a -> (undefined::Int -> Int -> Bool))
id (\a -> \b -> seq b b) (\a -> seq a ((\b -> seq b a) (\b -> (!!) (seq b (seq b (undefined::[] ([] (([] Int) -> Bool))))) (undefined::Int))))
(:) (undefined::Int)
\a -> seq a (filter ((\b -> \c -> seq c ((||) (seq a (undefined::Bool)) (seq b False))) (seq a (head ([]::[] ((([] ([] Int)) -> [] Bool) -> ([] Int) -> Bool))))) a)
(\a -> \b -> (undefined::(([] (Bool -> Bool)) -> [] (Bool -> Bool)) -> [] Int) ((++) (seq b (\c -> seq b (undefined::[] (Bool -> Bool))) (seq a (seq a (undefined::[] Bool)))))) (\a -> seq a (seq a (\b -> seq a (seq a (undefined::Bool -> [] (Bool -> Bool)) (odd 1))) (seq a (undefined::Int))))
(undefined::([] Int) -> [] Int)
(\a -> \b -> \c -> seq a (case1 (undefined::Bool -> ([] Bool) -> [] Int) c ([]::[] Bool))) (undefined::(Int -> Int -> Int) -> Int) (id (\a -> \b -> (undefined::Int)) (undefined::Int) (\a -> case1 (\b -> (undefined::([] Bool) -> Bool -> Bool)) (seq a not) (seq a (undefined::[] Bool))))
(undefined::(([] (([] Int) -> [] Int)) -> ([] ([] Bool)) -> [] Bool) -> ([] Int) -> [] Int) (undefined::([] (([] Int) -> [] Int)) -> ([] ([] Bool)) -> [] Bool)
case1 (\a -> seq a (head (head (undefined::[] ([] (([] (Int -> [] Int)) -> ([] Int) -> [] Int)))))) id ((!!) ((\a -> seq a ([]::[] ([] (Int -> [] Int)))) (undefined::Int)) (head ([]::[] Int)))
(undefined::([] Int) -> [] Int)
id ((!!) (undefined::[] ((Int -> Bool -> Bool) -> ([] Int) -> [] Int))) ((+) ((+1) (undefined::Int)) 0) (\a -> \b -> seq b (seq b (seq a (undefined::(Int -> [] Int) -> Bool) (\c -> (\d -> seq d (seq b (undefined::[] Int))) ((!!) (undefined::[] Bool))))))
tail
(\a -> seq a (\b -> \c -> \d -> (undefined::[] Int)) (seq a (seq a (undefined::[] Bool))) (seq a (seq a (((==)::Int -> Int -> Bool) 1 (a ([]::[] Int) 2))))) (\a -> \b -> (undefined::(([] ([] Int)) -> [] ([] Bool)) -> Int) (\c -> case1 (\d -> (undefined::([] Bool) -> [] ([] Bool))) ([]::[] ([] Bool)) (undefined::[] Bool)))
case1 (\a -> \b -> (undefined::[] Int)) (case1 (\a -> \b -> head (seq a ([]::[] ([] Int)))) ((\a -> seq a ([]::[] Int)) True) (id (head ([]::[] ([] Int)))))
head (undefined::[] (([] ([] Int)) -> ([] Int) -> [] Int)) (undefined::[] ([] Int))
(\a -> seq a (seq a (seq a (seq a (seq a (\b -> seq b (:) (seq b 2))) (undefined::[] ([] (Int -> Int))))))) (\a -> seq a (\b -> head ((undefined::Int -> [] ([] (Int -> Int -> Bool))) (seq a (seq a (undefined::Int))))) ((\b -> id (seq b ([]::[] (([] Bool) -> [] Bool)))) (undefined::Bool)))
(\a -> (\b -> seq b (\c -> \d -> d)) True (seq a (seq a 1))) (\a -> \b -> even ((!!) a (seq b (seq b 1))))
case1 (id (head (id (undefined::[] (Bool -> ([] Bool) -> ([] Int) -> [] Int))))) (\a -> a) ((\a -> \b -> seq a ([]::[] Bool)) (undefined::Int) (\a -> (\b -> seq b ([]::[] Int)) a))
(!!) (id (map (\a -> seq a (\b -> tail (seq b (undefined::[] Int)))) (filter (undefined::(([] ([] Bool)) -> [] Bool) -> Bool) ([]::[] (([] ([] Bool)) -> [] Bool))))) (head (map (\a -> seq a (undefined::Bool -> Int)) ([]::[] ([] ([] Int)))) (id (\a -> True) (id False)))
(\a -> seq a ((\b -> \c -> map (seq b (undefined::([] Bool) -> Int)) (seq b ([]::[] ([] Bool)))) ((\b -> seq a (seq b (\c -> (undefined::[] ([] ([] Bool)))))) (id (seq a 1))))) ((!!) (undefined::[] (([] ([] Bool)) -> [] ([] (Bool -> Bool)))) (id (head (undefined::[] (Bool -> Int)) (undefined::Bool))))
\a -> a
head (head (tail (undefined::[] ([] ((([] (([] Int) -> Bool -> Bool)) -> Int -> Int) -> ([] Int) -> [] Int))))) ((\a -> seq a (seq a (seq a (\b -> \c -> seq b c)))) (head (map (undefined::([] Int) -> Bool) ([]::[] ([] Int)))))
\a -> (undefined::[] Int)
\a -> take (seq a ((+) (seq a ((+) 1 ((+1) 1))) ((\b -> seq a (seq b 0)) (seq a ([]::[] (([] Bool) -> Bool)))))) ([]::[] Int)
(\a -> seq a (\b -> (undefined::Bool -> ([] Int) -> [] Int) (id False))) 0 (map (id take) ((:) 2 (head (undefined::[] ([] Int)))))
tail
(!!) ([]::[] ((([] Int) -> [] (Bool -> Bool)) -> ([] Int) -> [] Int)) ((+) (undefined::Int) (id 2)) (id (\a -> (undefined::([] Int) -> [] (Bool -> Bool))) (\a -> seq a (seq a (\b -> seq b (undefined::Bool))) (\b -> seq b (id (undefined::[] Int)))))
(\a -> take (seq a (\b -> \c -> seq c b) (seq a (seq a 1)) (id (seq a (undefined::Int -> [] ([] Bool))) (undefined::Int)))) (\a -> \b -> seq b ((\c -> \d -> seq c (\e -> False)) (seq b (undefined::[] Bool))) ((!!) (undefined::[] (Bool -> Bool -> Int)) 2 True))
(!!) ((undefined::(([] ([] Bool)) -> [] ([] Bool)) -> [] (([] Int) -> [] Int)) (\a -> (undefined::([] Bool) -> [] ([] Bool)) (tail ([]::[] Bool)))) ((-) ((undefined::Int -> Int) ((+1) 2)) ((\a -> seq a 2) (even (undefined::Int))))
\a -> seq a a
id (case1 (undefined::Int -> ([] Int) -> ([] Int) -> [] Int) (\a -> a) ((\a -> seq a (tail (seq a ([]::[] Int)))) ((\a -> seq a id) (undefined::Bool))))
\a -> map ((undefined::([] (([] Int) -> Bool)) -> (([] Int) -> [] (Bool -> Bool)) -> Int) ((:) (\b -> seq a (seq b (undefined::Bool))) (seq a (seq a (undefined::[] (([] Int) -> Bool)))))) ((\b -> seq b ((\c -> seq c (seq b (undefined::[] (([] Int) -> [] (Bool -> Bool))))) ((+1) 1))) ((\b -> b) (seq a (seq a (seq a (undefined::Bool))))))
id ((\a -> \b -> tail (head (seq b (undefined::[] ((([] Int) -> Int -> Int) -> [] Int))) (case1 (\c -> \d -> (undefined::Int -> Int)) (\c -> seq a c)))) ((\a -> (\b -> seq b (\c -> \d -> (undefined::Bool))) (head (seq a (undefined::[] Int)))) head))
\a -> seq a a
\a -> (undefined::([] (Int -> ([] ([] ([] Bool))) -> [] ([] ([] Bool)))) -> [] Int) ([]::[] (Int -> ([] ([] ([] Bool))) -> [] ([] ([] Bool))))
id id
(\a -> \b -> seq a (\c -> c)) ((\a -> seq a (seq a 1)) (take 2 (undefined::[] ([] ([] Bool))))) ((undefined::Bool -> Int) (not (case1 (undefined::Bool -> ([] Bool) -> Bool) False ([]::[] Bool))))
id
\a -> tail a
\a -> a
\a -> map (seq a (\b -> seq a (undefined::Bool -> Bool -> Int)) ((+) (undefined::Int) (undefined::Int)) ((\b -> head (seq b (undefined::[] Bool))) (seq a (\b -> (undefined::[] (Int -> Bool)))))) (seq a (seq a (seq a (undefined::[] Bool))))
(undefined::Bool -> ([] Int) -> [] Int) (id (id (\a -> seq a (seq a (seq a (undefined::Bool))))) (undefined::([] ([] ([] ([] Int)))) -> [] Int))
(!!) (head ((++) ([]::[] ([] (Bool -> ([] Int) -> [] Int))) (undefined::[] ([] (Bool -> ([] Int) -> [] Int))))) ((+1) ((!!) ([]::[] Int) 2)) (undefined::Bool)
case1 (\a -> seq a (seq a (seq a (seq a (seq a (seq a (seq a (\b -> tail)))))))) (\a -> seq a (seq a (id (undefined::Bool -> [] Int))) (undefined::Bool)) (undefined::[] (Bool -> Bool))
\a -> (:) ((\b -> case1 (\c -> (undefined::([] Int) -> Int)) (seq a 2) (seq b ([]::[] Int))) ((\b -> even (seq b (undefined::Int))) odd)) a
(undefined::([] Int) -> [] Int)
\a -> a
id
(\a -> map (\b -> seq b (\c -> id b) ((\c -> seq b (seq a c)) (id False)))) (\a -> id (seq a (id (undefined::(([] Int) -> Int) -> Bool -> Bool -> Bool)) ((\b -> seq b (\c -> (undefined::Int))) (seq a (\b -> \c -> c)))))
\a -> a
(\a -> seq a (\b -> (enumFromTo'::Int -> Int -> [Int]) (seq b (\c -> seq c (undefined::Int)) (\c -> seq c ([]::[] Bool))) (seq a (seq b ((!!) b (undefined::Int)))))) ((\a -> (undefined::Bool -> [] (([] ([] Bool)) -> [] ([] Bool))) (seq a a)) ((\a -> seq a (undefined::Bool)) (\a -> (undefined::Int))))
\a -> (!!) (seq a (id (undefined::[] ((([] ([] ([] Int))) -> [] ([] Bool)) -> [] Int)))) ((undefined::([] (Int -> Bool)) -> Int) (seq a (seq a (undefined::[] (Int -> Bool))))) ((undefined::Bool -> ([] ([] ([] Int))) -> [] ([] Bool)) ((!!) (undefined::[] (Bool -> Bool)) (undefined::Int) (id (seq a True))))
\a -> a
\a -> map ((undefined::(([] Int) -> Bool -> Bool) -> (([] Int) -> [] ([] Bool)) -> Int) (\b -> id)) (seq a (id (map (\b -> seq b (seq b (undefined::([] Int) -> [] ([] Bool))))) (seq a ((\b -> seq b (seq a ([]::[] ([] (Int -> Bool))))) (+1)))))
id
head (undefined::[] (([] Int) -> [] Int))
\a -> (undefined::((([] Int) -> ([] Int) -> Bool) -> ([] Int) -> ([] Int) -> [] (Int -> Int)) -> [] Int) (head (head (seq a ([]::[] ([] ((([] Int) -> ([] Int) -> Bool) -> ([] Int) -> ([] Int) -> [] (Int -> Int)))))))
(undefined::([] Int) -> [] Int)
head ([]::[] (([] Int) -> [] Int))
\a -> map (head (undefined::[] ((([] ([] (([] (Bool -> Bool)) -> Bool -> Bool))) -> [] (Int -> ([] Int) -> Int)) -> Int))) (seq a (seq a (seq a (seq a ([]::[] (([] ([] (([] (Bool -> Bool)) -> Bool -> Bool))) -> [] (Int -> ([] Int) -> Int)))))))
id (\a -> id (\b -> \c -> seq b (seq c c)) head) ((!!) (undefined::[] (Bool -> ([] ([] Int)) -> [] ([] Bool))) ((+1) 1) ((\a -> seq a (seq a (seq a (undefined::Bool)))) (head ([]::[] Int))))
(++) ((\a -> (\b -> seq a (seq b (seq b ((\c -> seq c ([]::[] Int)) True)))) ((undefined::(([] Int) -> Int -> [] Int) -> Int) ((!!) ([]::[] (([] Int) -> Int -> [] Int)) 0))) (\a -> seq a ((undefined::([] (Bool -> Bool)) -> Int -> Int -> Int) (seq a ((undefined::Int -> [] (Bool -> Bool)) (seq a (undefined::Int)))))))
\a -> id a
\a -> take (undefined::Int) a
\a -> (:) 2 (seq a ((undefined::Int -> Int -> [] Int) (seq a (seq a (seq a 0)))) (seq a (seq a (seq a (seq a (seq a (seq a 1)))))))
\a -> (undefined::[] Int)
head (undefined::[] ((([] ([] (([] ([] Int)) -> [] ([] Bool)))) -> [] (Int -> Int)) -> ([] Int) -> [] Int)) (\a -> filter (\b -> False) (seq a (seq a (seq a (undefined::Bool -> [] (Int -> Int))) False)))
(\a -> seq a ((undefined::Bool -> Int -> ([] Int) -> [] Int) (undefined::Bool))) (undefined::Int -> ([] Int) -> Int) ((\a -> seq a (id (undefined::([] ([] (Int -> Int))) -> Int)) (seq a (tail (undefined::[] ([] (Int -> Int)))))) (\a -> head a))
\a -> a
case1 (\a -> \b -> \c -> (\d -> seq d (undefined::([] ([] ([] Int))) -> [] Int)) (a 2 2) (seq a (seq c (undefined::[] ([] ([] Int)))))) (\a -> case1 (seq a (\b -> (undefined::([] Int) -> [] Int))) a a) ((undefined::Int -> Int -> [] (Int -> Int -> Bool)) 0 ((!!) ([]::[] Int) (undefined::Int)))
id
\a -> seq a (seq a ((\b -> (\c -> (undefined::Bool -> [] Int) (c ([]::[] Bool) b)) (seq b ((!!) (seq b (seq a (undefined::[] (([] Bool) -> Int -> Bool)))) b))) ((\b -> b) (seq a (+1)) (case1 (undefined::Int -> ([] Int) -> Int) 2 (seq a (undefined::[] Int))))))
(\a -> seq a (\b -> (undefined::Int -> ([] Int) -> [] Int) 1) (seq a (\b -> b))) ((\a -> seq a (seq a (\b -> seq a False) (seq a (head (undefined::[] ([] (([] Bool) -> Bool))))))) (\a -> (undefined::([] Int) -> Int -> Int)))
(\a -> head (seq a (seq a (seq a (\b -> (undefined::[] (([] Int) -> [] Int))) (seq a (seq a (undefined::Bool -> [] ([] (Bool -> Bool)))) True))))) (undefined::Int)
\a -> seq a ((undefined::Bool -> [] Int) (seq a (\b -> \c -> b) (seq a (seq a (seq a (undefined::Bool)))) (undefined::([] Int) -> Int -> Bool)))
filter ((\a -> seq a (\b -> seq a (id (\c -> seq c (seq c (seq b (undefined::Bool)))) (seq b ([]::[] (Int -> [] Int)))))) (\a -> seq a (id (\b -> seq a (\c -> a))) ((\b -> id (seq b (undefined::([] Int) -> Bool -> Bool -> Bool))) a)))
\a -> seq a a
case1 ((\a -> seq a ((!!) ([]::[] (([] Int) -> ([] Int) -> [] Int)))) (id (undefined::Int -> Bool) ((+1) 1))) id (head ((\a -> seq a (seq a (seq a ([]::[] ([] Int))))) (\a -> seq a False)))
take ((undefined::([] (([] Bool) -> [] Bool)) -> Int -> Int) ((\a -> seq a (seq a (undefined::[] (([] Bool) -> [] Bool)))) ((++) ([]::[] ([] Bool)) ([]::[] ([] Bool)))) (case1 (\a -> head (seq a ([]::[] (([] Bool) -> Int)))) ((\a -> seq a (undefined::Int)) (\a -> a)) ((\a -> seq a a) ([]::[] Bool))))
(undefined::([] Int) -> [] Int)
(undefined::([] Int) -> [] Int)
\a -> (\b -> seq b (seq b (\c -> map (undefined::(Int -> Bool) -> Int) (undefined::[] (Int -> Bool)))) ((undefined::Int -> Int -> ([] Int) -> Int) 0)) (seq a (id (seq a (undefined::Bool -> ([] Int) -> Bool)) False (seq a (id (\b -> (undefined::[] Int)) ([]::[] Bool)))))
(undefined::([] Int) -> [] Int)
\a -> (\b -> seq b (\c -> a)) False (seq a (\b -> seq b ((undefined::(([] Bool) -> [] Bool) -> [] (Int -> Bool)) (filter not))))
(\a -> (!!) (seq a (seq a (seq a (undefined::Bool -> [] (([] Int) -> [] Int))) (id (undefined::Bool)))) ((\b -> b) 1)) (head (tail (head (undefined::[] ([] (([] (([] Int) -> [] (Int -> Bool))) -> ([] (([] Int) -> Bool)) -> Int))))))
case1 (\a -> seq a (seq a (\b -> b))) ([]::[] Int)
\a -> (undefined::[] Int)
\a -> a
(undefined::(([] ([] (([] Int) -> Bool))) -> [] ([] (([] Int) -> Bool))) -> ([] Int) -> [] Int) (id id)
\a -> a
\a -> seq a ((\b -> (!!) ((\c -> seq c (seq a ([]::[] ([] Int)))) a) (seq b ((+) 0 (seq a (undefined::Int))))) (\b -> seq a (seq a (seq a (seq b (seq b (seq a (seq b (seq a ([]::[] ((([] ([] Bool)) -> [] ([] Bool)) -> ([] ([] Bool)) -> [] ([] Bool))))))))))))
\a -> a
(\a -> seq a (head ([]::[] (([] Int) -> [] Int)))) (id ((\a -> seq a (\b -> a)) (undefined::Int)) ((undefined::((([] Bool) -> Int -> Bool) -> Int) -> Bool) (\a -> (+1) (seq a (undefined::Int)))))
\a -> filter (case1 (undefined::Bool -> ([] Bool) -> Int -> Bool) (\b -> seq b (seq a (seq a (undefined::Bool)))) ((\b -> seq a b) (seq a (undefined::[] Bool)))) (map (\b -> (-) (undefined::Int) (seq a 0)) (seq a (seq a (seq a (seq a (undefined::[] (Int -> ([] Int) -> ([] Int) -> Bool)))))))
(\a -> (undefined::(([] Int) -> [] (Int -> Int)) -> ([] Int) -> [] Int) (seq a (undefined::([] Int) -> [] (Int -> Int)))) (\a -> seq a (\b -> \c -> seq c (undefined::Bool -> Bool)) 1)
(undefined::(([] Int) -> [] (([] ([] Bool)) -> [] ([] Bool))) -> ([] Int) -> [] Int) (\a -> (undefined::(([] Int) -> [] (Int -> Bool)) -> [] (([] ([] Bool)) -> [] ([] Bool))) (\b -> seq a (seq b (\c -> seq a ([]::[] (Int -> Bool)))) (seq a (\c -> id ([]::[] Bool)))))
(undefined::Bool -> ([] Int) -> [] Int) ((\a -> \b -> a (seq b (undefined::Int))) (\a -> True) (case1 (\a -> seq a (undefined::([] ([] Bool)) -> Bool)) False ([]::[] ([] Bool))))
take ((+1) ((\a -> seq a ((undefined::(([] ([] Int)) -> [] ([] Bool)) -> Int) ((\b -> \c -> seq b (seq a ([]::[] ([] Bool)))) (seq a (seq a (seq a 1)))))) ((\a -> case1 (\b -> (undefined::([] Bool) -> Bool)) (seq a (undefined::Bool)) (seq a (undefined::[] Bool))) (case1 (\a -> (undefined::([] Bool) -> Int)) 1 ([]::[] Bool)))))
(!!) ([]::[] (([] Int) -> [] Int)) ((\a -> seq a (seq a (\b -> 1))) (undefined::Int -> [] Bool) ((\a -> seq a (seq a (seq a (undefined::Bool)))) ((++) ([]::[] ([] Int)) (undefined::[] ([] Int)))))
\a -> seq a ((undefined::Bool -> (([] (Int -> Bool)) -> [] (Int -> Bool)) -> [] Int) (seq a (seq a (seq a (seq a (undefined::Bool)))))) ((!!) (undefined::[] (([] (Int -> Bool)) -> [] (Int -> Bool))) (head a))
(\a -> seq a (\b -> seq b (\c -> tail)) ((!!) (undefined::[] Bool) (undefined::Int))) (\a -> map (seq a (\b -> ([]::[] Int))) (seq a (undefined::[] Bool))) ((undefined::(Int -> ([] (([] Int) -> Int)) -> [] (([] Int) -> Int)) -> Bool) (\a -> \b -> id (\c -> b) a))
\a -> (!!) (seq a (undefined::[] ([] Int))) (case1 (seq a (\b -> seq b (seq a (undefined::([] ([] Bool)) -> Int)))) (seq a (undefined::([] Bool) -> Int) (seq a (undefined::[] Bool))) (undefined::[] ([] Bool)))
head ((\a -> seq a (undefined::[] (([] Int) -> [] Int))) ((\a -> head (seq a (undefined::[] (([] Int) -> Int))) (undefined::[] Int)) ((\a -> \b -> seq b (seq a ([]::[] ([] Bool)))) (undefined::Int -> Int))))
case1 (\a -> seq a (id (\b -> seq b (undefined::([] Bool) -> ([] Int) -> [] Int)) a)) ((!!) (id (undefined::[] (([] Int) -> [] Int))) ((\a -> a) (undefined::Int))) ((undefined::Int -> [] Bool) ((+1) (head (undefined::[] Int))))
\a -> a
(\a -> \b -> map (seq a (\c -> \d -> seq c 1) (seq b (seq b (seq b (undefined::Bool))))) ([]::[] (Int -> ([] Int) -> Bool))) (\a -> \b -> seq b (undefined::[] (([] Int) -> [] Bool)))
id (\a -> (\b -> \c -> seq b (\d -> d)) (undefined::Int) (seq a (seq a (seq a (\b -> b) (seq a (seq a 0)))))) (\a -> \b -> case1 (seq a (\c -> seq c (\d -> seq d a))) a (seq a (seq a (seq a (undefined::[] Bool)))))
\a -> ([]::[] Int)
\a -> seq a ([]::[] Int)
id (undefined::(([] ([] ([] ([] ([] (Int -> Bool)))))) -> [] ([] ([] ([] (Int -> Bool))))) -> ([] Int) -> [] Int) (undefined::([] ([] ([] ([] ([] (Int -> Bool)))))) -> [] ([] ([] ([] (Int -> Bool)))))
(\a -> case1 (\b -> id (\c -> id)) ((\b -> seq b tail) (seq a (undefined::Int))) (undefined::[] Int)) (\a -> head ((\b -> case1 (undefined::Bool -> ([] Bool) -> [] ([] ([] Bool))) (seq b ([]::[] ([] ([] Bool)))) (seq a (undefined::[] Bool))) (seq a (seq a (seq a take) (seq a 0)))))
(\a -> seq a (\b -> (undefined::([] Int) -> [] Int)) (head (seq a ([]::[] (([] Int) -> Int))) (seq a (seq a (undefined::[] Int))))) (\a -> ([]::[] (Int -> Int)))
(undefined::(([] Int) -> [] (([] Int) -> Bool)) -> ([] Int) -> [] Int) (\a -> seq a (\b -> map (\c -> \d -> (undefined::Bool)) (seq a ([]::[] (Int -> Int)))) (\b -> \c -> ([]::[] Bool)))
\a -> seq a (seq a (id (\b -> \c -> b)) a ((undefined::(([] Int) -> [] ([] Int)) -> [] ([] (([] Bool) -> [] Bool))) (\b -> seq b (seq b (seq a (undefined::([] ([] Bool)) -> [] ([] Int)))) (seq a (seq b (undefined::[] ([] Bool)))))))
id
\a -> case1 (seq a (undefined::Bool -> ([] Bool) -> ([] ([] Bool)) -> [] Int) (seq a (\b -> True) (head (undefined::[] ([] (([] (Bool -> Bool)) -> Int)))))) a (seq a (seq a (\b -> seq b (seq b (undefined::[] ([] Bool)))) ((\b -> \c -> b) (seq a True))))
take (undefined::Int)
\a -> seq a a
(\a -> (!!) (seq a (seq a ((!!) (undefined::[] ([] (([] Int) -> [] Int))) (seq a (seq a 2))))) (seq a (case1 (undefined::Bool -> ([] Bool) -> Int) (undefined::Int) (undefined::[] Bool)))) ((!!) ([]::[] ([] (([] (([] Int) -> Int -> Bool)) -> Int))) (undefined::Int))
\a -> case1 (seq a (\b -> seq b (\c -> (undefined::Bool -> [] Int) (seq c (seq c (seq a (undefined::Bool))))))) (head (seq a (undefined::[] ((([] Int) -> [] Int) -> [] Int))) (seq a (\b -> tail) (seq a (seq a True)))) (map (\b -> (undefined::Int -> ([] Int) -> Int)) ((!!) ([]::[] ([] ([] (Int -> Int)))) (undefined::Int)))
\a -> id (seq a (undefined::((([] Int) -> Int -> Int) -> [] Bool) -> Bool -> [] Int) ((\b -> seq a (\c -> seq b (undefined::[] Bool))) (undefined::Int))) (seq a (\b -> seq b (seq a (seq a (seq a (undefined::Int -> Bool)) (head (undefined::[] Int))))) (seq a (\b -> seq a ((!!) (seq b a)))))
(\a -> id (seq a ((\b -> \c -> id (undefined::([] (Bool -> Bool)) -> [] Int) (seq b ([]::[] (Bool -> Bool)))) ((\b -> seq b (seq a ([]::[] (([] Bool) -> [] Bool)))) (head (undefined::[] Int)))))) ((\a -> seq a (undefined::Bool)) (undefined::(Int -> ([] Int) -> Int) -> Int -> ([] Int) -> Int))
\a -> a
(undefined::(([] Int) -> ([] ([] (Bool -> Bool))) -> Int) -> ([] Int) -> [] Int) (\a -> \b -> seq a (seq b (seq b ((undefined::(([] Bool) -> [] Bool) -> Int) (seq b (\c -> seq c (undefined::([] Bool) -> [] Bool)) ((+1) (undefined::Int)))))))
(\a -> \b -> seq b (map (\c -> case1 (undefined::Int -> ([] Int) -> Int) 0 ([]::[] Int)) (head ((\c -> seq c (undefined::[] ([] (([] Int) -> [] Int)))) (seq a 0))))) (\a -> seq a ((\b -> seq b (\c -> ([]::[] (Int -> [] Int)))) (seq a (seq a (undefined::Int)))) (seq a (head ([]::[] ((Bool -> Bool) -> Int))) (\b -> b)))
(\a -> (\b -> head (seq b (undefined::[] (Bool -> ([] Int) -> [] Int)))) (seq a ([]::[] ([] Int))) (seq a (\b -> seq b (seq a (undefined::Bool))) (\b -> seq b (head (undefined::[] ([] ([] (Int -> Int)))))))) (\a -> (\b -> (\c -> \d -> seq c ([]::[] Bool)) (seq a (\c -> b))) (case1 (\b -> \c -> 1) 0 (seq a a)))
\a -> ([]::[] Int)
\a -> a
\a -> a
\a -> a
id (\a -> (undefined::([] Int) -> [] Int)) ((\a -> \b -> \c -> (!!) (seq b (seq a (undefined::[] (Int -> Int)))) c) (id (\a -> seq a (undefined::([] ([] Int)) -> [] ([] Bool))) (odd 1)))
\a -> map (\b -> (\c -> seq c (\d -> 1) (undefined::[] (Bool -> Bool))) (seq a (seq b (seq b (undefined::([] ([] (Bool -> Bool))) -> [] (([] Int) -> Bool)))))) ((\b -> (undefined::Bool -> [] (([] ([] Int)) -> [] ([] ([] Int)))) (seq b (seq b (seq b (undefined::Bool))))) ((!!) (seq a (seq a (undefined::[] (([] Int) -> Bool)))) ((+1) (undefined::Int))))
\a -> seq a ((undefined::(([] ([] Bool)) -> [] ([] Bool)) -> [] Int) (seq a (seq a (undefined::([] (Int -> [] Int)) -> ([] ([] Bool)) -> [] ([] Bool)) ((++) (seq a (seq a ([]::[] (Int -> [] Int)))) ([]::[] (Int -> [] Int))))))
(undefined::([] Int) -> [] Int)
\a -> a
\a -> (!!) (seq a (head ([]::[] ((([] ([] Int)) -> [] ([] Bool)) -> [] ([] Int)))) (seq a (undefined::([] ([] Int)) -> [] ([] Bool)))) 0
\a -> seq a a
\a -> seq a (\b -> seq b (seq b (undefined::(([] Int) -> ([] Int) -> [] Bool) -> [] Int)) ((undefined::Bool -> ([] Int) -> ([] Int) -> [] Bool) (seq b (seq a (seq b True))))) (seq a (seq a (seq a ((\b -> \c -> b) (seq a (seq a (seq a (undefined::Int)))) (head (seq a (undefined::Int -> [] (([] Int) -> Int -> Bool)) ((+1) 0)))))))
(\a -> seq a ((undefined::(([] Int) -> Int -> Int) -> ([] Int) -> [] Int) (seq a (\b -> seq a (\c -> seq a (+1)) (id ([]::[] ([] Int))))))) (\a -> id)
(!!) ((\a -> seq a (seq a ([]::[] (Bool -> ([] Int) -> [] Int)))) (undefined::Bool)) (case1 (\a -> (undefined::([] Int) -> Int)) 0 (undefined::[] Int)) (undefined::Bool)
\a -> seq a (head (seq a (seq a (undefined::[] (Bool -> [] Int))))) (seq a (undefined::Int -> (([] ([] Bool)) -> [] Bool) -> Bool) 1 (\b -> seq b (seq b (seq b (undefined::([] Bool) -> [] Bool))) (seq a (seq a (seq a (undefined::[] Bool))))))
(\a -> seq a (\b -> seq b (\c -> c)) (\b -> (undefined::[] ([] Int)))) ((!!) (undefined::[] (Bool -> ([] ([] Int)) -> [] ([] Int))) (head ([]::[] Int)) ((\a -> even (seq a (undefined::Int))) (undefined::([] Int) -> Bool)))
\a -> (!!) (map (\b -> seq b (undefined::Bool -> [] Int)) (seq a (seq a ([]::[] Bool)))) 1 (seq a (undefined::Bool))
(\a -> \b -> (:) (seq a (seq b (\c -> seq c 0) ((+1) (undefined::Int)))) (map (seq a (undefined::Bool -> Int)) (seq a ([]::[] Bool)))) ((\a -> seq a (undefined::[] (([] (([] Int) -> Int -> [] Int)) -> ([] Int) -> Bool))) (id (\a -> seq a True) (\a -> seq a (seq a (seq a (undefined::[] (Bool -> Bool)))))))
id ((\a -> \b -> map (seq b (\c -> seq b (seq a id) ((+1) (undefined::Int)))) (id (undefined::(([] Int) -> [] Int) -> [] Bool) (seq b (seq a (undefined::([] Int) -> [] Int))))) (\a -> id (id (\b -> (undefined::Bool -> [] (Int -> Bool))) (seq a (undefined::[] Bool)) ((undefined::([] Int) -> Bool) (seq a (seq a (seq a ([]::[] Int))))))))
\a -> seq a a
\a -> a
head ((undefined::(([] Int) -> ([] Int) -> [] (Bool -> Bool -> Bool)) -> [] (([] Int) -> [] Int)) (undefined::([] Int) -> ([] Int) -> [] (Bool -> Bool -> Bool)))
(undefined::(([] Int) -> [] (Bool -> Bool)) -> Bool -> ([] Int) -> [] Int) ((undefined::Int -> ([] Int) -> [] (Bool -> Bool)) (id 2)) ((\a -> seq a (head (seq a (seq a (seq a (undefined::[] Bool)))))) ((undefined::(Int -> Int) -> Int) (\a -> seq a a)))
id ((undefined::(([] (Int -> ([] Int) -> Int)) -> ([] Int) -> Bool) -> ([] Int) -> [] Int) (\a -> (undefined::([] Int) -> Bool)))
\a -> a
\a -> id (undefined::[] Int)
(!!) (undefined::[] ((([] ([] Bool)) -> [] ([] Bool)) -> ([] Int) -> [] Int)) ((\a -> seq a 1) ([]::[] Int)) ((\a -> id (undefined::Bool -> ([] ([] Bool)) -> [] ([] Bool)) (even (seq a 0))) (head (id (undefined::([] Bool) -> [] (([] Int) -> Int)) (tail (undefined::[] Bool)))))
\a -> a
\a -> (\b -> seq a (seq b (\c -> ([]::[] Int)) (seq b (undefined::(Int -> Bool) -> [] (Int -> [] Int)) (\c -> seq c True)))) ((\b -> (+1) ((\c -> c) (seq a (seq b 2)))) (seq a (\b -> b 0) (head (seq a (undefined::[] (Int -> Bool))))))
\a -> a
id
\a -> a
\a -> a
map (\a -> seq a (undefined::Int))
(undefined::(([] ([] ([] Int))) -> [] ([] ([] Int))) -> ([] Int) -> [] Int) (\a -> (undefined::[] ([] ([] Int))))
(\a -> \b -> seq a b) (\a -> seq a (seq a (\b -> (\c -> seq c (\d -> (undefined::Int -> [] Int))) True)) (\b -> (undefined::(Int -> Int -> ([] Int) -> Bool) -> [] Int) (id (\c -> seq b (undefined::Int -> ([] Int) -> Bool)))))
head (undefined::[] ((([] (([] Int) -> [] ([] Int))) -> ([] Int) -> [] ([] Int)) -> ([] Int) -> [] Int)) head
(\a -> (undefined::([] Bool) -> Bool -> ([] Int) -> [] Int) (seq a ([]::[] Bool)) (seq a (seq a ((!!) ([]::[] Bool) (seq a 0))))) (undefined::[] (([] ([] (Bool -> Bool))) -> [] ([] (Bool -> Bool))))
(undefined::(([] ([] Int)) -> [] ([] Bool)) -> ([] Int) -> [] Int) (\a -> id ((!!) (seq a ([]::[] (Int -> [] ([] Bool)))) (seq a (undefined::Int))) (seq a (head (undefined::[] (Bool -> Int))) (seq a (seq a True))))
head (map ((\a -> (\b -> seq b (\c -> \d -> d)) ((+1) (seq a 2))) ((!!) (tail (undefined::[] ((Bool -> Bool) -> Int -> Int))) (undefined::Int))) (map (undefined::Int -> Bool) ((++) (undefined::[] Int) (undefined::[] Int))))
case1 (head (undefined::[] (Bool -> ([] Bool) -> ([] Int) -> [] Int))) ((\a -> \b -> seq a (seq b b)) ((undefined::([] ([] Bool)) -> Bool) ([]::[] ([] Bool)))) (map (\a -> seq a (not False)) ([]::[] Int))
\a -> a
\a -> (undefined::([] (([] Int) -> Bool)) -> [] Int) ((\b -> seq b (\c -> seq b ([]::[] (([] Int) -> Bool)))) (seq a (seq a (seq a (undefined::Bool)))) ((undefined::(([] Int) -> [] Bool) -> Int -> Int) (\b -> seq a (tail (undefined::[] Bool)))))
id (\a -> map (\b -> (\c -> seq c (\d -> seq c c)) (undefined::Int) (\c -> seq b (undefined::([] (Int -> Int)) -> ([] Int) -> Bool) (id (undefined::[] (Int -> Int))))) (seq a (seq a (id (seq a ([]::[] (([] Int) -> ([] (([] (Int -> Int)) -> [] (Int -> Int))) -> Bool)))))))
head (id (\a -> \b -> seq a (seq b ([]::[] (([] Int) -> [] Int)))) (undefined::Int -> Bool) (((==)::Bool -> Bool -> Bool) (id (undefined::(([] Int) -> ([] Int) -> Bool) -> Bool) (\a -> (undefined::([] Int) -> Bool))) (head ([]::[] (([] Bool) -> Bool)) ([]::[] Bool))))
\a -> seq a (seq a ([]::[] Int))
(undefined::([] Int) -> [] Int)
filter (\a -> ((==)::Int -> Int -> Bool) a (seq a (\b -> case1 (undefined::Int -> ([] Int) -> Int) 0 ([]::[] Int)) (undefined::([] ([] ([] (Bool -> Bool)))) -> Int -> Int)))
\a -> a
\a -> a
(!!) ((\a -> seq a ([]::[] (([] Int) -> ([] Int) -> [] Int))) (not True)) ((\a -> a) ((+1) 2)) ([]::[] Int)
\a -> map (seq a (\b -> case1 (undefined::Bool -> ([] Bool) -> Int -> Int) (undefined::Int -> Int) (undefined::[] Bool)) ((!!) (undefined::[] (([] ([] Bool)) -> [] ([] Bool))) (id (undefined::Int)))) ((++) (seq a ((\b -> seq a (seq b a)) (\b -> seq b (seq b (undefined::Bool))))) (undefined::[] Int))
(undefined::([] Int) -> [] Int)
(\a -> seq a (\b -> seq a (undefined::Bool -> Bool -> [] Int) (seq a (odd (undefined::Int))) (seq a (seq a (\c -> seq a True) (seq b (seq b head)))))) ([]::[] (([] Int) -> [] Int))
\a -> a
id (\a -> case1 (\b -> seq a (\c -> seq b (\d -> seq d ([]::[] Int))) (undefined::[] ([] Int))) ((\b -> (\c -> seq c a) (seq b (undefined::Int))) ((+1) (seq a (seq a (undefined::Int))))) (head ((undefined::([] (([] Int) -> Int -> Int)) -> [] ([] Bool)) (seq a (seq a (seq a (undefined::[] (([] Int) -> Int -> Int))))))))
(undefined::([] Int) -> [] Int)
id
(undefined::([] (([] (([] ([] Int)) -> [] Bool)) -> Bool -> Bool)) -> ([] Int) -> [] Int) ((\a -> seq a (seq a (seq a ([]::[] (([] (([] ([] Int)) -> [] Bool)) -> Bool -> Bool))))) ((!!) ([]::[] (Int -> Int)) 1 (undefined::Int)))
case1 take (filter ((!!) (undefined::[] (Int -> Bool)) (undefined::Int)) (id (\a -> ([]::[] Int)) (\a -> ([]::[] ([] Int)))))
id (\a -> seq a (seq a id)) ((\a -> \b -> (\c -> seq c (seq b (undefined::Int))) (seq b (\c -> a))) ((\a -> seq a (seq a (undefined::Bool))) (undefined::Int)))
\a -> a
\a -> seq a (undefined::[] Int)
(:) ((+) (undefined::Int) ((\a -> seq a (seq a (seq a (head ([]::[] Int))))) (\a -> seq a (id (undefined::([] Bool) -> ([] Bool) -> [] Int) (tail ([]::[] Bool))))))
(\a -> \b -> (\c -> \d -> seq d (seq c b)) (seq a (undefined::Int)) (seq a (case1 (\c -> (undefined::([] Int) -> Int -> [] Int)) (\c -> b) b))) (\a -> seq a tail)
map (\a -> a)
case1 (\a -> seq a (\b -> seq b (\c -> \d -> d)) (seq a (seq a (undefined::Bool -> Bool)) a)) (\a -> (undefined::[] Int)) (undefined::[] Bool)
(!!) (id (id (\a -> seq a (undefined::[] (([] Int) -> [] Int))) (((==)::[Int] -> [Int] -> Bool) (undefined::[] Int) (head ([]::[] ([] Int)))))) (undefined::Int)
\a -> seq a (seq a (seq a (\b -> \c -> (undefined::[] Int)) (seq a (seq a (seq a (\b -> seq a b) (seq a (seq a (undefined::Bool))))))) ((!!) (seq a (seq a (seq a ((\b -> seq b (undefined::[] (([] Int) -> [] ([] Int)))) (seq a False))))) (id (seq a (seq a (seq a (undefined::Int)))))))
(\a -> (\b -> seq a (\c -> \d -> seq b d)) (seq a (id (undefined::Bool)))) ((\a -> seq a (seq a (seq a (undefined::([] Int) -> [] Bool)))) (+1)) True
\a -> head (seq a (\b -> seq b (undefined::([] Bool) -> [] (Int -> [] Int)) (tail (undefined::[] Bool))) (seq a (seq a (undefined::Bool -> [] (([] Int) -> [] Int)) (seq a (seq a (undefined::Bool)))))) 0
(undefined::([] Int) -> [] Int)
head (tail ([]::[] (([] ([] ([] (([] ([] Bool)) -> [] Bool)))) -> ([] Int) -> [] Int))) ((\a -> seq a (tail (seq a (seq a (seq a ([]::[] ([] ([] (([] ([] Bool)) -> [] Bool))))))))) (id (head ((undefined::Int -> [] ([] ([] (Int -> Bool)))) 1))))
\a -> ([]::[] Int)
\a -> (undefined::[] Int)
map ((!!) (head ([]::[] (Bool -> [] (Bool -> Int -> Int))) (undefined::Bool)) ((undefined::(([] Int) -> [] (Int -> Bool)) -> Int) (\a -> seq a (seq a (undefined::[] (Int -> Bool))))) ((!!) (head (undefined::[] ((Int -> Int) -> [] Bool)) ((+) (undefined::Int))) ((undefined::Bool -> Int) (not (undefined::Bool)))))
case1 (\a -> \b -> (undefined::([] Int) -> [] Int)) (\a -> a) (head ((undefined::([] ([] Bool)) -> [] ([] (Int -> Int))) ((\a -> seq a ([]::[] ([] Bool))) False)))
(\a -> seq a (\b -> (\c -> seq c (seq c (undefined::Bool -> [] Int))) (seq a (undefined::[] (([] Int) -> [] Int))) (seq b (\c -> seq b (undefined::Bool)) (seq b (seq a (seq b (undefined::[] ([] (Bool -> Bool))))))))) (\a -> seq a a)
map (\a -> seq a (\b -> (undefined::([] (([] (([] Int) -> Int -> Int -> [] Int)) -> Int)) -> Int) (tail ([]::[] (([] (([] Int) -> Int -> Int -> [] Int)) -> Int)))) (undefined::([] (Int -> ([] Int) -> Int)) -> Int -> ([] Int) -> ([] Int) -> [] ([] Int)))
(:) (undefined::Int)
(undefined::(([] Int) -> ([] Int) -> Bool) -> Bool -> ([] Int) -> [] Int) ((\a -> seq a (seq a (\b -> (undefined::([] Int) -> Bool)))) (id False)) ((!!) ((:) (head (undefined::[] Bool)) ([]::[] Bool)) (id 1))
case1 (\a -> head (seq a (seq a (undefined::[] (([] (Int -> Int -> Bool)) -> ([] Int) -> [] Int))))) ((\a -> seq a (seq a tail)) (undefined::Bool)) ([]::[] (Int -> Int -> Bool))
map (\a -> case1 (\b -> seq b (seq b (undefined::Bool -> ([] (Int -> Int)) -> Int)) (id (undefined::Bool))) a ((!!) (undefined::[] ([] (Int -> Int))) (seq a (seq a (seq a (undefined::Bool -> Int) (seq a (undefined::Bool)))))))
case1 ((!!) (undefined::[] (Bool -> ([] Bool) -> ([] Int) -> [] Int)) ((+1) 0)) (\a -> a) (case1 (\a -> \b -> a) (undefined::[] Bool) (undefined::[] ([] Bool)))
tail
case1 (\a -> seq a (\b -> seq a id)) (\a -> seq a a) ((undefined::(([] Int) -> Bool) -> [] Bool) ((\a -> seq a (undefined::([] Int) -> Bool)) 2))
\a -> (\b -> seq b ((undefined::Bool -> Int -> [] Int) (seq a (seq a (undefined::Bool))))) (\b -> seq b (undefined::(Int -> Int -> Bool) -> [] ([] Bool)) (undefined::Int -> Int -> Bool)) (seq a ((\b -> head (seq b ([]::[] ((Int -> Int) -> Int))) (seq b (seq b (\c -> c)))) (\b -> b)))
id (\a -> (\b -> head (seq a (seq b (\c -> (undefined::[] (Int -> [] Int))) (id 2))) (seq a (undefined::(Int -> Int -> [] Int) -> Int) (head (seq b (undefined::[] (Int -> Int -> [] Int)))))) (undefined::([] (([] Bool) -> [] Bool)) -> [] (Int -> Int)))
(undefined::(([] (Int -> Int -> [] Bool)) -> [] (Int -> Int -> [] Bool)) -> ([] Int) -> [] Int) id
id ((undefined::(([] ([] Int)) -> [] Bool) -> Bool -> ([] Int) -> [] Int) (\a -> seq a (seq a ((\b -> seq b ([]::[] Bool)) (id id))))) ((undefined::([] (Int -> Int)) -> Bool) (case1 (\a -> \b -> ([]::[] (Int -> Int))) ([]::[] (Int -> Int)) (undefined::[] Bool)))
(!!) ((\a -> seq a (\b -> ([]::[] (([] Int) -> [] Int))) (id (seq a (undefined::Bool)))) ((undefined::([] (Int -> Int)) -> Int) ([]::[] (Int -> Int)))) 2
\a -> seq a a
id (\a -> a)
\a -> take ((\b -> case1 (\c -> (undefined::([] Bool) -> Int)) (seq b (undefined::Int)) (seq b ([]::[] Bool))) (\b -> ([]::[] (Int -> Int)))) ([]::[] Int)
\a -> a
(undefined::(([] Int) -> ([] Int) -> [] ([] Int)) -> ([] Int) -> [] Int) (id (\a -> (undefined::([] Int) -> ([] Int) -> [] ([] Int))) (undefined::Int -> [] Bool))
(!!) ([]::[] (Int -> Int -> ([] Int) -> [] Int)) (id 2) ((-) 0 (undefined::Int)) ((undefined::(([] (Int -> Bool)) -> ([] Int) -> [] (Int -> Bool)) -> Int) (id (\a -> \b -> a)))
(\a -> \b -> (!!) (case1 (\c -> (undefined::([] Int) -> [] ([] Int))) (seq a ([]::[] ([] Int))) b) (seq a (id head) (seq a (seq a (seq a b))))) ((undefined::(([] ([] (Int -> [] Int))) -> Int -> [] ([] (Int -> Int))) -> Bool) (\a -> \b -> (undefined::Bool -> [] ([] (Int -> Int))) (seq a (seq a (seq b (undefined::Bool))))))
\a -> a
(\a -> seq a (seq a (\b -> seq a id))) ((!!) (undefined::[] (([] Int) -> ([] Int) -> Bool)) (undefined::Int) (undefined::[] Int)) ((\a -> \b -> seq a (seq b (undefined::Int))) ([]::[] ([] Int)) (undefined::[] ([] Int)))
(undefined::(([] ([] Bool)) -> [] ([] Bool)) -> Bool -> ([] Int) -> [] Int) (case1 (\a -> map id) (undefined::[] ([] Bool))) (((==)::Int -> Int -> Bool) ((!!) ([]::[] Int) 2) ((\a -> a) ((+1) (undefined::Int))))
\a -> (++) a a
(!!) ((\a -> seq a (\b -> seq b ([]::[] (([] Int) -> [] Int)))) (not (undefined::Bool)) (id (\a -> seq a (undefined::Bool)) (\a -> head (undefined::[] Bool)))) ((!!) ((++) ([]::[] Int) (undefined::[] Int)) ((+) (undefined::Int) (undefined::Int)))
(undefined::([] Int) -> [] Int)
\a -> a
head ((\a -> seq a (seq a ((\b -> seq b ([]::[] (Bool -> ([] Int) -> [] Int))) a))) (undefined::Int)) (head ((\a -> seq a (\b -> a)) (undefined::[] Bool) ((\a -> seq a ([]::[] ([] (Int -> Bool)))) True)))
(undefined::(([] ([] (Int -> ([] Int) -> Bool))) -> [] Int) -> ([] Int) -> [] Int) (id (undefined::Int -> ([] ([] (Int -> ([] Int) -> Bool))) -> [] Int) ((undefined::(Int -> ([] Int) -> Bool) -> Int) (\a -> \b -> seq a (seq a True))))
\a -> a
(undefined::(([] (([] (Int -> Int)) -> [] (Int -> Int))) -> [] Int) -> ([] Int) -> [] Int) ((\a -> \b -> seq a ([]::[] Int)) ((\a -> seq a (seq a (seq a (undefined::Bool)))) (head (undefined::[] (Int -> Bool -> Bool)))))
\a -> a
(\a -> seq a (undefined::(([] Int) -> Int -> Int) -> ([] Int) -> [] Int)) ((undefined::Bool -> Int) ((||) (undefined::Bool) (undefined::Bool))) (\a -> (+1))
(!!) ((\a -> seq a (seq a (undefined::[] (Bool -> ([] Int) -> [] Int)))) (undefined::Bool)) (id (\a -> (undefined::Int)) (head ([]::[] Bool))) ((\a -> \b -> seq a (seq b (undefined::Bool))) (filter (undefined::([] Int) -> Bool) ([]::[] ([] Int))) (head ([]::[] (Int -> [] (Int -> Bool))) ((+1) 2)))
case1 (\a -> \b -> seq b b) (id (\a -> (\b -> seq b ([]::[] Int)) ([]::[] ([] (Int -> Int)))) ((\a -> not (seq a True)) ([]::[] ([] ([] ([] ([] Bool)))))))
take ((\a -> \b -> seq a (undefined::Int)) (id (\a -> a)) ((||) (id (undefined::Bool)) True))
\a -> seq a (undefined::[] Int)
\a -> (:) (seq a ((undefined::Int -> Bool -> Int) (seq a (head ([]::[] Int))) (seq a (\b -> seq b True) (head (seq a ([]::[] (([] Int) -> [] Bool))))))) (case1 (undefined::([] ([] Int)) -> ([] ([] ([] Int))) -> [] Int) a (seq a (undefined::Bool -> [] ([] ([] Int))) (seq a False)))
\a -> (undefined::(([] Int) -> Int -> Int) -> [] Int) (seq a (\b -> \c -> seq c (undefined::([] Int) -> Int -> Int)) ((-) 0 (undefined::Int)) ((\b -> b) (seq a False)))
(undefined::(([] ([] (([] ([] Int)) -> [] ([] ([] Int))))) -> [] (Int -> [] Int)) -> ([] Int) -> [] Int) (undefined::([] ([] (([] ([] Int)) -> [] ([] ([] Int))))) -> [] (Int -> [] Int))
\a -> a
(!!) (id (undefined::[] ((([] Bool) -> Bool) -> ([] Int) -> [] Int))) (case1 (\a -> seq a head) 0 ([]::[] Int)) (case1 (head (undefined::[] (Bool -> ([] Bool) -> ([] Bool) -> Bool))) (\a -> seq a (id (seq a (undefined::Bool)))) ((:) (undefined::Bool) ([]::[] Bool)))
\a -> map (undefined::(([] (([] Int) -> ([] Int) -> [] Bool)) -> ([] Int) -> ([] Int) -> [] Bool) -> Int) (seq a (seq a (seq a (seq a ([]::[] (([] (([] Int) -> ([] Int) -> [] Bool)) -> ([] Int) -> ([] Int) -> [] Bool))))))
(undefined::(([] Bool) -> Bool) -> (([] Int) -> [] Int) -> ([] Int) -> [] Int) (\a -> seq a (seq a (seq a (\b -> (undefined::Bool)) (seq a (undefined::([] Bool) -> Bool))))) ((undefined::Int -> Bool -> ([] Int) -> [] Int) ((+1) (undefined::Int)) ((\a -> id (seq a False)) (\a -> \b -> seq b (seq b False))))
(undefined::([] (Int -> Int)) -> Bool -> ([] Int) -> [] Int) (id (\a -> seq a (undefined::[] (Int -> Int))) (undefined::[] ([] Int))) ((undefined::(([] Int) -> Int) -> Bool) (\a -> seq a (case1 (\b -> (undefined::([] ([] Int)) -> Int)) (seq a 1) (seq a (undefined::[] ([] Int))))))
\a -> a
(\a -> (\b -> seq b (\c -> seq b (seq a (undefined::Bool -> [] Int)) b)) (id ((\b -> seq b True) (seq a (seq a (undefined::Int -> Int -> Int)))))) (\a -> \b -> seq b (\c -> \d -> d))
(\a -> seq a id) (undefined::Bool)
(undefined::(([] (([] ([] Bool)) -> [] ([] Bool))) -> ([] ([] Int)) -> [] ([] ([] Int))) -> ([] Int) -> [] Int) (\a -> seq a (seq a ((\b -> \c -> seq b ((\d -> seq d (undefined::[] ([] ([] Int)))) (undefined::Bool))) (odd ((+1) (undefined::Int))))))
(undefined::([] Int) -> [] Int)
tail
\a -> seq a a
\a -> seq a (\b -> \c -> a) (seq a (seq a ((undefined::Bool -> Int) (id False)))) (\b -> (undefined::(([] Int) -> ([] Int) -> [] Bool) -> Int -> [] Int) (id ((undefined::Int -> ([] Int) -> ([] Int) -> [] Bool) (seq a b))))
case1 (undefined::(([] Int) -> Bool) -> ([] (([] Int) -> Bool)) -> ([] Int) -> [] Int) (\a -> (undefined::([] Int) -> [] Int) a) ((:) ((\a -> seq a (undefined::([] Int) -> Bool)) (undefined::Bool)) ((\a -> seq a ([]::[] (([] Int) -> Bool))) 1))
\a -> seq a a
filter ((\a -> seq a (seq a (undefined::([] Int) -> Int -> Bool) (undefined::[] Int))) (id (id (\a -> \b -> seq b (head ([]::[] ([] Int)))))))
(undefined::(([] (Bool -> Bool)) -> Int) -> Bool -> ([] Int) -> [] Int) ((\a -> \b -> a) (head (undefined::[] Int))) ((\a -> seq a (\b -> seq a False) (seq a (seq a (undefined::Int -> [] Int)))) ((!!) ([]::[] (([] Int) -> ([] ([] Int)) -> [] Bool)) ((+1) 2)))
(\a -> case1 (seq a (\b -> (\c -> seq c (seq a tail)) (seq b (\c -> seq a b)))) (seq a (take 1 ([]::[] Int)))) (\a -> (undefined::(([] Bool) -> [] Bool) -> Int -> Int -> Int) (\b -> (undefined::[] Bool)) a)
case1 (\a -> \b -> a) ((\a -> seq a (undefined::Bool -> ([] Int) -> [] Int)) 0 ((\a -> a) (id (undefined::Bool)))) (undefined::[] (([] Int) -> [] Int))
\a -> a
(:) 1
\a -> (undefined::[] Int)
\a -> seq a (undefined::[] Int)
(:) (undefined::Int)
(undefined::Bool -> Bool -> ([] Int) -> [] Int) (((==)::Int -> Int -> Bool) (head ([]::[] Int)) 1) (head (undefined::[] (([] (([] (([] Int) -> [] (Bool -> Bool))) -> Bool)) -> Bool)) (head (tail ([]::[] ([] (([] (([] Int) -> [] (Bool -> Bool))) -> Bool))))))
\a -> seq a (seq a (seq a (\b -> case1 (\c -> \d -> a) (seq a (seq b a)) (undefined::[] Bool)) (seq a (seq a (\b -> \c -> \d -> seq a (seq d (((==)::[Int] -> [Int] -> Bool) a)))) (seq a (undefined::Bool -> Int) False))))
\a -> seq a (head (seq a (tail (filter (\b -> seq b True) (seq a (undefined::[] ((([] Int) -> [] (Int -> Bool)) -> [] Int))))))) (seq a (seq a (seq a (undefined::(([] Int) -> [] ([] Bool)) -> ([] Int) -> [] (Int -> Bool)) ((undefined::Int -> ([] Int) -> [] ([] Bool)) ((+1) (undefined::Int))))))
\a -> (undefined::[] Int)
(\a -> seq a (seq a (undefined::([] Bool) -> Bool -> ([] Int) -> [] Int) (seq a (a True not 0))) (not (seq a (\b -> seq a False) (seq a (seq a ([]::[] (Int -> Int))))))) (\a -> \b -> head (id (seq b (map (seq b (undefined::Bool -> Bool -> Int -> [] Bool) (seq a a)) (seq a (head (seq b (undefined::[] ([] Bool)))))))))
\a -> (enumFromTo'::Int -> Int -> [Int]) (seq a ((\b -> seq b (seq b (undefined::(Int -> [] Int) -> Int))) (seq a (\b -> b))) ((\b -> seq a (seq b (seq b (undefined::Int -> [] Int)))) (seq a (seq a (seq a ([]::[] ([] Bool))))))) ((\b -> id (seq b (\c -> c) (seq a (seq a (undefined::Int))))) (seq a (\b -> (undefined::[] (Int -> Int))) (seq a (\b -> id b))))
(\a -> \b -> (!!) (case1 (seq b (undefined::Int -> ([] Int) -> [] ([] Int))) (seq a (undefined::[] ([] Int))) b) (id (\c -> (undefined::Int)) (\c -> id True))) (undefined::([] ([] (([] ([] Int)) -> [] Bool))) -> [] (Bool -> Bool))
(\a -> seq a (\b -> seq a (seq b take)) (seq a (seq a (undefined::[] Bool))) ((\b -> seq b ((+1) (undefined::Int))) (seq a (head (undefined::[] ([] ([] Bool))))))) ((\a -> seq a (seq a (\b -> \c -> False))) ((undefined::(Bool -> Bool -> Bool) -> Bool) (\a -> \b -> not b)))
(\a -> (!!) (undefined::[] (Bool -> ([] Int) -> [] Int)) (undefined::Int) ((\b -> seq a (seq b (seq b True))) (\b -> False))) ((undefined::Bool -> [] (([] (([] ([] Bool)) -> [] Bool)) -> [] Bool)) ((!!) (id (undefined::[] Bool)) ((+1) 1)))
tail
\a -> a
(undefined::([] Int) -> [] Int)
\a -> a
tail
\a -> a
id
map ((\a -> seq a (seq a (\b -> seq b ((undefined::(Int -> [] (Int -> Int)) -> Int -> Int) (seq a (\c -> (undefined::[] (Int -> Int)))))) (id (undefined::([] Bool) -> [] (Int -> [] Int)) ([]::[] Bool)))) (\a -> seq a (id (seq a (\b -> ([]::[] (([] ([] Int)) -> [] ([] (Int -> Bool)))))) (even ((+1) (undefined::Int))))))
map ((undefined::Bool -> Int -> Int) (not (id (id (\a -> seq a False) (\a -> (\b -> seq b True) (seq a (undefined::(Int -> Bool) -> Int -> Bool)))))))
(!!) ((\a -> seq a (seq a (undefined::Bool -> [] (([] Int) -> [] Int)) a)) True) (id ((+1) ((\a -> (+1) (seq a (id (undefined::Int)))) ((undefined::Int -> Int -> ([] Int) -> [] ([] Bool)) (id 2)))))
(undefined::([] Int) -> [] Int)
case1 ((!!) (undefined::[] (Int -> ([] Int) -> ([] Int) -> [] Int)) ((\a -> a) (undefined::Int))) tail (filter ((!!) (undefined::[] Bool)) (id ([]::[] Int)))
(\a -> seq a tail) (\a -> seq a (\b -> tail (seq b (\c -> head ([]::[] (Int -> [] Bool)) (seq b (seq b 2))) (case1 (undefined::Int -> ([] Int) -> [] ([] Int)) ([]::[] ([] Int))))))
\a -> tail (seq a a)
case1 (case1 (\a -> \b -> \c -> head ([]::[] (([] Int) -> [] Int))) ((!!) ([]::[] (Int -> ([] Int) -> [] Int)) 0) ((\a -> seq a ([]::[] Bool)) (undefined::[] Int))) ((\a -> head (seq a (undefined::[] (Bool -> [] Int)))) (\a -> seq a (seq a (\b -> b))) ((undefined::Bool -> Bool) (((==)::Bool -> Bool -> Bool) False False)))
(undefined::(Int -> Bool) -> Bool -> ([] Int) -> [] Int) ((!!) (undefined::[] (Int -> Bool)) (id (undefined::Int))) (head ([]::[] (((Bool -> Bool) -> ([] Int) -> Bool -> Bool) -> Bool)) (\a -> seq a (\b -> \c -> a) ((!!) (seq a (undefined::[] Int)))))
(\a -> seq a ((++) (seq a (seq a (\b -> (:) 1 (undefined::[] Int))) (seq a (tail (undefined::[] (([] Int) -> [] Int))))))) ((\a -> seq a (seq a (seq a (\b -> seq b (undefined::Int -> [] ([] (Int -> Bool))) (seq a (undefined::Int)))))) (head ([]::[] ([] (Int -> [] Int)))))
(undefined::(([] Int) -> ([] ([] Int)) -> ([] ([] ([] Int))) -> [] ([] Int)) -> ([] Int) -> [] Int) (\a -> head (id (seq a (tail (seq a (id ([]::[] (([] ([] Int)) -> ([] ([] ([] Int))) -> [] ([] Int)))))))))
\a -> id (undefined::(([] Int) -> Int -> [] Int) -> [] Int) (seq a (\b -> \c -> (\d -> seq d ([]::[] Int)) ((++) (undefined::[] (([] (Int -> Bool -> Bool)) -> [] Bool)) (undefined::[] (([] (Int -> Bool -> Bool)) -> [] Bool)))))
\a -> id (seq a (undefined::(([] ([] ([] ([] (Int -> Int))))) -> [] ([] ([] (Int -> Int)))) -> [] Int)) (\b -> map (seq b (undefined::([] Bool) -> [] ([] (Int -> Int)))) ([]::[] ([] Bool)))
case1 (undefined::Int -> ([] Int) -> ([] Int) -> [] Int) (\a -> (undefined::[] Int)) (undefined::[] Int)
(\a -> seq a ((\b -> id (\c -> tail) b) (seq a ((\b -> seq b (seq a (undefined::Bool))) (seq a (id ([]::[] Int))))))) (map (undefined::Int -> [] Int))
\a -> a
\a -> (undefined::[] Int)
(\a -> (\b -> \c -> seq b (seq c (undefined::([] Int) -> [] Int))) (seq a (seq a (seq a (undefined::Bool)))) (seq a (undefined::(([] Int) -> [] ([] (Int -> Int))) -> Bool) (seq a (\b -> seq b ([]::[] ([] (Int -> Int))))))) (id (id (\a -> seq a a)) ((\a -> seq a (seq a (seq a (undefined::Int)))) (tail ([]::[] ([] Bool)))))
head ((\a -> seq a (seq a ((undefined::Int -> [] (Bool -> ([] Int) -> [] Int)) (a 0 ([]::[] Int))))) ((!!) ([]::[] (Int -> ([] Int) -> Int)) ((+1) (undefined::Int)))) (head (undefined::[] (((([] Int) -> Bool) -> Bool) -> Bool)) (\a -> (\b -> seq b (seq b (undefined::Bool))) ([]::[] ([] Int))))
\a -> seq a (id (id (seq a (\b -> seq b (id (undefined::(([] (([] Int) -> Int)) -> Bool) -> [] Int)) (\c -> seq b (seq c (undefined::(([] ([] Int)) -> [] Int) -> Bool)) (map (undefined::([] Int) -> Int))))))) ((\b -> seq b ((!!) (seq b (seq a (undefined::[] (([] (Int -> Bool)) -> [] (Int -> Bool))))))) 0)
\a -> a
\a -> a
\a -> seq a (seq a (undefined::(([] (([] ([] Int)) -> [] ([] (Int -> Bool)))) -> Int -> Int -> Bool) -> [] Int) (seq a (\b -> seq b (seq b (seq a (\c -> head ([]::[] (Bool -> Int -> Int -> Bool)) (undefined::Bool)) ((\c -> \d -> seq d c) (seq a (undefined::Int))))))))
\a -> a
\a -> a
(\a -> case1 (\b -> (undefined::([] Bool) -> ([] Int) -> [] Int)) (seq a take 2) (tail (seq a ([]::[] Bool)))) (map (undefined::([] Int) -> Bool -> Bool) ((\a -> seq a (seq a (undefined::[] ([] Int)))) (undefined::[] (([] Int) -> [] Int))))
id
\a -> map (\b -> (\c -> seq b ((+1) (seq c 0))) head) (seq a (head (undefined::[] ([] ((([] Int) -> ([] Int) -> Bool) -> ([] ([] Bool)) -> [] ([] (Bool -> Bool)))))))
\a -> seq a (filter (\b -> case1 (\c -> \d -> not False) (seq b (seq a (undefined::Bool))) ([]::[] ([] Bool))) (seq a (seq a (case1 (\b -> map id) (seq a (head (undefined::[] ([] Int)))) (seq a a)))))
\a -> a
(\a -> (\b -> seq b (\c -> \d -> d)) (seq a (seq a (seq a 2)))) (undefined::Int -> Int -> Bool) 0
take (case1 ((\a -> seq a (undefined::Int -> ([] Int) -> Int)) (\a -> (undefined::Bool))) ((\a -> seq a 0) (undefined::[] (Int -> [] Int))) ((\a -> seq a ([]::[] Int)) (head ([]::[] Int))))
\a -> seq a (seq a a)
\a -> a
\a -> a
(\a -> seq a (seq a (seq a (\b -> (undefined::Bool -> ([] Int) -> [] Int))) (seq a (seq a (seq a a))))) ((+1) (case1 (undefined::Bool -> ([] Bool) -> Int) 1 ([]::[] Bool))) ((undefined::(([] ([] (([] Int) -> [] Bool))) -> Bool) -> Bool) (undefined::([] ([] (([] Int) -> [] Bool))) -> Bool))
(\a -> seq a (seq a (\b -> (undefined::([] Int) -> [] Int))) (\b -> seq b (seq a (undefined::Bool -> [] (Bool -> Bool))) (undefined::Bool))) (\a -> head (seq a (undefined::[] (Bool -> [] ([] ([] (([] ([] Bool)) -> [] ([] Bool))))))) (seq a (\b -> not b) False))
map (\a -> a)
\a -> a
\a -> (undefined::(([] Int) -> ([] (Int -> ([] Int) -> Bool)) -> Bool -> Bool) -> [] Int) (\b -> id (seq a (\c -> \d -> id) (head (seq a (seq a (seq a ([]::[] Bool)))))))
\a -> seq a a
tail
(undefined::Bool -> ([] (([] Int) -> Bool)) -> ([] Int) -> [] Int) (head (undefined::[] (Bool -> Bool)) (undefined::Bool)) ((\a -> seq a (seq a (\b -> seq b (undefined::[] (([] Int) -> Bool))) (head ([]::[] Bool)))) ((\a -> (++) (seq a ([]::[] (Bool -> Bool)))) (((==)::[Int] -> [Int] -> Bool) (undefined::[] Int) ([]::[] Int))))
(undefined::Int -> (([] Int) -> Int -> Int) -> ([] Int) -> [] Int) ((undefined::((([] Int) -> Bool) -> ([] Int) -> Bool) -> Int) (\a -> \b -> seq a (a b))) ((undefined::(([] ([] Bool)) -> [] Bool) -> ([] Int) -> Int -> Int) (case1 (\a -> \b -> a) (undefined::[] Bool)))
(!!) ((!!) (undefined::[] (Int -> [] (([] Int) -> [] Int))) (undefined::Int) ((!!) ([]::[] Int) (undefined::Int))) ((+1) ((\a -> seq a (\b -> seq b 0)) (head (undefined::[] ([] Bool))) ((\a -> seq a (seq a ([]::[] (([] Int) -> [] Int)))) (undefined::[] ([] ([] Bool))))))
\a -> seq a (id (\b -> seq a (id (seq b (\c -> ([]::[] Int)))) ((undefined::(Int -> Int) -> ([] Bool) -> Bool) (+1)))) (seq a ((\b -> \c -> take (seq b (seq a (undefined::Int)))) True))
\a -> a
filter ((\a -> case1 (\b -> (!!)) (\b -> True) (seq a ([]::[] Bool))) (tail ([]::[] (([] ([] Bool)) -> [] ([] Bool)))))
\a -> (++) (map (\b -> seq b (seq a (seq a (seq b (seq b (seq b (undefined::Int))))))) (id (undefined::[] ([] ([] (([] ([] Int)) -> [] ([] (Int -> Bool)))))))) a
\a -> a
(\a -> seq a ((!!) (seq a (undefined::[] (([] Int) -> ([] Int) -> [] Int))) (seq a 2))) ((\a -> id (seq a (undefined::Int))) (head ([]::[] (Int -> ([] Bool) -> Bool)))) ((++) (case1 (undefined::Bool -> ([] Bool) -> [] Int) ([]::[] Int) (undefined::[] Bool)) (map (\a -> seq a 2) ([]::[] Bool)))
id (head ((\a -> seq a (seq a ([]::[] ((([] Int) -> Bool) -> ([] Int) -> [] Int)))) ((undefined::(Bool -> Bool) -> Bool) (\a -> (undefined::Bool))))) (undefined::([] Int) -> Bool)
\a -> (\b -> map ((!!) (seq b a)) (filter (undefined::Int -> Bool) a)) ((\b -> seq b (\c -> \d -> id (seq c (seq b (\e -> d))))) ((undefined::Bool -> [] (([] ([] Int)) -> [] Int)) (seq a (seq a (seq a True)))))
\a -> (undefined::[] Int)
case1 ((\a -> seq a (\b -> \c -> seq a (seq a id))) (undefined::Bool)) (\a -> seq a (seq a (undefined::Bool -> (Int -> Int) -> [] Int) False (seq a (\b -> seq b b)))) (case1 (head (undefined::[] (Int -> ([] Int) -> [] Bool))) (head ([]::[] ([] Bool))) (id (undefined::[] Int)))
(:) ((\a -> (!!) (seq a ([]::[] Int))) (\a -> (undefined::Int)) ((\a -> id (seq a (undefined::Int))) (odd (undefined::Int))))
\a -> seq a a
\a -> seq a (undefined::((([] Int) -> ([] Int) -> [] (Int -> Int)) -> Int) -> [] Int) ((undefined::Int -> (([] Int) -> ([] Int) -> [] (Int -> Int)) -> Int) (seq a (\b -> 2) (seq a (undefined::[] ([] (([] Int) -> [] ([] Int)))))))
(\a -> (:) (seq a (seq a (seq a (undefined::Int))))) ((\a -> seq a (seq a (\b -> seq b (undefined::([] Int) -> ([] Int) -> Bool))) ((+1) (seq a 1))) ((\a -> seq a (map (undefined::([] Int) -> Bool))) True))
\a -> seq a (seq a ((!!) (seq a (seq a (seq a (seq a (seq a (seq a ([]::[] (([] ([] ([] Bool))) -> [] Int)))))))) (seq a (undefined::Int)))) (take (undefined::Int) (seq a (\b -> ([]::[] ([] ([] Bool)))) (\b -> even (undefined::Int))))
\a -> a
(\a -> seq a (\b -> (undefined::((Int -> Int -> Bool) -> Int -> Int -> Int) -> [] Int) (id (\c -> (!!) ([]::[] (Int -> Int -> Int)) (seq b 1))))) (id (undefined::(Bool -> Bool) -> [] (([] ([] ([] (Int -> Bool)))) -> [] Bool)))
case1 (\a -> \b -> \c -> seq a (id (\d -> c)) ((\d -> seq d False) (seq a (undefined::Int)))) (\a -> seq a (head (seq a (undefined::[] ((Bool -> Bool) -> [] Int))) ((!!) ([]::[] (Bool -> Bool)) 0))) ((\a -> seq a (undefined::Bool -> [] (([] Int) -> Bool))) (undefined::[] Bool) ((undefined::Bool -> Bool) (undefined::Bool)))
(undefined::([] Int) -> [] Int)
\a -> id a
\a -> a
(undefined::(([] ([] ([] Bool))) -> [] ([] ([] Bool))) -> ([] Int) -> [] Int) (\a -> ([]::[] ([] ([] Bool))))
\a -> (undefined::(Bool -> Bool) -> (([] (Bool -> Bool)) -> [] (Bool -> Bool)) -> [] Int) (\b -> b) (take (seq a (undefined::(Int -> ([] Int) -> Bool) -> Int) (undefined::Int -> ([] Int) -> Bool)))
(\a -> \b -> seq a (\c -> \d -> seq a d) (seq a (undefined::([] Bool) -> Bool))) ((+1) (head ([]::[] Int))) head
(undefined::([] Int) -> [] Int)
(\a -> seq a (\b -> seq a (seq a (seq b (\c -> (undefined::Int -> [] Int)) a)) (seq a ((\c -> c) a)))) ((\a -> seq a ((+1) (seq a (seq a (seq a (seq a (undefined::Int))))))) (id (\a -> seq a (seq a (seq a (seq a (undefined::[] ([] ([] Bool)))))))))
\a -> a
(\a -> id (\b -> \c -> c) (case1 (seq a (\b -> \c -> b)) (id ([]::[] Bool)))) ((\a -> seq a (seq a (seq a (seq a (undefined::[] ([] (([] Int) -> [] (Int -> [] Int)))))))) ((\a -> seq a (seq a (seq a True))) ((-) (undefined::Int) (undefined::Int))))
(undefined::([] Int) -> [] Int)
id (\a -> seq a ((\b -> head ((!!) (id (seq a (seq b (seq a ([]::[] ([] ([] Int))))))) 1)) ((undefined::Bool -> ([] ([] Bool)) -> [] ([] (Bool -> Bool))) (seq a (head ([]::[] (Bool -> Bool))) (not (seq a False))))))
(\a -> (\b -> \c -> seq c (seq b (undefined::([] Int) -> [] Int))) (undefined::Int) (seq a (undefined::(([] Int) -> Int -> Int) -> [] ([] Bool)) (undefined::([] Int) -> Int -> Int))) ((\a -> (\b -> seq b (seq a id)) (undefined::Int)) (id (\a -> (\b -> seq b (seq b (undefined::Int -> Bool))) (\b -> seq b ([]::[] Int)))))
\a -> a
(\a -> seq a (\b -> (undefined::[] Int))) (undefined::([] (([] ([] ([] Bool))) -> [] ([] Bool))) -> [] ([] ([] ([] (Int -> Bool)))))
\a -> map (\b -> seq a ((\c -> \d -> seq b (seq c 2)) (even (undefined::Int)) (\c -> seq a (\d -> seq a b) (seq c (seq c ([]::[] ([] ([] Bool)))))))) (seq a (undefined::(Int -> Bool) -> Int -> [] Bool) (\b -> seq a (odd b)) (id (\b -> seq a 2) (undefined::Bool -> Bool -> Bool)))
\a -> seq a ((\b -> seq b (\c -> \d -> ([]::[] Int))) (seq a 1) (seq a (seq a (\b -> seq b b)) (seq a True)) (case1 (seq a (\b -> seq b (\c -> seq a (undefined::Int)))) ((+) 1 (undefined::Int)) (seq a ([]::[] Bool))))
map (\a -> seq a ((\b -> \c -> id (undefined::([] (([] Int) -> Bool)) -> Int) (seq a (seq b (undefined::[] (([] Int) -> Bool))))) (map (\b -> not) (seq a (seq a (undefined::[] Bool))))) False)
\a -> a
tail
(:) (undefined::Int)
(!!) ((\a -> seq a (seq a (undefined::[] (Int -> ([] Int) -> [] Int)))) (tail (undefined::[] Bool))) 0 ((+) ((\a -> seq a (seq a 1)) False) ((!!) (undefined::[] Int) (undefined::Int)))
(:) ((\a -> id (\b -> 2) (seq a (\b -> seq b (\c -> seq a (undefined::Bool -> Bool)) (head ([]::[] ([] ([] (Int -> Bool)))))))) (\a -> a))
\a -> (undefined::(([] Int) -> Int -> [] (([] Int) -> [] Int)) -> [] Int) ((\b -> \c -> seq b (seq b ((undefined::Bool -> Int -> [] (([] Int) -> [] Int)) (seq c (seq c False))))) (seq a (undefined::Int)))
(\a -> (\b -> seq a ((\c -> seq c (\d -> (undefined::[] Int))) (seq b (seq b (undefined::Int))))) (seq a (seq a (undefined::Bool -> ([] Int) -> [] (Int -> [] Int)) (seq a False)))) ((undefined::Bool -> Bool -> ([] Int) -> [] ([] Int)) (undefined::Bool) ((\a -> seq a (not True)) (\a -> seq a (seq a (undefined::[] Bool)))))
(undefined::Bool -> ([] Int) -> [] Int) ((undefined::(([] Int) -> [] (Int -> ([] (Int -> Int)) -> Int -> Int)) -> Bool) (undefined::([] Int) -> [] (Int -> ([] (Int -> Int)) -> Int -> Int)))
(\a -> \b -> id (map (head (take a (undefined::[] (([] Int) -> Int)))) (seq a ((!!) (seq b (undefined::[] ([] ([] Int)))) (seq a (undefined::Int)))))) ((+1) ((\a -> seq a ((\b -> seq b (seq b 1)) (undefined::Bool))) ((undefined::Int -> ([] ([] Int)) -> [] Int) ((+1) 2))))
head (undefined::[] ((([] (([] Int) -> [] (Int -> Int))) -> ([] Int) -> [] ([] Int)) -> ([] Int) -> [] Int)) (undefined::([] (([] Int) -> [] (Int -> Int))) -> ([] Int) -> [] ([] Int))
(undefined::Bool -> (([] Int) -> Int -> [] Int) -> ([] Int) -> [] Int) ((\a -> a) (not False)) (\a -> id (\b -> seq a (seq b (\c -> a))) (seq a (\b -> seq a (seq b ([]::[] ([] (Bool -> Bool))))) ((!!) ([]::[] Int) (undefined::Int))))
\a -> a
\a -> a
(\a -> (\b -> seq b (seq a (seq b take))) (seq a (\b -> (undefined::Int))) (seq a (seq a (seq a (\b -> seq a b) (seq a (seq a (undefined::Int))))))) ((\a -> seq a True) ((!!) (id ([]::[] ([] ([] (Bool -> Bool))))) 1))
(\a -> (:) (seq a 1)) (odd ((undefined::([] (([] Int) -> Bool)) -> Int) (map (undefined::Int -> ([] Int) -> Bool) (head ([]::[] ([] Int))))))
id (undefined::(([] ([] (([] Int) -> Int -> Int -> Int))) -> [] (Int -> Int)) -> ([] Int) -> [] Int) (undefined::([] ([] (([] Int) -> Int -> Int -> Int))) -> [] (Int -> Int))
\a -> a
(\a -> head (undefined::[] ((([] Int) -> [] (Int -> Bool)) -> ([] Int) -> [] Int)) (seq a (\b -> id (undefined::(([] Int) -> Bool) -> [] (Int -> Bool)) (undefined::([] Int) -> Bool)))) (undefined::Int)
(\a -> \b -> seq b ((undefined::Bool -> [] Int) (seq a (seq b ((\c -> c) (seq b (seq b (undefined::Bool)))))))) (undefined::([] ([] ([] Int))) -> [] ([] ([] Bool)))
\a -> seq a (head (seq a (undefined::[] ((([] ([] Int)) -> [] ([] Bool)) -> [] Int))) ((\b -> seq b (\c -> \d -> (undefined::[] ([] Bool)))) (head a) ((\b -> b (b (seq b False))) (\b -> b))))
\a -> seq a a
map (\a -> id ((!!) (undefined::[] (([] ([] Bool)) -> Int -> Int)) 2 (filter head ([]::[] ([] Bool))) (seq a (\b -> a) (seq a (seq a (seq a ([]::[] (([] Int) -> Bool))))))))
\a -> a
filter (\a -> case1 (seq a ((\b -> \c -> \d -> seq b (seq c (undefined::Bool))) ((\b -> seq b ([]::[] Bool)) (seq a True)))) ((\b -> seq b (seq b True)) (seq a (undefined::([] ([] (Int -> [] Int))) -> [] Bool))) (seq a (undefined::(Int -> ([] Int) -> Bool) -> [] Int) (id ((!!) (undefined::[] (([] Int) -> Bool))))))
\a -> map ((\b -> \c -> seq b (undefined::([] Int) -> Int) (tail a)) (seq a (seq a (seq a (\b -> (undefined::[] Bool)))))) (seq a ((!!) ([]::[] ((([] Int) -> [] Int) -> [] Int)) (id (undefined::Int)) (take 2)))
\a -> a
id
(++) (undefined::[] Int)
(\a -> seq a ((\b -> (undefined::Bool -> ([] Int) -> [] Int) (seq b (seq b (seq a (undefined::Bool))))) (seq a (\b -> seq b (seq b (undefined::Int))) (a (undefined::[] Int) 1 1)))) (\a -> \b -> \c -> (+) (case1 (\d -> (undefined::([] Bool) -> Int)) (seq b (undefined::Int)) (seq a ([]::[] Bool))) (seq c ((\d -> d) b)))
\a -> a
tail
(!!) ((++) ([]::[] (([] ([] Int)) -> ([] Int) -> [] Int)) (undefined::[] (([] ([] Int)) -> ([] Int) -> [] Int))) (id ((\a -> seq a a) 1)) ((undefined::([] (Int -> Bool)) -> Bool -> [] ([] Int)) (undefined::[] (Int -> Bool)) ((\a -> seq a (head ([]::[] Bool))) (id ([]::[] ([] Bool)))))
(\a -> \b -> seq b (seq a (undefined::([] Bool) -> Bool -> [] Int) (tail (seq a (undefined::[] Bool)))) (seq a (seq a ((undefined::(([] (Int -> [] Int)) -> [] Bool) -> Bool) (\c -> (undefined::[] Bool)))))) (\a -> seq a (\b -> (undefined::Int -> [] ([] (([] ([] Int)) -> [] ([] Int)))) ((+1) 0)) (\b -> b))
tail
(undefined::([] Int) -> [] Int)
(\a -> seq a (\b -> \c -> tail) (seq a (seq a (seq a (undefined::Bool)))) (head (seq a (undefined::[] (Bool -> Int))) ((||) (undefined::Bool) True))) ((\a -> seq a (\b -> seq a (\c -> b)) (seq a (id (undefined::Int)))) ((undefined::(Int -> Bool) -> ([] Int) -> [] ([] Bool)) (\a -> True)))
\a -> map (seq a (seq a (\b -> 0))) (id (seq a (seq a (tail (seq a (undefined::[] (([] ([] (Bool -> Bool))) -> ([] Int) -> [] (Int -> Int -> Bool))))))))
(\a -> seq a (\b -> \c -> seq a id) a) ((\a -> seq a ((+1) 0)) True) ((\a -> \b -> seq a (seq b (undefined::Int))) (undefined::([] Int) -> Bool) ((\a -> seq a ([]::[] ([] Bool))) ((!!) ([]::[] Bool) 0)))
id
\a -> (\b -> seq b ((!!) (seq a (seq b (seq a (take 0 (undefined::[] ([] Int)))))) (undefined::Int))) (seq a (\b -> id (\c -> id (map (\d -> (undefined::Int)) (seq a (id (seq c ([]::[] ([] ([] (([] Int) -> Bool -> Bool)))))))))))
\a -> seq a (filter (seq a (seq a (seq a (\b -> (!!) (undefined::[] (Int -> Bool)) (seq b (seq a (undefined::Int))))) ((undefined::Int -> ([] Int) -> ([] ([] Int)) -> [] Bool) (undefined::Int)))) (map (\b -> head (seq b a)) (map (\b -> \c -> (undefined::Int -> [] Int)) (seq a (undefined::[] Bool)))))
(\a -> seq a (filter ((\b -> seq b (\c -> (undefined::([] ([] Int)) -> Bool) (tail (undefined::[] ([] Int))))) (\b -> ([]::[] ([] Bool)))))) (head (undefined::[] (([] ([] ([] Bool))) -> [] (([] ([] Bool)) -> [] ([] Bool)))) (case1 (\a -> \b -> (undefined::[] ([] ([] Bool)))) (undefined::[] ([] ([] Bool))) (undefined::[] Int)))
(\a -> (\b -> seq a (\c -> seq a (\d -> (undefined::[] Int))) (\c -> seq a (seq b (undefined::[] Bool)))) (\b -> (!!) (seq b (seq a (undefined::[] (([] Int) -> Int)))) (seq b b))) (undefined::Bool -> Int)
\a -> a
id
(\a -> case1 (\b -> seq a (\c -> \d -> c)) (seq a id) (seq a (undefined::Int -> [] Int) a)) ((undefined::([] ([] (([] Int) -> ([] Bool) -> [] Bool))) -> Int) (id (head ([]::[] ([] ([] (([] Int) -> ([] Bool) -> [] Bool)))))))
(\a -> \b -> (!!) ([]::[] (Bool -> [] Int)) (seq a (undefined::Int)) (seq b (not (not (seq b False))))) (undefined::[] Int)
\a -> seq a (map (+1) ([]::[] Int))
(undefined::(([] (Int -> Int -> [] Int)) -> Int -> Int -> [] Int) -> ([] Int) -> [] Int) (\a -> \b -> seq a (undefined::Int -> [] Int))
\a -> head (undefined::[] ([] Int))
case1 (\a -> (undefined::(Int -> Bool) -> ([] Int) -> ([] Int) -> [] Int) (\b -> not (seq b False))) ((\a -> seq a (seq a (\b -> b))) (((==)::Int -> Int -> Bool) 2 (id (undefined::Int)))) (map (\a -> seq a (seq a (seq a 2))) ((++) ([]::[] ([] ([] (Int -> Int)))) ([]::[] ([] ([] (Int -> Int))))))
id ((!!) (id ([]::[] ((([] Bool) -> Bool) -> ([] Int) -> [] Int))) ((!!) (undefined::[] Int) 2)) ((\a -> id (\b -> ((==)::Int -> Int -> Bool) (seq b 2) (seq a (undefined::Int)))) (undefined::([] ([] ([] ([] (Bool -> Bool))))) -> [] Int))
\a -> a
\a -> seq a (seq a (\b -> a)) (map (\b -> \c -> seq b (seq a (undefined::([] Int) -> Bool)) (head ([]::[] ([] Int)))) (seq a (undefined::([] Bool) -> [] (([] Int) -> Int -> Int)) ([]::[] Bool)))
\a -> (\b -> (!!) (seq b (seq b (seq a (\c -> ([]::[] ([] Int))) (seq b (seq b (undefined::[] Bool)))))) (undefined::Int)) (seq a (seq a (\b -> seq a 0) (map (seq a (seq a (undefined::Bool -> ([] Int) -> [] Int))) (seq a (seq a (undefined::[] Bool))))))
(\a -> \b -> tail (seq b (\c -> seq a (\d -> ([]::[] Int)) (\d -> seq d True)) (seq a (seq a (seq a ([]::[] ((Int -> [] Int) -> Int -> [] Int))))))) (head ([]::[] (([] Int) -> [] (([] (([] Int) -> Bool)) -> [] (([] Int) -> Bool)))))
\a -> (\b -> seq b ((\c -> (!!) ([]::[] ([] Int)) (seq c (seq b 2))) (seq a (seq b (\c -> seq c (seq a (seq b (undefined::[] (([] ([] ([] Bool))) -> [] ([] ([] Bool))))))))))) (\b -> \c -> (undefined::Bool -> Bool))
\a -> (undefined::Int -> Int -> [] Int) (seq a (\b -> 2) (seq a (seq a ([]::[] (([] Int) -> [] Int))))) 1
\a -> a
(\a -> \b -> (!!) (seq a (seq b (undefined::[] (Bool -> [] Int)))) 0 (seq b (id (undefined::Bool)))) (undefined::[] (([] ([] ([] (Bool -> Bool)))) -> Int -> Int))
case1 (\a -> (undefined::([] ([] Int)) -> ([] Bool) -> ([] Int) -> [] Int) (seq a (\b -> (undefined::[] ([] Int))) (seq a (seq a 1)))) tail ((\a -> seq a (undefined::([] (Int -> Int)) -> [] Bool)) (id (undefined::Bool)) (map (undefined::([] Bool) -> Int -> Int) (id ([]::[] ([] Bool)))))
(\a -> seq a (\b -> \c -> c)) ((\a -> seq a (seq a (undefined::Int))) (id (\a -> \b -> a))) (head ([]::[] (Int -> Int -> ([] ([] Int)) -> [] Int)) (undefined::Int))
(:) (id ((\a -> \b -> a) (undefined::Int) (id (\a -> (\b -> \c -> seq b c) ((+1) (undefined::Int))))))
\a -> a
(undefined::(Int -> ([] (Int -> Int)) -> [] (Int -> Int)) -> ([] Int) -> [] Int) ((\a -> \b -> \c -> seq b ((:) (\d -> a) c)) ((\a -> seq a (seq a (seq a 0))) (\a -> seq a (seq a (seq a (undefined::Bool))))))
(!!) (undefined::[] (([] Int) -> [] Int)) ((undefined::Bool -> Int) ((\a -> seq a (seq a (seq a (undefined::Bool)))) (filter (undefined::([] Bool) -> Bool) (undefined::[] ([] Bool)))))
(\a -> seq a (seq a (seq a (\b -> (undefined::([] Int) -> [] Int))) ((+1) ((undefined::Int -> Int) ((+1) 1))))) ((undefined::Bool -> [] (([] ([] (Bool -> Bool))) -> [] ([] (Bool -> Bool)))) ((undefined::([] (Int -> Bool)) -> Bool) (undefined::[] (Int -> Bool))))
(\a -> \b -> seq b (seq b (seq a (\c -> head (c (seq b b))))) (map (seq b (seq b (seq a (undefined::Bool -> Int -> [] Int)) True)))) (\a -> seq a (undefined::[] (([] ([] (Int -> Int))) -> [] ([] (Int -> Int)))))
case1 (\a -> \b -> (undefined::(([] Int) -> Bool) -> [] Int) (\c -> seq b (seq b (seq b id) (seq a (undefined::Bool))))) ((enumFromTo::Int -> Int -> [Int]) ((!!) (head ([]::[] ([] Int))) (id (undefined::Int))) ((\a -> a) 1))
\a -> (\b -> head (seq a (\c -> (undefined::[] (Bool -> [] Int))) (\c -> seq c (undefined::Int))) (seq b ((undefined::([] Int) -> Bool) a))) (\b -> id (\c -> take (undefined::Int) (seq a (\d -> (undefined::[] (Int -> [] Bool))) True)))
\a -> (undefined::Bool -> [] Int) (seq a (((==)::[Int] -> [Int] -> Bool) (undefined::[] Int) (map (\b -> (undefined::Int)) (seq a ([]::[] ([] ([] Int)))))))
\a -> case1 (\b -> \c -> id a) a ((\b -> (undefined::Bool -> [] (Int -> ([] Int) -> Int)) (seq a b)) (seq a (\b -> (undefined::Bool)) (head ([]::[] (Int -> Int)))))
id
\a -> (undefined::[] Int)
(undefined::(Int -> (([] ([] ([] Bool))) -> [] ([] Bool)) -> ([] ([] ([] Bool))) -> [] ([] Bool)) -> ([] Int) -> [] Int) (\a -> (undefined::(([] ([] ([] Bool))) -> [] ([] Bool)) -> ([] ([] ([] Bool))) -> [] ([] Bool)))
\a -> seq a a
\a -> seq a (seq a a)
\a -> seq a a
\a -> seq a (seq a a)
id (\a -> \b -> b) (\a -> (!!) ((undefined::Bool -> [] (([] Int) -> [] ([] Int))) (seq a (undefined::Bool))) 2)
(\a -> seq a (\b -> seq a (\c -> seq b (undefined::([] Int) -> [] Int)) (seq b a))) 0 (undefined::([] ([] Bool)) -> [] Bool)
\a -> a
(\a -> (!!) (seq a ([]::[] (Int -> ([] Int) -> [] Int))) 0) (\a -> seq a (seq a (case1 (undefined::Bool -> ([] Bool) -> [] Int) ([]::[] Int) (undefined::[] Bool)))) ((undefined::Bool -> Int) ((\a -> a (undefined::Int) (undefined::Int)) ((!!) (undefined::[] (Int -> Bool)))))
(\a -> case1 (\b -> seq a (\c -> \d -> seq a d)) id (head (undefined::[] ([] ([] Bool))))) ((undefined::(Int -> [] Int) -> ([] Bool) -> [] Bool) (undefined::Int -> [] Int))
\a -> a
\a -> head (map (seq a (case1 (\b -> (undefined::([] Bool) -> Bool -> [] Int)) (seq a (id (undefined::Bool -> [] Int))) (head (seq a ([]::[] ([] Bool)))))) (id (seq a (map (seq a (\b -> False)) (seq a (tail ([]::[] (Int -> [] ([] ([] (Bool -> Bool)))))))))))
take ((\a -> seq a (undefined::(([] Bool) -> Bool) -> (Int -> Bool) -> Int) (seq a (seq a (seq a head))) (seq a (case1 (\b -> (undefined::([] Int) -> Int -> Bool)) (undefined::Int -> Bool) (seq a ([]::[] Int))))) ((undefined::Bool -> ([] ([] Bool)) -> [] ([] (Bool -> Bool))) (case1 (\a -> (undefined::([] Bool) -> Bool)) (undefined::Bool) ([]::[] Bool))))
(\a -> seq a id) ((\a -> \b -> seq a (seq a (head ([]::[] (Int -> [] Int))))) (undefined::([] ([] ([] Int))) -> [] ([] Bool)))
case1 (\a -> \b -> \c -> \d -> id d) (\a -> (\b -> seq b id) (seq a (undefined::[] Int))) ((\a -> seq a (undefined::[] Int)) (undefined::Int)) ((\a -> seq a (seq a (\b -> a))) ((+) 0 1) ((\a -> seq a (seq a (\b -> b))) ([]::[] Bool)))
(!!) (undefined::[] (Bool -> Bool -> ([] Int) -> [] Int)) (id 2) False (((==)::Int -> Int -> Bool) (case1 (\a -> (undefined::([] ([] Bool)) -> Int)) (undefined::Int) (undefined::[] ([] Bool))) ((\a -> seq a 2) ([]::[] Int)))
\a -> (++) (seq a ((undefined::(([] Int) -> [] ([] Bool)) -> Int -> [] Int) (seq a (id (undefined::([] Int) -> [] ([] Bool)))) (seq a (+1) (undefined::Int)))) (seq a (undefined::[] Int))
case1 (\a -> seq a (\b -> (!!) (undefined::[] (([] Int) -> [] Int)))) ((\a -> seq a (undefined::Int -> ([] Int) -> [] Int)) False) ((undefined::Bool -> [] Bool) (undefined::Bool)) (case1 (id (\a -> \b -> seq b (undefined::Int))) ((\a -> seq a (undefined::Int)) (undefined::Int -> [] ([] Int))) ((\a -> seq a ([]::[] Bool)) (undefined::Int)))
\a -> seq a (undefined::Int -> [] Int) (seq a ((undefined::([] (([] ([] Int)) -> Int -> Bool)) -> Int) ((\b -> seq b (seq b ([]::[] (([] ([] Int)) -> Int -> Bool)))) (seq a (seq a (seq a (undefined::Int)))))))
(!!) ((undefined::Int -> Int -> [] (([] Int) -> [] Int)) (head ([]::[] Int)) ((\a -> a) (id (undefined::Int)))) ((\a -> (\b -> seq a (seq b (seq a (undefined::Int)))) ((!!) ([]::[] (([] Int) -> Int -> Bool)))) (undefined::([] ([] (([] Int) -> [] Int))) -> [] Int))
(\a -> seq a (\b -> seq b (\c -> (undefined::([] Int) -> [] Int))) (seq a (seq a (seq a (undefined::Bool)))) (case1 (\b -> \c -> True) (undefined::Bool) (seq a (undefined::[] Int)))) ((\a -> seq a (\b -> seq a (\c -> \d -> (+1)) b)) (\a -> seq a (\b -> id) (undefined::[] Int)))
(\a -> \b -> seq a (take a)) (undefined::Int) even
\a -> seq a (undefined::[] Int)
(undefined::([] Int) -> [] Int)
(\a -> (\b -> seq a (seq a (seq a (seq a (undefined::Bool -> ([] Int) -> [] Int))) (seq b (seq b (seq a False))))) (\b -> map (undefined::([] Bool) -> [] ([] Bool)) (seq b (seq b (seq a ([]::[] ([] Bool))))))) (\a -> (\b -> seq b (seq b (\c -> seq c 1)) (seq b ([]::[] (Int -> [] Int)))) (\b -> \c -> \d -> seq a (seq d b)))
\a -> a
(undefined::(([] (([] Int) -> Int -> Bool)) -> ([] Int) -> [] ([] Int)) -> ([] Int) -> [] Int) (\a -> \b -> ([]::[] ([] Int)))
(\a -> seq a (seq a (\b -> seq a (seq b (seq b (undefined::([] Int) -> [] Int)))) (\b -> (!!) b ((+1) 1)))) (\a -> seq a (head (seq a (seq a (seq a (seq a (undefined::[] ((Int -> ([] Int) -> Int) -> ([] Int) -> Int -> ([] Int) -> Int))))))))
(undefined::([] Int) -> [] Int)
(\a -> seq a (seq a (\b -> id (undefined::Int -> ([] Int) -> [] Int)) (seq a (seq a (seq a 1))) (case1 (\b -> (undefined::([] Bool) -> Int)) (undefined::Int) (seq a (undefined::[] Bool))))) (\a -> (\b -> filter (seq b (seq a (undefined::(([] Int) -> Bool) -> Bool))) (seq a (seq b ([]::[] (([] Int) -> Bool))))) (\b -> (\c -> seq c (seq b (seq a (undefined::[] Int)))) (\c -> seq b (seq b ([]::[] (Int -> Bool))))))
\a -> seq a (\b -> a) (seq a (\b -> seq a (seq a (\c -> tail)) (seq a (seq a (seq b (undefined::Bool))))) (seq a ((undefined::(([] Int) -> [] Bool) -> [] ([] (Int -> Int))) (\b -> seq b (seq a (undefined::[] Bool))))))
head ([]::[] ((([] ([] ([] ([] (Int -> Int))))) -> [] (Int -> Bool)) -> ([] Int) -> [] Int)) (undefined::([] ([] ([] ([] (Int -> Int))))) -> [] (Int -> Bool))
case1 (\a -> \b -> \c -> id) ((\a -> \b -> seq a (undefined::([] Int) -> [] Int)) (undefined::Bool)) (filter (\a -> a) ([]::[] Bool)) 1
(\a -> seq a ((\b -> seq b (\c -> c)) (seq a (undefined::Int -> [] (([] Int) -> [] Int)) a))) ((!!) (id (undefined::[] (Int -> Int))) 2 ((\a -> seq a (a (undefined::[] (Int -> Int)) 0)) (undefined::([] (Int -> Int)) -> Int -> Int)))
head ((\a -> \b -> id (\c -> (undefined::[] (([] Int) -> [] Int))) (seq a (seq a (seq b ([]::[] Int))))) ((\a -> seq a (seq a (\b -> (undefined::[] Bool)))) (\a -> seq a (id (undefined::Bool)))) (case1 (\a -> id (seq a (undefined::([] ([] (Int -> Int))) -> Bool))) ((undefined::(([] Bool) -> Bool) -> Bool) (\a -> seq a (undefined::Bool))) ([]::[] ([] (Int -> Int)))))
(undefined::([] Int) -> [] Int)
(\a -> case1 (\b -> (undefined::([] ([] Bool)) -> ([] Int) -> [] Int)) (seq a (undefined::Bool -> ([] Int) -> [] Int) (seq a False)) (seq a (undefined::([] Bool) -> [] ([] Bool)) ([]::[] Bool))) ((\a -> seq a (\b -> seq b head)) True ((undefined::([] ([] (Int -> [] Int))) -> Bool) ((!!) ([]::[] ([] ([] (Int -> [] Int)))) (undefined::Int))))
(!!) (head ((\a -> (:) (seq a (undefined::[] (([] Int) -> [] Int))) (seq a ([]::[] ([] (([] Int) -> [] Int))))) ((\a -> seq a ([]::[] (Bool -> Bool))) (id ([]::[] Bool))))) (case1 (id (\a -> seq a (undefined::([] (Bool -> Bool)) -> Int))) ((undefined::([] (Int -> Bool)) -> Int) ([]::[] (Int -> Bool))) ((undefined::(([] Int) -> Int) -> [] (Bool -> Bool)) (\a -> seq a 1)))
\a -> a
(\a -> \b -> seq a (undefined::(([] Int) -> ([] ([] Int)) -> [] Bool) -> [] Int) ((undefined::Int -> ([] Int) -> ([] ([] Int)) -> [] Bool) (undefined::Int))) (\a -> seq a (undefined::(Int -> Int) -> Int -> ([] Bool) -> Bool) (\b -> b) (undefined::Int))
case1 (\a -> \b -> \c -> \d -> tail ([]::[] Int)) ((\a -> seq a (undefined::Bool -> ([] Int) -> [] Int)) (undefined::[] Int)) (head (undefined::[] (([] Bool) -> [] Bool)) (head (undefined::[] ([] Bool)))) ((undefined::Int -> Bool) ((+) (undefined::Int) (head ([]::[] Int))))
\a -> a
(++) ((\a -> map (seq a ((!!) (undefined::[] ((([] ([] Int)) -> [] Bool) -> Int)) 1)) (map (undefined::Bool -> ([] ([] Int)) -> [] Bool) (undefined::[] Bool))) (\a -> \b -> seq a ((\c -> case1 (undefined::Bool -> ([] Bool) -> Bool) c ([]::[] Bool)) b)))
\a -> case1 (\b -> seq a (seq a (\c -> seq b (undefined::([] (Bool -> Bool)) -> [] Int)))) ((\b -> seq b (undefined::([] (Bool -> Bool)) -> [] Int)) (undefined::Bool)) a (id (undefined::(Int -> ([] Int) -> Bool) -> [] (Bool -> Bool)) (seq a (seq a (seq a (undefined::Int -> Int -> ([] Int) -> Bool))) (seq a (seq a (seq a 1)))))
case1 (undefined::Bool -> ([] Bool) -> ([] Int) -> [] Int) (\a -> id (\b -> seq a a) (\b -> seq a (\c -> b))) (filter ((\a -> seq a (undefined::Bool -> Bool)) (undefined::Bool)) ((\a -> seq a ([]::[] Bool)) (undefined::Int)))
(undefined::(([] ([] ([] (Int -> Bool)))) -> [] (([] Int) -> [] (Bool -> Bool))) -> ([] Int) -> [] Int) (\a -> (undefined::(Bool -> [] ([] ([] Bool))) -> [] (([] Int) -> [] (Bool -> Bool))) (\b -> seq b (case1 (\c -> (undefined::([] Bool) -> [] ([] ([] Bool)))) (undefined::[] ([] ([] Bool))) (seq a (undefined::[] Bool)))))
tail
\a -> seq a ((\b -> seq b ((!!) ((undefined::Bool -> [] ([] Int)) (id False)) (seq b (seq b (+1)) (seq b (seq b 2))))) (\b -> \c -> a))
case1 (id (head ([]::[] (Bool -> ([] Bool) -> ([] Int) -> [] Int)))) (\a -> id a) ((\a -> seq a (undefined::(Int -> Bool) -> [] Bool)) (undefined::Int) (\a -> (\b -> b) (head ([]::[] Bool))))
(\a -> seq a ((!!) (seq a (seq a (\b -> ([]::[] (([] Int) -> [] Int)))) (seq a (seq a (seq a (undefined::Int))))) ((+1) ((\b -> b 2) (seq a (\b -> b)))))) (case1 (\a -> \b -> seq a (\c -> seq b (seq a ([]::[] ([] Bool))))) (\a -> (:) (undefined::[] Bool) (undefined::[] ([] Bool))) (head ([]::[] (([] ([] Bool)) -> [] Bool)) ([]::[] ([] Bool))))
\a -> map ((\b -> (\c -> seq b (\d -> seq c (undefined::Int))) (head (seq a (undefined::[] ([] Bool))))) (seq a (\b -> (!!) (undefined::[] (([] Int) -> Int))) 1)) (undefined::[] (([] Int) -> [] ([] Bool)))
\a -> a
(undefined::Int -> ([] Int) -> [] Int) 2
case1 (\a -> \b -> \c -> c) (\a -> (undefined::[] Int)) ([]::[] Bool)
\a -> (undefined::[] Int)
head ((:) (\a -> \b -> b) ([]::[] (Int -> ([] Int) -> [] Int))) ((\a -> (!!) (seq a (undefined::[] Int)) (seq a (seq a 2))) (\a -> seq a (\b -> seq b (seq b ([]::[] (Int -> [] (Int -> Bool))))) (undefined::Int)))
id
(undefined::(([] ([] (([] Int) -> Bool -> Bool))) -> [] (Int -> [] Int)) -> ([] Int) -> [] Int) (\a -> (:) (seq a (\b -> \c -> ([]::[] Int)) (seq a (seq a (seq a True)))) ((undefined::([] Int) -> [] (Int -> [] Int)) (id (seq a (undefined::[] Int)))))
(\a -> seq a (\b -> (\c -> case1 (seq b (undefined::Bool -> ([] Bool) -> [] Int)) (seq c b) (seq b ([]::[] Bool))) (seq a (head (undefined::[] (Int -> [] ([] (Int -> Int))))) (seq a (head b))))) (undefined::([] (([] Int) -> Bool)) -> [] (([] (([] Int) -> Bool)) -> ([] Int) -> Bool))
(\a -> (undefined::([] (([] Int) -> Bool)) -> ([] Int) -> [] Int) ((\b -> seq b (undefined::[] (([] Int) -> Bool))) (seq a (not (undefined::Bool))))) (\a -> \b -> \c -> (undefined::(([] (Int -> Int)) -> [] (Int -> Int)) -> Bool) ((undefined::Int -> ([] (Int -> Int)) -> [] (Int -> Int)) ((+) 2 a)))
(\a -> id (head (undefined::[] (([] (Int -> Bool)) -> ([] Int) -> [] Int))) (id (seq a (seq a (seq a (undefined::Bool -> [] (Int -> Bool)) (seq a (undefined::Bool))))))) (++)
(undefined::(([] Bool) -> [] Bool) -> ([] Int) -> [] Int) (case1 (\a -> \b -> \c -> seq a (id c)) tail ((\a -> seq a ([]::[] Int)) (head (undefined::[] Int))))
(undefined::([] Int) -> ([] Int) -> ([] Int) -> [] Int) (case1 (\a -> \b -> (undefined::[] Int)) ([]::[] Int) ([]::[] Bool)) ((undefined::(([] (Int -> ([] Int) -> Int)) -> Int -> [] Int) -> [] Int) (\a -> case1 (undefined::Int -> ([] Int) -> Int -> [] Int) (seq a (undefined::Int -> [] Int)) (seq a (undefined::[] Int))))
(\a -> \b -> seq b (seq a (seq a (map (\c -> (undefined::Int)))) (undefined::[] (([] (([] Bool) -> [] Bool)) -> [] Bool)))) (case1 (undefined::(Int -> Int) -> ([] (Int -> Int)) -> Int) ((-) (undefined::Int) 0) ((\a -> seq a (undefined::[] (Int -> Int))) (id (undefined::Int))))
head ((\a -> seq a (\b -> map (\c -> tail) (seq b ([]::[] Int)))) (\a -> id (seq a (undefined::Bool -> Int)) (id (seq a (undefined::Bool)))) ((\a -> seq a ((undefined::([] Int) -> Int -> Bool) (tail (undefined::[] Int)))) (id (\a -> \b -> b))))
(\a -> seq a (seq a (seq a (seq a (seq a (undefined::Bool -> Bool -> ([] Int) -> [] Int) (even 1))) (a (seq a (seq a ([]::[] Int))) (seq a (seq a (undefined::[] Int))))))) ((==)::[Int] -> [Int] -> Bool)
\a -> (undefined::Bool -> (Bool -> ([] ([] ([] Bool))) -> [] ([] ([] Bool))) -> [] Int) (seq a (seq a (\b -> (undefined::Bool))) ((!!) ([]::[] ([] ([] ([] ([] (Int -> Int)))))) (undefined::Int))) (\b -> seq b (seq a (seq a (undefined::([] (Int -> Bool)) -> ([] ([] ([] Bool))) -> [] ([] ([] Bool))) (case1 (\c -> (undefined::([] Bool) -> [] (Int -> Bool))) (seq b ([]::[] (Int -> Bool))) (undefined::[] Bool)))))
id ((\a -> (undefined::(([] Int) -> Bool -> Bool) -> ([] Int) -> [] Int) (seq a (seq a (\b -> id)))) (\a -> (\b -> seq b (\c -> seq b ([]::[] Bool)) (\c -> seq c (seq b odd))) (id (seq a (\b -> \c -> c)))))
(!!) ((undefined::Int -> Bool -> [] (([] Int) -> [] Int)) 0 (((==)::Bool -> Bool -> Bool) (undefined::Bool) (undefined::Bool))) ((\a -> head (seq a (\b -> (undefined::[] Int)) (seq a (seq a (undefined::Int -> Bool))))) (\a -> seq a (undefined::Bool -> Int) (seq a (undefined::Bool))))
id (\a -> seq a (\b -> case1 (head (seq b (undefined::[] (Bool -> ([] Bool) -> [] Int)))) (id (seq a ([]::[] Int))) (seq a (seq b (undefined::[] Bool)))) (id (\b -> seq b (\c -> seq b (head (seq c (undefined::[] (Bool -> [] (([] ([] Bool)) -> [] Bool)))) (seq c (seq a (seq c (seq c (undefined::Bool))))))))))
(\a -> head (seq a (seq a (seq a (undefined::[] ((Int -> Int) -> ([] Int) -> [] Int)))))) (\a -> seq a id) ((\a -> seq a (head ([]::[] (([] ([] Bool)) -> Int -> Int))) (seq a (seq a (undefined::[] ([] Bool))))) (\a -> a))
\a -> a
\a -> (undefined::(([] ([] Int)) -> [] ([] (Int -> Int))) -> [] Int) ((\b -> id (\c -> (undefined::Int -> [] ([] (Int -> Int))) (seq c (seq b b)))) (id (\b -> 0) head))
(undefined::([] ([] (Bool -> Bool))) -> ([] Int) -> [] Int) (filter ((undefined::([] Int) -> ([] (Bool -> Bool)) -> Bool) ([]::[] Int)) (undefined::[] ([] (Bool -> Bool))))
\a -> a
(!!) ((undefined::Int -> Bool -> [] (([] Int) -> [] Int)) 2 ((\a -> seq a (seq a (seq a (undefined::Bool)))) 2)) (undefined::Int)
(undefined::(([] Int) -> [] (Int -> [] Int)) -> Bool -> ([] Int) -> [] Int) (\a -> seq a (seq a (head (seq a (seq a (seq a (undefined::[] ([] (Int -> [] Int))))))))) False
\a -> seq a (seq a (\b -> (undefined::(([] Int) -> [] (Int -> [] Int)) -> [] Int) ((!!) (undefined::[] (([] Int) -> [] (Int -> [] Int))) (seq a (seq a 1))))) (map (\b -> seq a (\c -> id (seq c (\d -> c) ((+1) (seq b (seq c b)))))))
\a -> seq a (seq a (\b -> \c -> seq b (\d -> a) (\d -> seq d True))) (map (seq a (\b -> ([]::[] (Int -> Int)))) (seq a (seq a (undefined::[] Bool)))) (undefined::Int)
id
\a -> (\b -> seq b (seq a (undefined::([] ([] (Int -> Int))) -> [] Int))) ((undefined::(Int -> [] Int) -> Int -> ([] Bool) -> Bool) (\b -> a)) ((\b -> seq b (seq a (\c -> seq a ([]::[] ([] (Int -> Int))))) (seq b even)) (\b -> seq a (\c -> seq a (seq c ([]::[] (Int -> Int)))) (undefined::Bool)))
tail
\a -> a
\a -> head (tail (undefined::[] ((([] (Int -> [] Bool)) -> ([] (([] Int) -> Bool)) -> [] (([] Int) -> Bool)) -> [] Int))) (undefined::([] (Int -> [] Bool)) -> ([] (([] Int) -> Bool)) -> [] (([] Int) -> Bool))
(undefined::([] Int) -> [] Int)
\a -> (undefined::(([] Int) -> (([] Int) -> [] Bool) -> ([] (([] Int) -> [] Bool)) -> ([] Int) -> [] Bool) -> [] Int) (seq a (seq a (\b -> seq b (seq a (\c -> seq c (\d -> c))))))
\a -> a
case1 ((undefined::Bool -> Bool -> ([] Bool) -> ([] Int) -> [] Int) True) ((\a -> seq a (\b -> id) (seq a (seq a (undefined::Int)))) (id (undefined::Bool -> [] ([] (Int -> Bool))) (not (undefined::Bool)))) (undefined::[] Bool)
(undefined::Bool -> ([] Int) -> [] Int) (undefined::Bool)
(\a -> seq a (seq a (\b -> (undefined::Bool -> ([] Int) -> [] Int) (odd 1)) (\b -> seq a (\c -> case1 (undefined::Bool -> ([] Bool) -> [] Int) b (undefined::[] Bool))))) (\a -> seq a (seq a (seq a (seq a (seq a (\b -> True)))) (case1 (seq a (undefined::([] Bool) -> ([] ([] Bool)) -> Int)) (undefined::Int) (seq a (undefined::[] ([] Bool))))))
(\a -> seq a (seq a (seq a (seq a (seq a (\b -> \c -> c)))) ((\b -> seq b (seq b (seq b id))) (undefined::Int -> Bool -> Bool)))) (map (undefined::([] ([] Bool)) -> ([] ([] ([] Bool))) -> [] ([] Bool)))
\a -> head ((undefined::(([] Bool) -> Bool) -> [] ([] Int)) (\b -> (undefined::Bool)))
\a -> a
\a -> a
(\a -> seq a (\b -> seq b (seq a ((undefined::Int -> (Bool -> Bool -> Bool) -> [] Int) (seq a (a ([]::[] ([] (Bool -> Bool)))))) ((\c -> seq c (||)) (\c -> seq c (seq b (undefined::Int))))))) ((\a -> (\b -> \c -> seq a (seq b 1)) (seq a a)) ((\a -> id (seq a False)) ((!!) ([]::[] Int) 1)))
id (id (head (tail (undefined::[] ((([] Int) -> (Int -> Bool) -> Int -> Bool) -> ([] Int) -> [] Int))))) (\a -> \b -> (undefined::(([] Int) -> [] Int) -> Int -> Bool) (\c -> (undefined::[] Int)))
tail
tail
\a -> head (seq a ([]::[] (([] (([] ([] (Int -> Bool))) -> Int -> ([] Int) -> Int -> Int -> [] Int)) -> [] Int))) (seq a (seq a (seq a (seq a (tail (seq a (undefined::[] (([] ([] (Int -> Bool))) -> Int -> ([] Int) -> Int -> Int -> [] Int))))))))
head ((\a -> (undefined::(([] ([] ([] Bool))) -> [] Int) -> [] (([] Int) -> [] Int)) ((\b -> seq a (seq b (undefined::([] ([] ([] Bool))) -> [] Int))) (\b -> seq a b))) (undefined::(([] ([] Int)) -> [] Bool) -> ([] ([] Int)) -> [] ([] (Int -> Bool))))
filter (\a -> seq a (((==)::[Int] -> [Int] -> Bool) (seq a ((!!) (seq a (undefined::[] (((Bool -> Bool) -> Bool) -> [] Int))) a (\b -> seq b (b (id False))))) (id (seq a ((\b -> seq b (undefined::(Int -> Int -> Bool) -> [] Int)) (seq a (undefined::Bool))) (\b -> \c -> (\d -> d) (seq c (seq a False)))))))
\a -> seq a (seq a a)
(\a -> (undefined::([] ([] (Int -> Int))) -> ([] Int) -> [] Int) ((!!) ([]::[] ([] ([] (Int -> Int)))) (a 1 (undefined::Int) 0))) (\a -> seq a (\b -> seq b (head ([]::[] (Int -> Int -> Int -> Int))) a) ((\b -> \c -> seq b ([]::[] Int)) (seq a a)))
(undefined::([] Int) -> [] Int)
(\a -> seq a (seq a (\b -> \c -> c)) (\b -> id (seq a (undefined::(Int -> Bool -> Bool) -> [] Int)) (\c -> seq a not))) (\a -> seq a (seq a (id (id (id (\b -> b))))))
(\a -> seq a (seq a (\b -> map (seq b (\c -> c)))) (seq a ((\b -> seq a (seq b (undefined::[] (([] ([] Bool)) -> [] ([] Bool))))) (seq a (seq a True))))) (\a -> (!!) ((undefined::Int -> [] ([] Bool)) (head (undefined::[] Int))) ((\b -> seq b 2) (head (seq a ([]::[] ([] Bool))))))
id (\a -> seq a (\b -> (!!) (seq a (undefined::[] (([] Int) -> [] Int))) (seq a (undefined::Int))) (id ((undefined::(Int -> Bool) -> Bool) (undefined::Int -> Bool)))) (head ([]::[] ([] ([] (Int -> Bool)))))
\a -> seq a ((undefined::(Bool -> Bool) -> [] Int) ((undefined::(([] ([] Int)) -> [] Int) -> Bool -> Bool) (\b -> a)))
\a -> seq a (\b -> head (seq a (\c -> seq c (undefined::Int -> [] ([] Int))) a ((+) 2 (seq a (seq b (undefined::Int)))))) a
\a -> (\b -> \c -> seq a (seq b (\d -> ([]::[] Int))) a) (tail ([]::[] ([] ([] (([] Int) -> [] (Int -> [] Int)))))) (seq a (undefined::Int))
\a -> seq a (seq a (seq a (\b -> map (id (\c -> (undefined::Int))) (tail (seq a (seq b (undefined::[] (([] Int) -> Int -> Int -> Bool)))))))) (undefined::Bool)
\a -> map (\b -> (-) b b) (seq a (case1 (\b -> (undefined::([] Int) -> Int -> [] Int)) (\b -> a) (seq a a) (seq a (seq a (seq a (undefined::(Int -> Int -> Bool) -> Int))) (seq a (\b -> seq a even)))))
\a -> case1 (\b -> (\c -> (undefined::Int -> ([] Int) -> [] Int) (seq c b)) (undefined::([] Bool) -> Bool)) a (head (undefined::[] (Bool -> [] Int)) (seq a (seq a (undefined::Int -> Bool)) (seq a 1)))
\a -> seq a (map (\b -> b) a)
(undefined::(([] ([] (([] ([] Int)) -> [] ([] Int)))) -> [] (Int -> [] Int)) -> ([] Int) -> [] Int) (\a -> (!!) (undefined::[] ((Int -> Bool) -> [] (Int -> [] Int))) (id (undefined::Int)) (seq a (id (\b -> (undefined::Int -> Bool)) (\b -> seq b (seq a (undefined::[] Bool))))))
(undefined::(([] Int) -> ([] (([] Int) -> [] ([] Bool))) -> Int -> Bool) -> ([] Int) -> [] Int) ((\a -> seq a (\b -> (undefined::([] (([] Int) -> [] ([] Bool))) -> Int -> Bool))) ((\a -> seq a (undefined::Bool)) ((!!) (undefined::[] (Int -> Bool)) (undefined::Int))))
(!!) ((!!) (undefined::[] (Int -> [] (([] Int) -> [] Int))) (undefined::Int) (undefined::Int)) (case1 ((undefined::([] Bool) -> Bool -> ([] Bool) -> Int) (undefined::[] Bool)) (id (id 2)) ((\a -> seq a ([]::[] Bool)) 0))
head ([]::[] ((([] ([] ([] Int))) -> [] ([] Bool)) -> ([] Int) -> [] Int)) ((\a -> (\b -> \c -> seq c (seq b (undefined::[] ([] Bool)))) (seq a a)) (id ((!!) ([]::[] Int) (undefined::Int))))
(\a -> seq a (\b -> (:) (b (undefined::[] Int) (undefined::Int) a))) (undefined::Int) (\a -> (-))
(undefined::(Int -> Int -> Int) -> ([] Int) -> [] Int) (\a -> \b -> b)
id
case1 take ([]::[] Int)
(\a -> take (seq a (seq a (head ([]::[] ((Bool -> Bool -> Bool) -> Int)))) (\b -> \c -> seq b (seq b (undefined::Int -> Bool)) (seq c (seq a (undefined::Int)))))) (\a -> a)
(undefined::(([] Int) -> ([] Int) -> [] Int) -> ([] Int) -> [] Int) (\a -> \b -> (\c -> seq c (\d -> seq d (undefined::[] Int)) ([]::[] Bool)) id)
(\a -> case1 (seq a (seq a (\b -> \c -> \d -> d))) ((!!) ([]::[] (([] Int) -> [] Int)) (undefined::Int)) ((++) ([]::[] Bool) ([]::[] Bool))) (\a -> seq a (seq a (\b -> \c -> \d -> d) False) ((!!) (seq a (seq a (undefined::[] Bool))) (seq a (seq a 0))))
(undefined::([] Int) -> [] Int)
head ([]::[] (([] Int) -> [] Int))
id
\a -> (undefined::[] Int)
\a -> head ([]::[] (Bool -> [] Int)) (((==)::[Int] -> [Int] -> Bool) a ((\b -> seq b a) (not (seq a True))))
\a -> a
\a -> ([]::[] Int)
head (tail (undefined::[] ((([] ([] Int)) -> [] ([] (Int -> Bool))) -> ([] Int) -> [] Int))) (\a -> seq a (seq a (seq a (filter (id (seq a (undefined::([] (Int -> Bool)) -> Bool))))) ((undefined::Int -> [] ([] (Int -> Bool))) (id (seq a 2)))))
(undefined::(([] Int) -> ([] (([] Int) -> ([] Bool) -> [] Bool)) -> Bool) -> ([] Int) -> [] Int) (\a -> \b -> (undefined::(Int -> Int -> [] Int) -> Bool) (seq a (\c -> \d -> \e -> a) (seq b (seq a (seq b False)))))
\a -> seq a (id (undefined::Bool -> (([] (Bool -> Bool)) -> [] (Bool -> Bool)) -> [] Int) (seq a (seq a ((\b -> b) (seq a (seq a False))))) (\b -> b))
head ((undefined::(([] Int) -> Int -> Int -> Int) -> [] (([] Int) -> [] Int)) ((\a -> \b -> (!!) (seq b ([]::[] (Int -> Int -> Int))) ((+1) (seq a 1))) True))
case1 (\a -> seq a (\b -> seq a tail)) ((\a -> \b -> (undefined::Int -> [] Int) (seq b a)) ((undefined::Bool -> Int) (not True))) (map (undefined::(Int -> Bool) -> Int) (take 2 (undefined::[] (Int -> Bool))))
(\a -> \b -> (\c -> (undefined::([] (Int -> Int)) -> [] Int) (seq c (seq b (seq c (undefined::[] (Int -> Int)))))) (\c -> seq c (seq a (head (seq c (seq a (seq b ([]::[] ([] ([] ([] ([] (Bool -> Bool))))))))))))) (\a -> head (seq a (seq a (id ([]::[] ([] (([] (Int -> Int -> [] Int)) -> ([] Bool) -> [] (Bool -> Bool))))))))
(\a -> \b -> seq a (\c -> seq c c)) (\a -> seq a (seq a (\b -> \c -> c)) ((!!) ([]::[] Int) (undefined::Int))) True
head (id ((\a -> seq a (head (seq a ([]::[] ([] (Bool -> ([] Int) -> [] Int)))))) ((\a -> seq a (seq a (undefined::Bool))) (\a -> seq a (seq a ([]::[] Int)))))) ((\a -> seq a ((!!) (a (seq a (undefined::[] ([] (([] Int) -> Int))))) (seq a (seq a 2)))) (undefined::([] ([] (([] Int) -> Int))) -> [] Bool))
(undefined::([] ([] (Int -> Int))) -> ([] Int) -> [] Int) ((++) ((!!) (undefined::[] ([] ([] (Int -> Int)))) (undefined::Int)) ((\a -> seq a ([]::[] ([] (Int -> Int)))) (odd 0)))
filter ((undefined::(([] Int) -> ([] Int) -> [] ([] Int)) -> Int -> Bool) ((undefined::Int -> ([] Int) -> ([] Int) -> [] ([] Int)) ((\a -> a) ((+) 0 (undefined::Int)))))
\a -> a
\a -> a
\a -> a
\a -> (\b -> seq b (\c -> head (undefined::[] (Bool -> [] Int))) (\c -> c)) (seq a (seq a (seq a (\b -> (undefined::([] Bool) -> [] (Bool -> Bool)))) (seq a (seq a (seq a (undefined::Bool)))))) ((undefined::Int -> (([] Int) -> Bool -> Bool) -> Bool) (seq a (head a)) (seq a (seq a (seq a (seq a (undefined::Bool -> ([] Int) -> Bool -> Bool))) (head (seq a ([]::[] Bool))))))
\a -> seq a (seq a (seq a (\b -> seq a (undefined::Int -> [] Int)) (seq a (seq a (seq a (seq a (undefined::Int -> [] (([] Bool) -> [] Bool)) (seq a 0))))))) (seq a (\b -> case1 (\c -> (undefined::([] Bool) -> Int)) (seq b (undefined::Int)) (seq a (undefined::[] Bool))) (seq a (seq a (\b -> \c -> ([]::[] (Int -> Int))) (not (undefined::Bool)))))
id ((\a -> \b -> seq a (seq b (seq a (enumFromTo'::Int -> Int -> [Int])) a) ((\c -> seq c (seq c a)) (seq a (seq a (seq b (undefined::[] (Int -> [] Int))))))) ((\a -> seq a 2) ((undefined::Int -> Int -> ([] Int) -> Bool) ((!!) (undefined::[] Int) 1))))
\a -> seq a (seq a ((undefined::(([] ([] Int)) -> [] Int) -> Bool -> [] Int) (seq a (\b -> a))) (seq a ((\b -> head (seq b (undefined::[] (([] (([] Bool) -> Bool)) -> Bool))) (seq b (id (undefined::[] (([] Bool) -> Bool))))) (head ([]::[] (([] Int) -> ([] (Int -> ([] Int) -> Int)) -> Bool))))))
\a -> a
id (head ([]::[] ((([] (Int -> Bool)) -> [] (Int -> Bool)) -> ([] Int) -> [] Int))) ((:) (\a -> seq a (undefined::Bool)))
head ((\a -> seq a (seq a ((undefined::Int -> [] (Int -> ([] Int) -> [] Int)) (seq a 1)))) ([]::[] ([] (Bool -> Bool)))) ((\a -> seq a (\b -> seq b (undefined::Int))) (undefined::([] Bool) -> ([] Int) -> Int) (case1 (undefined::([] Int) -> ([] ([] Int)) -> Int) (undefined::Int) ([]::[] ([] Int))))
take ((\a -> seq a (seq a ((\b -> \c -> seq c (seq b c)) (seq a a) (seq a ((+) 1) (seq a 0))))) ((\a -> seq a (take 1 (seq a (undefined::[] Int)))) (head ((!!) (undefined::[] ([] (Int -> [] Bool))) 2))))
id (\a -> id (id (\b -> seq b a)) (seq a (seq a (seq a (\b -> ([]::[] ([] ([] Bool))))) (\b -> (undefined::[] ([] Bool))))))
\a -> (undefined::[] Int)
(\a -> seq a (\b -> seq a (seq a (\c -> c)))) False ((undefined::([] ([] (Int -> Bool))) -> ([] Bool) -> [] (Bool -> Bool)) (map (\a -> (undefined::[] (Int -> Bool))) ([]::[] Int)))
\a -> (undefined::(([] Int) -> Int -> Int -> Bool) -> [] Int) ((undefined::Int -> ([] Int) -> Int -> Int -> Bool) (seq a (\b -> seq b (seq b (undefined::Int))) (\b -> (undefined::Bool))))
(\a -> \b -> (undefined::(([] ([] Int)) -> [] Int) -> [] Int) (\c -> seq a (head (seq b (undefined::([] Bool) -> [] ([] Int)) (seq c (undefined::[] Bool)))))) ((\a -> id (\b -> seq a (undefined::[] ([] ([] (([] Int) -> Int))))) (undefined::Bool)) ((++) (undefined::[] Bool)))
(\a -> (\b -> seq b (seq a (seq b (undefined::Bool -> ([] Int) -> [] Int)))) False) (head ((\a -> seq a ([]::[] (([] ([] Int)) -> [] ([] Bool)))) (head ([]::[] Int)))) (id (\a -> a) ((\a -> seq a (seq a (seq a (undefined::Bool)))) (\a -> a)))
map (\a -> a)
\a -> seq a (map (seq a (\b -> id (seq b (seq b (seq a (undefined::Int -> Bool -> Int) (seq b (undefined::Int))) (seq a (\c -> (undefined::Bool)) ((+1) 1)))))) (id (seq a (seq a (seq a (seq a (id (id ([]::[] (([] (Int -> Int -> Bool)) -> [] (([] Int) -> Bool)))))))))))
tail
\a -> (\b -> \c -> seq a (seq a (\d -> (undefined::[] Int)) (seq c (seq b ([]::[] (Bool -> Bool)))))) ((\b -> seq a (seq b (undefined::Int))) (seq a (seq a (seq a (undefined::Int))))) ((\b -> \c -> seq b ([]::[] Bool)) (seq a (seq a (\b -> seq b (undefined::Int))) (seq a ([]::[] (([] ([] Bool)) -> [] Bool)))))
(undefined::([] Int) -> [] Int)
case1 (undefined::Bool -> ([] Bool) -> ([] Int) -> [] Int) id (map (\a -> seq a (seq a (seq a True))) ([]::[] ([] Int)))
\a -> case1 (seq a (\b -> seq b (\c -> a))) ([]::[] Int) (seq a ((undefined::Int -> [] (([] Int) -> Int -> Bool)) (undefined::Int)))
\a -> head (seq a (seq a (head ([]::[] ((([] (Int -> ([] Int) -> [] Int)) -> Int -> ([] Int) -> [] Int) -> [] ([] Int))) (seq a (\b -> seq b (\c -> seq c (seq a (seq b id))))))))
id
\a -> a
tail
(\a -> seq a (\b -> seq b (:) ((+1) 0))) ((undefined::(Int -> Int) -> Bool) (\a -> seq a (head ([]::[] Int)))) (\a -> seq a (seq a (\b -> seq a (\c -> seq a (\d -> (undefined::Bool)) ((+1) a)) (seq a tail))))
(undefined::(([] ([] (([] (Bool -> Bool)) -> Bool -> Bool))) -> [] Bool) -> ([] Int) -> [] Int) (undefined::([] ([] (([] (Bool -> Bool)) -> Bool -> Bool))) -> [] Bool)
\a -> (undefined::(([] Int) -> ([] ([] ([] Int))) -> Int -> [] ([] Int)) -> [] Int) (seq a (\b -> \c -> \d -> seq c (\e -> (\f -> seq d (seq f ([]::[] ([] Int)))) (seq b (seq c (undefined::([] Int) -> [] Int)))) (map (seq d (seq a (\e -> seq c ([]::[] ([] Int))))))))
(undefined::([] Int) -> [] Int)
\a -> a
id (undefined::((Int -> Bool -> Bool) -> Int -> Int -> Bool) -> ([] Int) -> [] Int) ((\a -> seq a (\b -> seq a (\c -> \d -> (undefined::Int -> Bool)) (seq b (undefined::[] Bool)))) ((undefined::Bool -> Int) True))
(\a -> \b -> seq a (seq a (seq b (seq b (undefined::([] Bool) -> Bool -> [] Int))) (seq a (undefined::[] Bool))) (case1 (\c -> (undefined::([] Int) -> Bool)) (undefined::Bool) (seq b b))) (tail (head (map (\a -> (\b -> seq b ([]::[] (Bool -> Bool))) (seq a (seq a (undefined::Int -> Bool)))) ((!!) (undefined::[] ([] ([] (([] Int) -> [] Int)))) 0))))
tail
(\a -> seq a (\b -> seq a (take (seq b (head ([]::[] ((Int -> Bool) -> Int)) (\c -> seq a True))) (seq a (seq b (undefined::Bool -> [] Int)) (seq a (seq a False)))))) (undefined::([] (Int -> Int -> Int)) -> ([] (Int -> [] Bool)) -> Int -> Int)
case1 (\a -> \b -> \c -> ([]::[] Int)) id ((\a -> seq a ([]::[] (Bool -> Bool))) ((\a -> seq a (undefined::Bool)) 2))
id (\a -> tail) (undefined::[] (([] (([] Int) -> ([] ([] Int)) -> [] Bool)) -> Int -> [] Int))
\a -> a
id
head (undefined::[] ((Int -> ([] ([] ([] Bool))) -> Int -> [] (([] Bool) -> [] Bool)) -> ([] Int) -> [] Int)) (undefined::Int -> ([] ([] ([] Bool))) -> Int -> [] (([] Bool) -> [] Bool))
id (\a -> \b -> b) ((\a -> seq a (seq a (\b -> (undefined::Bool)) (tail (seq a ([]::[] Bool))))) ((undefined::Bool -> ([] Int) -> Int -> Int) (((==)::[Int] -> [Int] -> Bool) (undefined::[] Int) ([]::[] Int))))
\a -> case1 (seq a (seq a (undefined::Int -> Bool -> ([] Bool) -> [] Int) ((undefined::Int -> Int) (seq a (undefined::Int))))) a (seq a (seq a (seq a (\b -> seq b (undefined::[] Bool))) (seq a (seq a (seq a (seq a True))))))
\a -> (undefined::Bool -> [] Int) (seq a (seq a ((\b -> seq b (seq a (seq a (undefined::([] Int) -> Bool)) (undefined::[] Int))) (seq a (\b -> tail (seq a (undefined::[] ([] (([] Int) -> Int -> Int -> Bool)))))))))
\a -> seq a a
\a -> a
id
(\a -> seq a ((\b -> seq b (\c -> (undefined::([] Int) -> [] Int)) (seq a (a (seq a ([]::[] Int))))) (\b -> (undefined::([] ([] (Int -> Bool))) -> [] (([] Int) -> Bool)) (id (seq b ([]::[] ([] (Int -> Bool)))))))) (\a -> 0)
(undefined::([] Int) -> [] Int)
head (head (undefined::[] ([] ((([] Int) -> ([] Int) -> [] Bool) -> ([] Int) -> [] Int)))) ((\a -> seq a (\b -> id (undefined::([] Int) -> ([] Int) -> [] Bool)) (not (seq a (undefined::Bool)))) ((\a -> head (seq a (undefined::[] (([] Int) -> [] (Int -> Bool))))) (undefined::Int)))
\a -> a
\a -> seq a (map (\b -> (\c -> seq a (seq a (seq a ((+1) (seq c (undefined::Int)))))) ((\c -> id c) (seq a (id (undefined::Bool))))) ((\b -> seq b (seq a ([]::[] (([] Int) -> ([] Int) -> [] ([] Int))))) (case1 (undefined::([] Bool) -> ([] ([] Bool)) -> Int) (seq a (undefined::Int)) ([]::[] ([] Bool)))))
\a -> a
case1 (\a -> \b -> take (undefined::Int)) (\a -> seq a a) ((\a -> (++) ([]::[] Int) (seq a ([]::[] Int))) ((\a -> a) (id False)))
\a -> a
map ((!!) (map (\a -> (\b -> seq b (\c -> c)) (id (undefined::[] ([] (Int -> Int))))) (id (undefined::Int -> [] Int) (id 2))) ((-) (undefined::Int) 1))
(\a -> case1 (id (\b -> \c -> \d -> ([]::[] Int))) (undefined::([] Int) -> [] Int) ((\b -> seq b (undefined::[] Int)) (seq a ([]::[] (Bool -> Bool))))) False
id
(\a -> seq a (seq a (\b -> \c -> c)) (map (\b -> \c -> b) (seq a (undefined::[] ([] Bool))))) ((\a -> \b -> id ((:) ([]::[] Bool) (seq a (undefined::[] ([] Bool))))) ((undefined::Int -> Int -> [] (Int -> Int)) 2))
id (id (head (head ([]::[] (Int -> [] (Bool -> ([] Int) -> [] Int))) (head ([]::[] (Int -> Int)) (id 0))))) ((\a -> seq a (\b -> seq b (undefined::Bool)) (seq a (seq a (seq a ([]::[] ([] ([] (([] Bool) -> [] Bool)))))))) ((\a -> seq a (seq a (seq a ([]::[] (Int -> [] Int))))) ([]::[] ([] Int))))
(\a -> case1 (seq a (\b -> take) (tail (seq a ([]::[] Bool)))) ((\b -> seq b (undefined::[] Int)) (seq a ([]::[] Bool)))) 0
\a -> seq a (seq a (seq a ((!!) (seq a ([]::[] ((([] (Bool -> Bool)) -> [] (Bool -> Bool)) -> [] Int))) (undefined::Int) (seq a (seq a (seq a (case1 (undefined::(Bool -> Bool) -> ([] (Bool -> Bool)) -> [] (Bool -> Bool)) ((++) (seq a ([]::[] (Bool -> Bool))) ([]::[] (Bool -> Bool))))))))))
\a -> seq a a
id
\a -> (undefined::[] Int)
\a -> seq a (seq a a)
(!!) ((\a -> seq a (seq a (undefined::[] (Bool -> ([] Int) -> [] Int)))) (head (undefined::[] Int))) ((\a -> seq a (seq a (undefined::Int))) (\a -> id not)) (case1 (\a -> (\b -> seq b (undefined::([] Int) -> Bool)) (seq a 2)) ((\a -> seq a True) (id (undefined::Int -> Int -> Bool -> Bool))) ((\a -> seq a ([]::[] Int)) (id 1)))
(\a -> \b -> seq b (\c -> b) (seq a (\c -> b) (seq b (seq b (seq a (undefined::[] ([] ([] (Int -> Bool))))))))) (case1 (\a -> (\b -> seq b (undefined::([] Bool) -> ([] Int) -> Bool)) (seq a a)) (id (\a -> (undefined::Bool))) (undefined::[] Bool))
tail
head ((undefined::(([] ([] Bool)) -> [] ([] Bool)) -> [] (([] Int) -> [] Int)) (\a -> (undefined::(Int -> Int) -> [] ([] Bool)) (case1 (undefined::Int -> ([] Int) -> Int -> Int) (\b -> b) (seq a ([]::[] Int)))))
id
\a -> a
head ((\a -> seq a (map (\b -> (undefined::Bool -> ([] Int) -> [] Int)) (seq a ([]::[] Bool)))) ((!!) (undefined::[] (([] Bool) -> [] Bool)) (undefined::Int))) (undefined::Bool)
\a -> (undefined::[] Int)
head (id (id (id (undefined::[] ((([] ([] Int)) -> [] ([] (Int -> Bool))) -> ([] Int) -> [] Int))))) ((\a -> head (seq a (seq a (undefined::[] (([] ([] Int)) -> [] ([] (Int -> Bool))))))) True)
(\a -> \b -> seq b (map (\c -> seq b (\d -> seq b a) (undefined::Bool)) (head ([]::[] (Bool -> [] Int)) (even a)))) (undefined::Int)
\a -> a
(\a -> seq a (undefined::(([] Bool) -> [] Bool) -> ([] Int) -> [] Int) (head (undefined::[] (Bool -> ([] Bool) -> [] Bool)) (seq a a))) False
\a -> head (seq a (seq a (\b -> (undefined::Bool -> [] (Bool -> [] Int)) (b (seq b 0)))) ((\b -> \c -> seq a (seq b False)) a)) (seq a (seq a ((&&) (undefined::Bool) (seq a (\b -> seq b (undefined::Bool)) (seq a (seq a (undefined::Int)))))))
(!!) (undefined::[] (Bool -> Bool -> ([] Int) -> [] Int)) (head (undefined::[] Int)) (case1 (undefined::Bool -> ([] Bool) -> Bool) (undefined::Bool) (undefined::[] Bool)) (head (filter (\a -> seq a (seq a (undefined::([] Int) -> Bool)) (seq a (seq a ([]::[] Int)))) (id (\a -> ([]::[] Bool)) 0)))
\a -> a
take (head (undefined::[] (Int -> (([] ([] Int)) -> [] ([] Bool)) -> Int)) ((\a -> seq a (seq a (undefined::Int))) ([]::[] ([] (Int -> Bool)))) (case1 (\a -> seq a (\b -> \c -> (undefined::[] ([] Bool)))) ((\a -> seq a (undefined::([] ([] Int)) -> [] ([] Bool))) False) ((++) ([]::[] Int) (undefined::[] Int))))
\a -> seq a (\b -> seq a (\c -> a)) (seq a (seq a (\b -> 1)) (\b -> seq a (seq b (seq b (undefined::Bool))))) (\b -> b)
(!!) (map (\a -> seq a (undefined::Bool -> ([] Int) -> [] Int)) (head (undefined::[] ([] ([] Bool))))) (undefined::Int) ((\a -> seq a (\b -> seq b True)) ((+1) (undefined::Int)) ((!!) (tail ([]::[] (([] ([] Int)) -> [] ([] Int)))) ((+1) (undefined::Int))))
\a -> a
(++) ((undefined::(([] (([] ([] Int)) -> [] ([] (Int -> Bool)))) -> Int -> Int -> [] Int) -> [] Int) (head (tail (tail ([]::[] (([] (([] ([] Int)) -> [] ([] (Int -> Bool)))) -> Int -> Int -> [] Int))))))
head (id (\a -> (undefined::[] (Int -> ([] Int) -> [] Int))) (\a -> a)) (case1 (\a -> (undefined::([] Bool) -> Int)) ((\a -> seq a a) (id (undefined::Int))) (undefined::[] Bool))
tail
\a -> a
case1 ((!!) (undefined::[] (Bool -> ([] Bool) -> ([] Int) -> [] Int)) ((\a -> seq a (undefined::Int)) True)) (filter (\a -> (undefined::Bool))) ((undefined::([] ([] ([] Bool))) -> [] Bool) ((++) (undefined::[] ([] ([] Bool))) ([]::[] ([] ([] Bool)))))
id ((!!) ([]::[] ((([] Int) -> Bool -> Bool) -> ([] Int) -> [] Int)) 1) (\a -> \b -> seq a (\c -> id (undefined::([] ([] Bool)) -> Bool) (head ([]::[] ([] ([] Bool))))) (seq b (seq a (seq a (\c -> (undefined::Int))) (\c -> \d -> seq c d))))
\a -> ([]::[] Int)
\a -> a
tail
tail
(undefined::(([] Int) -> [] (Int -> Int)) -> Bool -> ([] Int) -> [] Int) (undefined::([] Int) -> [] (Int -> Int)) (undefined::Bool)
tail
\a -> seq a (undefined::(([] Int) -> [] ((Int -> Int) -> Int -> Int)) -> [] Int) (seq a (\b -> \c -> seq a (tail (undefined::[] ((Int -> Int) -> Int -> Int)))) (seq a ((\b -> b) (seq a True))))
head ([]::[] ((([] Int) -> ([] (Int -> [] Bool)) -> Bool) -> ([] Int) -> [] Int)) (id (\a -> \b -> \c -> ((==)::Int -> Int -> Bool) a a) ((+) (undefined::Int) (undefined::Int)))
\a -> (undefined::Int -> [] Int) (id (\b -> seq a (seq b (seq a (id 1)))) False)
(\a -> head (seq a (seq a (undefined::[] ((Int -> Int -> Bool) -> ([] Int) -> [] Int)))) (seq a (\b -> seq a (seq a (\c -> even)) ((++) (seq b ([]::[] Int)))))) (undefined::(([] (([] ([] Bool)) -> [] ([] Bool))) -> ([] Int) -> [] (Int -> Bool)) -> Bool)
\a -> (undefined::(([] ([] ([] Int))) -> [] ([] ([] Int))) -> [] Int) ((undefined::(([] Int) -> Int -> Bool) -> ([] ([] ([] Int))) -> [] ([] ([] Int))) (\b -> (!!) (id (undefined::[] (Int -> Bool))) (seq b (seq a 2))))
\a -> a
\a -> ([]::[] Int)
\a -> a
tail
(\a -> seq a (seq a (seq a (\b -> seq b (seq a (seq b (\c -> seq b c)))))) (seq a (\b -> (+1) (undefined::Int)) (\b -> \c -> seq a (undefined::Bool)))) ((!!) (undefined::[] (([] ([] ([] (Int -> Int)))) -> [] (Bool -> Bool))) ((\a -> seq a (seq a (seq a (undefined::Int)))) (\a -> seq a (seq a (undefined::Bool)))))
(++) ((\a -> seq a (seq a (seq a (\b -> (undefined::[] Int))))) ((\a -> seq a (head ([]::[] Bool))) (head ([]::[] Int))) ((\a -> seq a (seq a ([]::[] (([] (([] Bool) -> [] Bool)) -> Bool)))) (id ([]::[] ([] Int)))))
id
\a -> head ((undefined::(([] Int) -> [] ([] Int)) -> [] ([] Int)) (seq a (id (undefined::(([] ([] Bool)) -> [] Bool) -> ([] Int) -> [] ([] Int)) (seq a (seq a (\b -> head)) (head (undefined::[] Bool))))))
(\a -> case1 (\b -> \c -> \d -> seq d (seq a d)) (id (seq a (seq a tail))) (seq a (seq a (seq a (seq a (undefined::[] Bool)))))) (case1 (\a -> \b -> a (seq a (seq a (undefined::Int)))) ((\a -> a) (undefined::Bool)) ((undefined::Int -> [] (Int -> Bool)) (undefined::Int)))
\a -> a
\a -> seq a (seq a (seq a (id (seq a (\b -> seq b (\c -> a)))) (seq a (seq a (seq a (undefined::(Int -> Int) -> Bool))) (+1))) (\b -> (undefined::Int -> Int -> Bool) (seq a (seq b (seq a (undefined::Bool -> Int))) (not (seq a (undefined::Bool))))))
(\a -> seq a (\b -> (undefined::Bool -> ([] Int) -> [] Int) (seq b (seq a False)))) (undefined::[] Bool) (\a -> \b -> id (\c -> a) ((\c -> c) (seq a (undefined::Int -> Bool))))
filter (\a -> seq a (seq a (seq a (id (\b -> (undefined::(([] Int) -> [] (Bool -> Bool)) -> Bool)))) ((undefined::(Int -> Int -> [] Bool) -> Bool) (undefined::Int -> Int -> [] Bool)) (\b -> (undefined::(([] Int) -> [] ([] Int)) -> [] (Bool -> Bool)) (seq a (\c -> ([]::[] ([] Int)))))))
(undefined::Bool -> ([] (([] (([] Bool) -> Bool)) -> Bool)) -> ([] Int) -> [] Int) True (map (undefined::(Int -> ([] Int) -> Int) -> ([] (([] Bool) -> Bool)) -> Bool) ((undefined::Int -> [] (Int -> ([] Int) -> Int)) ((+1) 2)))
\a -> ([]::[] Int)
(\a -> seq a (head (seq a (seq a (seq a (seq a ([]::[] (([] Bool) -> ([] Int) -> [] Int))))))) (map (seq a (seq a not)) (id ([]::[] Bool)))) ((\a -> seq a ([]::[] (([] (([] Int) -> Bool)) -> Bool -> Bool -> Bool))) ((\a -> id (seq a (undefined::Bool))) (head ([]::[] ([] Bool)))))
\a -> a
map (\a -> (\b -> seq a (seq a (\c -> seq b (undefined::Bool -> Int)) a)) (seq a (seq a (seq a (seq a ([]::[] ([] ([] (([] Int) -> [] (Int -> [] Int))))))))) (seq a ((undefined::([] ([] (([] Int) -> [] (Int -> [] Int)))) -> Bool) (seq a (seq a (seq a (seq a (undefined::[] ([] (([] Int) -> [] (Int -> [] Int)))))))))))
tail
\a -> a
case1 (\a -> \b -> seq a (\c -> (undefined::Int -> ([] Int) -> [] Int)) (seq b (seq b (undefined::Bool))) (seq b (\c -> (undefined::Int)) (seq b (seq a ([]::[] Int))))) ((\a -> (\b -> seq b tail) (seq a a)) ((undefined::(Int -> [] Int) -> Bool) ((!!) ([]::[] ([] Int))))) ((\a -> (\b -> seq b ([]::[] ([] ([] ([] Bool))))) (seq a (seq a (undefined::Bool)))) ((\a -> seq a (undefined::[] (Int -> Bool))) (undefined::Bool -> Bool)))
(\a -> seq a (\b -> a (seq a ((:) (undefined::([] Int) -> Int -> Int -> Int) (undefined::[] (([] Int) -> Int -> Int -> Int)))) (seq b (\c -> seq b 2) (\c -> (undefined::Bool))))) (\a -> seq a (\b -> id (\c -> seq a (undefined::Int -> [] Int) (seq c c))) ((\b -> \c -> seq b (seq c odd)) ((+1) 1)))
\a -> a
\a -> a
head ((!!) (undefined::[] ([] (([] Int) -> [] Int))) ((\a -> \b -> seq b (seq a 2)) (head (undefined::[] ([] (Int -> Int)))) ((!!) (undefined::[] (([] Bool) -> Bool)) 1)))
\a -> seq a ((undefined::Int -> [] Int) (seq a (\b -> id (seq b (undefined::([] Bool) -> Int) (seq a ([]::[] Bool)))) (undefined::([] ([] Bool)) -> ([] ([] Int)) -> Int)))
(undefined::([] Int) -> [] Int)
head (id ([]::[] ((([] (([] ([] Int)) -> [] ([] Bool))) -> Bool -> Bool) -> ([] Int) -> [] Int))) (undefined::([] (([] ([] Int)) -> [] ([] Bool))) -> Bool -> Bool)
\a -> seq a (id (\b -> seq b (\c -> (undefined::Int -> [] Int)) (seq b (seq b (seq a (undefined::[] Bool)))) ((\c -> seq b c) (seq a (head a))))) (\b -> seq a (undefined::(([] Int) -> [] (Int -> Int)) -> Int -> Int -> [] Int) (\c -> (\d -> seq d (seq c ([]::[] (Int -> Int)))) (\d -> head (seq c ([]::[] ([] Bool))))))
\a -> seq a (seq a (map (\b -> (\c -> seq a c) (seq a (seq b (seq b (head (seq a (undefined::[] Int))))))) (seq a (seq a (id (seq a ([]::[] (([] (([] Int) -> ([] ([] Int)) -> [] Bool)) -> Bool -> Bool))))))))
\a -> seq a a
(\a -> seq a ((\b -> seq b (\c -> seq a tail)) (\b -> b))) ((\a -> a (seq a (seq a (undefined::Int)))) ((!!) ([]::[] (Int -> Int)) 0)) (not (case1 (undefined::Int -> ([] Int) -> Bool) False (undefined::[] Int)))
\a -> seq a (\b -> a) (seq a (\b -> \c -> ([]::[] (([] Int) -> [] (Int -> Int)))))
tail
tail
(\a -> seq a (head ([]::[] (([] (([] Int) -> Bool)) -> ([] Int) -> [] Int)))) (map (undefined::Int -> Bool) (undefined::[] Int)) (tail ((\a -> seq a (\b -> seq a ([]::[] (([] Int) -> Bool)))) (id ([]::[] Bool)) (case1 (\a -> (undefined::([] Int) -> Bool)) (undefined::Bool) ([]::[] Int))))
head (undefined::[] (([] Int) -> [] Int))
\a -> seq a (case1 (\b -> (\c -> \d -> seq c (seq a (seq b ([]::[] Int)))) b) ((\b -> \c -> seq b (undefined::[] Int)) (not True) (\b -> (\c -> seq c (undefined::Int -> Int)) True)) (seq a (seq a (undefined::Bool -> Int -> [] Bool) (seq a True) (seq a (seq a ((+1) (undefined::Int)))))))
(\a -> seq a (\b -> \c -> c)) (take (id 2) (tail ([]::[] ([] Int)))) ((!!) ((\a -> seq a ([]::[] (([] Bool) -> [] Bool))) (undefined::[] (Int -> Int))) ((-) 0 (undefined::Int)))
(!!) ([]::[] ((([] Int) -> [] ([] Bool)) -> ([] Int) -> [] Int)) ((\a -> seq a (seq a 0)) (not False)) (\a -> (\b -> seq b (seq a (seq b (\c -> (undefined::[] ([] Bool)))) (b (even (undefined::Int))))) (\b -> seq b ((\c -> seq c 1) a)))
(:) (case1 (undefined::(([] ([] Int)) -> [] Bool) -> ([] (([] ([] Int)) -> [] Bool)) -> Int) (case1 (\a -> seq a head) 0 (undefined::[] Int)) (id (\a -> head (undefined::[] ([] (([] ([] Int)) -> [] Bool)))) ((\a -> seq a (undefined::Bool)) (head ([]::[] Int)))))
\a -> a
case1 (undefined::Int -> ([] Int) -> [] Int) (map id (case1 (undefined::([] Int) -> ([] ([] Int)) -> [] Int) ([]::[] Int) (undefined::[] ([] Int))))
(\a -> seq a (\b -> \c -> seq b (seq c (undefined::[] Int))) (map (\b -> seq b (seq a not)) (tail ([]::[] Bool)))) ((:) (map (\a -> 0) ([]::[] ([] (Bool -> Bool)))) (id ((undefined::Bool -> [] ([] Int)) (even (undefined::Int)))))
(undefined::(([] Int) -> Bool -> Bool) -> ([] Int) -> [] Int) (\a -> seq a (\b -> seq b b))
\a -> (\b -> map ((undefined::Int -> Int -> Int) (seq a (seq b (seq a (undefined::Int))))) ([]::[] Int)) ((undefined::(Bool -> Bool) -> [] (([] (Int -> Bool)) -> Bool -> Bool)) ((\b -> seq b (undefined::Bool -> Bool)) (undefined::Int)))
\a -> a
\a -> a
map ((\a -> seq a (\b -> (undefined::([] (([] (Bool -> Bool -> Bool)) -> [] Bool)) -> Int) ([]::[] (([] (Bool -> Bool -> Bool)) -> [] Bool)))) (head ([]::[] ((([] ([] Int)) -> [] Bool) -> [] ([] ([] Bool)))) (\a -> (\b -> b (undefined::Int)) (undefined::Int -> [] Bool))))
(\a -> \b -> seq b (take ((\c -> c) (undefined::Int)) (seq a b))) ((!!) (undefined::[] (([] (([] Int) -> Bool -> Bool)) -> ([] Int) -> [] Bool)) ((undefined::Bool -> Int) False))
\a -> map (seq a (\b -> 2)) ((undefined::Bool -> [] (([] ([] ([] Bool))) -> [] ([] ([] Bool)))) ((undefined::([] (Int -> Int)) -> Bool) (undefined::[] (Int -> Int))))
\a -> seq a (seq a a)
(\a -> (\b -> seq b ((!!) (seq b ([]::[] (([] Int) -> [] Int))) (seq b 2))) (\b -> (undefined::([] (Int -> ([] Int) -> Bool)) -> Bool -> Bool) (seq a (seq a (seq a ([]::[] (Int -> ([] Int) -> Bool))))))) (case1 (\a -> (undefined::([] Bool) -> Bool -> Bool)) (undefined::Bool -> Bool) ([]::[] Bool) (id (\a -> seq a False) (head ([]::[] Int))))
case1 (id (undefined::([] (Int -> Bool)) -> Int -> ([] Int) -> [] Int) (case1 (\a -> (undefined::([] Int) -> [] (Int -> Bool))) ([]::[] (Int -> Bool)) (undefined::[] Int))) ((\a -> \b -> seq a (undefined::[] Int)) (take (undefined::Int) ([]::[] Bool)) (undefined::Int))
head ((\a -> id (seq a (seq a (\b -> seq a (\c -> ([]::[] (([] Int) -> [] Int))) (id 1)) (map (\b -> (undefined::Bool)) (seq a ([]::[] Int)))))) ((\a -> seq a (undefined::Bool -> Bool) False) (\a -> \b -> b)))
\a -> a
tail
(++) (id (undefined::(Int -> (([] ([] ([] Int))) -> [] ([] Bool)) -> ([] ([] ([] Int))) -> [] ([] Bool)) -> [] Int) (\a -> seq a (\b -> seq b (\c -> \d -> b (seq a (seq a (seq d (undefined::[] ([] ([] Int))))))) ((\c -> head c) (seq b (seq a (seq a (undefined::[] Int))))))))
(!!) (undefined::[] (([] Int) -> [] Int)) ((\a -> seq a (seq a (seq a (undefined::Bool -> Int)))) (head ([]::[] ([] ([] (Bool -> Bool))))) False)
(\a -> \b -> map (\c -> a) ([]::[] ((Int -> ([] ([] Bool)) -> [] Bool) -> [] ([] Int)))) 1
\a -> a
(undefined::([] Int) -> [] Int)
id
(\a -> (:) ((undefined::([] ([] (Int -> Int))) -> Int) (seq a (\b -> (undefined::[] ([] (Int -> Int)))) (not True)))) (\a -> a)
id
\a -> seq a (seq a (case1 (\b -> seq b (\c -> case1 (\d -> (undefined::([] ([] Bool)) -> [] Int)) ([]::[] Int) (undefined::[] ([] Bool)))) ((undefined::(Int -> [] Int) -> [] Int) ((\b -> seq b (undefined::Int -> [] Int)) (seq a (seq a (undefined::Bool))))) (seq a (seq a (\b -> (undefined::[] (([] Int) -> Int -> Int))) (seq a (undefined::(Bool -> Bool) -> [] ([] Int)) (seq a not))))))
id ((\a -> take ((!!) (seq a (\b -> seq b (undefined::[] Int)) (seq a (seq a (undefined::Bool)))) (seq a (seq a (undefined::(Int -> [] Int) -> Int)) (\b -> seq b (seq a ([]::[] Int)))))) ((!!) ([]::[] ([] (([] (Int -> Int -> Bool)) -> Bool -> Bool))) (case1 (\a -> (undefined::([] Bool) -> Int)) 2 (undefined::[] Bool))))
\a -> a
(undefined::(([] Int) -> ([] Int) -> [] Int) -> ([] Int) -> [] Int) (\a -> tail)
\a -> a
id (\a -> seq a ((undefined::Bool -> ([] Int) -> ([] Int) -> [] Int) (undefined::Bool))) ((\a -> seq a not) even) (id (\a -> id id (head ([]::[] ([] Int)))) (\a -> (\b -> seq b (seq a False)) (seq a (seq a (seq a (undefined::Bool -> [] Bool))))))
\a -> seq a (seq a (seq a (seq a (\b -> a))) (seq a (\b -> tail)))
\a -> tail ((undefined::(([] ([] Int)) -> [] ([] Int)) -> Bool -> [] Int) (\b -> b) ((\b -> seq b (case1 (undefined::Bool -> ([] Bool) -> Bool) (undefined::Bool) (undefined::[] Bool))) (undefined::Int)))
(!!) (case1 (\a -> seq a (\b -> seq b (seq b ([]::[] (([] Int) -> [] Int))))) ((\a -> seq a ([]::[] (([] Int) -> [] Int))) False) (undefined::[] Int)) (id (\a -> (undefined::(Int -> Int -> Int) -> Int)) (undefined::Bool) (id (\a -> \b -> a) (undefined::Int -> Int)))
(undefined::Bool -> ((Bool -> ([] Int) -> Int) -> Int) -> ([] Int) -> [] Int) ((undefined::(Int -> Int) -> Bool) (\a -> seq a (seq a (seq a a)))) (\a -> seq a (undefined::Int))
(\a -> seq a (seq a (seq a ((undefined::Bool -> Bool -> ([] Int) -> [] Int) (seq a (undefined::Bool))) (head (seq a (undefined::[] Bool)))))) (undefined::[] (([] (([] Bool) -> Bool)) -> [] (([] ([] Int)) -> [] ([] Bool))))
case1 (head ([]::[] (Int -> ([] Int) -> [] Int))) ((\a -> seq a (head ([]::[] (Int -> [] Int))) (seq a (seq a (seq a 0)))) (undefined::[] ([] (Bool -> Bool))))
\a -> (enumFromTo'::Int -> Int -> [Int]) (undefined::Int) (seq a (seq a (seq a (\b -> (undefined::([] (Int -> Int)) -> Int))) 0 (seq a (seq a (\b -> seq a ([]::[] (Int -> Int))) (seq a (seq a (undefined::Bool)))))))
id
id
(\a -> seq a (seq a (\b -> ([]::[] Int)))) (\a -> \b -> 0)
\a -> (undefined::[] Int)
id (\a -> a)
\a -> seq a (seq a (\b -> seq a (id (\c -> seq c a)))) id (seq a (seq a (seq a (id (undefined::([] ([] Bool)) -> ([] Int) -> [] (Bool -> Bool))))) (id ((undefined::([] (Int -> Int)) -> [] ([] Bool)) ([]::[] (Int -> Int)))))
id (\a -> case1 (seq a (seq a (\b -> \c -> seq c (\d -> a)) (seq a (\b -> seq b (seq b False))))) a (seq a (\b -> ([]::[] Bool)) (\b -> (undefined::Int))))
tail
(\a -> case1 (id (seq a (\b -> \c -> seq a (seq c c)))) (seq a (seq a (undefined::[] Int)))) False
\a -> map (\b -> seq a (seq a (case1 (\c -> seq a (\d -> 0)) ((+1) 2) (seq b (seq a (seq a ([]::[] Int))))))) (seq a (seq a (seq a (undefined::[] (([] (([] Int) -> Int -> Int -> Int)) -> [] (([] Int) -> Int -> [] Int))))))
\a -> a
id
\a -> ([]::[] Int)
\a -> (undefined::[] Int)
id
\a -> seq a (seq a ((:) (seq a ((!!) a (head (undefined::[] (Bool -> Int)) (seq a (seq a True))))) (seq a ((undefined::([] ([] ([] Int))) -> (Bool -> Bool) -> [] Int) (seq a (seq a (seq a ([]::[] ([] ([] Int)))))) (\b -> b)))))
id (\a -> case1 ((!!) ([]::[] (Int -> ([] Int) -> [] Int)) ((+1) (undefined::Int))) (seq a (seq a (seq a (undefined::Bool -> [] Int)) (seq a (seq a (undefined::Bool)))))) (\a -> (\b -> head ([]::[] (([] (([] Int) -> Bool)) -> [] Int)) (seq b (id (undefined::[] (([] Int) -> Bool))))) ((\b -> seq b (seq b (undefined::([] (Int -> ([] Int) -> Int)) -> Int))) (seq a (seq a (seq a True)))))
(\a -> seq a (\b -> \c -> seq b c)) ((!!) (tail (undefined::[] ([] (Int -> [] Int)))) 1) 2
\a -> seq a (seq a (\b -> seq b (\c -> \d -> a) (seq b (\c -> seq a ([]::[] Bool))) True)) (seq a (head (seq a ([]::[] (([] Int) -> ([] Int) -> [] (([] ([] Int)) -> [] ([] Bool)))))))
\a -> a
(undefined::(([] (([] ([] ([] Bool))) -> [] ([] Bool))) -> Int -> Int -> Bool) -> ([] Int) -> [] Int) (undefined::([] (([] ([] ([] Bool))) -> [] ([] Bool))) -> Int -> Int -> Bool)
\a -> a
id (\a -> (undefined::([] Int) -> Bool -> ([] Int) -> [] Int) (seq a (seq a (undefined::[] Int)))) ((\a -> seq a (seq a (seq a (undefined::([] (Int -> Int)) -> Bool)))) ([]::[] Bool)) ((\a -> a) ((undefined::(([] (Bool -> Bool)) -> Int) -> Bool) (undefined::([] (Bool -> Bool)) -> Int)))
id (\a -> ([]::[] Int))
(undefined::([] Int) -> [] Int)
(\a -> seq a (undefined::(([] ([] Int)) -> [] ([] Bool)) -> ([] Int) -> [] Int)) 1 (case1 (\a -> \b -> \c -> seq a (undefined::[] ([] Bool))) (\a -> seq a (seq a (seq a ([]::[] ([] Bool))))) ((\a -> seq a ([]::[] Int)) True))
(\a -> seq a (\b -> id) (seq a (\b -> seq b (\c -> 0)))) (id (\a -> seq a (seq a (\b -> (undefined::[] Bool))) (head (id ([]::[] (([] (Int -> Int -> Int)) -> Int -> Int))))))
(undefined::([] Int) -> [] Int)
tail
\a -> seq a (id (\b -> seq a (map (\c -> seq a (undefined::([] (Int -> Bool)) -> Int) (seq a (undefined::[] (Int -> Bool)))) ([]::[] (([] Bool) -> Bool))))) (seq a (seq a (seq a (\b -> (undefined::Int -> Int -> Int) (seq b 2)))))
(\a -> id (seq a (seq a (undefined::([] ([] (Int -> Bool))) -> ([] Int) -> [] Int)))) (\a -> (\b -> seq b (seq a (seq a a))) (undefined::Int)) (id ((!!) (undefined::[] (Bool -> [] ([] (Int -> Bool)))) (undefined::Int)) (head (undefined::[] ((([] Int) -> Bool -> Bool) -> Bool)) ((!!) (undefined::[] (([] Int) -> Bool -> Bool)) (undefined::Int))))
(++) ((undefined::(Int -> ([] (([] ([] Bool)) -> [] ([] Bool))) -> Int -> ([] ([] Bool)) -> [] ([] Bool)) -> [] Int) (\a -> id (undefined::([] (([] ([] Bool)) -> [] ([] Bool))) -> Int -> ([] ([] Bool)) -> [] ([] Bool))))
\a -> seq a ([]::[] Int)
\a -> (\b -> seq a (seq a ((\c -> seq c (\d -> a)) ((!!) (undefined::[] (Int -> Bool))))) ((undefined::(Int -> [] Int) -> Int) (seq b (\c -> a)))) (seq a (seq a (seq a (seq a (seq a (undefined::([] (Int -> Bool)) -> [] (Bool -> Bool)))))) ((undefined::([] Int) -> [] (Int -> Bool)) (seq a a)))
\a -> a
\a -> (!!) (tail ((undefined::([] (Int -> Int -> ([] Int) -> Int)) -> [] ([] Int)) (seq a (seq a (seq a (tail ([]::[] (Int -> Int -> ([] Int) -> Int)))))))) (case1 (seq a (undefined::Bool -> Int -> ([] Int) -> Int) (seq a (undefined::Bool))) ((undefined::(([] ([] Int)) -> Bool) -> Int) (\b -> seq b True)) a)
\a -> seq a a
\a -> a
(!!) (map (\a -> \b -> seq a id) (undefined::[] Bool)) ((!!) ([]::[] Int) (head ([]::[] Int))) ((\a -> \b -> seq a (seq a (undefined::Bool))) ((!!) (undefined::[] ([] ([] Bool))) (undefined::Int)) (map (undefined::(Int -> Bool) -> ([] Int) -> Bool) (undefined::[] (Int -> Bool))))
id
(undefined::(([] Int) -> ([] Bool) -> [] Bool) -> ([] Int) -> [] Int) (\a -> seq a tail)
case1 (\a -> \b -> tail) (take ((undefined::(Bool -> Bool -> Bool -> Bool) -> Int) ((undefined::Bool -> Bool -> Bool -> Bool -> Bool) (undefined::Bool)))) ((++) (tail (undefined::[] Bool)) ((\a -> seq a ([]::[] Bool)) ([]::[] Int)))
(\a -> \b -> filter (seq b (\c -> seq a odd) (seq a (seq a ([]::[] ([] ([] (Bool -> Bool))))))) (undefined::[] Int)) (((==)::[Int] -> [Int] -> Bool) (id (\a -> (undefined::[] Int)) (head ([]::[] Bool))) (undefined::[] Int))
(undefined::([] ([] Bool)) -> ([] Int) -> [] Int) ((\a -> (!!) ([]::[] (([] Int) -> [] ([] Bool))) 1 (id (seq a (undefined::[] Int)))) (\a -> ([]::[] (([] Int) -> ([] Int) -> [] Bool))))
(undefined::([] Int) -> [] Int)
\a -> seq a (seq a ((!!) (undefined::[] (Bool -> [] Int)) (seq a (head ([]::[] (([] ([] (Int -> Bool))) -> Int))) (seq a (seq a (seq a ([]::[] ([] (Int -> Bool))))))) (seq a (\b -> (undefined::Bool)) (undefined::Bool))))
\a -> a
\a -> seq a (seq a (undefined::Int -> Bool -> [] Int) ((undefined::([] ([] Bool)) -> Int) (seq a ([]::[] ([] Bool))))) (seq a (seq a (seq a (\b -> seq b (undefined::Bool)))) (\b -> seq b (seq b (seq a (\c -> seq b ([]::[] (Bool -> Bool))) (seq b (seq a (undefined::Int -> [] Int)))))))
\a -> take ((\b -> \c -> b) 2 (head (undefined::[] ((Int -> Bool) -> Bool)) (seq a (\b -> not (undefined::Bool))))) (tail a)
tail
\a -> a
\a -> ([]::[] Int)
\a -> a
\a -> seq a ((\b -> seq b (id (seq a (\c -> (undefined::[] Int)) (seq a (\c -> \d -> (+1)) ([]::[] Bool))))) (id (seq a (seq a (\b -> seq a (seq b (undefined::Bool -> [] ([] (Int -> Int)))) (seq b True))) (undefined::Int))))
head (case1 (\a -> seq a (seq a (undefined::([] Bool) -> [] (([] Int) -> [] Int)))) (map map (tail (undefined::[] (Int -> Int)))) (id (undefined::Int -> [] Bool) ((\a -> seq a 2) (id (undefined::Bool)))))
(\a -> \b -> seq b (seq b (seq b (seq a (seq a (\c -> b)) b)))) ((undefined::([] (Int -> Int)) -> ([] ([] Int)) -> [] Bool) ([]::[] (Int -> Int)))
head ((undefined::(Bool -> Bool) -> [] (Int -> ([] Int) -> [] Int)) ((undefined::(([] Int) -> Bool) -> Bool -> Bool) (\a -> seq a (seq a (undefined::Bool))))) 2
\a -> id (head (seq a ((!!) (seq a (seq a (undefined::[] ([] ((([] Int) -> Bool) -> [] Int))))) (seq a ((undefined::Bool -> Int) (id (undefined::Bool))))))) ((\b -> \c -> (\d -> d) (seq a (seq b (seq a False)))) (seq a (\b -> seq a (seq b (\c -> \d -> d)))))
(!!) ((!!) ([]::[] (Int -> [] (([] Int) -> [] Int))) (undefined::Int) ((\a -> seq a (head (undefined::[] Int))) ((!!) ([]::[] Int) 0))) ((\a -> seq a (id (head (head (undefined::[] ([] Int)))))) (case1 (\a -> (undefined::([] ([] Bool)) -> Bool)) (undefined::Bool) ([]::[] ([] Bool))))
\a -> seq a (seq a (undefined::(([] Int) -> [] ([] (Int -> Int))) -> [] Int)) ((\b -> seq b (undefined::Bool -> ([] Int) -> [] ([] (Int -> Int))) b) (seq a ((undefined::(([] Bool) -> Bool) -> Bool) (\b -> (undefined::Bool)))))
(undefined::(Int -> [] Bool) -> ([] Int) -> [] Int) (\a -> (undefined::[] Bool))
case1 ((undefined::Int -> Int -> ([] Int) -> [] Int) (undefined::Int)) (head ((undefined::Bool -> [] (Int -> [] Int)) (not (undefined::Bool))) ((\a -> seq a (undefined::Int)) (take (undefined::Int) ([]::[] Bool))))
id (\a -> a)
id (undefined::Bool -> (Int -> ([] Int) -> Int) -> ([] Int) -> [] Int) ((undefined::([] ([] Bool)) -> Bool) (tail (undefined::[] ([] Bool)))) (\a -> id head)
id (\a -> seq a (head ([]::[] (([] ([] (Int -> Bool))) -> ([] Int) -> [] Int)) (undefined::[] ([] (Int -> Bool))))) ((undefined::([] (Int -> [] Int)) -> Bool) ((\a -> seq a (head (undefined::[] ([] (Int -> [] Int))))) ([]::[] Bool)))
(\a -> seq a ((undefined::Bool -> ([] Int) -> [] Int) (case1 (\b -> (undefined::([] ([] Bool)) -> Bool)) (seq a (undefined::Bool)) (seq a (undefined::[] ([] Bool)))))) (undefined::([] (Int -> Bool)) -> Int -> Bool)
id (undefined::(([] (([] ([] ([] Int))) -> [] ([] ([] Int)))) -> ([] Int) -> Int -> Bool) -> ([] Int) -> [] Int) (\a -> seq a (\b -> case1 (id (undefined::Int -> ([] Int) -> Int -> Bool)) (b (undefined::[] Int))) (seq a (seq a (seq a (undefined::Int -> ([] Int) -> Int -> Bool)) (seq a (seq a (seq a 0))))))
(undefined::([] Int) -> [] Int)
\a -> (undefined::Bool -> (([] ([] Int)) -> [] Int) -> [] Int) True ((undefined::Bool -> ([] ([] Int)) -> [] Int) ((undefined::([] ([] Int)) -> Bool) ([]::[] ([] Int))))
(undefined::(([] ([] Bool)) -> [] ([] (Bool -> Bool))) -> ([] Int) -> [] Int) (\a -> ([]::[] ([] (Bool -> Bool))))
\a -> a
(\a -> head ((undefined::Bool -> [] (Int -> ([] Int) -> [] Int)) (seq a (seq a (undefined::Bool)))) (head (seq a ((:) (seq a 1) (undefined::[] Int))))) (undefined::([] Int) -> [] (Int -> [] Int))
(\a -> seq a (seq a (\b -> id (undefined::([] Bool) -> ([] Int) -> [] Int) ([]::[] Bool))) (\b -> case1 (\c -> head) (seq a (undefined::Int)) (seq a (undefined::[] Int)))) (\a -> case1 (seq a (\b -> \c -> 2)) (seq a (undefined::Int)) (seq a (seq a (seq a (seq a ([]::[] ([] ([] Int))))))))
(++) ((undefined::(([] (Bool -> Bool)) -> ([] ([] ([] Bool))) -> Int -> [] ([] Bool)) -> [] Int) (\a -> head ([]::[] (([] ([] ([] Bool))) -> Int -> [] ([] Bool)))))
\a -> map (seq a (id (undefined::Bool -> Int -> Int -> Int) True) (case1 (\b -> head) 1 (seq a ([]::[] Int)))) (case1 (\b -> seq a (map (undefined::(Bool -> Int) -> Int))) a ([]::[] (Bool -> Int)))
filter (case1 (\a -> head (seq a (seq a (seq a (seq a ([]::[] (([] (([] Bool) -> [] Bool)) -> Int -> Bool))))))) (\a -> (undefined::Int -> Bool -> Bool) a (seq a (seq a (seq a (seq a False))))) (map (\a -> \b -> b) (head ([]::[] ([] Bool)))))
\a -> a
\a -> (undefined::[] Int)
(!!) ((undefined::([] ([] (Bool -> Bool))) -> [] (([] Int) -> [] Int)) ((\a -> seq a (seq a (seq a (undefined::[] ([] (Bool -> Bool)))))) ((==)::Int -> Int -> Bool))) (undefined::Int)
(++) ([]::[] Int)
case1 (\a -> \b -> tail) (head (undefined::[] ((([] Int) -> Bool) -> ([] Int) -> [] Int)) (case1 (\a -> (undefined::([] Int) -> Bool)) False)) (id (undefined::Int -> Bool -> [] Int) ((+1) (undefined::Int)) ((\a -> seq a a) (id (undefined::Bool))))
(undefined::([] Int) -> [] Int)
\a -> a
\a -> ([]::[] Int)
id
id
(:) (head ([]::[] ((([] ([] ([] Int))) -> [] ([] Bool)) -> Int)) ((\a -> \b -> seq a ([]::[] ([] Bool))) ((undefined::(Int -> Int) -> Int -> ([] Int) -> Int) (+1))))
id
(\a -> seq a ((\b -> seq a (seq a (\c -> \d -> d) (\c -> b a c))) (seq a (\b -> \c -> \d -> seq c (undefined::Bool)) (seq a (not True))))) ((\a -> id (\b -> a)) 0 (\a -> (\b -> head (seq b ([]::[] (([] Int) -> Bool)))) (seq a (tail (undefined::[] ([] Int))))))
id (\a -> seq a (\b -> \c -> seq a (undefined::([] Int) -> [] Int)) (seq a (seq a (seq a ([]::[] Int)))) (seq a ((\b -> seq b b) (undefined::Bool)))) ((!!) ([]::[] (Int -> ([] Int) -> [] (Int -> [] Int))) ((\a -> seq a (seq a (undefined::Int))) (head (undefined::[] ([] (Bool -> Bool))))))
(!!) ((++) (map (\a -> seq a (undefined::([] Int) -> [] Int)) (undefined::[] Bool)) ((\a -> seq a (seq a ([]::[] (([] Int) -> [] Int)))) (undefined::Bool))) (id ((\a -> seq a (\b -> (undefined::Int))) (id (undefined::[] Bool))) (case1 (\a -> (undefined::([] Bool) -> ([] Bool) -> Bool)) (\a -> False) (undefined::[] Bool)))
\a -> (!!) (map (seq a (undefined::(Int -> Bool) -> Bool -> [] Int)) (seq a (seq a ([]::[] (Int -> Bool))))) ((undefined::([] (Bool -> Bool -> Bool)) -> Int) (seq a ([]::[] (Bool -> Bool -> Bool)))) (undefined::Bool)
(\a -> seq a (\b -> seq b ((!!) (undefined::[] (([] Int) -> [] Int))) (seq b b)) ((undefined::(Int -> [] Bool) -> Int) (seq a (\b -> seq a (seq b (undefined::[] Bool)))))) (\a -> ((==)::Int -> Int -> Bool) ((undefined::(([] (([] Bool) -> [] (Bool -> Bool))) -> [] (Int -> Bool)) -> Int) (\b -> seq b (\c -> seq b (undefined::[] (Int -> Bool))) (seq a (seq a (seq b (undefined::Int)))))))
\a -> (undefined::[] Int)
\a -> ([]::[] Int)
\a -> a
(\a -> seq a (seq a (\b -> (undefined::Bool -> ([] Int) -> [] Int)) (seq a (seq a (seq a False))) (((==)::[Int] -> [Int] -> Bool) (seq a (undefined::[] Int)) (seq a (seq a ([]::[] Int)))))) ((undefined::(([] ([] Bool)) -> [] Bool) -> [] ([] Int)) ((\a -> \b -> a) ([]::[] Bool)))
(undefined::([] Int) -> [] Int)
case1 ((\a -> seq a (\b -> seq b (:))) (odd 1) (undefined::Bool)) ((\a -> seq a (head ([]::[] (Int -> [] Int)))) (\a -> seq a (head a)) (id (head (undefined::[] (Bool -> Int)) True)))
\a -> seq a a
\a -> seq a (undefined::(([] Int) -> ([] Int) -> Int -> Int) -> [] Int) (\b -> \c -> \d -> (\e -> seq b (id (undefined::Bool -> Int) (seq e (seq b (undefined::Bool))))) (\e -> seq d e))
\a -> take (seq a (undefined::Int)) a
(undefined::([] Int) -> [] Int)
(\a -> (!!) (map (seq a (undefined::Int -> ([] Int) -> [] Int)) (seq a (undefined::[] Int)))) head ((\a -> seq a ((+) 1 (seq a (seq a (undefined::Int))))) (head (map (\a -> a) (undefined::[] Bool))))
head (filter ((undefined::(Int -> [] Int) -> (([] Int) -> [] Int) -> Bool) (\a -> (!!) (seq a (seq a ([]::[] ([] Int)))) a)) ((undefined::([] Int) -> Int -> [] (([] Int) -> [] Int)) (head ([]::[] ([] Int))) ((!!) ([]::[] Int) 2)))
\a -> (undefined::[] Int)
(undefined::Int -> (Bool -> Bool -> Bool) -> ([] Int) -> [] Int) 2 ((undefined::(([] (Int -> Int)) -> [] (Int -> Int)) -> Bool -> Bool -> Bool) ((undefined::Bool -> ([] (Int -> Int)) -> [] (Int -> Int)) True))
tail
\a -> seq a (\b -> seq b ((undefined::(([] ([] (Int -> Int))) -> Int -> [] (Int -> Int)) -> [] Int) (\c -> seq b (\d -> map (undefined::(([] Int) -> Bool) -> Int -> Int) (seq d (seq c (undefined::[] (([] Int) -> Bool)))))))) (seq a (id (seq a (head (seq a (seq a (seq a (undefined::[] ([] (([] (([] (Int -> Bool)) -> Int -> Bool)) -> Int -> [] Int))))))))))
take ((\a -> seq a ((\b -> b) 1)) ((!!) (map (\a -> (undefined::([] Int) -> [] ([] Bool))) ([]::[] Int)) ((\a -> seq a 1) (odd 2))))
tail
case1 (undefined::Int -> ([] Int) -> Bool -> ([] Int) -> [] Int) (undefined::Bool -> ([] Int) -> [] Int) ((undefined::([] (Int -> Int)) -> [] Int) ([]::[] (Int -> Int))) ((\a -> head (seq a ([]::[] (Bool -> Bool)))) (undefined::Bool) ((\a -> seq a (seq a (undefined::Bool))) (head (undefined::[] ([] ([] Bool))))))
\a -> ([]::[] Int)
\a -> map (seq a (seq a (seq a (\b -> (undefined::Int -> Bool -> Int))) (seq a (tail ([]::[] ([] Bool)))) (head (seq a (undefined::[] (([] Int) -> Int))) (undefined::[] Int)))) (seq a (case1 (\b -> \c -> seq a (seq b (undefined::[] Bool))) (seq a (seq a (seq a ([]::[] Bool)))) ([]::[] ([] ([] Int)))))
\a -> a
(undefined::([] Int) -> [] Int)
(!!) (undefined::[] (([] (Int -> Int -> Bool)) -> ([] Int) -> [] Int)) (undefined::Int) (undefined::[] (Int -> Int -> Bool))
map (+1)
(\a -> id (seq a (seq a (\b -> case1 (\c -> id) ([]::[] Int)) (id (\b -> (undefined::Bool)) (seq a (seq a (\b -> ([]::[] Bool)))))))) ((!!) (map (\a -> seq a head) (undefined::[] Int)) (id ((\a -> a) 1)))
(\a -> \b -> seq b (\c -> \d -> seq b d) a) True (id ((\a -> seq a (\b -> \c -> seq c (undefined::[] (Bool -> Bool))) (undefined::[] Bool)) ((undefined::(Int -> Int) -> Int) (\a -> a))))
(\a -> seq a (\b -> \c -> c)) ((\a -> seq a (seq a (seq a ([]::[] (Int -> Int))))) (undefined::Int -> Int -> [] Int)) ((\a -> seq a ([]::[] (Int -> Int))) (odd (undefined::Int)))
tail
(\a -> seq a ((!!) ((\b -> seq a (seq b ([]::[] (([] Int) -> [] Int)))) (seq a (seq a (seq a True)))) (id ((+1) (seq a (seq a 1)))))) (\a -> a)
id id
(\a -> seq a (undefined::Bool -> ([] Int) -> [] Int) (seq a (seq a odd) (seq a (head ([]::[] Int))))) ((undefined::Int -> ([] (([] ([] Int)) -> [] ([] Bool))) -> ([] Int) -> Bool) (id (\a -> seq a (undefined::Int)) (filter (undefined::(Int -> [] Int) -> Bool) (undefined::[] (Int -> [] Int)))))
(\a -> \b -> seq b (case1 (head (seq b ([]::[] (Int -> ([] Int) -> [] Int)))) (seq a b) b)) (\a -> seq a (seq a (seq a (tail (map (\b -> (undefined::Bool)) (seq a ([]::[] (([] Int) -> [] (([] Int) -> Bool)))))))))
\a -> a
\a -> a
\a -> seq a a
(\a -> \b -> seq a b) (id (\a -> id (undefined::([] Int) -> Bool) (head ([]::[] ([] Int)))) (\a -> (\b -> seq b (undefined::Bool -> Bool)) ((+) (seq a 0))))
(\a -> seq a ((\b -> seq b (\c -> (undefined::([] Int) -> [] Int))) (seq a (seq a 2)) ((!!) (head ([]::[] ([] Int))) (seq a (undefined::Int))))) (\a -> a)
(\a -> case1 (\b -> id (\c -> \d -> ([]::[] Int))) (seq a (undefined::Bool -> ([] Int) -> [] Int) (seq a False)) (seq a (undefined::(([] Bool) -> Bool) -> [] Bool) (seq a (undefined::([] Bool) -> Bool)))) (\a -> map (seq a (\b -> \c -> c)) (tail (undefined::[] (([] ([] ([] Bool))) -> [] ([] ([] Bool))))))
(\a -> seq a (\b -> b)) ((\a -> not (seq a (undefined::Bool))) (id (\a -> (undefined::[] ([] Bool)))))
(++) (undefined::[] Int)
\a -> a
\a -> a
(undefined::Bool -> (Int -> ([] Int) -> Bool) -> ([] Int) -> [] Int) ((\a -> a) True) ((\a -> \b -> seq b (head (seq a ([]::[] (([] Int) -> Bool))))) ((\a -> seq a id) (undefined::Int)))
case1 ((\a -> seq a (\b -> seq b (\c -> \d -> c))) (id (undefined::(Bool -> Bool) -> Bool) (id not))) (\a -> map (seq a (seq a (\b -> seq a (undefined::Int)))) (seq a ([]::[] (([] ([] Int)) -> [] ([] Int))))) ((\a -> head (undefined::[] (Bool -> [] Int)) (seq a (seq a (undefined::Bool)))) (undefined::([] Int) -> ([] Int) -> Int -> Int))
id
\a -> seq a (\b -> id ((undefined::Bool -> (([] Int) -> [] Bool) -> [] Int) (seq b (seq b True))) (id (head (undefined::[] (([] Int) -> [] Bool))))) (seq a (seq a (id (tail (seq a ([]::[] (([] (([] Int) -> [] (Int -> Int))) -> [] (([] Int) -> [] (Int -> Int)))))))))
id ((\a -> seq a (\b -> seq a (\c -> c))) ((!!) ((\a -> seq a ([]::[] (Int -> [] Int))) (odd 1)))) (head (tail (undefined::[] ((([] ([] ([] Int))) -> [] ([] ([] Int))) -> Bool))) (\a -> (\b -> seq b (id a)) (seq a (undefined::Int))))
(undefined::(([] ([] Bool)) -> [] Bool) -> Int -> ([] Int) -> [] Int) (\a -> take (seq a 0) (seq a (seq a (undefined::[] Bool)))) ((\a -> \b -> seq b a) (undefined::Int) (\a -> ([]::[] (Int -> Int))))
\a -> head ([]::[] (((Int -> Bool -> Bool) -> ([] ([] (Bool -> Bool -> Bool))) -> Int -> Bool -> Bool) -> [] Int)) (case1 (undefined::([] (Bool -> Bool -> Bool)) -> ([] ([] (Bool -> Bool -> Bool))) -> Int -> Bool -> Bool))
\a -> seq a (\b -> a) 1
\a -> a
filter ((\a -> \b -> seq b (\c -> \d -> (undefined::Bool)) 2 (id (seq b (\c -> (undefined::[] (Int -> Bool))) a))) ((\a -> seq a a) ((!!) ([]::[] (Int -> Bool)) (undefined::Int)) (undefined::Int)))
\a -> a
(undefined::([] Int) -> [] Int)
(\a -> seq a (undefined::Bool -> ([] Int) -> ([] Int) -> [] Int) (seq a (id (undefined::Bool)))) (\a -> (\b -> seq a (seq a (seq b ([]::[] (Int -> Int))))) (head ([]::[] Bool))) ([]::[] Int)
\a -> id (\b -> \c -> a) ([]::[] (([] ([] ([] (Int -> Int)))) -> Int)) (seq a (\b -> b) (\b -> b) ((undefined::Bool -> Int) ((!!) ([]::[] Bool) 0)))
\a -> a
\a -> take (seq a ((undefined::Int -> Int) ((undefined::([] ([] Int)) -> Int) ([]::[] ([] Int))))) (head ((undefined::Int -> [] (([] ([] Int)) -> [] Int)) (seq a 1)) ((\b -> seq b (undefined::[] ([] Int))) (undefined::[] ([] Bool))))
(undefined::(Int -> Int -> Bool) -> ([] Int) -> [] Int) (head (map (undefined::Bool -> Bool -> Int -> Int -> Bool) ([]::[] Bool)) ((\a -> seq a (even 1)) False))
id
(\a -> (\b -> id (seq b (undefined::Int -> ([] Int) -> [] Int))) (seq a (seq a ([]::[] ([] Bool))))) (\a -> (\b -> \c -> seq a (seq b False)) (\b -> seq a (seq a (seq a (undefined::Int))))) ((undefined::Bool -> Int) (id (undefined::Bool -> Bool) (head ([]::[] Bool))))
(!!) (head ((\a -> seq a (undefined::[] ([] (([] Int) -> [] Int)))) (undefined::[] Int))) ((\a -> seq a (\b -> seq b (undefined::Int))) (((==)::Int -> Int -> Bool) 2 1) (head (undefined::[] (Bool -> ([] Int) -> [] Bool)) (undefined::Bool)))
\a -> seq a (\b -> a) (seq a (take (head (seq a (undefined::[] (([] ([] Bool)) -> Int))) (seq a ([]::[] ([] Bool)))) (tail ((undefined::Int -> [] ([] Bool)) (seq a 2)))))
(\a -> (\b -> seq b (seq a (\c -> \d -> d)) (seq b (seq a (seq b (+1))))) (\b -> seq b (seq a (seq b (\c -> (undefined::Bool -> [] Int) (seq b (undefined::Bool))))))) (\a -> case1 (seq a (seq a (\b -> \c -> seq c ([]::[] Int)))) a (seq a ([]::[] Int)))
\a -> (undefined::(([] Int) -> [] (Bool -> Bool)) -> [] Int) (\b -> seq b (seq b (\c -> (!!) ([]::[] ([] (Bool -> Bool))) ((+1) 0)) (seq b (seq b (\c -> seq b (undefined::[] ([] Bool)))) (\c -> b))))
\a -> map (undefined::(([] Int) -> [] (Int -> [] Int)) -> Int) (seq a (seq a (seq a ([]::[] (([] Int) -> [] (Int -> [] Int))))))
(undefined::(([] (Bool -> Bool -> Bool)) -> Bool) -> ([] Int) -> [] Int) (\a -> head (head (seq a (seq a (undefined::Int -> [] (Int -> [] Bool)) (seq a 0))) ((-) (seq a (seq a (undefined::Int))) (seq a (seq a (undefined::Int))))))
\a -> seq a (seq a ((undefined::Int -> ([] ([] Bool)) -> Int -> [] Int) (id (seq a (undefined::Int)))) ((\b -> seq b (seq a (seq b ([]::[] ([] Bool))))) (seq a (seq a (seq a ([]::[] (Int -> [] Int))))))) ((\b -> (\c -> seq b (seq a (seq c (undefined::Int)))) (seq a (\c -> seq a (seq b (undefined::[] ([] Int)))))) ((\b -> \c -> seq b (undefined::[] Bool)) (\b -> seq b (seq b (seq b (undefined::Int))))))
\a -> map ((undefined::(Bool -> Bool -> Int) -> Bool -> Int) (seq a (id (\b -> (undefined::Bool -> Bool -> Int)) (undefined::[] Bool)))) ([]::[] Bool)
(\a -> seq a (\b -> seq a (undefined::(Int -> [] Bool) -> ([] Int) -> [] Int) (\c -> seq a (undefined::[] Bool))) ((!!) (seq a (seq a (undefined::[] Bool))) (seq a (seq a 1)))) ((\a -> seq a (seq a (seq a (\b -> \c -> (undefined::Int -> [] Int))))) ((\a -> seq a ((+1) 1)) (map (\a -> (undefined::Int)))))
(undefined::([] Int) -> [] Int)
\a -> a
(\a -> seq a (\b -> b)) (\a -> seq a ((undefined::(Bool -> [] Bool) -> (Int -> Int) -> [] Int) (seq a (\b -> seq b (seq a (undefined::[] Bool)))) (seq a (\b -> seq b (\c -> seq c (undefined::Int)) b))))
case1 ((\a -> seq a (\b -> \c -> seq a (\d -> seq d (undefined::[] Int)))) ((\a -> seq a (undefined::Bool)) ([]::[] ([] ([] Bool))))) (\a -> a) ((undefined::Bool -> (Int -> Bool) -> [] Int) (undefined::Bool) ((\a -> seq a even) 1))
\a -> map ((\b -> \c -> b (seq a (b (undefined::Int) (undefined::Int))) (b 1 (undefined::Int))) (id (undefined::(Bool -> Bool) -> Int -> Int -> Int) (seq a (seq a (\b -> b))))) (seq a (seq a (map (undefined::Int -> ([] Bool) -> [] (Bool -> Bool)) ((\b -> seq b ([]::[] Int)) False))))
(\a -> seq a tail) (\a -> \b -> (\c -> seq c (seq b (seq c (undefined::Bool -> Bool)) (undefined::Bool))) (\c -> seq c (seq b (seq b (seq a (undefined::Int -> [] (Bool -> Bool)) (undefined::Int))))))
(\a -> seq a ((undefined::(([] Int) -> ([] ([] Int)) -> [] Bool) -> ([] Int) -> [] Int) (seq a (seq a (seq a (\b -> (\c -> seq c (undefined::([] ([] Int)) -> [] Bool)) (seq b (undefined::[] Bool)))))))) (id (\a -> \b -> (undefined::Int -> Int) (seq b (seq a (seq b (undefined::([] Int) -> Int)) a))))
id id
tail
\a -> a
case1 ((undefined::(([] Bool) -> Bool) -> Int -> ([] Int) -> [] Int) (\a -> case1 (\b -> (undefined::([] ([] Int)) -> Bool)) (seq a (undefined::Bool)) (seq a (undefined::[] ([] Int))))) (take (head ([]::[] (([] (([] Int) -> Int)) -> Int)) (undefined::[] (([] Int) -> Int))) ((\a -> seq a (seq a (undefined::[] Int))) (id (undefined::Int))))
case1 (undefined::Bool -> ([] Bool) -> ([] Int) -> [] Int) (\a -> tail (take (seq a (seq a (undefined::Int))) (seq a a))) ((undefined::(Int -> Int) -> ([] ([] Bool)) -> [] Bool) (+1) ((\a -> seq a ([]::[] ([] Bool))) (\a -> seq a a)))
\a -> case1 (\b -> \c -> \d -> a) ((!!) (seq a ([]::[] (Int -> [] Int))) (undefined::Int)) (seq a (seq a (seq a (seq a ([]::[] Bool))))) (seq a ((\b -> seq a (id (undefined::Bool -> Int)) (seq b (seq a (seq b True)))) (\b -> \c -> case1 (\d -> (undefined::([] Bool) -> Int)) (seq b c) ([]::[] Bool))))
(undefined::Int -> (([] Int) -> ([] Bool) -> [] Bool) -> ([] Int) -> [] Int) ((undefined::([] (([] Bool) -> [] Bool)) -> Int) ((!!) ([]::[] ([] (([] Bool) -> [] Bool))) (undefined::Int))) (id (\a -> (undefined::([] Int) -> ([] Bool) -> [] Bool)) ((\a -> seq a (seq a (seq a (&&)))) True))
(undefined::([] Int) -> [] Int)
take ((\a -> (+) ((undefined::([] (Bool -> Bool)) -> Int) (seq a (seq a (seq a (undefined::[] (Bool -> Bool)))))) ((+1) (seq a (seq a (undefined::Int))))) (undefined::Int -> [] Int))
case1 (\a -> \b -> seq a (\c -> \d -> d) ([]::[] (Int -> Int))) (\a -> (undefined::Int -> [] Int) (id (seq a (seq a (undefined::Int))))) (map (\a -> (+1) (seq a 2)) (tail ([]::[] (([] Int) -> Int))))
(!!) (undefined::[] (([] Int) -> [] Int)) ((\a -> seq a (seq a (undefined::Int))) ((\a -> id (seq a 2)) (\a -> seq a (seq a (seq a ([]::[] (Bool -> Bool)))))))
(\a -> \b -> (undefined::(Int -> Int -> [] Int) -> [] Int) (seq b (\c -> seq c ((!!) (seq b (seq c (seq a ([]::[] ([] Int))))))))) (id (undefined::Int))
case1 (\a -> \b -> map (undefined::(Int -> Bool -> Bool) -> Int) (seq a (seq b (undefined::Bool -> [] (Int -> Bool -> Bool))) (undefined::Bool))) (case1 (\a -> (undefined::([] Bool) -> Bool -> [] Int)) (\a -> (undefined::[] Int)) ([]::[] Bool) ((\a -> seq a (undefined::Bool)) ([]::[] ([] Bool))))
\a -> a
(!!) ((\a -> seq a (seq a (\b -> (undefined::[] (([] Int) -> [] Int))) (seq a ([]::[] Bool)))) (\a -> seq a (seq a (\b -> 1)) (seq a (seq a (\b -> not))))) ((-) (undefined::Int) (id (\a -> 0) ([]::[] (Int -> Bool -> Bool))))
\a -> a
\a -> seq a (\b -> a) (\b -> seq a (map (head ([]::[] ((([] Int) -> [] (Bool -> Bool)) -> [] Bool))) (undefined::[] (([] Int) -> [] (Bool -> Bool)))))
\a -> ([]::[] Int)
(undefined::Bool -> ([] Int) -> [] Int) ((\a -> seq a ((&&) (undefined::Bool))) ((+1) (undefined::Int)) (undefined::Bool))
(undefined::([] Int) -> [] Int)
\a -> seq a ((\b -> seq b (seq a a)) (\b -> (undefined::Bool)))
\a -> a
(undefined::(([] ([] (([] Int) -> [] (([] Int) -> Bool)))) -> [] ([] (([] Int) -> [] Int))) -> ([] Int) -> [] Int) (\a -> seq a ((undefined::([] (([] Int) -> Bool)) -> [] ([] (([] Int) -> [] Int))) ((\b -> id (seq b (undefined::[] (([] Int) -> Bool)))) (seq a (seq a (undefined::Bool))))))
(\a -> (\b -> (\c -> seq c (\d -> d)) (seq b (seq a (seq a ([]::[] ([] Int)))))) (undefined::Int)) ((\a -> seq a (seq a (\b -> seq a (undefined::Bool)) (\b -> b))) (filter (\a -> case1 (undefined::Int -> ([] Int) -> Bool) a (undefined::[] Int))))
\a -> a
(\a -> seq a (\b -> seq b (id (++) (head ([]::[] ([] Int)))))) (\a -> (enumFromTo'::Int -> Int -> [Int]) (seq a a) (head ([]::[] Int))) (id (\a -> ((==)::[Int] -> [Int] -> Bool) (seq a (undefined::[] Int)) ([]::[] Int)) ([]::[] ([] ([] (([] (Int -> Int)) -> [] (Int -> Int))))))
(\a -> seq a (\b -> id ((undefined::Bool -> ([] ([] (Int -> Int))) -> [] Int) (not False) ((undefined::([] Int) -> [] ([] (Int -> Int))) b)))) ((undefined::Bool -> ([] ([] ([] (Int -> [] Int)))) -> [] (Bool -> Bool)) ((undefined::(Int -> Int) -> Bool) (\a -> a)))
(\a -> \b -> seq b (\c -> seq a c)) (id (\a -> seq a (undefined::Int)) (undefined::[] ([] (([] Int) -> [] Int)))) (\a -> seq a (undefined::Bool -> Int -> Int -> Int) (seq a (head (undefined::[] Bool))) ((\b -> seq a (seq b (seq b (undefined::Int)))) (seq a (seq a (undefined::Bool)))))
(\a -> \b -> map (seq a (undefined::(([] (Int -> Bool -> Bool)) -> [] (Bool -> Bool)) -> Int)) (id (undefined::[] (([] (Int -> Bool -> Bool)) -> [] (Bool -> Bool))))) (\a -> seq a ((\b -> map (seq b (\c -> (undefined::[] Bool))) (seq a ([]::[] Int))) (\b -> case1 (\c -> (undefined::([] Bool) -> Int -> [] Int)) (seq a (undefined::Int -> [] Int)) (seq b (undefined::[] Bool)))))
(undefined::(Bool -> Bool -> Bool) -> Bool -> ([] Int) -> [] Int) (id ((undefined::Bool -> Bool -> Bool -> Bool) (id (undefined::Bool)))) (undefined::Bool)
\a -> a
\a -> (enumFromTo'::Int -> Int -> [Int]) (case1 (seq a (seq a (\b -> \c -> seq a b))) (seq a (undefined::Int)) a) 0
head (head (id (undefined::[] ([] ((([] (([] Int) -> [] (([] Int) -> Bool))) -> Int) -> ([] Int) -> [] Int))))) ((\a -> \b -> seq b (\c -> c) (head (seq a (undefined::[] Int)))) ((\a -> head (seq a (undefined::[] Bool))) even))
\a -> (enumFromTo::Int -> Int -> [Int]) ((\b -> seq a (\c -> seq b (undefined::Int))) a (seq a (\b -> seq a a))) 0
(undefined::(Int -> Int -> Int) -> ([] Int) -> [] Int) ((\a -> head (seq a ([]::[] (Int -> Int -> Int -> Int)))) ((!!) ([]::[] ([] ([] Int))) (undefined::Int)) ((\a -> seq a (head ([]::[] Int))) (\a -> ([]::[] Bool))))
case1 (\a -> \b -> (!!) (undefined::[] (Bool -> ([] Int) -> [] Int)) ((+1) 1) ((\c -> c) (seq a (seq b False)))) (\a -> a) ((\a -> seq a (seq a (undefined::Int -> [] (([] Bool) -> Bool))) (seq a 2)) ((\a -> seq a (undefined::[] ([] ([] Bool)))) (id 2)))
(\a -> (\b -> \c -> \d -> b) (seq a ([]::[] Int))) (undefined::Bool) ((\a -> (!!) (undefined::[] Int) (seq a (id 0))) ((undefined::Bool -> ([] Int) -> ([] ([] Int)) -> [] Bool) ((!!) (undefined::[] Bool) 1)))
(\a -> id (seq a (\b -> (\c -> \d -> seq c b) (a b False True) (seq b (\c -> seq b False) (seq b (\c -> 0)))))) (\a -> \b -> (undefined::Bool -> Bool))
map ((\a -> id (seq a (seq a (\b -> seq a (+1)) (\b -> case1 (undefined::Bool -> ([] Bool) -> [] ([] Bool)) a (undefined::[] Bool))))) (id ((\a -> seq a (seq a (seq a (undefined::Bool -> [] ([] Bool)) (seq a (undefined::Bool))))) ((undefined::(([] ([] Int)) -> [] ([] Int)) -> Int) (\a -> a)))))
id
(undefined::([] (([] (([] Int) -> Int -> Bool)) -> Int -> ([] Int) -> Bool -> Bool)) -> ([] Int) -> [] Int) (head (undefined::[] ([] (([] (([] Int) -> Int -> Bool)) -> Int -> ([] Int) -> Bool -> Bool))))
\a -> a
(undefined::([] Int) -> [] Int)
\a -> a
(!!) ((!!) ((undefined::Bool -> [] ([] (([] Int) -> [] Int))) False) ((+1) (id (+1) ((+1) 2)))) ((\a -> (\b -> seq b (seq a (undefined::Int))) (seq a (seq a (seq a (undefined::[] Int))))) False)
id
(\a -> seq a (seq a (\b -> seq b (\c -> seq b tail) (seq b (seq b 2)))) (seq a (undefined::Int -> [] (Int -> [] Int)) (seq a (id 2)))) (case1 (\a -> seq a (seq a (undefined::([] Bool) -> Int -> [] ([] (Bool -> Bool))))) ((!!) ([]::[] ([] ([] (Bool -> Bool))))) (id (undefined::Bool -> [] Bool) (id False)))
(\a -> seq a ((!!) ((\b -> seq a (seq b (undefined::[] (([] Int) -> [] Int)))) (seq a (seq a (\b -> True)))) 0)) ((undefined::(([] (Int -> Bool)) -> Int -> Bool) -> Int) (head ([]::[] (([] (Int -> Bool)) -> Int -> Bool))))
id
\a -> map (seq a (\b -> seq a (id (id (seq b (\c -> seq a 0)) (\c -> seq b c))))) (seq a (seq a (seq a (seq a (seq a (seq a (seq a (seq a (undefined::[] (([] (([] (Int -> Bool)) -> [] (Int -> Bool))) -> [] ([] Bool)))))))))))
(\a -> \b -> (\c -> head ([]::[] (([] (Int -> [] Int)) -> [] Int)) (seq c (seq c (seq a ([]::[] (Int -> [] Int)))))) (seq b ((undefined::([] ([] (Int -> Int))) -> [] ([] Int)) (a (tail ([]::[] ([] Int))))))) (case1 (head (undefined::[] (([] Int) -> ([] ([] Int)) -> [] ([] (Int -> Int))))) (undefined::[] ([] (Int -> Int))))
\a -> seq a a
\a -> a
case1 (\a -> case1 (\b -> \c -> seq a ((enumFromTo'::Int -> Int -> [Int]) (undefined::Int)) b)) (\a -> seq a (\b -> a) (\b -> a)) (map (head ([]::[] ((([] ([] Int)) -> [] Int) -> Int))) (head (undefined::[] ([] (([] ([] Int)) -> [] Int)))))
\a -> (undefined::Bool -> Int -> ([] (Int -> Bool)) -> [] Int) (seq a (seq a (undefined::Bool))) (seq a ((undefined::(([] ([] Int)) -> [] ([] Bool)) -> Int) (\b -> seq a (undefined::[] ([] Bool))))) (tail (seq a (seq a (undefined::Int -> Bool -> [] (Int -> Bool))) (head (seq a ([]::[] Int))) (seq a (\b -> b) (head (seq a (undefined::[] Bool))))))
(\a -> \b -> case1 (seq b (\c -> (undefined::([] Int) -> [] Int))) (seq a (undefined::[] Int))) ((\a -> seq a (seq a 1)) True) ((undefined::(Bool -> Bool -> Bool) -> [] ([] Int)) ((\a -> \b -> \c -> seq a c) ((:) False (undefined::[] Bool))))
\a -> seq a (head (seq a (tail (seq a (seq a ([]::[] ((Int -> Int -> [] (Int -> [] ([] (Int -> Int)))) -> [] Int))))))) (seq a ((\b -> seq b (undefined::Int -> Int -> [] (Int -> [] ([] (Int -> Int))))) (seq a False)))
(\a -> seq a (undefined::(([] Int) -> [] Bool) -> ([] Int) -> [] Int)) ((undefined::Bool -> Int -> [] Bool) (((==)::[Int] -> [Int] -> Bool) (undefined::[] Int) ([]::[] Int))) (\a -> (++) (seq a (seq a (undefined::Bool -> [] Bool) (seq a True))) (undefined::[] Bool))
(:) ((\a -> id (seq a (seq a (\b -> b ([]::[] ([] Int)) (undefined::Int) (undefined::Int))))) True (\a -> seq a (seq a (id (seq a (id (\b -> \c -> \d -> seq a 0) a))))))
case1 (\a -> \b -> (undefined::Int -> Int -> ([] Int) -> [] Int) (seq a (seq a a)) ((\c -> seq a c) a)) ((!!) ([]::[] (Bool -> ([] Int) -> [] Int)) ((+1) (undefined::Int)) ((\a -> a) True)) (map (\a -> (+1) a) (undefined::[] Int))
(:) ((\a -> head (seq a (seq a ([]::[] (([] (([] ([] (Int -> Int))) -> Bool)) -> Int)))) (seq a (tail (undefined::[] (([] ([] (Int -> Int))) -> Bool))))) (\a -> \b -> \c -> seq b (seq b ((undefined::([] (Int -> [] Int)) -> [] Int) ((undefined::(([] Int) -> Bool) -> [] (Int -> [] Int)) (seq a (seq c (undefined::([] Int) -> Bool))))))))
\a -> ([]::[] Int)
(:) (id (undefined::Int))
(\a -> seq a (head (id (undefined::[] (([] ([] Int)) -> ([] Int) -> [] Int))) ((undefined::Int -> [] ([] Int)) a))) ((undefined::(([] ([] Int)) -> [] ([] (Int -> Int))) -> Int) (\a -> seq a (seq a (map (\b -> (undefined::[] (Int -> Int))) (undefined::[] ([] (Bool -> Bool)))))))
tail
id (\a -> seq a (\b -> seq b (seq b b))) id
id
case1 (\a -> id (undefined::([] Int) -> Int -> ([] Int) -> [] Int)) (\a -> id) ((\a -> seq a ([]::[] Int)) 2) ((\a -> seq a (seq a (+1) 0)) id)
\a -> seq a (\b -> a) ((\b -> seq b (\c -> (\d -> seq a (seq d ([]::[] (Int -> Int)))) (seq b (b 0 (undefined::[] Bool))))) (\b -> \c -> seq c (\d -> seq d True) (\d -> not (undefined::Bool))))
\a -> (\b -> head (seq b (undefined::[] (Bool -> Bool -> [] Int))) True (seq b ((\c -> c) (seq a (undefined::Bool))))) ((undefined::Bool -> ([] (([] Int) -> Int -> Int -> [] Int)) -> Int -> Int) (seq a (seq a (seq a ((undefined::Bool -> Bool) (seq a (undefined::Bool)))))))
\a -> seq a (seq a a)
\a -> a
\a -> map (seq a (\b -> (undefined::([] (Int -> [] Int)) -> Bool -> Int) (seq b (seq b (seq b (undefined::[] (Int -> [] Int))))) (b (seq a (b (undefined::Bool) True)) (undefined::Bool)))) ((\b -> seq a (seq b (seq a (seq a (undefined::Int -> [] (Bool -> Bool -> Bool))) 2))) (\b -> \c -> id (undefined::([] Bool) -> [] Bool) c))
\a -> seq a (seq a (\b -> seq a (\c -> a)) (head (seq a (undefined::[] (Bool -> [] ([] Bool)))) (seq a (seq a (seq a (undefined::Bool)))))) ((\b -> seq b (head ((undefined::Bool -> [] (([] Int) -> [] (Int -> Int))) False))) (seq a (((==)::Int -> Int -> Bool) (seq a (undefined::Int)) (seq a (seq a 0)))))
\a -> seq a a
(undefined::(([] Int) -> [] ([] Bool)) -> ([] Int) -> [] Int) (\a -> (\b -> seq b (\c -> seq b (seq b ([]::[] ([] Bool)))) (seq a (b a False (undefined::Bool)))) (\b -> seq b (\c -> seq b (\d -> \e -> e) 2)))
(undefined::(([] ([] ([] Int))) -> [] ([] ([] Bool))) -> ([] Int) -> [] Int) ((\a -> \b -> map (seq a (\c -> (undefined::[] ([] Bool)))) ([]::[] Bool)) (map (id (undefined::Int -> Int)) (undefined::[] Int)))
\a -> a
map (id (\a -> seq a (seq a (\b -> seq b (undefined::Int))) (seq a (undefined::(([] Int) -> [] (Int -> Bool)) -> ([] Int) -> [] (Int -> Bool)))))
(undefined::(([] ([] Bool)) -> [] ([] Bool)) -> ([] Int) -> [] Int) (\a -> map (case1 (\b -> (undefined::([] Int) -> Int -> [] Bool)) (\b -> (undefined::[] Bool)) (seq a (undefined::[] Int))) (map (undefined::Bool -> Int) (seq a ([]::[] Bool))))
(:) (head ((\a -> \b -> a) (map (\a -> seq a 0) ([]::[] Bool)) (undefined::Int)))
(\a -> (undefined::(([] Int) -> Bool) -> ([] Int) -> [] Int) (\b -> head (seq a ([]::[] ((([] Bool) -> [] Bool) -> Bool))) (\c -> seq a c))) (head ((undefined::Int -> [] (([] ([] Int)) -> [] ([] (([] Bool) -> [] Bool)))) ((+1) ((\a -> seq a 0) ([]::[] ([] Bool))))))
\a -> (undefined::(([] Int) -> [] (Int -> [] Int)) -> [] Int) ((\b -> seq b (seq a (\c -> seq c (seq b (undefined::Bool -> [] (Int -> [] Int))) (seq b (seq a False))))) (seq a ((\b -> seq a (seq b (undefined::Int))) (odd (seq a 0)))))
(++) ((\a -> seq a (seq a (head ((\b -> \c -> seq b (undefined::[] ([] Int))) (seq a False) (\b -> seq b (seq a not) b))))) ((\a -> seq a ((++) (seq a (undefined::[] (([] (([] Bool) -> Bool)) -> Int))) (seq a ([]::[] (([] (([] Bool) -> Bool)) -> Int))))) (map (\a -> \b -> seq b ([]::[] Int)) ([]::[] Int))))
\a -> a
\a -> a
(undefined::(([] (Bool -> Bool)) -> Bool -> Bool) -> ([] Int) -> [] Int) (\a -> \b -> b)
(!!) ((\a -> seq a (seq a ([]::[] (Int -> ([] Int) -> [] Int)))) 2) ((undefined::([] Bool) -> Int) ([]::[] Bool)) ((\a -> seq a (seq a (seq a (seq a (\b -> b) (undefined::Int))))) (head ([]::[] ([] (([] (Int -> ([] Int) -> Bool)) -> Bool -> Bool)))))
(undefined::(([] Int) -> ([] (([] ([] Int)) -> [] ([] (Int -> Bool)))) -> Int -> Bool) -> ([] Int) -> [] Int) (\a -> \b -> seq b (head (seq b (undefined::[] ((Int -> [] (([] Int) -> Int)) -> Int -> Bool))) (seq a (head ([]::[] (Int -> [] (([] Int) -> Int)))))))
\a -> (\b -> seq a (\c -> map (\d -> seq d 1) (seq b (undefined::[] Bool)))) (case1 (\b -> \c -> False) (seq a False) (seq a (undefined::[] ([] Int)))) id
\a -> seq a (undefined::(Int -> [] (Int -> Int -> Int)) -> Bool -> [] Int) (\b -> id (seq a (\c -> seq b ([]::[] (Int -> Int -> Int))) (seq b (seq b (undefined::Int))))) ((\b -> (\c -> seq c True) (seq a (seq b (seq a 2)))) (seq a (\b -> ([]::[] ([] (([] Int) -> ([] Int) -> [] Int))))))
\a -> a
\a -> seq a (undefined::Bool -> ([] ([] (([] Int) -> [] (Int -> Bool)))) -> [] Int) (seq a (((==)::Int -> Int -> Bool) (id 0) ((+1) 0))) (undefined::[] ([] (([] Int) -> [] (Int -> Bool))))
\a -> seq a (seq a (\b -> seq a (id (seq b (seq b (\c -> a))))) (seq a (id (undefined::(Int -> Bool) -> [] (Int -> Bool))) (\b -> seq a (seq b True)))) (seq a (\b -> id (\c -> id) (\c -> (\d -> seq a (seq d (undefined::Int -> [] Int))) (seq c (seq b (seq b 2))))))
id
tail
\a -> seq a (\b -> (undefined::Bool -> ([] (Int -> [] Int)) -> [] Int) False (seq a (seq b (undefined::Bool -> [] (Int -> [] Int))) (even (seq a b)))) (id (undefined::Int))
(\a -> seq a (seq a (seq a (\b -> id)))) (id True) (id (\a -> seq a (undefined::Int -> [] (Bool -> Bool)) (undefined::Int)) ((undefined::Bool -> ([] Int) -> [] ([] Bool)) ((&&) True True)))
(\a -> \b -> seq a ((undefined::([] Bool) -> ([] Int) -> [] Int) (a ([]::[] ([] Int))))) (\a -> seq a (\b -> seq b (seq a ([]::[] Bool))) (seq a (seq a (seq a ([]::[] Int))))) ((\a -> \b -> a) (head ([]::[] Int)) ((\a -> tail (seq a ([]::[] ([] Int)))) (\a -> a)))
(\a -> \b -> seq a (seq b (seq a (\c -> id (undefined::Bool -> [] Int) (seq b (seq b (undefined::Bool)))) (\c -> (:) (\d -> seq d b) (seq a ([]::[] (Int -> [] Int))))))) ((\a -> seq a (head (seq a (seq a (seq a ([]::[] (Bool -> ([] Bool) -> Bool))))))) ((!!) (tail (undefined::[] (([] ([] Bool)) -> [] ([] Bool)))) (head (undefined::[] Int))))
head (id (undefined::[] (Int -> Int -> ([] Int) -> [] Int))) ((\a -> seq a (seq a (seq a (undefined::Int)))) (((==)::Int -> Int -> Bool) 2 (undefined::Int))) (head ([]::[] ((Int -> [] ([] (([] Bool) -> [] Bool))) -> Int)) (\a -> (undefined::(Bool -> Bool) -> [] ([] (([] Bool) -> [] Bool))) (undefined::Bool -> Bool)))
\a -> a
(undefined::([] (([] (([] ([] Int)) -> [] ([] Int))) -> Int -> Bool)) -> ([] Int) -> [] Int) ((undefined::Int -> [] (([] (([] ([] Int)) -> [] ([] Int))) -> Int -> Bool)) ((\a -> seq a 1) (\a -> \b -> id)))
(\a -> (\b -> (:) b) (seq a (head ((\b -> b ([]::[] Int)) (take 2))))) ((\a -> \b -> id (seq b (undefined::([] ([] Int)) -> [] ([] ([] Bool)))) (seq b (seq a (undefined::[] ([] Int))))) (undefined::([] ([] Int)) -> [] Int))
\a -> a
\a -> seq a (\b -> \c -> head (undefined::[] (([] Bool) -> [] Int)) ([]::[] Bool)) ((||) (seq a (seq a True)) (seq a (undefined::Bool))) (seq a (seq a (\b -> \c -> ([]::[] ([] ([] Bool))))) (id (seq a (odd (seq a (seq a 0))))))
(\a -> (undefined::Int -> ([] Int) -> [] Int) (seq a (case1 (\b -> (undefined::([] Bool) -> Int)) (undefined::Int) (seq a (undefined::[] Bool))))) (\a -> \b -> a)
\a -> a
(\a -> (\b -> (\c -> seq b (seq c id)) (seq b a)) ((\b -> head (seq b (undefined::[] ([] ([] ([] Bool)))))) False)) (not ((&&) (id False) (undefined::Bool)))
(undefined::Bool -> ([] Int) -> [] Int) ((\a -> seq a ((\b -> seq b (seq a (undefined::Bool))) ([]::[] Bool))) (\a -> take (head (undefined::[] Int)) (seq a (seq a ([]::[] (Int -> Int))))))
(\a -> (undefined::([] ([] Int)) -> Bool -> ([] Int) -> [] Int) ([]::[] ([] Int)) ((\b -> seq a b) (a (seq a (seq a ([]::[] (Int -> [] Int))))))) (\a -> seq a (undefined::Bool -> (Int -> Bool) -> Bool) (id (seq a (undefined::Bool))) (\b -> (!!) ([]::[] ((Bool -> Bool -> Bool) -> Bool)) 0 (\c -> \d -> True)))
(!!) ([]::[] ((([] Int) -> [] Int) -> ([] Int) -> [] Int)) ((\a -> seq a (seq a 1)) (undefined::[] (Int -> Bool))) (\a -> (undefined::Bool -> Bool -> [] Int) (seq a (seq a (seq a (undefined::Bool)))) (even (undefined::Int)))
(\a -> \b -> (\c -> seq c (head ([]::[] (([] (Int -> Int)) -> [] Int)) (head (undefined::[] ([] (Int -> Int)))))) (seq b (\c -> seq b (seq a (undefined::Bool))) (seq b (odd 0)))) ([]::[] (([] (([] ([] Bool)) -> [] ([] (Bool -> Bool)))) -> Int))
(\a -> map (head ((\b -> seq a (seq a (seq a (undefined::Bool -> [] (Int -> Int))) (seq b (undefined::Bool)))) (seq a (\b -> b))))) (id (\a -> (\b -> seq b (undefined::Int -> [] (([] ([] Int)) -> [] ([] Int))) (undefined::Int)) (seq a ((+1) (seq a (seq a (seq a (seq a 1))))))))
(undefined::Bool -> ([] Int) -> [] Int) (((==)::[Int] -> [Int] -> Bool) (map (\a -> seq a (undefined::Int)) (undefined::[] (Int -> Int -> Int))) ((undefined::([] Bool) -> [] Int) ([]::[] Bool)))
\a -> (\b -> seq b (\c -> seq a (\d -> a)) (\c -> seq b (seq b True))) (\b -> (\c -> \d -> seq c d) (seq b (seq a (seq b (undefined::Int))))) (seq a (seq a ((\b -> (&&) b) True) ((\b -> seq a (seq a (seq b (undefined::Bool)))) (seq a (seq a (undefined::[] ([] ([] (Int -> Int -> Bool)))))))))
\a -> head (seq a (seq a (\b -> seq b (seq b (seq b (seq b (undefined::[] ((([] Int) -> [] Bool) -> [] Int)))))) (\b -> (undefined::([] (Bool -> Bool)) -> Bool) ([]::[] (Bool -> Bool))))) (\b -> seq b (seq a (seq b (\c -> seq a (undefined::([] ([] Int)) -> [] Bool) (seq c (undefined::[] ([] Int)))))) (head ((!!) ([]::[] ([] (Int -> Int -> Bool))) (seq a (seq b (undefined::Int))))))
(\a -> seq a (seq a (\b -> \c -> c)) (\b -> seq b (id (\c -> (undefined::Bool)) (\c -> c)))) ((undefined::(([] Int) -> ([] ([] Int)) -> [] Bool) -> [] (Int -> [] Int)) (\a -> map (\b -> (\c -> seq b c) (seq a (seq b (undefined::Bool))))))
\a -> a
id (\a -> (undefined::Bool -> (([] Int) -> Int -> Int -> [] Int) -> [] Int) (head (undefined::[] Bool)) (\b -> (undefined::Int -> Int -> [] Int)))
(\a -> seq a ((undefined::(([] Bool) -> Bool) -> ([] Int) -> [] Int) ((\b -> seq b (\c -> a)) (seq a (seq a (undefined::[] Bool)))))) ((\a -> case1 (seq a (undefined::([] Bool) -> ([] ([] Bool)) -> Bool)) (seq a (undefined::Bool)) (seq a ([]::[] ([] Bool)))) (\a -> not (seq a False)))
id
(\a -> seq a (seq a (undefined::Bool -> Bool -> ([] Int) -> [] Int)) (seq a (seq a (seq a False))) (odd (seq a a))) ((+1) ((\a -> head ([]::[] (([] ([] (([] Int) -> Bool))) -> Int)) (id (seq a ([]::[] ([] (([] Int) -> Bool)))))) (\a -> head (seq a (undefined::[] (([] Int) -> Bool -> Bool))))))
(\a -> \b -> seq a (seq b (\c -> seq c (undefined::Int -> [] Int))) (seq b ((+1) 1)) (seq b (seq a (seq b ((+1) (seq b (seq b (undefined::Int)))))))) (((==)::Int -> Int -> Bool) ((\a -> a) (id (undefined::Int))) (undefined::Int))
\a -> seq a ((\b -> seq b ((undefined::Int -> (Int -> ([] Int) -> Int) -> [] Int) 1)) (\b -> (++) a b) (\b -> \c -> 0))
tail
\a -> seq a (seq a (id (seq a (undefined::(([] Int) -> ([] (([] (Bool -> Bool)) -> [] (Bool -> Bool))) -> Int -> Int) -> [] Int)))) (id (\b -> \c -> (!!) ((undefined::Bool -> (([] Int) -> [] Int) -> [] Int) (undefined::Bool) (\d -> b))))
(\a -> seq a ((\b -> seq a (seq b (\c -> (undefined::([] Int) -> [] Int))) (seq b (seq a (seq a (undefined::[] Bool))))) (seq a (\b -> seq b b)))) ((\a -> seq a (map (\b -> \c -> b) (seq a (undefined::[] Bool)))) ((undefined::(Int -> ([] Int) -> Bool) -> [] ([] ([] Bool))) (\a -> seq a (((==)::[Int] -> [Int] -> Bool) ([]::[] Int)))))
\a -> a
\a -> case1 (\b -> \c -> (undefined::(([] Int) -> [] (Int -> Int)) -> [] Int) ((\d -> seq d (undefined::([] Int) -> [] (Int -> Int))) (seq c (undefined::Bool)))) a a
\a -> a
\a -> (undefined::[] Int)
(undefined::([] ([] ([] Bool))) -> Bool -> ([] Int) -> [] Int) (undefined::[] ([] ([] Bool))) ((\a -> a) (id ((\a -> a) True)))
filter (id ((!!) ([]::[] Bool)))
case1 (\a -> (undefined::([] ([] (([] Int) -> Bool))) -> ([] Int) -> [] Int)) (\a -> a) (map (\a -> ([]::[] (([] Int) -> Bool))) ([]::[] Bool))
(\a -> \b -> seq b ((enumFromTo'::Int -> Int -> [Int]) ((+1) (seq b (undefined::Int)))) ((+) (head (undefined::[] Int)) (seq a (seq a 2)))) ((\a -> \b -> (undefined::([] (([] Int) -> Bool)) -> [] (Bool -> Bool)) (seq a ([]::[] (([] Int) -> Bool)))) 0)
\a -> seq a (id (map ((\b -> seq b ((!!) (seq b ([]::[] (Bool -> Int))) (seq a b))) (seq a (seq a (seq a (seq a 0))))) (id (undefined::(([] ([] Int)) -> [] ([] ([] Int))) -> [] Bool) ((undefined::([] Bool) -> ([] ([] Int)) -> [] ([] ([] Int))) (seq a (seq a (seq a ([]::[] Bool))))))))
\a -> a
(undefined::Bool -> (([] Int) -> ([] Bool) -> [] Bool) -> ([] Int) -> [] Int) ((\a -> seq a (id (undefined::Bool))) (undefined::[] Bool)) ((\a -> (\b -> \c -> seq c (seq b id)) (seq a (seq a (seq a True)))) (\a -> seq a (seq a (tail (head ([]::[] ([] Bool)))))))
head ((\a -> seq a (\b -> ([]::[] (([] Int) -> [] Int)))) ((+) 0 (undefined::Int)) (case1 (\a -> \b -> seq b (undefined::Int -> ([] Int) -> Int)) ((\a -> seq a (undefined::Int -> ([] Int) -> Int)) False) ((undefined::Bool -> [] Int) (undefined::Bool))))
(\a -> id (seq a (\b -> a)) (\b -> \c -> seq b (\d -> seq b (seq a (seq c (undefined::Bool -> Int)) (seq a (seq c (undefined::Bool))))))) (\a -> seq a (\b -> id (seq b (undefined::([] Bool) -> [] Int)) (b (undefined::[] ([] ([] Bool))))) (\b -> (\c -> seq a (seq c (seq b ([]::[] Bool)))) ((!!) (undefined::[] (([] Int) -> [] Bool)) 2)))
head ([]::[] ((([] (Int -> Int)) -> [] (Int -> Int)) -> ([] Int) -> [] Int)) (\a -> map (seq a (seq a (id (undefined::(([] Int) -> Int -> Bool) -> Int -> Int)))) (seq a ([]::[] (([] Int) -> Int -> Bool))))
\a -> seq a (\b -> a) (\b -> head (seq a (seq a (undefined::(Int -> Int -> Bool) -> [] ([] Bool))) ((\c -> seq c (seq a (undefined::Int -> Int -> Bool))) True)))
\a -> seq a (\b -> (undefined::Int -> (([] Int) -> Int -> Int) -> [] Int) (id (seq a (undefined::Int))) (!!)) (seq a (seq a (undefined::Int -> [] (([] ([] Bool)) -> [] ([] Bool)))) (seq a (\b -> seq b (seq a (undefined::Int))) (seq a (head (undefined::[] Bool)))))
head ((\a -> case1 (seq a (\b -> (undefined::([] Bool) -> [] (([] Int) -> [] Int)))) (seq a (undefined::Bool -> [] (([] Int) -> [] Int)) (seq a (undefined::Bool))) a) ((\a -> seq a (seq a (seq a (undefined::(Bool -> Bool) -> [] Bool) (\b -> False)))) (head (undefined::[] (([] (([] ([] ([] Bool))) -> [] ([] Bool))) -> Int)))))
(:) (head ((undefined::(Int -> Int) -> [] Int) (\a -> seq a (id a))))
tail
case1 (id (\a -> \b -> (\c -> \d -> seq c (seq b d)) 2)) (case1 (\a -> seq a (undefined::([] Int) -> [] Int)) ((\a -> seq a ([]::[] Int)) ([]::[] Int))) ((\a -> \b -> seq a ([]::[] ([] (Int -> Bool)))) (head (undefined::[] Int)) ((+) 1 1))
(\a -> (!!) (id (undefined::Bool -> [] (([] Int) -> [] Int)) a)) (case1 (\a -> seq a head) True (undefined::[] Bool)) ((+) ((!!) ([]::[] Int) (undefined::Int)) (id (undefined::Bool -> Int) (even (undefined::Int))))
\a -> (undefined::[] Int)
(undefined::([] Int) -> [] Int)
\a -> seq a (seq a ((undefined::Bool -> Bool -> [] Int) (seq a ((\b -> seq a (seq b (undefined::Bool))) (seq a (seq a ([]::[] Bool))))))) (seq a (seq a (\b -> seq a (undefined::(([] Int) -> [] ([] Bool)) -> Bool)) (seq a ((+1) 0)) (seq a ((!!) ([]::[] (([] Int) -> [] ([] Bool)))) (seq a ((+1) 0)))))
(!!) ((\a -> seq a ([]::[] (Bool -> ([] Int) -> [] Int))) (id (undefined::Bool))) ((\a -> seq a (seq a 1)) (tail ([]::[] (([] Bool) -> [] Bool)))) ((undefined::(([] (([] Int) -> Int -> Int -> Int)) -> [] (Bool -> Bool)) -> Bool) (\a -> case1 (\b -> (undefined::([] Int) -> [] (Bool -> Bool))) (seq a (undefined::[] (Bool -> Bool))) (seq a ([]::[] Int))))
(\a -> seq a id) ((undefined::Bool -> ([] ([] Int)) -> Bool) True ((\a -> seq a ([]::[] ([] Int))) (\a -> seq a ([]::[] Bool))))
(\a -> seq a (seq a (\b -> \c -> tail) (id (seq a (undefined::Bool))))) (id ((undefined::([] Bool) -> ([] Int) -> [] Int) (tail ([]::[] Bool)))) (id (\a -> (\b -> b) (seq a (seq a 2))) (\a -> \b -> ((==)::Int -> Int -> Bool) (seq a (seq b 2)) (undefined::Int)))
\a -> a
case1 (\a -> \b -> \c -> id) (\a -> seq a (undefined::Bool -> ([] Int) -> [] Int) (seq a False)) (undefined::[] Int) (case1 ((\a -> seq a (undefined::Int -> ([] Int) -> Int)) (undefined::Bool)) ((!!) ([]::[] Int) (undefined::Int)) ((undefined::Int -> [] Int) 0))
id ((!!) (undefined::[] (([] (Bool -> Bool)) -> ([] Int) -> [] Int))) (undefined::Int) ((\a -> map ((==)::Bool -> Bool -> Bool) (seq a (undefined::[] Bool))) ((undefined::Int -> [] (([] Int) -> Bool)) 0))
(undefined::(([] (Int -> Bool)) -> ([] (([] Int) -> Int -> Int -> Int)) -> Int) -> ([] Int) -> [] Int) (\a -> \b -> seq b (seq b (head ((undefined::Bool -> ([] Bool) -> [] Int) (seq a True) (undefined::[] Bool)))))
\a -> seq a (undefined::Bool -> ([] ([] (([] Int) -> ([] Bool) -> [] Bool))) -> [] Int) (seq a (head (seq a (seq a (seq a (seq a (seq a ([]::[] Bool)))))))) (seq a (seq a (seq a ((++) (undefined::[] ([] (([] Int) -> ([] Bool) -> [] Bool))) (seq a (seq a (seq a (undefined::[] ([] (([] Int) -> ([] Bool) -> [] Bool))))))))))
id (undefined::(([] Int) -> ([] ([] Int)) -> [] Bool) -> ([] Int) -> [] Int) ((\a -> seq a (seq a (\b -> seq b (seq b (undefined::Bool -> ([] ([] Int)) -> [] Bool)) (seq b (undefined::Bool))))) ((!!) (id (undefined::[] (Bool -> Bool))) ((+1) (undefined::Int))))
(\a -> (undefined::Bool -> ([] Int) -> [] Int) (id (\b -> seq a False) (\b -> ([]::[] ([] (Int -> Bool)))))) (id (\a -> seq a (seq a (seq a (seq a ([]::[] (([] (Int -> Int -> Int)) -> Int)))))) ((\a -> seq a (seq a (seq a (undefined::Bool)))) (undefined::[] ([] (Int -> Int -> [] Int)))))
\a -> seq a (seq a (\b -> \c -> a)) (case1 (\b -> \c -> b) (seq a False) (undefined::[] Bool)) (\b -> head (take ((+1) (seq b id (seq a (undefined::Int)))) ((undefined::(Int -> [] Int) -> [] ([] ([] ([] Bool)))) (seq b (seq b (undefined::Int -> [] Int))))))
\a -> a
(\a -> \b -> seq a b) ((\a -> seq a (undefined::(Int -> Int -> Bool) -> ([] Int) -> ([] Bool) -> [] Bool)) (even ((-) 0 ((+1) (undefined::Int)))))
\a -> seq a a
\a -> seq a (seq a (\b -> \c -> a) ((\b -> seq b False) (seq a (seq a (seq a 0))))) ((\b -> (undefined::Bool -> ([] (Int -> Bool)) -> [] (Int -> Bool)) (seq a (seq a (seq b (undefined::Bool))))) (seq a (seq a (\b -> (undefined::Bool)) (tail (seq a (undefined::[] ([] (Int -> Int))))))))
head ((undefined::Int -> Int -> [] (([] Int) -> [] Int)) (head (map (\a -> 0) ([]::[] Int))) ((\a -> (\b -> seq b (seq b (undefined::Int))) (seq a (head (undefined::[] Bool)))) (\a -> a)))
(\a -> \b -> (\c -> id (\d -> c)) b (\c -> seq c (seq a (seq c ((\d -> seq d (undefined::Bool)) b))))) ((\a -> id a) ((\a -> (+1) (seq a (undefined::Int))) ((:) (undefined::[] ([] (([] Bool) -> [] Bool))) ([]::[] ([] ([] (([] Bool) -> [] Bool)))))))
tail
\a -> a
(!!) (id (\a -> tail (seq a (seq a (seq a ([]::[] (([] Int) -> [] Int)))))) ((undefined::(Int -> Bool) -> Int -> ([] Int) -> Int) (\a -> (undefined::Bool)))) ((\a -> \b -> seq b (seq a a)) (id (undefined::Int)) (\a -> (undefined::[] Bool)))
(undefined::([] Int) -> [] Int)
\a -> take (undefined::Int) (map ((undefined::Int -> (([] Int) -> Int -> Int) -> Int) (id (undefined::Int))) ([]::[] (([] Int) -> Int -> Int)))
(\a -> (\b -> seq a (head (seq b (undefined::[] (Bool -> ([] Int) -> [] Int))) (seq a True))) (undefined::Bool)) ((undefined::Int -> Int) ((\a -> seq a ((+1) 1)) (undefined::Bool)))
(undefined::(([] Int) -> ([] Int) -> Bool) -> Int -> ([] Int) -> [] Int) ((\a -> \b -> \c -> seq c (seq a (undefined::Bool))) True) ((undefined::Int -> (Int -> ([] Int) -> Bool) -> Int) (undefined::Int) (\a -> (undefined::(Int -> Bool) -> ([] Int) -> Bool) (\b -> seq a (undefined::Bool))))
\a -> a
(++) ((\a -> seq a (seq a (\b -> seq b ([]::[] Int))) (\b -> seq b (map (undefined::(Int -> Int) -> [] (Int -> Bool)) (tail (undefined::[] (Int -> Int)))))) (\a -> seq a (seq a (seq a (\b -> (undefined::Int -> [] (Int -> [] Int)))) (id (seq a 1)) ((\b -> b) ((+1) 0)))))
(\a -> (++) (seq a ((\b -> seq a (seq a (undefined::(Int -> Bool) -> [] Int)) (\c -> b)) (seq a (case1 (undefined::Int -> ([] Int) -> Bool) (undefined::Bool) ([]::[] Int)))))) ((\a -> seq a 0) id)
\a -> a
\a -> tail (seq a ([]::[] Int))
(\a -> seq a (undefined::([] Int) -> [] Int)) ((\a -> seq a (\b -> seq b (seq b ([]::[] (([] ([] Bool)) -> [] ([] Bool))))) (seq a (seq a (seq a 2)))) ((\a -> seq a (seq a (undefined::Bool))) 2))
\a -> a
(\a -> \b -> seq a (seq b (seq a (undefined::Bool -> ([] Int) -> [] Int))) (id (seq a (undefined::Bool)))) (case1 (\a -> \b -> 1) (undefined::Int) ([]::[] Bool)) (id (\a -> (\b -> \c -> b) (seq a a)) ((&&) (odd (undefined::Int)) (id False)))
id
tail
(undefined::(([] ([] ([] Bool))) -> [] ([] Bool)) -> ([] Int) -> [] Int) (undefined::([] ([] ([] Bool))) -> [] ([] Bool))
\a -> seq a a
(\a -> \b -> seq b (\c -> \d -> seq b b) ((!!) ([]::[] Int) 0) ((undefined::([] (Bool -> Bool)) -> Bool) (seq a (seq a (seq a (undefined::[] (Bool -> Bool))))))) ((\a -> seq a (seq a (\b -> seq b ([]::[] (([] Bool) -> [] Bool))) (id (seq a ([]::[] Int))))) (id (\a -> seq a (undefined::[] (([] Int) -> Bool))) (\a -> id a)))
(!!) (map (\a -> filter ((!!) (seq a (undefined::[] Bool)))) (case1 take (undefined::[] Int) ([]::[] Int))) ((+) (undefined::Int) ((\a -> a) 0))
(!!) ([]::[] ((([] Bool) -> [] (Bool -> Bool)) -> ([] Int) -> [] Int)) ((\a -> seq a (seq a 0)) (head ([]::[] ([] Bool)))) ((\a -> \b -> seq a (seq a (seq b (\c -> (undefined::[] (Bool -> Bool))) (seq b (\c -> (undefined::Int)))))) (case1 (\a -> seq a (undefined::([] Bool) -> [] ([] ([] Bool)))) (undefined::[] ([] ([] Bool))) ([]::[] Bool)))
\a -> (\b -> \c -> case1 (seq b (undefined::Bool -> ([] Bool) -> [] Int)) a (undefined::[] Bool)) (seq a (\b -> seq a (seq a (undefined::Int))) (seq a (\b -> seq a (\c -> ([]::[] Int))))) ((\b -> seq b (case1 (seq a (undefined::Bool -> ([] Bool) -> Bool)) False (seq b ([]::[] Bool)))) (\b -> seq b (\c -> seq b (seq b ([]::[] (Int -> Int)))) (seq a (head ([]::[] ([] ([] Bool)))))))
\a -> a
(undefined::([] Int) -> [] Int)
id (id (\a -> (\b -> seq a (seq a (\c -> tail) (seq b (seq a even)))) (seq a (undefined::[] (Bool -> Bool))))) (\a -> (\b -> id (undefined::Int -> [] ([] (Int -> Int))) (b (seq b ([]::[] ([] ([] (Int -> Int))))) (seq a (undefined::Int)))) (head (seq a (seq a (seq a (undefined::[] (([] ([] ([] (Int -> Int)))) -> Int -> Int)))))))
(\a -> (\b -> seq b (\c -> (\d -> seq d (seq b ([]::[] Int))) ((+1) 0))) (seq a (\b -> \c -> id (undefined::Int -> [] Bool) (seq c (seq c 2))))) (case1 (\a -> ((==)::[Int] -> [Int] -> Bool) (undefined::[] Int)) ((\a -> seq a True) (tail ([]::[] ([] ([] Int))))) ((\a -> seq a (undefined::[] Int)) (not (undefined::Bool))))
(!!) (undefined::[] ((Int -> Bool) -> ([] Int) -> [] Int)) ((+) ((+1) 1) (undefined::Int)) ((!!) (head (map (\a -> (\b -> seq b (undefined::[] Bool)) ((+1) 1)) ((\a -> seq a (undefined::[] (Int -> Int -> Bool))) (\a -> a)))))
id (\a -> \b -> b) (id ((\a -> seq a (seq a (undefined::([] (([] Int) -> [] Int)) -> Bool))) (id False)) ((\a -> seq a (seq a (seq a (undefined::[] (([] Int) -> [] Int))))) ((!!) ([]::[] (Bool -> Bool)) (undefined::Int))))
\a -> filter (seq a ((undefined::(([] ([] Int)) -> [] ([] ([] Int))) -> Int -> Bool) (map (id (undefined::Bool -> ([] Int) -> [] ([] Int)) (seq a (seq a False)))))) (id (map (undefined::Bool -> Int) (seq a (seq a (seq a (seq a (seq a (undefined::[] Bool))))))))
(\a -> \b -> (enumFromTo'::Int -> Int -> [Int]) (seq a (\c -> seq a 0) (\c -> seq a (seq a (undefined::[] Bool)))) (seq a (id (+1) (seq b 1)))) ((undefined::Bool -> ([] ([] ([] (Bool -> Bool)))) -> [] (([] Int) -> Bool)) (((==)::Int -> Int -> Bool) (undefined::Int) (id 2)))
\a -> seq a (id (seq a (id (seq a (\b -> seq a (\c -> a)) (\b -> seq b (undefined::(Int -> Int) -> Bool) ((!!) a))))) (\b -> seq a (seq a ((\c -> seq c (seq c ((undefined::Bool -> Bool -> Bool) True))) (seq b ((\c -> \d -> seq c c) (seq b (seq a ([]::[] Bool)))))))))
\a -> (\b -> seq a (b ([]::[] ([] ([] Int))))) (\b -> (undefined::(([] Int) -> ([] Int) -> Bool -> Bool -> Bool) -> [] Int) (\c -> (\d -> seq d (id (undefined::([] Int) -> Bool -> Bool -> Bool))) (((==)::Bool -> Bool -> Bool) (undefined::Bool) False)))
\a -> (undefined::(([] (([] Int) -> Int -> Int -> Bool)) -> ([] (Int -> Bool)) -> Int -> Int -> Bool) -> [] Int) (\b -> id (\c -> (!!) c))
\a -> seq a (map (head (map (\b -> \c -> b) (seq a (seq a (undefined::Bool -> [] Int) (undefined::Bool))))) ((undefined::(Int -> Int -> Bool) -> [] ([] (Bool -> Bool))) ((!!) (seq a (seq a ([]::[] (Int -> Int -> Bool)))) (seq a (seq a (undefined::Int))))))
(\a -> seq a (seq a ((!!) (undefined::[] ((Bool -> Int) -> ([] Int) -> [] Int)) (seq a (seq a (undefined::Int))) (case1 (seq a (undefined::Bool -> ([] Bool) -> Bool -> Int)) (seq a (undefined::Bool -> Int)) (seq a (undefined::[] Bool)))))) (\a -> (undefined::(Int -> [] Bool) -> [] (Bool -> Bool)) (\b -> seq b ((undefined::Int -> [] Bool) b)))
tail
\a -> (++) (map (seq a (\b -> seq b ((\c -> c) (seq b (undefined::Int))))) (id (seq a (seq a (seq a ([]::[] (([] (Int -> Bool)) -> Bool -> Int))))))) a
\a -> (\b -> \c -> tail ((!!) (seq b (undefined::[] ([] Int))) (seq a c))) (seq a (\b -> seq a (seq b (undefined::[] (([] Int) -> Bool)))) (id (seq a (undefined::Int)))) (seq a 2)
\a -> map (seq a (seq a ((undefined::([] Bool) -> Int -> Int -> Int) (id ([]::[] Bool))) (id (\b -> (undefined::Int)) (not (seq a True))))) (map (undefined::([] (Int -> ([] Int) -> Int)) -> Int) ((:) (seq a ([]::[] (Int -> ([] Int) -> Int))) (seq a ([]::[] ([] (Int -> ([] Int) -> Int))))))
\a -> a
(\a -> seq a (\b -> map (\c -> (undefined::Int)) (undefined::[] ((([] Int) -> Int -> Bool) -> Bool -> Bool -> Bool)))) (\a -> seq a (seq a (\b -> seq a (id (seq a (\c -> \d -> d))))) (seq a ((\b -> seq b (seq a (undefined::Bool))) (seq a (seq a (seq a ([]::[] Bool)))))))
(++) ([]::[] Int)
(\a -> seq a (\b -> tail) (seq a (seq a ([]::[] (Bool -> Bool))))) ((\a -> head (seq a (undefined::[] (([] ([] ([] Bool))) -> [] ([] ([] Bool)))))) (id (\a -> seq a False) (undefined::([] Int) -> Bool -> Bool)))
(undefined::([] Int) -> [] Int)
head (undefined::[] ((([] (Int -> Int -> [] Int)) -> [] (Int -> Int -> [] Int)) -> ([] Int) -> [] Int)) (map (\a -> a))
head ((!!) ([]::[] (Bool -> [] (([] Int) -> [] Int))) ((undefined::Bool -> Int) (undefined::Bool)) ((\a -> (\b -> seq a (seq b (undefined::Bool))) (id (seq a (undefined::[] Bool)))) (\a -> (\b -> seq b (seq b True)) (undefined::[] (Int -> Int)))))
(undefined::([] Int) -> [] Int)
\a -> seq a (seq a (seq a ((enumFromTo'::Int -> Int -> [Int]) (seq a ((undefined::Int -> (([] ([] Bool)) -> Bool -> Bool) -> Int) (seq a (seq a (seq a (undefined::Int)))) ((undefined::([] Int) -> ([] ([] Bool)) -> Bool -> Bool) (seq a (seq a (seq a a)))))) ((\b -> seq b (case1 (undefined::([] Int) -> ([] ([] Int)) -> Int) (undefined::Int) ([]::[] ([] Int)))) (\b -> seq a (seq b (\c -> ([]::[] (Int -> Bool)))) (seq a (\c -> seq c ([]::[] Bool))))))))
filter (\a -> head (seq a (\b -> seq a (filter (undefined::Bool -> Bool) (seq b ((undefined::Bool -> [] Bool) True)))) (id (id (undefined::(Bool -> Bool -> Bool) -> ([] Int) -> Int -> Bool) (seq a (seq a (undefined::Int -> Bool -> Bool -> Bool)) a)))))
(\a -> \b -> seq a ((undefined::Int -> [] Int) (head (seq b b)))) (\a -> (undefined::Bool -> Int -> ([] ([] Bool)) -> [] ([] (Bool -> Bool))) (seq a ((\b -> seq b (seq b (undefined::Bool))) (seq a (seq a (seq a (undefined::Int)))))))
\a -> (undefined::(Int -> Bool -> Bool) -> ([] ([] (Int -> Bool))) -> [] Int) (undefined::Int -> Bool -> Bool) (head ((\b -> seq b ([]::[] (Bool -> [] ([] (Int -> Bool))))) (head a)) ((\b -> seq b (seq b (seq a (undefined::Bool)))) (seq a (undefined::([] Int) -> Bool))))
case1 (\a -> seq a (\b -> seq a (\c -> b))) (head ([]::[] (Bool -> ([] Int) -> [] Int)) (head ([]::[] Bool))) ((undefined::((Int -> Bool -> Bool) -> Int -> [] Bool) -> [] Int) (\a -> \b -> seq b (seq b (undefined::([] ([] ([] Bool))) -> [] Bool)) (seq b (tail (undefined::[] ([] ([] Bool)))))))
(undefined::(([] ([] Bool)) -> [] ([] (Bool -> Bool))) -> ([] Int) -> [] Int) ((\a -> seq a ((undefined::Int -> ([] ([] Bool)) -> [] ([] (Bool -> Bool))) (seq a 2))) ((\a -> seq a ([]::[] (([] Bool) -> [] Bool))) ((:) ([]::[] Bool) ([]::[] ([] Bool)))))
(\a -> \b -> head ((undefined::Int -> [] (([] Int) -> [] Int)) (seq a (seq a (undefined::Int))))) ((\a -> seq a (id (undefined::Bool))) (\a -> tail (seq a (undefined::[] ([] ([] Int)))))) (\a -> (\b -> seq b (case1 (\c -> (undefined::([] ([] Int)) -> Int)) 1 (seq b (undefined::[] ([] Int))))) a)
(\a -> map (\b -> seq a (id b))) ((\a -> \b -> seq a (\c -> seq c (seq c (undefined::(Bool -> Bool) -> [] Bool)) not)) ((\a -> seq a 2) id))
take ((undefined::((Int -> (([] Int) -> Int) -> ([] Int) -> Int) -> Bool) -> Int) (\a -> seq a (((==)::Bool -> Bool -> Bool) (((==)::[Int] -> [Int] -> Bool) (seq a (undefined::[] Int)) (undefined::[] Int)) (head ([]::[] (([] Int) -> Bool)) (seq a (seq a ([]::[] Int)))))))
\a -> (undefined::([] (([] (([] Int) -> Int)) -> ([] Int) -> Bool)) -> [] Int) (id (head ([]::[] ([] (([] (([] Int) -> Int)) -> ([] Int) -> Bool)))))
(++) ((:) ((\a -> seq a (undefined::(([] ([] (Int -> Bool))) -> [] Bool) -> Int) (\b -> id ([]::[] Bool))) ((++) (id ([]::[] (([] ([] (Int -> Bool))) -> Bool))) ([]::[] (([] ([] (Int -> Bool))) -> Bool)))) ([]::[] Int))
\a -> seq a (undefined::[] Int)
\a -> ([]::[] Int)
id (\a -> \b -> b) (head ([]::[] (([] (Int -> [] Int)) -> ([] Int) -> Bool)))
\a -> ([]::[] Int)
\a -> a
(\a -> seq a (seq a (\b -> seq b (seq a (seq b take) b)) (seq a (seq a (seq a (seq a (undefined::([] Int) -> Int))) (seq a (head ([]::[] ([] Int)))))))) (\a -> seq a (undefined::[] Bool))
\a -> a
(\a -> (++) ((undefined::Int -> [] Int) (seq a (\b -> (undefined::Int)) (seq a (id ([]::[] Bool)))))) (undefined::Bool)
\a -> seq a ((\b -> seq b (seq b (head (seq b (head (seq a ([]::[] ((Int -> Int -> Bool) -> [] ([] Int)))) (head ([]::[] (Int -> Int -> Bool)))))))) (case1 (\b -> seq b (undefined::([] Int) -> Bool -> Int)) (undefined::Bool -> Int) (seq a a) ((\b -> seq b False) (seq a (seq a (seq a ([]::[] ([] ([] (Int -> [] Int))))))))))
(undefined::(([] Int) -> [] (Int -> Int -> Int -> Int)) -> ([] Int) -> [] Int) (\a -> seq a ([]::[] (Int -> Int -> Int -> Int)))
(\a -> \b -> (++) (a b b)) (\a -> (\b -> \c -> seq a (seq b (undefined::[] Int))) ([]::[] ([] (Int -> Bool)))) ((\a -> seq a (seq a (\b -> seq b (undefined::Int)) (seq a (seq a (undefined::Bool -> Bool))))) (\a -> head (undefined::[] (Int -> [] (([] Int) -> Bool))) ((+) (undefined::Int) 2)))
(!!) (undefined::[] ((([] Int) -> [] (Bool -> Bool)) -> ([] Int) -> [] Int)) ((!!) (undefined::[] Int) (head (undefined::[] Int))) ((\a -> (!!) (seq a (seq a (undefined::[] (([] Int) -> [] (Bool -> Bool))))) (seq a (undefined::Int))) (id (\a -> seq a (undefined::[] ([] (Int -> Int)))) (undefined::[] Int)))
\a -> map (undefined::Bool -> Int) (map ((undefined::Int -> Bool -> Bool) (seq a 2)) ((undefined::Bool -> [] Bool) (undefined::Bool)))
\a -> (\b -> seq b ((:) (undefined::Int) ((++) ([]::[] Int) a))) (seq a ((undefined::Int -> [] (([] ([] ([] Bool))) -> Int)) ((undefined::([] Bool) -> Int) ((:) False ([]::[] Bool)))))
id (:) ((\a -> id (seq a (undefined::(Int -> Int) -> Int)) (\b -> b)) (id (\a -> ([]::[] (([] Int) -> Int)))))
(\a -> head (seq a (tail (seq a (undefined::[] ((Int -> Bool) -> ([] Int) -> [] Int))))) even) (\a -> seq a (\b -> (undefined::([] Int) -> Bool)) (\b -> a))
(undefined::(([] Int) -> ([] (Bool -> Bool)) -> Bool -> Bool) -> ([] Int) -> [] Int) (\a -> \b -> not)
(!!) ((\a -> seq a (seq a (tail (seq a (seq a (seq a (undefined::[] (([] Int) -> [] Int)))))))) (case1 (\a -> (undefined::([] Int) -> Bool)) (undefined::Bool) ([]::[] Int))) (head (undefined::[] ((([] (Int -> ([] Int) -> Bool)) -> Int) -> Int)) ((!!) (undefined::[] (([] (Int -> ([] Int) -> Bool)) -> Int)) (undefined::Int)))
\a -> a
(\a -> case1 (seq a (\b -> (undefined::([] Int) -> ([] Int) -> [] Int))) (\b -> b) (seq a (undefined::(Int -> [] Int) -> [] Int) (\b -> seq a (undefined::[] Int)))) (head ((\a -> seq a (seq a ([]::[] (([] ([] (([] Int) -> Bool))) -> [] (Int -> Bool))))) (case1 (\a -> (undefined::([] ([] Bool)) -> Int)) (undefined::Int) (undefined::[] ([] Bool)))))
\a -> head (seq a ([]::[] ((([] ([] Bool)) -> [] Bool) -> Int -> [] Int))) (\b -> map (\c -> seq c True) (seq a (seq a (undefined::[] ([] ([] Bool)))))) (seq a (seq a (\b -> seq b (\c -> seq a (undefined::Int)) (id ([]::[] Bool)))) (seq a (undefined::[] (([] (([] Int) -> [] Bool)) -> Int -> Bool))))
\a -> a
id
id (\a -> id (undefined::([] Int) -> [] Int)) ((\a -> seq a (head (seq a (undefined::[] (([] ([] (Int -> Bool))) -> Bool))) (seq a (id ([]::[] ([] (Int -> Bool))))))) ((\a -> seq a (undefined::Bool)) (head (undefined::[] ((Int -> ([] Int) -> Bool) -> Int)))))
(undefined::([] (([] (([] ([] ([] Int))) -> [] ([] ([] Int)))) -> Bool)) -> ([] Int) -> [] Int) (id (undefined::[] (([] (([] ([] ([] Int))) -> [] ([] ([] Int)))) -> Bool)))
(undefined::([] Int) -> [] Int)
(undefined::Bool -> (([] Int) -> [] (Int -> [] Int)) -> ([] Int) -> [] Int) ((!!) ([]::[] Bool) (head ([]::[] Int))) ((\a -> seq a (seq a (undefined::Bool -> ([] Int) -> [] (Int -> [] Int)) (seq a (seq a (seq a True))))) ((undefined::(Int -> Int) -> Int) (undefined::Int -> Int)))
\a -> a
tail
case1 (\a -> \b -> (\c -> seq b (undefined::Bool -> ([] Int) -> [] Int) c) (even ((+1) 2))) (\a -> a) (undefined::[] ([] (Bool -> Bool)))
\a -> (undefined::([] ([] Bool)) -> [] Int) (filter (undefined::([] Bool) -> Bool) (seq a (map (\b -> seq b ([]::[] Bool)) (seq a ([]::[] Bool)))))
id
id (\a -> \b -> b) (\a -> \b -> \c -> ((==)::Int -> Int -> Bool) ((+) c c) (seq c c))
(undefined::(([] Int) -> [] ([] Int)) -> Bool -> ([] Int) -> [] Int) (\a -> map (\b -> a) a) ((\a -> (\b -> seq a (seq a (seq b (undefined::Bool)))) (seq a (seq a (undefined::Int)))) ([]::[] ([] (Int -> Bool))))
(\a -> \b -> (enumFromTo'::Int -> Int -> [Int]) (seq a ((-) (seq a 2) (seq b (undefined::Int)))) (seq b (\c -> seq a (undefined::Int)) (seq b b))) (undefined::([] Int) -> ([] (([] Int) -> Bool -> Bool)) -> [] (Int -> Int))
id
filter ((\a -> head ([]::[] ((Int -> [] Bool) -> Int -> Bool)) (\b -> tail (seq a ([]::[] Bool)))) (id (\a -> seq a (undefined::Bool))))
\a -> a
id
(\a -> \b -> seq a (seq b (\c -> \d -> b)) (seq b (seq b (seq a ([]::[] ([] Int))))) (seq a 1)) (undefined::([] ([] Int)) -> [] (Bool -> Bool))
(\a -> head (seq a (id ([]::[] (([] (Int -> Bool)) -> ([] Int) -> [] Int)))) (seq a (seq a (seq a (undefined::(Int -> Bool) -> [] (Int -> Bool)))) (seq a (seq a (\b -> seq b True))))) (((==)::[Int] -> [Int] -> Bool) ((undefined::Int -> [] Int) (head (undefined::[] Int))) (id (\a -> (undefined::[] Int)) ((+1) 1)))
(undefined::(([] ([] (Int -> Bool))) -> [] (Bool -> Bool)) -> ([] Int) -> [] Int) (\a -> seq a (seq a (seq a ((\b -> seq a (\c -> (undefined::[] (Bool -> Bool))) (seq b b)) (seq a (((==)::[Int] -> [Int] -> Bool) (seq a ([]::[] Int)) (seq a ([]::[] Int))))))))
(undefined::Bool -> ([] Int) -> [] Int) (case1 (\a -> head ([]::[] (([] ([] ([] Bool))) -> Bool))) False ((\a -> tail (seq a (undefined::[] ([] ([] Bool))))) (head (undefined::[] Int))))
case1 (\a -> (undefined::([] Int) -> ([] Int) -> ([] Int) -> [] Int) ((enumFromTo'::Int -> Int -> [Int]) (seq a a) a)) (\a -> id (\b -> a) (\b -> \c -> (!!) ([]::[] (Int -> Bool)) (undefined::Int))) (case1 (\a -> seq a tail) (head (undefined::[] ([] Int))) (id ([]::[] Int)))
\a -> a
\a -> (undefined::[] Int)
\a -> a
\a -> seq a ((\b -> seq b (seq b (\c -> (undefined::[] Int)))) (seq a (seq a (seq a ((\b -> seq a b) (seq a (seq a (undefined::Bool)))))))) (undefined::([] ([] Int)) -> [] ([] Bool))
\a -> a
take ((\a -> case1 (\b -> id (\c -> seq c (undefined::Int))) (seq a (seq a (seq a (seq a (undefined::Int))))) (seq a (id (seq a (undefined::[] ([] (Int -> Bool))))))) (\a -> seq a (head ([]::[] ([] (Int -> Int))))))
(!!) ([]::[] (([] Int) -> [] Int)) ((\a -> seq a (\b -> seq b (undefined::Int))) (undefined::Bool) ((undefined::Bool -> ([] ([] Int)) -> [] ([] Bool)) (undefined::Bool)))
(\a -> head ((\b -> seq a (seq b (seq a (seq b (undefined::[] (([] Int) -> [] Int)))))) (undefined::Int))) ((undefined::(([] Int) -> [] (([] Int) -> Bool)) -> ([] Int) -> Int -> [] Int) (\a -> (\b -> seq b (seq a (seq a (undefined::[] (([] Int) -> Bool))))) (undefined::Int)))
(undefined::(([] Int) -> Int) -> ([] Int) -> [] Int) (undefined::([] Int) -> Int)
(undefined::Int -> ([] ([] (Int -> Int))) -> ([] Int) -> [] Int) ((undefined::(([] Int) -> [] Int) -> Int) (\a -> a)) ((\a -> seq a (seq a (id (undefined::Bool -> [] ([] (Int -> Int))) (seq a (seq a (undefined::Bool)))))) (\a -> seq a (\b -> \c -> seq a (undefined::Int -> [] Int)) (seq a ((+1) (undefined::Int)))))
\a -> a
\a -> a
\a -> a
(\a -> seq a ((\b -> (\c -> seq c id) (seq b (seq b (\c -> ([]::[] Bool))))) (seq a (\b -> tail) (\b -> seq b (seq a (seq b b)))))) (\a -> \b -> seq a (seq b (seq a (\c -> (\d -> seq d d) (seq a False)))) ((undefined::(Int -> Bool) -> [] ([] (Int -> Int))) (seq a (seq a (undefined::Int -> Bool)))))
\a -> seq a (seq a (\b -> a)) (seq a (\b -> \c -> 2) (((==)::Int -> Int -> Bool) (undefined::Int) (undefined::Int)) (\b -> (\c -> seq b (seq c (seq a (undefined::[] Bool)))) ((++) (undefined::[] (Int -> [] Int)) (undefined::[] (Int -> [] Int)))))
case1 ((\a -> \b -> head (seq a ([]::[] (([] Bool) -> ([] Int) -> [] Int)))) (id not (undefined::Bool))) (\a -> a) ([]::[] Bool)
(\a -> \b -> head (seq a (seq a (seq b (seq a (map (\c -> b) (tail ([]::[] ([] Bool))))))))) ((undefined::(Int -> Int -> Int) -> [] ([] (Int -> Bool))) ((!!) (undefined::[] (Int -> Int -> Int)) (undefined::Int)))
(undefined::(([] Int) -> [] (Int -> Bool)) -> ([] Int) -> [] Int) ((\a -> seq a (\b -> seq b (\c -> ([]::[] (Int -> Bool))) 2)) ((\a -> \b -> seq b (seq a (undefined::[] ([] Bool)))) (undefined::Bool)))
(:) ((+1) (undefined::Int))
head (head ([]::[] ([] ((([] ([] Bool)) -> [] ([] (Bool -> Bool))) -> ([] Int) -> [] Int)))) (\a -> case1 (\b -> seq a (undefined::([] Bool) -> [] ([] (Bool -> Bool)))) ([]::[] ([] (Bool -> Bool))) ((\b -> seq b (undefined::[] Bool)) (seq a ([]::[] Int))))
\a -> (\b -> seq b (seq a (seq a (undefined::Bool -> Bool -> [] Int))) (seq a (seq a (seq a (undefined::Bool)))) (seq a (id (undefined::Bool -> Bool)) False)) (seq a (\b -> head ((\c -> (\d -> seq c (seq d ([]::[] ([] Bool)))) (head (undefined::[] Int))) (seq a (\c -> case1 (\d -> (undefined::([] Int) -> Int -> [] Int)) (undefined::Int -> [] Int))))))
tail
(\a -> (\b -> seq a (case1 (\c -> \d -> seq a (undefined::[] Int)) (seq b (seq a (undefined::[] Int))))) (\b -> map (id (undefined::Bool -> Bool -> Bool)) (tail ([]::[] Bool)))) (\a -> seq a (seq a (\b -> b (seq b (undefined::[] Int)) (seq b (undefined::[] (Int -> Bool))) (seq a 0)) (seq a (\b -> \c -> \d -> ((==)::[Int] -> [Int] -> Bool) (seq d b) b))))
(undefined::([] Int) -> [] Int)
\a -> seq a a
(\a -> seq a (seq a (undefined::([] Int) -> [] Int))) (\a -> (!!))
(undefined::([] Int) -> [] Int)
(undefined::Bool -> ([] Int) -> [] Int) (((==)::[Int] -> [Int] -> Bool) (undefined::[] Int) (head ([]::[] (Int -> [] Int)) (id (undefined::Int))))
(!!) (undefined::[] ((Int -> Int) -> ([] Int) -> [] Int)) ((undefined::([] ([] (Int -> Bool))) -> Int) (undefined::[] ([] (Int -> Bool)))) ((undefined::(Int -> Int -> Bool) -> Int -> Int) (\a -> seq a (seq a (\b -> (\c -> seq c (undefined::Bool)) b))))
\a -> (undefined::(Int -> Int -> [] Bool) -> [] Int) (seq a (head (seq a ([]::[] ((Int -> Bool) -> Int -> Int -> [] Bool))) (\b -> seq a (seq b (seq a (seq a (undefined::(Int -> Bool) -> Bool)) (seq b (seq a odd)))))))
(\a -> (undefined::(([] ([] ([] (Int -> Bool)))) -> Int -> Bool) -> ([] Int) -> [] Int) (seq a (\b -> \c -> seq a (\d -> seq d True) (odd c)))) (\a -> (!!) (undefined::[] ([] ([] Bool))) (case1 (\b -> (undefined::([] Int) -> Int)) (seq a (undefined::Int)) (seq a ([]::[] Int))))
\a -> seq a (\b -> seq a (seq b (\c -> a) (seq a (seq b (seq a (seq b (seq b ([]::[] ((Int -> Bool) -> Int -> Bool))))))))) (id (seq a (undefined::Bool -> (Int -> [] Int) -> Bool) (id (seq a False)) (\b -> (undefined::[] Int))))
id
\a -> (undefined::(([] (([] Int) -> ([] ([] Int)) -> [] Bool)) -> Bool -> Bool -> Bool) -> [] Int) (\b -> seq b ((undefined::Bool -> Int -> Bool -> Bool -> Bool) (seq b (seq b (seq a False)))) 2)
(\a -> seq a (seq a (take a))) 2
\a -> (undefined::[] Int)
(undefined::(Int -> ([] (Int -> ([] Int) -> Int)) -> [] (Int -> ([] Int) -> Int)) -> ([] Int) -> [] Int) (\a -> seq a (\b -> b))
\a -> a
case1 take ((enumFromTo::Int -> Int -> [Int]) ((-) 2 (head ([]::[] Int))) ((undefined::(([] Int) -> Int -> Int -> Bool) -> Int) (\a -> seq a (\b -> seq b (undefined::Int -> Bool)))))
(\a -> (:) (seq a ((\b -> seq a (seq b 1)) (\b -> head (undefined::[] ([] Int)))))) (\a -> seq a (seq a (seq a (seq a (\b -> seq a (seq a (undefined::Bool -> [] ([] Bool))) (seq a (seq a False))) (seq a (seq a (undefined::Int)))))))
(\a -> map (id (seq a ((!!) (seq a (undefined::[] (Int -> Int))))) (seq a (id head (tail ([]::[] Int)))))) (\a -> seq a (seq a (seq a (\b -> seq b b))))
\a -> a
\a -> seq a (undefined::[] Int)
(undefined::([] Int) -> [] Int)
id
\a -> (\b -> map (\c -> seq c (\d -> 1) (tail ([]::[] Bool))) (seq a (seq b (seq b ([]::[] ([] (Int -> ([] Int) -> [] (Int -> Int)))))))) (id (\b -> (\c -> seq c (seq a ([]::[] Int))) (seq a (seq b (undefined::Int)))) (\b -> b))
(++) ((undefined::(([] ([] (Int -> Int))) -> ([] (([] (Int -> Bool)) -> Int -> Bool)) -> Int) -> [] Int) (\a -> head (seq a ((\b -> seq b (undefined::[] (([] (([] (Int -> Bool)) -> Int -> Bool)) -> Int))) ((!!) (seq a ([]::[] Int)) (seq a (undefined::Int)))))))
\a -> a
id
(\a -> seq a (seq a (\b -> seq b (\c -> (undefined::([] Int) -> [] Int)) a))) ((!!) (id ([]::[] Bool)) (undefined::Int)) (\a -> (\b -> seq a (seq a (seq b head) ([]::[] Int))) ((\b -> seq b (seq b (\c -> (undefined::[] Bool)))) id))
\a -> seq a (\b -> map (\c -> (-) (seq b 1) (seq c (undefined::Int))) (seq b (seq a (head ([]::[] ([] (Int -> [] (([] Bool) -> [] Bool)))))))) (undefined::([] (([] ([] ([] Bool))) -> [] ([] ([] Bool)))) -> ([] ([] ([] Bool))) -> [] ([] ([] Bool)))
\a -> (undefined::Bool -> [] Int) (odd (seq a (id (head (head ((:) (seq a (undefined::[] Int)) (head ([]::[] ([] ([] Int))))))))))
\a -> a
\a -> (++) (seq a ([]::[] Int)) a
id
map ((\a -> \b -> seq a id) ((undefined::(([] Int) -> [] Int) -> Int) (undefined::([] Int) -> [] Int)) ((\a -> head (id (seq a ([]::[] (([] (Int -> Int)) -> [] (Int -> Int)))))) ((\a -> seq a (seq a (seq a 1))) (undefined::Bool))))
(:) ((+) ((-) (id ((+1) (undefined::Int))) ((+1) ((+1) (undefined::Int)))) ((!!) ((\a -> seq a (seq a (undefined::[] Int))) (undefined::[] (Int -> [] Int))) ((\a -> id a) 1)))
\a -> (\b -> map (\c -> (+) b 1) (map (\c -> seq b (undefined::([] ([] Bool)) -> [] Bool)) (seq a (undefined::[] Bool)))) (head ((++) (seq a (seq a a)) (seq a (\b -> a) (seq a (seq a (undefined::[] ([] (Int -> Bool))))))))
\a -> a
id ((\a -> head (tail (seq a (tail (undefined::[] (Bool -> ([] Int) -> [] Int)))))) (((==)::[Int] -> [Int] -> Bool) (undefined::[] Int) (undefined::[] Int)) ((\a -> seq a (case1 (undefined::Bool -> ([] Bool) -> Bool) (undefined::Bool) ([]::[] Bool))) (\a -> seq a (seq a (\b -> seq a (undefined::([] (Bool -> Bool)) -> ([] Int) -> Bool) (seq a (seq b ([]::[] (Bool -> Bool)))))))))
\a -> take (id (seq a (seq a ((!!) (seq a (\b -> a) False) (seq a (seq a (seq a 1))))))) ((!!) (seq a (seq a (undefined::Int -> [] ([] Int)) ((+1) (undefined::Int)))) (id (\b -> 0) (seq a (seq a ([]::[] Int)))))
id
(:) ((\a -> \b -> \c -> a) 2 1 ((||) ((undefined::([] (([] Int) -> Int)) -> Bool) (undefined::[] (([] Int) -> Int))) (undefined::Bool)))
(\a -> seq a (seq a (\b -> filter (\c -> seq b a)))) (even ((\a -> seq a 0) (id head))) ((\a -> \b -> seq a (seq b (undefined::[] ([] ([] Bool))))) ((!!) ([]::[] ([] ([] Int))) (undefined::Int)) ((\a -> a) (id 2)))
(\a -> (\b -> seq b (\c -> seq b ([]::[] Int))) ((!!) (seq a (seq a ([]::[] Int))) (seq a 1))) ((\a -> \b -> \c -> a 0) ((\a -> seq a (seq a (\b -> ([]::[] Bool)))) (undefined::Int)))
id
\a -> ([]::[] Int)
\a -> a
\a -> a
(\a -> seq a (undefined::([] (([] ([] Bool)) -> [] ([] Bool))) -> ([] Int) -> [] Int)) (head ([]::[] Bool)) (map (\a -> take ((!!) (seq a ([]::[] Int)) (seq a (undefined::Int)))) ((undefined::Int -> [] (([] ([] ([] Bool))) -> Bool)) ((+1) (undefined::Int))))
(\a -> seq a (seq a (\b -> b))) ((!!) (undefined::[] (([] ([] (([] Int) -> Bool))) -> [] (Int -> ([] Int) -> Bool))) 1)
take ((\a -> seq a (seq a (case1 (undefined::Int -> ([] Int) -> Int) 1 (undefined::[] Int)))) (\a -> \b -> map (\c -> seq a (undefined::Int)) (undefined::[] ([] (([] (([] Int) -> Int)) -> Bool)))))
\a -> case1 (seq a (seq a (seq a (seq a (\b -> (undefined::Bool -> ([] Bool) -> [] Int)))) ((\b -> b) False))) a ((\b -> seq a (tail (seq b ([]::[] Bool)))) (undefined::([] (([] Int) -> [] ([] Int))) -> Int))
\a -> (\b -> b (seq b ((\c -> seq c (seq c (seq c (seq b (seq c (seq c (undefined::[] (Bool -> Bool -> Bool)))))))) (case1 (\c -> (undefined::([] Int) -> Bool)) (seq b False) a)))) (head ((undefined::Int -> [] (([] (Bool -> Bool -> Bool)) -> [] Int)) (seq a (seq a (seq a (seq a (undefined::([] ([] Int)) -> Int)) (undefined::[] ([] Int)))))))
(\a -> (\b -> seq b (seq b (seq a (seq b (undefined::Int -> ([] Int) -> [] Int)) (undefined::Int)))) (case1 (\b -> seq a head) (seq a (undefined::Bool)) (seq a (undefined::[] Bool)))) ((\a -> \b -> \c -> head (seq a (\d -> (undefined::[] Bool)) (seq b (seq b c)))) ((\a -> seq a (\b -> b)) (undefined::([] ([] Int)) -> [] Int)))
(\a -> head ((\b -> seq a (seq b ([]::[] (Bool -> ([] Int) -> [] Int)))) True) (id (\b -> b) (undefined::Bool))) (\a -> (undefined::([] Int) -> [] ([] Bool)))
\a -> (undefined::([] (([] (([] Int) -> [] (Int -> Bool))) -> ([] (Int -> Int)) -> Int -> Int)) -> [] Int) (undefined::[] (([] (([] Int) -> [] (Int -> Bool))) -> ([] (Int -> Int)) -> Int -> Int))
\a -> (undefined::Int -> (([] Bool) -> [] (Bool -> Bool)) -> [] Int) (seq a (\b -> (undefined::Int)) (head ([]::[] (Int -> [] (Bool -> Bool -> Bool))))) (\b -> seq a (seq a (\c -> ([]::[] (Bool -> Bool)))) (\c -> seq c (\d -> seq b (seq c (undefined::[] (Int -> Int)))) (seq b (seq a (seq c 0)))))
\a -> map (seq a (\b -> 2)) (seq a ([]::[] Bool))
\a -> a
(undefined::([] Int) -> [] Int)
\a -> (\b -> seq b (seq b (seq b ((undefined::(([] Int) -> [] ([] Bool)) -> [] Int) ((\c -> seq c (\d -> seq a ([]::[] ([] Bool)))) (seq b (seq b (seq b (undefined::Int))))))))) (undefined::[] ([] (([] ([] ([] Bool))) -> [] ([] ([] Bool)))))
\a -> (undefined::[] Int)
\a -> map (seq a (\b -> (+1) ((undefined::(Int -> ([] Int) -> Int) -> Int) (\c -> \d -> seq d (seq a c))))) ((undefined::Int -> [] ([] (Int -> Bool))) (seq a (seq a (head a))))
\a -> map (\b -> seq b (case1 (\c -> seq b (\d -> seq c 1)) (seq b (seq a (seq a 0))) (seq b (seq b (seq b (undefined::[] (Bool -> Bool))))))) ((\b -> seq b (undefined::[] (([] (([] ([] ([] Bool))) -> [] ([] ([] Bool)))) -> [] Bool))) (seq a (((==)::Int -> Int -> Bool) (seq a (seq a (undefined::Int))) 0)))
\a -> map (\b -> (\c -> seq a (seq c (seq a 2))) ((!!) ([]::[] (Int -> Bool -> Bool)) (id (undefined::Int)))) (seq a (seq a ([]::[] (([] (([] Int) -> ([] Int) -> Bool)) -> Bool -> Bool -> Bool))))
\a -> seq a (seq a (undefined::[] Int))
\a -> (!!) (seq a (seq a (undefined::(([] (([] ([] Int)) -> [] Int)) -> Bool) -> [] ([] Int))) (seq a (\b -> seq b (seq b ((\c -> c) (seq b False)))))) ((\b -> seq b (seq b ((\c -> seq c (undefined::Int)) (id (undefined::Bool))))) (seq a ((\b -> seq b (seq b ([]::[] (([] Int) -> [] Int)))) (id ([]::[] Bool)))))
(!!) (undefined::[] (([] ([] (Int -> Bool))) -> ([] Int) -> [] Int)) ((\a -> seq a (seq a (undefined::Int))) (undefined::[] (Int -> Bool))) (undefined::[] ([] (Int -> Bool)))
filter ((undefined::(([] Int) -> [] (Int -> Bool)) -> Int -> Bool) (undefined::([] Int) -> [] (Int -> Bool)))
\a -> case1 (undefined::(Int -> Int -> [] Int) -> ([] (Int -> Int -> [] Int)) -> [] Int) a ([]::[] (Int -> Int -> [] Int))
\a -> a
(\a -> seq a (\b -> \c -> c)) ((\a -> tail (seq a (undefined::[] (Int -> [] Int)))) (\a -> seq a (head ([]::[] Bool)))) (undefined::Int)
\a -> (\b -> (undefined::Bool -> [] Int) (seq b (\c -> seq a (seq c True)) (undefined::Bool))) (\b -> (\c -> c (seq c (seq b ((undefined::([] (([] ([] Int)) -> Bool)) -> [] Bool) (seq b (seq a ([]::[] (([] ([] Int)) -> Bool)))))))) (\c -> head ([]::[] ((Int -> Int) -> [] (Bool -> Bool))) (\d -> d)))
(undefined::([] Int) -> [] Int)
\a -> a
id (undefined::(([] Int) -> ([] (Int -> Int -> Bool)) -> Bool) -> ([] Int) -> [] Int) (\a -> (undefined::Int -> ([] (Int -> Int -> Bool)) -> Bool) (seq a (seq a (\b -> 0)) (\b -> seq a (\c -> b))))
\a -> (\b -> map (seq a (\c -> seq a (undefined::(Int -> Int -> [] Int) -> Int)) (seq b False)) (undefined::[] (Int -> Int -> [] Int))) ((\b -> b) (seq a (seq a (seq a (seq a (seq a (seq a (seq a (seq a 2)))))))))
(\a -> case1 (seq a (undefined::Int -> ([] Int) -> ([] Int) -> [] Int)) ((\b -> seq b id) (seq a (undefined::[] Int))) ((undefined::(([] Int) -> Int) -> [] Int) (seq a (undefined::([] Int) -> Int)))) True
(\a -> seq a ((\b -> (\c -> \d -> c) (seq b (seq a (seq b (undefined::[] Int))))) (seq a False))) (\a -> seq a (\b -> seq a (\c -> seq b ([]::[] (([] Int) -> [] (Int -> [] Int)))) (seq a (seq b (\c -> (undefined::Int))) (undefined::[] (([] ([] ([] Bool))) -> Bool)))))
(++) ((undefined::(([] Int) -> [] (Int -> Bool)) -> (Int -> [] Bool) -> [] Int) (\a -> map (\b -> (undefined::Int -> Bool)) (seq a (id (undefined::[] (([] Bool) -> [] Bool))))) (undefined::Int -> [] Bool))
\a -> (\b -> take (b (seq a ([]::[] (([] Int) -> Int -> Int -> Bool))) (seq a (undefined::Int))) (seq b a)) (\b -> (undefined::([] (([] Int) -> [] Int)) -> Int -> Int) (seq b ([]::[] (([] Int) -> [] Int))))
head (id (undefined::[] ((([] Int) -> [] (Int -> Bool)) -> ([] Int) -> [] Int))) (\a -> seq a (seq a (seq a (map (seq a (\b -> even)) ((++) (seq a ([]::[] ([] (Int -> [] Int)))) (seq a (undefined::[] ([] (Int -> [] Int)))))))))
\a -> map (seq a (\b -> (\c -> seq b (\d -> seq c (undefined::Int))) False (seq a (\c -> 1) (head (seq b ([]::[] ([] Bool))))))) (seq a (seq a ((undefined::([] (([] Int) -> Bool)) -> [] (Int -> Bool)) (seq a (seq a ([]::[] (([] Int) -> Bool)))))))
\a -> seq a a
(\a -> seq a (take ((\b -> seq a (seq b (seq b id) (id a))) (seq a (\b -> seq b ((undefined::([] Int) -> [] ([] Bool)) (seq a ([]::[] Int)))))))) (id ((\a -> head (seq a (undefined::[] Int))) (undefined::([] ([] ([] Int))) -> ([] Int) -> Bool)))
\a -> id (map (\b -> seq b (seq b (head (undefined::[] ((([] Int) -> Int -> Bool) -> Int)))) ((undefined::([] Int) -> ([] Int) -> Int -> Bool) a)) (head (seq a (seq a ((\b -> seq b (undefined::Int -> [] ([] (Int -> [] Int)))) (not (undefined::Bool)) ((\b -> b) 2))))))
id
(undefined::Int -> Int -> ([] Int) -> [] Int) ((undefined::([] (Int -> Bool)) -> Int) (undefined::[] (Int -> Bool))) (id (undefined::(([] ([] ([] Int))) -> [] ([] ([] Int))) -> Int) (undefined::([] ([] ([] Int))) -> [] ([] ([] Int))))
head (tail ([]::[] ((([] Int) -> ([] (Int -> [] Int)) -> [] (Int -> [] Int)) -> ([] Int) -> [] Int))) (undefined::([] Int) -> ([] (Int -> [] Int)) -> [] (Int -> [] Int))
(\a -> (\b -> \c -> seq b (seq c id)) True (seq a odd)) ((!!) (undefined::[] (((([] Int) -> Int) -> Bool) -> Bool)) 1 (\a -> head (seq a ((!!) (undefined::[] ([] Bool)) (undefined::Int)))))
case1 (\a -> id (\b -> (undefined::([] Int) -> ([] Int) -> [] Int)) 0) ((\a -> id (undefined::Bool -> ([] Int) -> [] Int) (seq a (seq a True))) ((undefined::Bool -> ([] Int) -> Int -> Bool) (id (undefined::Bool)))) (map (\a -> seq a 0) (filter (undefined::([] (Int -> [] Int)) -> Bool) (undefined::[] ([] (Int -> [] Int)))))
\a -> seq a (seq a (seq a (\b -> map (\c -> seq b (\d -> d) (seq c (undefined::Int))) (seq b (\c -> seq a ([]::[] ([] (Int -> Int)))) (seq b True))) (seq a (\b -> b))))
(\a -> (\b -> seq a (seq b (\c -> tail) (seq a (head (undefined::[] Bool))))) (\b -> a)) (undefined::Int)
(:) ((\a -> seq a (seq a ((undefined::([] (Int -> [] Bool)) -> Int -> Int) ([]::[] (Int -> [] Bool))))) ((\a -> seq a (undefined::([] Int) -> ([] Bool) -> [] Bool)) ((&&) (undefined::Bool) False)) ((undefined::Bool -> Int) (head (undefined::[] ((Int -> Int) -> Bool)) (\a -> a))))
(\a -> \b -> seq a (\c -> (enumFromTo'::Int -> Int -> [Int]) (seq a 1) (seq c (undefined::Int)))) (undefined::Bool) (\a -> seq a (seq a (seq a ((undefined::(([] Bool) -> Int -> Int -> [] Int) -> [] Bool) (undefined::([] Bool) -> Int -> Int -> [] Int)))))
\a -> (undefined::[] Int)
(\a -> seq a (\b -> (:) (undefined::Int) (seq b (seq b (undefined::Bool -> [] Int)) (head ([]::[] Bool))))) (\a -> seq a (\b -> seq a ((undefined::Int -> [] ([] (Bool -> Bool))) (seq a (seq a 1)))) (\b -> seq a ((+1) (seq a (seq a 0)))))
(\a -> \b -> \c -> map (\d -> seq d 2) (seq a ([]::[] Bool))) ((\a -> a) (undefined::Int)) (\a -> (undefined::(([] Int) -> ([] Int) -> Bool) -> Int -> Int) (seq a (seq a (\b -> \c -> ((==)::Int -> Int -> Bool) (seq c (undefined::Int)) (seq b a)))))
\a -> (!!) ((\b -> (undefined::Bool -> [] ([] Int)) (seq b False)) (\b -> seq b (seq a (seq a (undefined::([] ([] Int)) -> [] Bool))))) (undefined::Int)
(undefined::([] Int) -> [] Int)
\a -> a
(!!) (undefined::[] (Bool -> Bool -> ([] Int) -> [] Int)) (undefined::Int) (undefined::Bool) (undefined::Bool)
(\a -> \b -> seq a (\c -> c)) ((&&) False (undefined::Bool)) (undefined::([] Int) -> Bool)
(undefined::([] Int) -> [] Int)
(\a -> seq a (\b -> \c -> ([]::[] Int))) (odd ((\a -> a) ((+1) 1))) ((:) ((\a -> seq a (seq a (undefined::Int -> Bool))) (undefined::Bool)) (map (\a -> seq a (undefined::Int -> Bool)) (tail (undefined::[] ([] ([] ([] ([] Bool))))))))
\a -> seq a ((!!) ([]::[] (Bool -> Bool -> [] Int))) (seq a (seq a (seq a 2))) (id ((undefined::([] Int) -> Bool) a)) ((!!) (seq a (map (seq a odd) a)) (case1 (\b -> (undefined::([] Bool) -> Int)) (undefined::Int) (seq a (undefined::[] Bool))))
tail
\a -> (!!) (seq a (map (\b -> a) (seq a (seq a (undefined::Bool -> [] ([] ([] Bool)))) (seq a (seq a (undefined::Bool)))))) (seq a (seq a (seq a (\b -> seq b (undefined::(([] Int) -> Int) -> Int)) (seq a (seq a (undefined::[] Bool)))) (undefined::([] Int) -> Int)))
(\a -> \b -> (!!) (seq a (undefined::[] (([] Int) -> [] Int))) (undefined::Int)) ((\a -> seq a (seq a (seq a False))) (undefined::([] (Bool -> Bool)) -> Bool)) (\a -> seq a (\b -> \c -> \d -> (undefined::[] Int)) (seq a (seq a (seq a 2))) (seq a (seq a (\b -> (undefined::Bool)))))
(undefined::Int -> (([] Int) -> Bool -> Bool -> Bool) -> ([] Int) -> [] Int) ((undefined::([] ([] (Int -> [] Int))) -> Int) (undefined::[] ([] (Int -> [] Int)))) (undefined::([] Int) -> Bool -> Bool -> Bool)
\a -> id (seq a (\b -> a)) (\b -> \c -> (!!) (seq a (tail (undefined::[] (([] (([] Int) -> Int)) -> ([] Int) -> Int)))) (c a))
\a -> a
(\a -> (\b -> seq a (seq a (seq b (undefined::Int -> ([] Int) -> [] Int)))) (seq a (undefined::[] Int)) (id (\b -> seq b (undefined::Int)) (seq a ([]::[] (Int -> Int -> [] Int))))) ((\a -> seq a (\b -> \c -> \d -> True)) True)
\a -> a
tail
case1 (undefined::Int -> ([] Int) -> ([] Int) -> [] Int) ((\a -> seq a id) ([]::[] ([] ([] (([] Int) -> Bool))))) (undefined::[] Int)
(++) (undefined::[] Int)
(undefined::(([] ([] (([] Int) -> Bool))) -> [] Bool) -> ([] Int) -> [] Int) (\a -> (undefined::([] (([] (([] ([] ([] Int))) -> [] ([] Bool))) -> [] Bool)) -> [] Bool) (seq a (seq a (seq a (undefined::[] (([] (([] ([] ([] Int))) -> [] ([] Bool))) -> [] Bool))))))
(\a -> seq a (seq a (\b -> take a))) ((\a -> head (seq a ([]::[] Int))) (undefined::([] Int) -> [] Bool)) ((\a -> seq a ((!!) (seq a (seq a (undefined::[] Bool))) a)) ((\a -> seq a (undefined::Int)) (\a -> seq a a)))
\a -> (undefined::[] Int)
\a -> a
head ((\a -> map (undefined::Bool -> Bool -> ([] Int) -> [] Int) (seq a (undefined::[] Bool))) ((\a -> seq a (seq a a)) (head ([]::[] Bool)))) ((\a -> (!!) (id (undefined::[] Bool)) (a True ([]::[] (Int -> Int)) 1)) (undefined::Bool -> ([] (Int -> Int)) -> Int -> Int))
(\a -> seq a (head (undefined::[] (([] ([] (Bool -> Bool))) -> ([] Int) -> [] Int)) ((undefined::Int -> [] ([] (Bool -> Bool))) (seq a (seq a 1))))) ((\a -> seq a (seq a (\b -> seq b (undefined::Bool))) (undefined::Int)) (head ([]::[] ([] (([] (([] Int) -> ([] Int) -> [] ([] Int))) -> Int)))))
(undefined::(([] Int) -> ([] Bool) -> [] Bool) -> Bool -> ([] Int) -> [] Int) ((!!) (undefined::[] (([] Int) -> ([] Bool) -> [] Bool)) (id (undefined::Int))) False
(\a -> (!!) (seq a ([]::[] (Bool -> ([] Int) -> [] Int)))) 2 ((\a -> head (seq a ([]::[] Int))) (tail (undefined::[] ([] (Int -> Int -> [] Int))))) (id (\a -> seq a (seq a (\b -> (undefined::Bool)) 1)) (\a -> id))
\a -> ([]::[] Int)
(undefined::Bool -> ([] Int) -> [] Int) ((\a -> (\b -> seq b (seq a (seq b False))) (undefined::Int)) (\a -> case1 (undefined::Int -> ([] Int) -> [] Bool) (seq a (undefined::[] Bool)) (seq a ([]::[] Int))))
take (case1 (undefined::Bool -> ([] Bool) -> Int) (id (id (head ((enumFromTo'::Int -> Int -> [Int]) (undefined::Int) 2)))) ([]::[] Bool))
map (undefined::Int -> Int)
\a -> (enumFromTo::Int -> Int -> [Int]) (case1 (\b -> seq a (seq b (\c -> 2))) (seq a (undefined::Int)) ((\b -> seq b ([]::[] Bool)) (seq a 0))) ((undefined::(Int -> [] Int) -> Int) (\b -> (\c -> seq a c) (seq a a)))
(undefined::([] Int) -> [] Int)
\a -> a
\a -> (undefined::(([] (([] ([] Int)) -> [] (([] Int) -> Bool))) -> Bool) -> [] Int) (\b -> (undefined::(([] (Int -> Bool)) -> [] (Int -> Bool)) -> Bool) ((undefined::Int -> ([] (Int -> Bool)) -> [] (Int -> Bool)) (seq a (seq a (seq a 2)))))
(\a -> (undefined::Int -> ([] Int) -> [] Int) ((\b -> seq b (seq b b)) (seq a 2))) id
\a -> a
\a -> a
\a -> seq a (\b -> \c -> seq b (\d -> seq a ([]::[] Int)) (undefined::[] Bool)) (undefined::([] ([] Int)) -> [] (([] Int) -> Bool)) True
case1 (\a -> \b -> (++) (case1 (:) b ([]::[] Int)) (seq b (undefined::[] Int))) ((undefined::(([] (([] Int) -> Bool)) -> Int -> [] (Int -> Int)) -> [] Int) (undefined::([] (([] Int) -> Bool)) -> Int -> [] (Int -> Int)))
\a -> a
(\a -> (!!) (seq a (seq a (seq a (seq a (undefined::Bool -> [] (([] Int) -> [] Int)) (seq a (undefined::Bool)))))) (seq a (id (undefined::Bool -> Int)) (seq a (seq a (seq a True))))) (\a -> \b -> (&&) ((\c -> \d -> c (seq b (undefined::Int))) (seq b (\c -> seq c False)) ([]::[] ([] (Int -> Bool)))))
case1 (\a -> head (undefined::[] (([] ([] (([] Int) -> Bool))) -> ([] Int) -> [] Int))) (\a -> a) ((undefined::Int -> Bool -> [] ([] (([] Int) -> Bool))) (undefined::Int) ((\a -> seq a True) (id (undefined::Int))))
(\a -> (!!) (seq a (seq a ([]::[] (Bool -> ([] Int) -> [] Int)))) (seq a 1)) ((\a -> a) (id (undefined::Bool))) ((\a -> a (seq a (seq a ([]::[] Int))) ([]::[] Int)) ((\a -> seq a (id ((==)::[Int] -> [Int] -> Bool))) (tail ([]::[] Bool))))
(undefined::(([] ([] Int)) -> [] ([] Bool)) -> Int -> ([] Int) -> [] Int) ((\a -> seq a (seq a (undefined::([] ([] Int)) -> [] ([] Bool)))) (filter (undefined::Bool -> Bool) ([]::[] Bool))) ((undefined::([] ([] Bool)) -> (Int -> Int) -> Int) (id ([]::[] ([] Bool))) (id (\a -> seq a a)))
(undefined::Bool -> ([] Int) -> [] Int) (undefined::Bool)
(!!) (case1 (\a -> (undefined::([] Bool) -> [] (([] Int) -> [] Int))) ((++) ([]::[] (([] Int) -> [] Int)) (undefined::[] (([] Int) -> [] Int))) (undefined::[] Bool)) 1
\a -> seq a (undefined::[] Int)
id
case1 (\a -> seq a (undefined::([] ([] (Int -> [] Int))) -> ([] Int) -> [] Int)) (case1 (\a -> seq a (++)) tail (tail ([]::[] Int))) ((\a -> seq a (seq a ([]::[] ([] (Int -> [] Int))))) (\a -> seq a (seq a (seq a a))))
filter (\a -> head (seq a (\b -> seq b (id (\c -> seq b (id (undefined::[] Bool)))) (map (\c -> ([]::[] (Bool -> Bool))) (undefined::[] Bool))) (seq a (seq a (seq a (undefined::Int -> [] (([] ([] Bool)) -> [] ([] Bool)))) (case1 (\b -> (undefined::([] Int) -> Int)) (seq a 1) (seq a ([]::[] Int)))))))
case1 (undefined::Bool -> ([] Bool) -> ([] Int) -> [] Int) tail (map (\a -> seq a (seq a (seq a False))) (undefined::[] Int))
(undefined::Bool -> ([] Int) -> [] Int) ((!!) ([]::[] ((Int -> Int -> Int) -> Bool)) (head ([]::[] Int)) (undefined::Int -> Int -> Int))
\a -> ([]::[] Int)
\a -> map (\b -> b a ((undefined::Int -> [] (([] Int) -> [] ([] Bool))) (seq b (seq b (seq b (undefined::Int)))))) (seq a (seq a (seq a (id ([]::[] (([] Int) -> ([] (([] Int) -> [] ([] Bool))) -> Int))))))
\a -> a
\a -> (\b -> seq b (undefined::[] Int)) ((+) ((+1) ((\b -> seq b (seq b 1)) ([]::[] Int))))
head (undefined::[] ((([] Int) -> Int -> Bool) -> ([] Int) -> [] Int)) ((\a -> (\b -> seq a (\c -> \d -> b)) (seq a (undefined::Bool))) (undefined::[] (Int -> Int)))
(undefined::([] Int) -> [] Int)
(\a -> \b -> seq a ((\c -> seq c (id (undefined::(Int -> [] Int) -> [] Int)) (undefined::Int -> [] Int)) (seq b (head (seq a (id (undefined::[] (([] (Int -> Bool)) -> Int -> Bool)))))))) ((undefined::([] Int) -> ([] ([] ([] Bool))) -> [] ([] Bool)) (id ((\a -> seq a (undefined::[] Int)) (tail (undefined::[] (([] Bool) -> Bool))))))
id (\a -> tail (seq a a))
(\a -> \b -> map (\c -> seq a (head b)) (map (\c -> seq b (undefined::[] ([] (Int -> Int)))) (seq b ([]::[] (Bool -> Bool))))) (undefined::(([] Int) -> Int -> ([] (Int -> Int)) -> Int -> Int) -> Int -> Int)
\a -> (!!) (undefined::[] ([] Int)) (head (seq a ([]::[] (([] ([] ([] (Bool -> Bool)))) -> Int))) (seq a (seq a (seq a (seq a (undefined::Int -> [] ([] ([] (Bool -> Bool))))) (seq a (seq a 2))))))
\a -> a
\a -> ([]::[] Int)
\a -> a
(undefined::([] Int) -> [] Int)
(undefined::([] Int) -> [] Int)
(\a -> \b -> seq a (\c -> \d -> seq d d) ([]::[] Bool)) ((\a -> \b -> seq b (seq a False)) (undefined::Int)) (\a -> seq a (\b -> \c -> a) (seq a (seq a False)) (\b -> seq a ((undefined::Bool -> Int) b)))
(\a -> seq a (\b -> id (\c -> (undefined::([] Int) -> [] Int)) (id (seq a True))) (seq a (seq a (seq a (seq a (tail (seq a ([]::[] ([] ([] (([] Int) -> [] ([] Int)))))))))))) ((+) 1 1)
\a -> (\b -> seq a (seq b (seq a (\c -> \d -> a) (head ([]::[] Bool)))) (case1 (\c -> seq b (undefined::([] Int) -> [] (Bool -> Bool))) (seq a ([]::[] (Bool -> Bool))) a)) (\b -> (undefined::[] Bool))
\a -> a
\a -> a
\a -> seq a a
(undefined::Bool -> (Int -> [] Bool) -> ([] Int) -> [] Int) (head (filter id (head ([]::[] ([] Bool))))) (\a -> (undefined::(Int -> Int) -> [] Bool) (\b -> a))
\a -> a
(undefined::(([] Int) -> Int) -> Int -> ([] Int) -> [] Int) (\a -> seq a (case1 (\b -> (undefined::([] Bool) -> Int)) (seq a 1) ([]::[] Bool))) ((\a -> seq a (undefined::(Int -> [] ([] ([] ([] Bool)))) -> Int)) (((==)::[Int] -> [Int] -> Bool) (undefined::[] Int) ([]::[] Int)) (undefined::Int -> [] ([] ([] ([] Bool)))))
(\a -> seq a (\b -> \c -> map (undefined::Int -> Int) ([]::[] Int)) (seq a (\b -> b))) (undefined::([] ([] Bool)) -> [] ([] Bool))
(\a -> (!!) ((\b -> seq b (undefined::[] (([] Int) -> [] Int))) (seq a (seq a (undefined::Bool)))) (seq a (\b -> b) 0)) ([]::[] (([] (Int -> Int -> Bool)) -> Bool))
filter (undefined::Int -> Bool)
case1 (id (\a -> \b -> b)) ((undefined::Bool -> ([] ([] Int)) -> [] Int) (head ([]::[] Bool)) (tail ([]::[] ([] Int))))
(\a -> \b -> \c -> seq b (id (seq a c))) 1 id
(\a -> seq a (seq a (\b -> seq a (\c -> c)))) ((!!) (tail (undefined::[] Int)) (id 1)) (\a -> seq a (seq a (\b -> head ([]::[] (Int -> Int -> Bool)) (seq a (seq a (undefined::Int)))) ((undefined::(Bool -> Bool) -> ([] Bool) -> [] (Bool -> Bool)) id)))
\a -> seq a ((\b -> id (seq b (\c -> (undefined::Int -> [] Int)) ([]::[] Int) (seq a 2))) (undefined::([] ([] ([] ([] (Int -> Bool))))) -> [] (Int -> [] ([] (Int -> Bool)))))
(\a -> seq a ((++) (id (seq a ((\b -> seq b (seq b ([]::[] Int))) (seq a ((\b -> seq b ([]::[] Int)) (undefined::Bool)))))))) ((\a -> seq a (((==)::Bool -> Bool -> Bool) (undefined::Bool)) (seq a (even 1))) ((undefined::([] (([] Int) -> [] Bool)) -> Int) (id ([]::[] (([] Int) -> [] Bool)))))
\a -> (undefined::(([] (Int -> Bool -> Bool)) -> Bool) -> [] Int) (\b -> (undefined::Bool))
\a -> ([]::[] Int)
head ([]::[] (([] (Int -> Bool)) -> Int -> ([] Int) -> [] Int)) (case1 (\a -> \b -> ([]::[] (Int -> Bool))) ([]::[] (Int -> Bool)) ([]::[] Bool)) ((\a -> seq a (id head (seq a (seq a ([]::[] Int))))) (\a -> seq a (seq a (\b -> seq a (seq a (seq b (head ([]::[] ([] Int)))))))))
(undefined::(([] (([] Int) -> Bool -> Bool)) -> Int -> Int -> Int) -> ([] Int) -> [] Int) ((undefined::Bool -> ([] (([] Int) -> Bool -> Bool)) -> Int -> Int -> Int) ((undefined::(([] (Int -> Bool)) -> [] (Int -> Bool)) -> Bool) id))
(\a -> seq a (undefined::(([] Bool) -> [] Bool) -> ([] Int) -> [] Int)) (undefined::Int) ((!!) (undefined::[] (([] Bool) -> ([] Bool) -> [] Bool)) (undefined::Int) (map (\a -> seq a (seq a True)) (undefined::[] Int)))
(undefined::(([] ([] Int)) -> [] ([] Int)) -> ([] Int) -> [] Int) (\a -> seq a (seq a (\b -> a) (\b -> \c -> id (\d -> (undefined::Bool)) (tail (seq a (undefined::[] ([] (Int -> Bool))))))))
filter ((\a -> id (\b -> seq b (\c -> odd) a)) ((\a -> even (seq a a)) (id 2)) (undefined::([] Int) -> Int))
(undefined::(([] ([] (Int -> Int))) -> [] ([] Bool)) -> ([] Int) -> [] Int) (\a -> (undefined::(([] ([] Int)) -> [] ([] Int)) -> [] ([] Bool)) (case1 (\b -> \c -> c) (id (undefined::[] ([] Int)))))
\a -> seq a (map (seq a (\b -> \c -> (undefined::([] (Int -> Bool)) -> Int)) (seq a (head a)) (head (seq a ([]::[] (([] Int) -> Int))) (seq a (seq a a)))) ((undefined::([] ([] Bool)) -> Bool -> [] ([] (Int -> Bool))) (seq a (undefined::[] ([] Bool))) (seq a (seq a (\b -> True)) (seq a (head (undefined::[] ([] Bool)))))))
\a -> seq a ((\b -> (undefined::Int -> Bool -> [] Int) (seq b ((+1) (undefined::Int)))) ([]::[] ([] (Int -> Bool)))) ((\b -> head (undefined::[] (([] (([] Bool) -> [] Bool)) -> Bool)) (seq b (seq a (seq a (undefined::[] (([] Bool) -> [] Bool)))))) (seq a (undefined::[] (([] (([] Int) -> Bool -> Bool)) -> Int -> Bool))))
\a -> seq a (case1 (id (\b -> \c -> map (\d -> seq c (undefined::Int)) (undefined::[] ([] Int)))) (id ((!!) ([]::[] ([] Int)) (seq a (seq a (seq a 0))))) ([]::[] Bool))
(undefined::([] Int) -> [] Int)
\a -> a
(++) ((\a -> seq a (\b -> seq b (seq b (undefined::(Int -> [] ([] ([] Int))) -> [] Int) (\c -> seq c ([]::[] ([] ([] Int))))))) (undefined::([] (Int -> [] Bool)) -> [] (Bool -> Bool)) (undefined::Bool))
id
\a -> seq a a
id
filter (\a -> (\b -> b) (undefined::Bool))
\a -> (\b -> seq b (seq a (seq b (id (\c -> seq b (seq c a))) (\c -> seq c (\d -> seq a ([]::[] (([] Int) -> Bool))) (undefined::[] (Bool -> Bool)))))) ((undefined::Int -> [] (Int -> [] Int)) (case1 (seq a (undefined::([] Int) -> ([] ([] Int)) -> Int)) 0 ([]::[] ([] Int))))
(\a -> seq a (\b -> id (undefined::Bool -> ([] Int) -> [] Int)) (filter (undefined::Bool -> Bool) (undefined::[] Bool))) (id (\a -> False) True) ((!!) (map (\a -> False) (head (undefined::[] ([] ([] ([] ([] ([] Bool)))))))) ((!!) (head (undefined::[] ([] Int))) (id (undefined::Int))))
filter (case1 ((\a -> \b -> seq a (\c -> seq b (\d -> b))) ((!!) (undefined::[] Int) (undefined::Int))) even ([]::[] Bool))
(\a -> \b -> seq b (\c -> seq c (\d -> seq b ([]::[] Int)) (seq c (seq c (undefined::Bool)))) (seq b (seq a (seq b (undefined::([] (Bool -> Bool)) -> ([] Int) -> Bool) (seq a (seq b ([]::[] (Bool -> Bool)))))))) (undefined::([] (([] ([] Bool)) -> [] ([] Bool))) -> ([] Int) -> Int -> Int -> Int)
head ((\a -> map (undefined::Int -> Int -> ([] Int) -> [] Int) (seq a (seq a (seq a ([]::[] Int))))) (head ([]::[] (Bool -> Int -> ([] Int) -> Bool)) (not False))) ((+) 1 ((undefined::([] (Int -> [] Int)) -> Int) ([]::[] (Int -> [] Int))))
\a -> a
\a -> a
\a -> seq a (\b -> a) (\b -> case1 (\c -> \d -> seq d (seq d (seq d ([]::[] (Int -> Int))))) (undefined::[] (Int -> Int)) (seq b (seq a (undefined::[] Bool))))
(undefined::Bool -> (([] Int) -> ([] Int) -> [] Int) -> ([] Int) -> [] Int) ((\a -> seq a (undefined::Bool)) (+1)) ((\a -> (!!) (seq a (undefined::[] (([] Int) -> ([] Int) -> [] Int))) (seq a (seq a (undefined::Int)))) (undefined::([] Int) -> [] ([] Bool)))
(\a -> (:) ((\b -> seq b (head (seq b (seq a ([]::[] Int))))) a)) ((\a -> (\b -> seq a (seq b (seq a False))) (seq a (seq a (\b -> \c -> c)))) (head (tail ([]::[] (([] Int) -> Int -> ([] Int) -> Int -> Int)))))
\a -> a
id ((\a -> seq a (undefined::([] Int) -> [] Int)) (\a -> ([]::[] (Int -> Int))))
(\a -> (undefined::(([] Int) -> [] ([] Int)) -> ([] Int) -> [] Int) (\b -> (\c -> seq a (seq c ([]::[] ([] Int)))) (\c -> c))) ((!!) ((\a -> seq a ([]::[] (([] ([] ([] Int))) -> [] ([] Bool)))) ((+1) 2)) ((+) 2 (head (undefined::[] Int))))
(\a -> seq a (head ([]::[] ((([] Int) -> [] ([] Bool)) -> ([] Int) -> [] Int)) (seq a (\b -> seq b (seq b (undefined::([] Int) -> [] ([] Bool)))) a))) ((\a -> case1 (\b -> (undefined::([] Int) -> Bool)) (undefined::Bool) (seq a ([]::[] Int))) (undefined::([] ([] Bool)) -> [] ([] (Bool -> Bool))))
\a -> take (undefined::Int) ((\b -> case1 (seq b take) a (seq a a)) (seq a (seq a (\b -> b) (seq a (seq a (seq a 0))))))
\a -> seq a (head (tail (seq a ((\b -> seq a (seq a (undefined::Int -> [] (Bool -> [] Int))) (seq b (seq b 1))) (seq a (\b -> seq a (undefined::([] Bool) -> [] Bool)) (seq a (seq a (undefined::Int))))))) ((\b -> seq a (seq b (\c -> seq b (undefined::Bool))) (undefined::[] Bool)) (\b -> seq a (\c -> seq c (seq c (undefined::[] ([] (([] Int) -> Int))))) (seq b (undefined::Bool)))))
(\a -> seq a (seq a (head ([]::[] (([] ([] (Int -> Bool))) -> ([] Int) -> [] Int)))) ((!!) (undefined::[] (Int -> [] ([] (Int -> Bool)))) 2 (seq a (seq a (seq a (undefined::Int)))))) ((\a -> seq a (\b -> id (undefined::([] Int) -> [] (Int -> Bool))) (seq a (seq a (seq a False)))) ((!!) ((\a -> a) (undefined::[] ([] Bool)))))
(undefined::Int -> ([] Int) -> [] Int) (id ((undefined::([] Int) -> Int) (filter (undefined::Int -> Bool) (undefined::[] Int))))
\a -> id a
\a -> a
(!!) (undefined::[] (([] Int) -> [] Int)) ((\a -> (\b -> seq a (seq b 1)) (seq a (id ([]::[] (Int -> [] Int))))) (tail (undefined::[] (Int -> ([] Int) -> ([] Int) -> Bool))))
case1 (undefined::Bool -> ([] Bool) -> ([] Int) -> [] Int) ((undefined::Int -> Bool -> ([] Int) -> [] Int) ((+1) (undefined::Int)) ((\a -> a) (id False))) ((\a -> seq a (seq a (id (undefined::[] Bool)))) ((\a -> seq a (undefined::[] (Int -> Bool))) 0))
head ([]::[] (([] Int) -> [] Int))
\a -> (\b -> map (\c -> seq a (\d -> seq b 2) (seq a (seq b ([]::[] (Int -> Bool))))) (seq a (seq a ([]::[] (([] Int) -> Int -> Int -> [] Int))))) (seq a ((\b -> seq b (seq a ((undefined::([] ([] (Bool -> Bool))) -> [] ([] Bool)) (head (undefined::[] ([] ([] (Bool -> Bool)))))))) ([]::[] (Int -> [] Int))))
\a -> seq a (seq a (undefined::Int -> [] Int)) (seq a (seq a (id (\b -> (+) 0 2)) ((undefined::(Bool -> Bool) -> ([] Bool) -> [] (Bool -> Bool)) (seq a (\b -> b)))))
(\a -> seq a (\b -> seq a (seq b (\c -> map (undefined::([] (Int -> Bool)) -> Int) (head (undefined::[] ([] ([] (Int -> Bool))))))) False)) (\a -> ([]::[] Int))
(undefined::([] Int) -> [] Int)
\a -> id (\b -> (undefined::[] Int)) (\b -> (\c -> (!!) (seq a (seq c (undefined::[] ([] ([] (Int -> Bool)))))) ((+1) (undefined::Int))) (seq b (seq a (\c -> head (seq b ([]::[] ([] ([] (([] Int) -> Int)))))))))
\a -> head (seq a (\b -> seq a (undefined::[] ((([] (Int -> Int)) -> Int -> Int) -> [] Int))) (case1 (seq a (undefined::Int -> ([] Int) -> Int)) (seq a (undefined::Int)) a)) (\b -> \c -> seq b c)
\a -> (undefined::[] Int)
\a -> a
case1 (\a -> \b -> \c -> map (undefined::([] (([] Bool) -> [] Bool)) -> Int) (seq a (seq b (seq c (undefined::[] ([] (([] Bool) -> [] Bool))))))) (\a -> map (\b -> 2) ((\b -> seq b ([]::[] (([] ([] (Int -> Int))) -> Int))) (seq a (seq a (undefined::Int))))) (take ((\a -> a) 2) ((\a -> seq a ([]::[] Int)) 2))
(!!) (id ((!!) ((undefined::Int -> [] ([] (([] Int) -> [] Int))) (undefined::Int)) ((!!) ([]::[] Int) (id 2)))) (id 0)
tail
(\a -> seq a (seq a ((\b -> \c -> seq b (\d -> d)) (undefined::Int) ((\b -> \c -> seq b (undefined::Bool)) (undefined::Bool))))) (undefined::Bool -> [] (([] (([] ([] Int)) -> [] Int)) -> Bool))
\a -> ([]::[] Int)
(\a -> (undefined::Bool -> Bool -> ([] Int) -> [] Int) (seq a (seq a a))) ((!!) ([]::[] Bool) 2) ((\a -> seq a (seq a (seq a (undefined::([] (([] Bool) -> [] Bool)) -> Bool)))) (odd (undefined::Int)) ((\a -> seq a (seq a (seq a (undefined::[] (([] Bool) -> [] Bool))))) (id 0)))
\a -> a
(\a -> (\b -> seq b (seq a (seq a (seq a (undefined::Int -> ([] Int) -> [] Int))) 0)) ((\b -> seq b (\c -> seq c id)) (a (seq a 1) (seq a (undefined::[] Int))))) ((\a -> seq a (seq a (seq a (undefined::Int -> Int -> ([] Int) -> Bool)))) (head (undefined::[] Int)) 1)
\a -> ([]::[] Int)
\a -> (\b -> \c -> seq b a) (\b -> \c -> head (seq a (seq b (seq a c)))) ((\b -> b) 2)
\a -> a
\a -> a
(\a -> (\b -> seq b (id (++)) (seq b (seq a (seq b ([]::[] Int))))) (seq a (head (undefined::[] (([] Int) -> Int -> Int -> Bool))))) (undefined::[] (([] (([] ([] Int)) -> [] ([] (Int -> Bool)))) -> Int -> Bool))
\a -> (\b -> (!!) (undefined::[] (Int -> Int -> [] Int)) b b (seq a (seq a (seq a (seq b (undefined::(([] Bool) -> [] Bool) -> Int))) (\c -> seq a (undefined::[] Bool))))) (seq a (id ((\b -> (+1) (seq b (seq b (id 1)))) (\b -> \c -> seq c ((\d -> seq d (undefined::[] Bool)) (seq b (seq c ([]::[] (Int -> [] Int)))))))))
tail
\a -> (undefined::(([] Int) -> ([] (Bool -> Bool)) -> ([] ([] (Bool -> Bool))) -> [] (Bool -> Bool)) -> [] Int) (\b -> seq b (\c -> \d -> seq d c))
\a -> seq a ((undefined::(([] ([] Int)) -> [] ([] (Int -> Int))) -> [] Int) (\b -> map (id (\c -> (undefined::([] Int) -> [] (Int -> Int)) a)) ((undefined::Bool -> [] ([] ([] (Bool -> Bool)))) True)))
\a -> a
\a -> a
\a -> seq a (map ((\b -> seq a (\c -> seq b (undefined::(Int -> Int -> Int) -> Int))) (seq a (seq a (seq a 1))) (head ([]::[] (([] ([] ([] (Int -> Bool)))) -> Bool)) (undefined::[] ([] ([] (Int -> Bool)))))) (seq a (seq a ((\b -> seq b (undefined::Int -> [] (Int -> Int -> Int)) (seq b (seq b 0))) (seq a ((\b -> seq b False) (seq a (seq a ([]::[] ([] Int))))))))))
\a -> (undefined::[] Int)
\a -> seq a (seq a (id ((undefined::Bool -> Int -> Bool -> [] Int) False) (case1 (\b -> head) (undefined::Int) (seq a a)))) (seq a (\b -> (undefined::Bool -> Bool) (undefined::Bool)) (seq a (seq a (head ([]::[] (Bool -> Int)) (head ([]::[] Bool))))))
\a -> seq a a
\a -> a
\a -> a
id (\a -> \b -> seq a (\c -> seq a (\d -> b) id) (seq b (id (undefined::[] ([] Bool))))) (undefined::[] (([] (([] ([] ([] Int))) -> [] ([] ([] Int)))) -> ([] Int) -> Bool))
id
case1 (\a -> \b -> seq b (\c -> seq b (undefined::Bool -> [] Int)) (id (seq a (undefined::[] (Int -> [] Int)))) ((\c -> seq c False) (head (undefined::[] Int)))) ((\a -> \b -> seq b (seq a ([]::[] Int))) (odd 0) (\a -> seq a (seq a (undefined::Int -> [] Bool)) (undefined::Int)))
(\a -> \b -> map (seq a (seq b (\c -> id)) (id (seq a 2))) ((undefined::(Int -> Int -> Int) -> [] Int) (\c -> seq a (\d -> seq c c)))) (undefined::[] (([] (([] ([] Int)) -> [] ([] (Int -> Int)))) -> ([] Int) -> Int -> [] Int))
\a -> ([]::[] Int)
\a -> a
(undefined::(([] (Int -> Bool)) -> Int -> Bool) -> ([] Int) -> [] Int) (\a -> \b -> head ([]::[] (((Int -> Int -> Int) -> [] ([] Int)) -> Bool)) (\c -> ([]::[] ([] Int))))

